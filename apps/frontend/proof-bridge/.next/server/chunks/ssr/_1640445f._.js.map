{"version":3,"sources":["turbopack:///[project]/node_modules/.pnpm/@ant-design+nextjs-registry_5c3ba930daaab6c3e1bebae440c99684/node_modules/@ant-design/nextjs-registry/es/AntdRegistry.js","turbopack:///[project]/apps/frontend/proof-bridge/components/shared/AntConfigProvider.tsx","turbopack:///[project]/node_modules/.pnpm/lenis@1.3.11_react@19.1.0/node_modules/lenis/dist/lenis-react.mjs","turbopack:///[project]/node_modules/.pnpm/lenis@1.3.11_react@19.1.0/node_modules/lenis/dist/lenis.mjs","turbopack:///[project]/node_modules/.pnpm/@tanstack+query-core@5.89.0/node_modules/@tanstack/query-core/build/modern/queryClient.js","turbopack:///[project]/apps/frontend/proof-bridge/components/providers/TanstackProvider.tsx","turbopack:///[project]/node_modules/.pnpm/@tanstack+query-core@5.89.0/node_modules/@tanstack/query-core/build/modern/mutationCache.js","turbopack:///[project]/node_modules/.pnpm/@tanstack+query-core@5.89.0/node_modules/@tanstack/query-core/build/modern/queryCache.js","turbopack:///[project]/apps/frontend/proof-bridge/components/providers/Wagmi.tsx","turbopack:///[project]/node_modules/.pnpm/@spruceid+siwe-parser@3.0.0/node_modules/@spruceid/siwe-parser/dist/siwe-grammar.js","turbopack:///[project]/node_modules/.pnpm/apg-js@4.4.0/node_modules/apg-js/src/apg-lib/identifiers.js","turbopack:///[project]/node_modules/.pnpm/apg-js@4.4.0/node_modules/apg-js/src/apg-lib/style.js","turbopack:///[project]/node_modules/.pnpm/apg-js@4.4.0/node_modules/apg-js/src/apg-conv-api/transformers.js","turbopack:///[project]/node_modules/.pnpm/apg-js@4.4.0/node_modules/apg-js/src/apg-conv-api/converter.js","turbopack:///[project]/node_modules/.pnpm/apg-js@4.4.0/node_modules/apg-js/src/apg-lib/emitcss.js","turbopack:///[project]/node_modules/.pnpm/apg-js@4.4.0/node_modules/apg-js/src/apg-lib/utilities.js","turbopack:///[project]/node_modules/.pnpm/apg-js@4.4.0/node_modules/apg-js/src/apg-lib/ast.js","turbopack:///[project]/node_modules/.pnpm/apg-js@4.4.0/node_modules/apg-js/src/apg-lib/circular-buffer.js","turbopack:///[project]/node_modules/.pnpm/apg-js@4.4.0/node_modules/apg-js/src/apg-lib/parser.js","turbopack:///[project]/node_modules/.pnpm/apg-js@4.4.0/node_modules/apg-js/src/apg-lib/stats.js","turbopack:///[project]/node_modules/.pnpm/apg-js@4.4.0/node_modules/apg-js/src/apg-lib/trace.js","turbopack:///[project]/node_modules/.pnpm/apg-js@4.4.0/node_modules/apg-js/src/apg-lib/node-exports.js","turbopack:///[project]/node_modules/.pnpm/@spruceid+siwe-parser@3.0.0/node_modules/@spruceid/siwe-parser/dist/utils.js","turbopack:///[project]/node_modules/.pnpm/@spruceid+siwe-parser@3.0.0/node_modules/@spruceid/siwe-parser/dist/callbacks.js","turbopack:///[project]/node_modules/.pnpm/@spruceid+siwe-parser@3.0.0/node_modules/@spruceid/siwe-parser/dist/abnf.js","turbopack:///[project]/node_modules/.pnpm/@spruceid+siwe-parser@3.0.0/node_modules/@spruceid/siwe-parser/dist/parsers.js","turbopack:///[project]/node_modules/.pnpm/tslib@2.7.0/node_modules/tslib/tslib.es6.mjs","turbopack:///[project]/node_modules/.pnpm/@adraffy+ens-normalize@1.10.1/node_modules/@adraffy/ens-normalize/dist/index.cjs","turbopack:///[project]/node_modules/.pnpm/ws@8.17.1_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ws/index.js","turbopack:///[project]/node_modules/.pnpm/siwe@3.0.0_ethers@6.15.0_bu_653c54d3e4b879018ba5e00419f5f2da/node_modules/siwe/dist/ethersCompat.js","turbopack:///[project]/node_modules/.pnpm/siwe@3.0.0_ethers@6.15.0_bu_653c54d3e4b879018ba5e00419f5f2da/node_modules/siwe/dist/types.js","turbopack:///[project]/node_modules/.pnpm/siwe@3.0.0_ethers@6.15.0_bu_653c54d3e4b879018ba5e00419f5f2da/node_modules/siwe/dist/utils.js","turbopack:///[project]/node_modules/.pnpm/siwe@3.0.0_ethers@6.15.0_bu_653c54d3e4b879018ba5e00419f5f2da/node_modules/siwe/dist/client.js","turbopack:///[project]/node_modules/.pnpm/siwe@3.0.0_ethers@6.15.0_bu_653c54d3e4b879018ba5e00419f5f2da/node_modules/siwe/dist/siwe.js","turbopack:///[project]/apps/frontend/proof-bridge/components/providers/RainbowKit.tsx","turbopack:///[project]/node_modules/.pnpm/next-themes@0.4.6_react-dom_e207e685aa9cc81adf4eaedb8666d505/node_modules/next-themes/dist/index.mjs","turbopack:///[project]/apps/frontend/proof-bridge/components/ui/sonner.tsx"],"sourcesContent":["'use client';\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nimport React, { useState } from 'react';\nimport { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';\nimport { useServerInsertedHTML } from 'next/navigation';\nvar AntdRegistry = function AntdRegistry(props) {\n  var _useState = useState(function () {\n      return createCache();\n    }),\n    _useState2 = _slicedToArray(_useState, 1),\n    cache = _useState2[0];\n  useServerInsertedHTML(function () {\n    var styleText = extractStyle(cache, {\n      plain: true,\n      once: true\n    });\n    if (styleText.includes('.data-ant-cssinjs-cache-path{content:\"\";}')) {\n      return null;\n    }\n    return /*#__PURE__*/React.createElement(\"style\", {\n      id: \"antd-cssinjs\"\n      // to make sure this style is inserted before Ant Design's style generated by client\n      ,\n      \"data-rc-order\": \"prepend\",\n      \"data-rc-priority\": \"-1000\",\n      dangerouslySetInnerHTML: {\n        __html: styleText\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(StyleProvider, _extends({}, props, {\n    cache: cache\n  }));\n};\nexport default AntdRegistry;","\"use client\"\r\nimport React from \"react\"\r\nimport { ConfigProvider, theme } from \"antd\"\r\nimport { AntdRegistry } from \"@ant-design/nextjs-registry\"\r\n\r\nexport const AntConfigProvider = ({\r\n  children,\r\n}: {\r\n  children: React.ReactNode\r\n}) => {\r\n  return (\r\n    <AntdRegistry>\r\n      <ConfigProvider\r\n        theme={{\r\n          token: {\r\n            colorPrimary: \"#c3ff49\",\r\n            fontFamily: \"var(--font-sequel-sans)\",\r\n            colorText: \"#fdfdff\",\r\n          },\r\n          algorithm: theme.darkAlgorithm,\r\n          components: {\r\n            Button: { primaryColor: \"#0b090a\" },\r\n            Input: { colorBgContainer: \"transparent\" },\r\n            DatePicker: { colorBgContainer: \"transparent\" },\r\n          },\r\n        }}\r\n      >\r\n        {children}\r\n      </ConfigProvider>\r\n    </AntdRegistry>\r\n  )\r\n}\r\n","\"use client\";\n\n// packages/react/src/provider.tsx\nimport Lenis from \"lenis\";\nimport {\n  createContext,\n  forwardRef,\n  useCallback,\n  useEffect as useEffect2,\n  useImperativeHandle,\n  useRef,\n  useState as useState2\n} from \"react\";\n\n// packages/react/src/store.ts\nimport { useEffect, useState } from \"react\";\nvar Store = class {\n  constructor(state) {\n    this.state = state;\n  }\n  listeners = [];\n  set(state) {\n    this.state = state;\n    for (let listener of this.listeners) {\n      listener(this.state);\n    }\n  }\n  subscribe(listener) {\n    this.listeners = [...this.listeners, listener];\n    return () => {\n      this.listeners = this.listeners.filter((l) => l !== listener);\n    };\n  }\n  get() {\n    return this.state;\n  }\n};\nfunction useStore(store) {\n  const [state, setState] = useState(store.get());\n  useEffect(() => {\n    return store.subscribe((state2) => setState(state2));\n  }, [store]);\n  return state;\n}\n\n// packages/react/src/provider.tsx\nimport { jsx } from \"react/jsx-runtime\";\nvar LenisContext = createContext(null);\nvar rootLenisContextStore = new Store(null);\nvar ReactLenis = forwardRef(\n  ({\n    children,\n    root = false,\n    options = {},\n    autoRaf = true,\n    ...props\n  }, ref) => {\n    const wrapperRef = useRef(null);\n    const contentRef = useRef(null);\n    const [lenis, setLenis] = useState2(void 0);\n    useImperativeHandle(\n      ref,\n      () => ({\n        wrapper: wrapperRef.current,\n        content: contentRef.current,\n        lenis\n      }),\n      [lenis]\n    );\n    useEffect2(() => {\n      const lenis2 = new Lenis({\n        ...options,\n        ...wrapperRef.current && contentRef.current && {\n          wrapper: wrapperRef.current,\n          content: contentRef.current\n        },\n        autoRaf: options?.autoRaf ?? autoRaf\n        // this is to avoid breaking the autoRaf prop if it's still used (require breaking change)\n      });\n      setLenis(lenis2);\n      return () => {\n        lenis2.destroy();\n        setLenis(void 0);\n      };\n    }, [root, JSON.stringify({ ...options, wrapper: null, content: null })]);\n    const callbacksRefs = useRef([]);\n    const addCallback = useCallback(\n      (callback, priority) => {\n        callbacksRefs.current.push({ callback, priority });\n        callbacksRefs.current.sort((a, b) => a.priority - b.priority);\n      },\n      []\n    );\n    const removeCallback = useCallback(\n      (callback) => {\n        callbacksRefs.current = callbacksRefs.current.filter(\n          (cb) => cb.callback !== callback\n        );\n      },\n      []\n    );\n    useEffect2(() => {\n      if (root && lenis) {\n        rootLenisContextStore.set({ lenis, addCallback, removeCallback });\n        return () => rootLenisContextStore.set(null);\n      }\n    }, [root, lenis, addCallback, removeCallback]);\n    useEffect2(() => {\n      if (!lenis) return;\n      const onScroll = (data) => {\n        for (let i = 0; i < callbacksRefs.current.length; i++) {\n          callbacksRefs.current[i]?.callback(data);\n        }\n      };\n      lenis.on(\"scroll\", onScroll);\n      return () => {\n        lenis.off(\"scroll\", onScroll);\n      };\n    }, [lenis]);\n    if (!children) return null;\n    return /* @__PURE__ */ jsx(\n      LenisContext.Provider,\n      {\n        value: { lenis, addCallback, removeCallback },\n        children: root && root !== \"asChild\" ? children : /* @__PURE__ */ jsx(\"div\", { ref: wrapperRef, ...props, children: /* @__PURE__ */ jsx(\"div\", { ref: contentRef, children }) })\n      }\n    );\n  }\n);\n\n// packages/react/src/use-lenis.ts\nimport { useContext, useEffect as useEffect3 } from \"react\";\nvar fallbackContext = {};\nfunction useLenis(callback, deps = [], priority = 0) {\n  const localContext = useContext(LenisContext);\n  const rootContext = useStore(rootLenisContextStore);\n  const currentContext = localContext ?? rootContext ?? fallbackContext;\n  const { lenis, addCallback, removeCallback } = currentContext;\n  useEffect3(() => {\n    if (!callback || !addCallback || !removeCallback || !lenis) return;\n    addCallback(callback, priority);\n    callback(lenis);\n    return () => {\n      removeCallback(callback);\n    };\n  }, [lenis, addCallback, removeCallback, priority, ...deps]);\n  return lenis;\n}\nexport {\n  ReactLenis as Lenis,\n  LenisContext,\n  ReactLenis,\n  ReactLenis as default,\n  useLenis\n};\n//# sourceMappingURL=lenis-react.mjs.map","// package.json\nvar version = \"1.3.11\";\n\n// packages/core/src/maths.ts\nfunction clamp(min, input, max) {\n  return Math.max(min, Math.min(input, max));\n}\nfunction lerp(x, y, t) {\n  return (1 - t) * x + t * y;\n}\nfunction damp(x, y, lambda, deltaTime) {\n  return lerp(x, y, 1 - Math.exp(-lambda * deltaTime));\n}\nfunction modulo(n, d) {\n  return (n % d + d) % d;\n}\n\n// packages/core/src/animate.ts\nvar Animate = class {\n  isRunning = false;\n  value = 0;\n  from = 0;\n  to = 0;\n  currentTime = 0;\n  // These are instanciated in the fromTo method\n  lerp;\n  duration;\n  easing;\n  onUpdate;\n  /**\n   * Advance the animation by the given delta time\n   *\n   * @param deltaTime - The time in seconds to advance the animation\n   */\n  advance(deltaTime) {\n    if (!this.isRunning) return;\n    let completed = false;\n    if (this.duration && this.easing) {\n      this.currentTime += deltaTime;\n      const linearProgress = clamp(0, this.currentTime / this.duration, 1);\n      completed = linearProgress >= 1;\n      const easedProgress = completed ? 1 : this.easing(linearProgress);\n      this.value = this.from + (this.to - this.from) * easedProgress;\n    } else if (this.lerp) {\n      this.value = damp(this.value, this.to, this.lerp * 60, deltaTime);\n      if (Math.round(this.value) === this.to) {\n        this.value = this.to;\n        completed = true;\n      }\n    } else {\n      this.value = this.to;\n      completed = true;\n    }\n    if (completed) {\n      this.stop();\n    }\n    this.onUpdate?.(this.value, completed);\n  }\n  /** Stop the animation */\n  stop() {\n    this.isRunning = false;\n  }\n  /**\n   * Set up the animation from a starting value to an ending value\n   * with optional parameters for lerping, duration, easing, and onUpdate callback\n   *\n   * @param from - The starting value\n   * @param to - The ending value\n   * @param options - Options for the animation\n   */\n  fromTo(from, to, { lerp: lerp2, duration, easing, onStart, onUpdate }) {\n    this.from = this.value = from;\n    this.to = to;\n    this.lerp = lerp2;\n    this.duration = duration;\n    this.easing = easing;\n    this.currentTime = 0;\n    this.isRunning = true;\n    onStart?.();\n    this.onUpdate = onUpdate;\n  }\n};\n\n// packages/core/src/debounce.ts\nfunction debounce(callback, delay) {\n  let timer;\n  return function(...args) {\n    let context = this;\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      timer = void 0;\n      callback.apply(context, args);\n    }, delay);\n  };\n}\n\n// packages/core/src/dimensions.ts\nvar Dimensions = class {\n  constructor(wrapper, content, { autoResize = true, debounce: debounceValue = 250 } = {}) {\n    this.wrapper = wrapper;\n    this.content = content;\n    if (autoResize) {\n      this.debouncedResize = debounce(this.resize, debounceValue);\n      if (this.wrapper instanceof Window) {\n        window.addEventListener(\"resize\", this.debouncedResize, false);\n      } else {\n        this.wrapperResizeObserver = new ResizeObserver(this.debouncedResize);\n        this.wrapperResizeObserver.observe(this.wrapper);\n      }\n      this.contentResizeObserver = new ResizeObserver(this.debouncedResize);\n      this.contentResizeObserver.observe(this.content);\n    }\n    this.resize();\n  }\n  width = 0;\n  height = 0;\n  scrollHeight = 0;\n  scrollWidth = 0;\n  // These are instanciated in the constructor as they need information from the options\n  debouncedResize;\n  wrapperResizeObserver;\n  contentResizeObserver;\n  destroy() {\n    this.wrapperResizeObserver?.disconnect();\n    this.contentResizeObserver?.disconnect();\n    if (this.wrapper === window && this.debouncedResize) {\n      window.removeEventListener(\"resize\", this.debouncedResize, false);\n    }\n  }\n  resize = () => {\n    this.onWrapperResize();\n    this.onContentResize();\n  };\n  onWrapperResize = () => {\n    if (this.wrapper instanceof Window) {\n      this.width = window.innerWidth;\n      this.height = window.innerHeight;\n    } else {\n      this.width = this.wrapper.clientWidth;\n      this.height = this.wrapper.clientHeight;\n    }\n  };\n  onContentResize = () => {\n    if (this.wrapper instanceof Window) {\n      this.scrollHeight = this.content.scrollHeight;\n      this.scrollWidth = this.content.scrollWidth;\n    } else {\n      this.scrollHeight = this.wrapper.scrollHeight;\n      this.scrollWidth = this.wrapper.scrollWidth;\n    }\n  };\n  get limit() {\n    return {\n      x: this.scrollWidth - this.width,\n      y: this.scrollHeight - this.height\n    };\n  }\n};\n\n// packages/core/src/emitter.ts\nvar Emitter = class {\n  events = {};\n  /**\n   * Emit an event with the given data\n   * @param event Event name\n   * @param args Data to pass to the event handlers\n   */\n  emit(event, ...args) {\n    let callbacks = this.events[event] || [];\n    for (let i = 0, length = callbacks.length; i < length; i++) {\n      callbacks[i]?.(...args);\n    }\n  }\n  /**\n   * Add a callback to the event\n   * @param event Event name\n   * @param cb Callback function\n   * @returns Unsubscribe function\n   */\n  on(event, cb) {\n    this.events[event]?.push(cb) || (this.events[event] = [cb]);\n    return () => {\n      this.events[event] = this.events[event]?.filter((i) => cb !== i);\n    };\n  }\n  /**\n   * Remove a callback from the event\n   * @param event Event name\n   * @param callback Callback function\n   */\n  off(event, callback) {\n    this.events[event] = this.events[event]?.filter((i) => callback !== i);\n  }\n  /**\n   * Remove all event listeners and clean up\n   */\n  destroy() {\n    this.events = {};\n  }\n};\n\n// packages/core/src/virtual-scroll.ts\nvar LINE_HEIGHT = 100 / 6;\nvar listenerOptions = { passive: false };\nvar VirtualScroll = class {\n  constructor(element, options = { wheelMultiplier: 1, touchMultiplier: 1 }) {\n    this.element = element;\n    this.options = options;\n    window.addEventListener(\"resize\", this.onWindowResize, false);\n    this.onWindowResize();\n    this.element.addEventListener(\"wheel\", this.onWheel, listenerOptions);\n    this.element.addEventListener(\n      \"touchstart\",\n      this.onTouchStart,\n      listenerOptions\n    );\n    this.element.addEventListener(\n      \"touchmove\",\n      this.onTouchMove,\n      listenerOptions\n    );\n    this.element.addEventListener(\"touchend\", this.onTouchEnd, listenerOptions);\n  }\n  touchStart = {\n    x: 0,\n    y: 0\n  };\n  lastDelta = {\n    x: 0,\n    y: 0\n  };\n  window = {\n    width: 0,\n    height: 0\n  };\n  emitter = new Emitter();\n  /**\n   * Add an event listener for the given event and callback\n   *\n   * @param event Event name\n   * @param callback Callback function\n   */\n  on(event, callback) {\n    return this.emitter.on(event, callback);\n  }\n  /** Remove all event listeners and clean up */\n  destroy() {\n    this.emitter.destroy();\n    window.removeEventListener(\"resize\", this.onWindowResize, false);\n    this.element.removeEventListener(\"wheel\", this.onWheel, listenerOptions);\n    this.element.removeEventListener(\n      \"touchstart\",\n      this.onTouchStart,\n      listenerOptions\n    );\n    this.element.removeEventListener(\n      \"touchmove\",\n      this.onTouchMove,\n      listenerOptions\n    );\n    this.element.removeEventListener(\n      \"touchend\",\n      this.onTouchEnd,\n      listenerOptions\n    );\n  }\n  /**\n   * Event handler for 'touchstart' event\n   *\n   * @param event Touch event\n   */\n  onTouchStart = (event) => {\n    const { clientX, clientY } = event.targetTouches ? event.targetTouches[0] : event;\n    this.touchStart.x = clientX;\n    this.touchStart.y = clientY;\n    this.lastDelta = {\n      x: 0,\n      y: 0\n    };\n    this.emitter.emit(\"scroll\", {\n      deltaX: 0,\n      deltaY: 0,\n      event\n    });\n  };\n  /** Event handler for 'touchmove' event */\n  onTouchMove = (event) => {\n    const { clientX, clientY } = event.targetTouches ? event.targetTouches[0] : event;\n    const deltaX = -(clientX - this.touchStart.x) * this.options.touchMultiplier;\n    const deltaY = -(clientY - this.touchStart.y) * this.options.touchMultiplier;\n    this.touchStart.x = clientX;\n    this.touchStart.y = clientY;\n    this.lastDelta = {\n      x: deltaX,\n      y: deltaY\n    };\n    this.emitter.emit(\"scroll\", {\n      deltaX,\n      deltaY,\n      event\n    });\n  };\n  onTouchEnd = (event) => {\n    this.emitter.emit(\"scroll\", {\n      deltaX: this.lastDelta.x,\n      deltaY: this.lastDelta.y,\n      event\n    });\n  };\n  /** Event handler for 'wheel' event */\n  onWheel = (event) => {\n    let { deltaX, deltaY, deltaMode } = event;\n    const multiplierX = deltaMode === 1 ? LINE_HEIGHT : deltaMode === 2 ? this.window.width : 1;\n    const multiplierY = deltaMode === 1 ? LINE_HEIGHT : deltaMode === 2 ? this.window.height : 1;\n    deltaX *= multiplierX;\n    deltaY *= multiplierY;\n    deltaX *= this.options.wheelMultiplier;\n    deltaY *= this.options.wheelMultiplier;\n    this.emitter.emit(\"scroll\", { deltaX, deltaY, event });\n  };\n  onWindowResize = () => {\n    this.window = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n  };\n};\n\n// packages/core/src/lenis.ts\nvar defaultEasing = (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t));\nvar Lenis = class {\n  _isScrolling = false;\n  // true when scroll is animating\n  _isStopped = false;\n  // true if user should not be able to scroll - enable/disable programmatically\n  _isLocked = false;\n  // same as isStopped but enabled/disabled when scroll reaches target\n  _preventNextNativeScrollEvent = false;\n  _resetVelocityTimeout = null;\n  __rafID = null;\n  /**\n   * Whether or not the user is touching the screen\n   */\n  isTouching;\n  /**\n   * The time in ms since the lenis instance was created\n   */\n  time = 0;\n  /**\n   * User data that will be forwarded through the scroll event\n   *\n   * @example\n   * lenis.scrollTo(100, {\n   *   userData: {\n   *     foo: 'bar'\n   *   }\n   * })\n   */\n  userData = {};\n  /**\n   * The last velocity of the scroll\n   */\n  lastVelocity = 0;\n  /**\n   * The current velocity of the scroll\n   */\n  velocity = 0;\n  /**\n   * The direction of the scroll\n   */\n  direction = 0;\n  /**\n   * The options passed to the lenis instance\n   */\n  options;\n  /**\n   * The target scroll value\n   */\n  targetScroll;\n  /**\n   * The animated scroll value\n   */\n  animatedScroll;\n  // These are instanciated here as they don't need information from the options\n  animate = new Animate();\n  emitter = new Emitter();\n  // These are instanciated in the constructor as they need information from the options\n  dimensions;\n  // This is not private because it's used in the Snap class\n  virtualScroll;\n  constructor({\n    wrapper = window,\n    content = document.documentElement,\n    eventsTarget = wrapper,\n    smoothWheel = true,\n    syncTouch = false,\n    syncTouchLerp = 0.075,\n    touchInertiaExponent = 1.7,\n    duration,\n    // in seconds\n    easing,\n    lerp: lerp2 = 0.1,\n    infinite = false,\n    orientation = \"vertical\",\n    // vertical, horizontal\n    gestureOrientation = orientation === \"horizontal\" ? \"both\" : \"vertical\",\n    // vertical, horizontal, both\n    touchMultiplier = 1,\n    wheelMultiplier = 1,\n    autoResize = true,\n    prevent,\n    virtualScroll,\n    overscroll = true,\n    autoRaf = false,\n    anchors = false,\n    autoToggle = false,\n    // https://caniuse.com/?search=transition-behavior\n    allowNestedScroll = false,\n    __experimental__naiveDimensions = false\n  } = {}) {\n    window.lenisVersion = version;\n    if (!wrapper || wrapper === document.documentElement) {\n      wrapper = window;\n    }\n    if (typeof duration === \"number\" && typeof easing !== \"function\") {\n      easing = defaultEasing;\n    } else if (typeof easing === \"function\" && typeof duration !== \"number\") {\n      duration = 1;\n    }\n    this.options = {\n      wrapper,\n      content,\n      eventsTarget,\n      smoothWheel,\n      syncTouch,\n      syncTouchLerp,\n      touchInertiaExponent,\n      duration,\n      easing,\n      lerp: lerp2,\n      infinite,\n      gestureOrientation,\n      orientation,\n      touchMultiplier,\n      wheelMultiplier,\n      autoResize,\n      prevent,\n      virtualScroll,\n      overscroll,\n      autoRaf,\n      anchors,\n      autoToggle,\n      allowNestedScroll,\n      __experimental__naiveDimensions\n    };\n    this.dimensions = new Dimensions(wrapper, content, { autoResize });\n    this.updateClassName();\n    this.targetScroll = this.animatedScroll = this.actualScroll;\n    this.options.wrapper.addEventListener(\"scroll\", this.onNativeScroll, false);\n    this.options.wrapper.addEventListener(\"scrollend\", this.onScrollEnd, {\n      capture: true\n    });\n    if (this.options.anchors && this.options.wrapper === window) {\n      this.options.wrapper.addEventListener(\n        \"click\",\n        this.onClick,\n        false\n      );\n    }\n    this.options.wrapper.addEventListener(\n      \"pointerdown\",\n      this.onPointerDown,\n      false\n    );\n    this.virtualScroll = new VirtualScroll(eventsTarget, {\n      touchMultiplier,\n      wheelMultiplier\n    });\n    this.virtualScroll.on(\"scroll\", this.onVirtualScroll);\n    if (this.options.autoToggle) {\n      this.rootElement.addEventListener(\"transitionend\", this.onTransitionEnd, {\n        passive: true\n      });\n    }\n    if (this.options.autoRaf) {\n      this.__rafID = requestAnimationFrame(this.raf);\n    }\n  }\n  /**\n   * Destroy the lenis instance, remove all event listeners and clean up the class name\n   */\n  destroy() {\n    this.emitter.destroy();\n    this.options.wrapper.removeEventListener(\n      \"scroll\",\n      this.onNativeScroll,\n      false\n    );\n    this.options.wrapper.removeEventListener(\"scrollend\", this.onScrollEnd, {\n      capture: true\n    });\n    this.options.wrapper.removeEventListener(\n      \"pointerdown\",\n      this.onPointerDown,\n      false\n    );\n    if (this.options.anchors && this.options.wrapper === window) {\n      this.options.wrapper.removeEventListener(\n        \"click\",\n        this.onClick,\n        false\n      );\n    }\n    this.virtualScroll.destroy();\n    this.dimensions.destroy();\n    this.cleanUpClassName();\n    if (this.__rafID) {\n      cancelAnimationFrame(this.__rafID);\n    }\n  }\n  on(event, callback) {\n    return this.emitter.on(event, callback);\n  }\n  off(event, callback) {\n    return this.emitter.off(event, callback);\n  }\n  onScrollEnd = (e) => {\n    if (!(e instanceof CustomEvent)) {\n      if (this.isScrolling === \"smooth\" || this.isScrolling === false) {\n        e.stopPropagation();\n      }\n    }\n  };\n  dispatchScrollendEvent = () => {\n    this.options.wrapper.dispatchEvent(\n      new CustomEvent(\"scrollend\", {\n        bubbles: this.options.wrapper === window,\n        // cancelable: false,\n        detail: {\n          lenisScrollEnd: true\n        }\n      })\n    );\n  };\n  onTransitionEnd = (event) => {\n    if (event.propertyName.includes(\"overflow\")) {\n      const property = this.isHorizontal ? \"overflow-x\" : \"overflow-y\";\n      const overflow = getComputedStyle(this.rootElement)[property];\n      if ([\"hidden\", \"clip\"].includes(overflow)) {\n        this.internalStop();\n      } else {\n        this.internalStart();\n      }\n    }\n  };\n  setScroll(scroll) {\n    if (this.isHorizontal) {\n      this.options.wrapper.scrollTo({ left: scroll, behavior: \"instant\" });\n    } else {\n      this.options.wrapper.scrollTo({ top: scroll, behavior: \"instant\" });\n    }\n  }\n  onClick = (event) => {\n    const path = event.composedPath();\n    const anchor = path.find(\n      (node) => node instanceof HTMLAnchorElement && (node.getAttribute(\"href\")?.startsWith(\"#\") || node.getAttribute(\"href\")?.startsWith(\"/#\") || node.getAttribute(\"href\")?.startsWith(\"./#\"))\n    );\n    if (anchor) {\n      const id = anchor.getAttribute(\"href\");\n      if (id) {\n        const options = typeof this.options.anchors === \"object\" && this.options.anchors ? this.options.anchors : void 0;\n        let target = `#${id.split(\"#\")[1]}`;\n        if ([\"#\", \"/#\", \"./#\", \"#top\", \"/#top\", \"./#top\"].includes(id)) {\n          target = 0;\n        }\n        this.scrollTo(target, options);\n      }\n    }\n  };\n  onPointerDown = (event) => {\n    if (event.button === 1) {\n      this.reset();\n    }\n  };\n  onVirtualScroll = (data) => {\n    if (typeof this.options.virtualScroll === \"function\" && this.options.virtualScroll(data) === false)\n      return;\n    const { deltaX, deltaY, event } = data;\n    this.emitter.emit(\"virtual-scroll\", { deltaX, deltaY, event });\n    if (event.ctrlKey) return;\n    if (event.lenisStopPropagation) return;\n    const isTouch = event.type.includes(\"touch\");\n    const isWheel = event.type.includes(\"wheel\");\n    this.isTouching = event.type === \"touchstart\" || event.type === \"touchmove\";\n    const isClickOrTap = deltaX === 0 && deltaY === 0;\n    const isTapToStop = this.options.syncTouch && isTouch && event.type === \"touchstart\" && isClickOrTap && !this.isStopped && !this.isLocked;\n    if (isTapToStop) {\n      this.reset();\n      return;\n    }\n    const isUnknownGesture = this.options.gestureOrientation === \"vertical\" && deltaY === 0 || this.options.gestureOrientation === \"horizontal\" && deltaX === 0;\n    if (isClickOrTap || isUnknownGesture) {\n      return;\n    }\n    let composedPath = event.composedPath();\n    composedPath = composedPath.slice(0, composedPath.indexOf(this.rootElement));\n    const prevent = this.options.prevent;\n    if (!!composedPath.find(\n      (node) => node instanceof HTMLElement && (typeof prevent === \"function\" && prevent?.(node) || node.hasAttribute?.(\"data-lenis-prevent\") || isTouch && node.hasAttribute?.(\"data-lenis-prevent-touch\") || isWheel && node.hasAttribute?.(\"data-lenis-prevent-wheel\") || this.options.allowNestedScroll && this.checkNestedScroll(node, { deltaX, deltaY }))\n    ))\n      return;\n    if (this.isStopped || this.isLocked) {\n      if (event.cancelable) {\n        event.preventDefault();\n      }\n      return;\n    }\n    const isSmooth = this.options.syncTouch && isTouch || this.options.smoothWheel && isWheel;\n    if (!isSmooth) {\n      this.isScrolling = \"native\";\n      this.animate.stop();\n      event.lenisStopPropagation = true;\n      return;\n    }\n    let delta = deltaY;\n    if (this.options.gestureOrientation === \"both\") {\n      delta = Math.abs(deltaY) > Math.abs(deltaX) ? deltaY : deltaX;\n    } else if (this.options.gestureOrientation === \"horizontal\") {\n      delta = deltaX;\n    }\n    if (!this.options.overscroll || this.options.infinite || this.options.wrapper !== window && this.limit > 0 && (this.animatedScroll > 0 && this.animatedScroll < this.limit || this.animatedScroll === 0 && deltaY > 0 || this.animatedScroll === this.limit && deltaY < 0)) {\n      event.lenisStopPropagation = true;\n    }\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n    const isSyncTouch = isTouch && this.options.syncTouch;\n    const isTouchEnd = isTouch && event.type === \"touchend\";\n    const hasTouchInertia = isTouchEnd;\n    if (hasTouchInertia) {\n      delta = Math.sign(this.velocity) * Math.pow(Math.abs(this.velocity), this.options.touchInertiaExponent);\n    }\n    this.scrollTo(this.targetScroll + delta, {\n      programmatic: false,\n      ...isSyncTouch ? {\n        lerp: hasTouchInertia ? this.options.syncTouchLerp : 1\n        // immediate: !hasTouchInertia,\n      } : {\n        lerp: this.options.lerp,\n        duration: this.options.duration,\n        easing: this.options.easing\n      }\n    });\n  };\n  /**\n   * Force lenis to recalculate the dimensions\n   */\n  resize() {\n    this.dimensions.resize();\n    this.animatedScroll = this.targetScroll = this.actualScroll;\n    this.emit();\n  }\n  emit() {\n    this.emitter.emit(\"scroll\", this);\n  }\n  onNativeScroll = () => {\n    if (this._resetVelocityTimeout !== null) {\n      clearTimeout(this._resetVelocityTimeout);\n      this._resetVelocityTimeout = null;\n    }\n    if (this._preventNextNativeScrollEvent) {\n      this._preventNextNativeScrollEvent = false;\n      return;\n    }\n    if (this.isScrolling === false || this.isScrolling === \"native\") {\n      const lastScroll = this.animatedScroll;\n      this.animatedScroll = this.targetScroll = this.actualScroll;\n      this.lastVelocity = this.velocity;\n      this.velocity = this.animatedScroll - lastScroll;\n      this.direction = Math.sign(\n        this.animatedScroll - lastScroll\n      );\n      if (!this.isStopped) {\n        this.isScrolling = \"native\";\n      }\n      this.emit();\n      if (this.velocity !== 0) {\n        this._resetVelocityTimeout = setTimeout(() => {\n          this.lastVelocity = this.velocity;\n          this.velocity = 0;\n          this.isScrolling = false;\n          this.emit();\n        }, 400);\n      }\n    }\n  };\n  reset() {\n    this.isLocked = false;\n    this.isScrolling = false;\n    this.animatedScroll = this.targetScroll = this.actualScroll;\n    this.lastVelocity = this.velocity = 0;\n    this.animate.stop();\n  }\n  /**\n   * Start lenis scroll after it has been stopped\n   */\n  start() {\n    if (!this.isStopped) return;\n    if (this.options.autoToggle) {\n      this.rootElement.style.removeProperty(\"overflow\");\n      return;\n    }\n    this.internalStart();\n  }\n  internalStart() {\n    if (!this.isStopped) return;\n    this.reset();\n    this.isStopped = false;\n    this.emit();\n  }\n  /**\n   * Stop lenis scroll\n   */\n  stop() {\n    if (this.isStopped) return;\n    if (this.options.autoToggle) {\n      this.rootElement.style.setProperty(\"overflow\", \"clip\");\n      return;\n    }\n    this.internalStop();\n  }\n  internalStop() {\n    if (this.isStopped) return;\n    this.reset();\n    this.isStopped = true;\n    this.emit();\n  }\n  /**\n   * RequestAnimationFrame for lenis\n   *\n   * @param time The time in ms from an external clock like `requestAnimationFrame` or Tempus\n   */\n  raf = (time) => {\n    const deltaTime = time - (this.time || time);\n    this.time = time;\n    this.animate.advance(deltaTime * 1e-3);\n    if (this.options.autoRaf) {\n      this.__rafID = requestAnimationFrame(this.raf);\n    }\n  };\n  /**\n   * Scroll to a target value\n   *\n   * @param target The target value to scroll to\n   * @param options The options for the scroll\n   *\n   * @example\n   * lenis.scrollTo(100, {\n   *   offset: 100,\n   *   duration: 1,\n   *   easing: (t) => 1 - Math.cos((t * Math.PI) / 2),\n   *   lerp: 0.1,\n   *   onStart: () => {\n   *     console.log('onStart')\n   *   },\n   *   onComplete: () => {\n   *     console.log('onComplete')\n   *   },\n   * })\n   */\n  scrollTo(target, {\n    offset = 0,\n    immediate = false,\n    lock = false,\n    duration = this.options.duration,\n    easing = this.options.easing,\n    lerp: lerp2 = this.options.lerp,\n    onStart,\n    onComplete,\n    force = false,\n    // scroll even if stopped\n    programmatic = true,\n    // called from outside of the class\n    userData\n  } = {}) {\n    if ((this.isStopped || this.isLocked) && !force) return;\n    if (typeof target === \"string\" && [\"top\", \"left\", \"start\"].includes(target)) {\n      target = 0;\n    } else if (typeof target === \"string\" && [\"bottom\", \"right\", \"end\"].includes(target)) {\n      target = this.limit;\n    } else {\n      let node;\n      if (typeof target === \"string\") {\n        node = document.querySelector(target);\n      } else if (target instanceof HTMLElement && target?.nodeType) {\n        node = target;\n      }\n      if (node) {\n        if (this.options.wrapper !== window) {\n          const wrapperRect = this.rootElement.getBoundingClientRect();\n          offset -= this.isHorizontal ? wrapperRect.left : wrapperRect.top;\n        }\n        const rect = node.getBoundingClientRect();\n        target = (this.isHorizontal ? rect.left : rect.top) + this.animatedScroll;\n      }\n    }\n    if (typeof target !== \"number\") return;\n    target += offset;\n    target = Math.round(target);\n    if (this.options.infinite) {\n      if (programmatic) {\n        this.targetScroll = this.animatedScroll = this.scroll;\n        const distance = target - this.animatedScroll;\n        if (distance > this.limit / 2) {\n          target = target - this.limit;\n        } else if (distance < -this.limit / 2) {\n          target = target + this.limit;\n        }\n      }\n    } else {\n      target = clamp(0, target, this.limit);\n    }\n    if (target === this.targetScroll) {\n      onStart?.(this);\n      onComplete?.(this);\n      return;\n    }\n    this.userData = userData ?? {};\n    if (immediate) {\n      this.animatedScroll = this.targetScroll = target;\n      this.setScroll(this.scroll);\n      this.reset();\n      this.preventNextNativeScrollEvent();\n      this.emit();\n      onComplete?.(this);\n      this.userData = {};\n      requestAnimationFrame(() => {\n        this.dispatchScrollendEvent();\n      });\n      return;\n    }\n    if (!programmatic) {\n      this.targetScroll = target;\n    }\n    if (typeof duration === \"number\" && typeof easing !== \"function\") {\n      easing = defaultEasing;\n    } else if (typeof easing === \"function\" && typeof duration !== \"number\") {\n      duration = 1;\n    }\n    this.animate.fromTo(this.animatedScroll, target, {\n      duration,\n      easing,\n      lerp: lerp2,\n      onStart: () => {\n        if (lock) this.isLocked = true;\n        this.isScrolling = \"smooth\";\n        onStart?.(this);\n      },\n      onUpdate: (value, completed) => {\n        this.isScrolling = \"smooth\";\n        this.lastVelocity = this.velocity;\n        this.velocity = value - this.animatedScroll;\n        this.direction = Math.sign(this.velocity);\n        this.animatedScroll = value;\n        this.setScroll(this.scroll);\n        if (programmatic) {\n          this.targetScroll = value;\n        }\n        if (!completed) this.emit();\n        if (completed) {\n          this.reset();\n          this.emit();\n          onComplete?.(this);\n          this.userData = {};\n          requestAnimationFrame(() => {\n            this.dispatchScrollendEvent();\n          });\n          this.preventNextNativeScrollEvent();\n        }\n      }\n    });\n  }\n  preventNextNativeScrollEvent() {\n    this._preventNextNativeScrollEvent = true;\n    requestAnimationFrame(() => {\n      this._preventNextNativeScrollEvent = false;\n    });\n  }\n  checkNestedScroll(node, { deltaX, deltaY }) {\n    const time = Date.now();\n    const cache = node._lenis ??= {};\n    let hasOverflowX, hasOverflowY, isScrollableX, isScrollableY, scrollWidth, scrollHeight, clientWidth, clientHeight;\n    const gestureOrientation = this.options.gestureOrientation;\n    if (time - (cache.time ?? 0) > 2e3) {\n      cache.time = Date.now();\n      const computedStyle = window.getComputedStyle(node);\n      cache.computedStyle = computedStyle;\n      const overflowXString = computedStyle.overflowX;\n      const overflowYString = computedStyle.overflowY;\n      hasOverflowX = [\"auto\", \"overlay\", \"scroll\"].includes(overflowXString);\n      hasOverflowY = [\"auto\", \"overlay\", \"scroll\"].includes(overflowYString);\n      cache.hasOverflowX = hasOverflowX;\n      cache.hasOverflowY = hasOverflowY;\n      if (!hasOverflowX && !hasOverflowY) return false;\n      if (gestureOrientation === \"vertical\" && !hasOverflowY) return false;\n      if (gestureOrientation === \"horizontal\" && !hasOverflowX) return false;\n      scrollWidth = node.scrollWidth;\n      scrollHeight = node.scrollHeight;\n      clientWidth = node.clientWidth;\n      clientHeight = node.clientHeight;\n      isScrollableX = scrollWidth > clientWidth;\n      isScrollableY = scrollHeight > clientHeight;\n      cache.isScrollableX = isScrollableX;\n      cache.isScrollableY = isScrollableY;\n      cache.scrollWidth = scrollWidth;\n      cache.scrollHeight = scrollHeight;\n      cache.clientWidth = clientWidth;\n      cache.clientHeight = clientHeight;\n    } else {\n      isScrollableX = cache.isScrollableX;\n      isScrollableY = cache.isScrollableY;\n      hasOverflowX = cache.hasOverflowX;\n      hasOverflowY = cache.hasOverflowY;\n      scrollWidth = cache.scrollWidth;\n      scrollHeight = cache.scrollHeight;\n      clientWidth = cache.clientWidth;\n      clientHeight = cache.clientHeight;\n    }\n    if (!hasOverflowX && !hasOverflowY || !isScrollableX && !isScrollableY) {\n      return false;\n    }\n    if (gestureOrientation === \"vertical\" && (!hasOverflowY || !isScrollableY))\n      return false;\n    if (gestureOrientation === \"horizontal\" && (!hasOverflowX || !isScrollableX))\n      return false;\n    let orientation;\n    if (gestureOrientation === \"horizontal\") {\n      orientation = \"x\";\n    } else if (gestureOrientation === \"vertical\") {\n      orientation = \"y\";\n    } else {\n      const isScrollingX = deltaX !== 0;\n      const isScrollingY = deltaY !== 0;\n      if (isScrollingX && hasOverflowX && isScrollableX) {\n        orientation = \"x\";\n      }\n      if (isScrollingY && hasOverflowY && isScrollableY) {\n        orientation = \"y\";\n      }\n    }\n    if (!orientation) return false;\n    let scroll, maxScroll, delta, hasOverflow, isScrollable;\n    if (orientation === \"x\") {\n      scroll = node.scrollLeft;\n      maxScroll = scrollWidth - clientWidth;\n      delta = deltaX;\n      hasOverflow = hasOverflowX;\n      isScrollable = isScrollableX;\n    } else if (orientation === \"y\") {\n      scroll = node.scrollTop;\n      maxScroll = scrollHeight - clientHeight;\n      delta = deltaY;\n      hasOverflow = hasOverflowY;\n      isScrollable = isScrollableY;\n    } else {\n      return false;\n    }\n    const willScroll = delta > 0 ? scroll < maxScroll : scroll > 0;\n    return willScroll && hasOverflow && isScrollable;\n  }\n  /**\n   * The root element on which lenis is instanced\n   */\n  get rootElement() {\n    return this.options.wrapper === window ? document.documentElement : this.options.wrapper;\n  }\n  /**\n   * The limit which is the maximum scroll value\n   */\n  get limit() {\n    if (this.options.__experimental__naiveDimensions) {\n      if (this.isHorizontal) {\n        return this.rootElement.scrollWidth - this.rootElement.clientWidth;\n      } else {\n        return this.rootElement.scrollHeight - this.rootElement.clientHeight;\n      }\n    } else {\n      return this.dimensions.limit[this.isHorizontal ? \"x\" : \"y\"];\n    }\n  }\n  /**\n   * Whether or not the scroll is horizontal\n   */\n  get isHorizontal() {\n    return this.options.orientation === \"horizontal\";\n  }\n  /**\n   * The actual scroll value\n   */\n  get actualScroll() {\n    const wrapper = this.options.wrapper;\n    return this.isHorizontal ? wrapper.scrollX ?? wrapper.scrollLeft : wrapper.scrollY ?? wrapper.scrollTop;\n  }\n  /**\n   * The current scroll value\n   */\n  get scroll() {\n    return this.options.infinite ? modulo(this.animatedScroll, this.limit) : this.animatedScroll;\n  }\n  /**\n   * The progress of the scroll relative to the limit\n   */\n  get progress() {\n    return this.limit === 0 ? 1 : this.scroll / this.limit;\n  }\n  /**\n   * Current scroll state\n   */\n  get isScrolling() {\n    return this._isScrolling;\n  }\n  set isScrolling(value) {\n    if (this._isScrolling !== value) {\n      this._isScrolling = value;\n      this.updateClassName();\n    }\n  }\n  /**\n   * Check if lenis is stopped\n   */\n  get isStopped() {\n    return this._isStopped;\n  }\n  set isStopped(value) {\n    if (this._isStopped !== value) {\n      this._isStopped = value;\n      this.updateClassName();\n    }\n  }\n  /**\n   * Check if lenis is locked\n   */\n  get isLocked() {\n    return this._isLocked;\n  }\n  set isLocked(value) {\n    if (this._isLocked !== value) {\n      this._isLocked = value;\n      this.updateClassName();\n    }\n  }\n  /**\n   * Check if lenis is smooth scrolling\n   */\n  get isSmooth() {\n    return this.isScrolling === \"smooth\";\n  }\n  /**\n   * The class name applied to the wrapper element\n   */\n  get className() {\n    let className = \"lenis\";\n    if (this.options.autoToggle) className += \" lenis-autoToggle\";\n    if (this.isStopped) className += \" lenis-stopped\";\n    if (this.isLocked) className += \" lenis-locked\";\n    if (this.isScrolling) className += \" lenis-scrolling\";\n    if (this.isScrolling === \"smooth\") className += \" lenis-smooth\";\n    return className;\n  }\n  updateClassName() {\n    this.cleanUpClassName();\n    this.rootElement.className = `${this.rootElement.className} ${this.className}`.trim();\n  }\n  cleanUpClassName() {\n    this.rootElement.className = this.rootElement.className.replace(/lenis(-\\w+)?/g, \"\").trim();\n  }\n};\nexport {\n  Lenis as default\n};\n//# sourceMappingURL=lenis.mjs.map","// src/queryClient.ts\nimport {\n  functionalUpdate,\n  hashKey,\n  hashQueryKeyByOptions,\n  noop,\n  partialMatchKey,\n  resolveStaleTime,\n  skipToken\n} from \"./utils.js\";\nimport { QueryCache } from \"./queryCache.js\";\nimport { MutationCache } from \"./mutationCache.js\";\nimport { focusManager } from \"./focusManager.js\";\nimport { onlineManager } from \"./onlineManager.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { infiniteQueryBehavior } from \"./infiniteQueryBehavior.js\";\nvar QueryClient = class {\n  #queryCache;\n  #mutationCache;\n  #defaultOptions;\n  #queryDefaults;\n  #mutationDefaults;\n  #mountCount;\n  #unsubscribeFocus;\n  #unsubscribeOnline;\n  constructor(config = {}) {\n    this.#queryCache = config.queryCache || new QueryCache();\n    this.#mutationCache = config.mutationCache || new MutationCache();\n    this.#defaultOptions = config.defaultOptions || {};\n    this.#queryDefaults = /* @__PURE__ */ new Map();\n    this.#mutationDefaults = /* @__PURE__ */ new Map();\n    this.#mountCount = 0;\n  }\n  mount() {\n    this.#mountCount++;\n    if (this.#mountCount !== 1) return;\n    this.#unsubscribeFocus = focusManager.subscribe(async (focused) => {\n      if (focused) {\n        await this.resumePausedMutations();\n        this.#queryCache.onFocus();\n      }\n    });\n    this.#unsubscribeOnline = onlineManager.subscribe(async (online) => {\n      if (online) {\n        await this.resumePausedMutations();\n        this.#queryCache.onOnline();\n      }\n    });\n  }\n  unmount() {\n    this.#mountCount--;\n    if (this.#mountCount !== 0) return;\n    this.#unsubscribeFocus?.();\n    this.#unsubscribeFocus = void 0;\n    this.#unsubscribeOnline?.();\n    this.#unsubscribeOnline = void 0;\n  }\n  isFetching(filters) {\n    return this.#queryCache.findAll({ ...filters, fetchStatus: \"fetching\" }).length;\n  }\n  isMutating(filters) {\n    return this.#mutationCache.findAll({ ...filters, status: \"pending\" }).length;\n  }\n  /**\n   * Imperative (non-reactive) way to retrieve data for a QueryKey.\n   * Should only be used in callbacks or functions where reading the latest data is necessary, e.g. for optimistic updates.\n   *\n   * Hint: Do not use this function inside a component, because it won't receive updates.\n   * Use `useQuery` to create a `QueryObserver` that subscribes to changes.\n   */\n  getQueryData(queryKey) {\n    const options = this.defaultQueryOptions({ queryKey });\n    return this.#queryCache.get(options.queryHash)?.state.data;\n  }\n  ensureQueryData(options) {\n    const defaultedOptions = this.defaultQueryOptions(options);\n    const query = this.#queryCache.build(this, defaultedOptions);\n    const cachedData = query.state.data;\n    if (cachedData === void 0) {\n      return this.fetchQuery(options);\n    }\n    if (options.revalidateIfStale && query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query))) {\n      void this.prefetchQuery(defaultedOptions);\n    }\n    return Promise.resolve(cachedData);\n  }\n  getQueriesData(filters) {\n    return this.#queryCache.findAll(filters).map(({ queryKey, state }) => {\n      const data = state.data;\n      return [queryKey, data];\n    });\n  }\n  setQueryData(queryKey, updater, options) {\n    const defaultedOptions = this.defaultQueryOptions({ queryKey });\n    const query = this.#queryCache.get(\n      defaultedOptions.queryHash\n    );\n    const prevData = query?.state.data;\n    const data = functionalUpdate(updater, prevData);\n    if (data === void 0) {\n      return void 0;\n    }\n    return this.#queryCache.build(this, defaultedOptions).setData(data, { ...options, manual: true });\n  }\n  setQueriesData(filters, updater, options) {\n    return notifyManager.batch(\n      () => this.#queryCache.findAll(filters).map(({ queryKey }) => [\n        queryKey,\n        this.setQueryData(queryKey, updater, options)\n      ])\n    );\n  }\n  getQueryState(queryKey) {\n    const options = this.defaultQueryOptions({ queryKey });\n    return this.#queryCache.get(\n      options.queryHash\n    )?.state;\n  }\n  removeQueries(filters) {\n    const queryCache = this.#queryCache;\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query);\n      });\n    });\n  }\n  resetQueries(filters, options) {\n    const queryCache = this.#queryCache;\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset();\n      });\n      return this.refetchQueries(\n        {\n          type: \"active\",\n          ...filters\n        },\n        options\n      );\n    });\n  }\n  cancelQueries(filters, cancelOptions = {}) {\n    const defaultedCancelOptions = { revert: true, ...cancelOptions };\n    const promises = notifyManager.batch(\n      () => this.#queryCache.findAll(filters).map((query) => query.cancel(defaultedCancelOptions))\n    );\n    return Promise.all(promises).then(noop).catch(noop);\n  }\n  invalidateQueries(filters, options = {}) {\n    return notifyManager.batch(() => {\n      this.#queryCache.findAll(filters).forEach((query) => {\n        query.invalidate();\n      });\n      if (filters?.refetchType === \"none\") {\n        return Promise.resolve();\n      }\n      return this.refetchQueries(\n        {\n          ...filters,\n          type: filters?.refetchType ?? filters?.type ?? \"active\"\n        },\n        options\n      );\n    });\n  }\n  refetchQueries(filters, options = {}) {\n    const fetchOptions = {\n      ...options,\n      cancelRefetch: options.cancelRefetch ?? true\n    };\n    const promises = notifyManager.batch(\n      () => this.#queryCache.findAll(filters).filter((query) => !query.isDisabled() && !query.isStatic()).map((query) => {\n        let promise = query.fetch(void 0, fetchOptions);\n        if (!fetchOptions.throwOnError) {\n          promise = promise.catch(noop);\n        }\n        return query.state.fetchStatus === \"paused\" ? Promise.resolve() : promise;\n      })\n    );\n    return Promise.all(promises).then(noop);\n  }\n  fetchQuery(options) {\n    const defaultedOptions = this.defaultQueryOptions(options);\n    if (defaultedOptions.retry === void 0) {\n      defaultedOptions.retry = false;\n    }\n    const query = this.#queryCache.build(this, defaultedOptions);\n    return query.isStaleByTime(\n      resolveStaleTime(defaultedOptions.staleTime, query)\n    ) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n  }\n  prefetchQuery(options) {\n    return this.fetchQuery(options).then(noop).catch(noop);\n  }\n  fetchInfiniteQuery(options) {\n    options.behavior = infiniteQueryBehavior(options.pages);\n    return this.fetchQuery(options);\n  }\n  prefetchInfiniteQuery(options) {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop);\n  }\n  ensureInfiniteQueryData(options) {\n    options.behavior = infiniteQueryBehavior(options.pages);\n    return this.ensureQueryData(options);\n  }\n  resumePausedMutations() {\n    if (onlineManager.isOnline()) {\n      return this.#mutationCache.resumePausedMutations();\n    }\n    return Promise.resolve();\n  }\n  getQueryCache() {\n    return this.#queryCache;\n  }\n  getMutationCache() {\n    return this.#mutationCache;\n  }\n  getDefaultOptions() {\n    return this.#defaultOptions;\n  }\n  setDefaultOptions(options) {\n    this.#defaultOptions = options;\n  }\n  setQueryDefaults(queryKey, options) {\n    this.#queryDefaults.set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options\n    });\n  }\n  getQueryDefaults(queryKey) {\n    const defaults = [...this.#queryDefaults.values()];\n    const result = {};\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        Object.assign(result, queryDefault.defaultOptions);\n      }\n    });\n    return result;\n  }\n  setMutationDefaults(mutationKey, options) {\n    this.#mutationDefaults.set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options\n    });\n  }\n  getMutationDefaults(mutationKey) {\n    const defaults = [...this.#mutationDefaults.values()];\n    const result = {};\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        Object.assign(result, queryDefault.defaultOptions);\n      }\n    });\n    return result;\n  }\n  defaultQueryOptions(options) {\n    if (options._defaulted) {\n      return options;\n    }\n    const defaultedOptions = {\n      ...this.#defaultOptions.queries,\n      ...this.getQueryDefaults(options.queryKey),\n      ...options,\n      _defaulted: true\n    };\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions\n      );\n    }\n    if (defaultedOptions.refetchOnReconnect === void 0) {\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== \"always\";\n    }\n    if (defaultedOptions.throwOnError === void 0) {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense;\n    }\n    if (!defaultedOptions.networkMode && defaultedOptions.persister) {\n      defaultedOptions.networkMode = \"offlineFirst\";\n    }\n    if (defaultedOptions.queryFn === skipToken) {\n      defaultedOptions.enabled = false;\n    }\n    return defaultedOptions;\n  }\n  defaultMutationOptions(options) {\n    if (options?._defaulted) {\n      return options;\n    }\n    return {\n      ...this.#defaultOptions.mutations,\n      ...options?.mutationKey && this.getMutationDefaults(options.mutationKey),\n      ...options,\n      _defaulted: true\n    };\n  }\n  clear() {\n    this.#queryCache.clear();\n    this.#mutationCache.clear();\n  }\n};\nexport {\n  QueryClient\n};\n//# sourceMappingURL=queryClient.js.map","\"use client\"\r\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\"\r\n\r\nimport React from \"react\"\r\n\r\nconst client = new QueryClient()\r\n\r\nexport const TanstackQueryProvider = ({\r\n  children,\r\n}: {\r\n  children?: React.ReactNode\r\n}) => {\r\n  return <QueryClientProvider client={client}>{children}</QueryClientProvider>\r\n}\r\n","// src/mutationCache.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Mutation } from \"./mutation.js\";\nimport { matchMutation, noop } from \"./utils.js\";\nimport { Subscribable } from \"./subscribable.js\";\nvar MutationCache = class extends Subscribable {\n  constructor(config = {}) {\n    super();\n    this.config = config;\n    this.#mutations = /* @__PURE__ */ new Set();\n    this.#scopes = /* @__PURE__ */ new Map();\n    this.#mutationId = 0;\n  }\n  #mutations;\n  #scopes;\n  #mutationId;\n  build(client, options, state) {\n    const mutation = new Mutation({\n      client,\n      mutationCache: this,\n      mutationId: ++this.#mutationId,\n      options: client.defaultMutationOptions(options),\n      state\n    });\n    this.add(mutation);\n    return mutation;\n  }\n  add(mutation) {\n    this.#mutations.add(mutation);\n    const scope = scopeFor(mutation);\n    if (typeof scope === \"string\") {\n      const scopedMutations = this.#scopes.get(scope);\n      if (scopedMutations) {\n        scopedMutations.push(mutation);\n      } else {\n        this.#scopes.set(scope, [mutation]);\n      }\n    }\n    this.notify({ type: \"added\", mutation });\n  }\n  remove(mutation) {\n    if (this.#mutations.delete(mutation)) {\n      const scope = scopeFor(mutation);\n      if (typeof scope === \"string\") {\n        const scopedMutations = this.#scopes.get(scope);\n        if (scopedMutations) {\n          if (scopedMutations.length > 1) {\n            const index = scopedMutations.indexOf(mutation);\n            if (index !== -1) {\n              scopedMutations.splice(index, 1);\n            }\n          } else if (scopedMutations[0] === mutation) {\n            this.#scopes.delete(scope);\n          }\n        }\n      }\n    }\n    this.notify({ type: \"removed\", mutation });\n  }\n  canRun(mutation) {\n    const scope = scopeFor(mutation);\n    if (typeof scope === \"string\") {\n      const mutationsWithSameScope = this.#scopes.get(scope);\n      const firstPendingMutation = mutationsWithSameScope?.find(\n        (m) => m.state.status === \"pending\"\n      );\n      return !firstPendingMutation || firstPendingMutation === mutation;\n    } else {\n      return true;\n    }\n  }\n  runNext(mutation) {\n    const scope = scopeFor(mutation);\n    if (typeof scope === \"string\") {\n      const foundMutation = this.#scopes.get(scope)?.find((m) => m !== mutation && m.state.isPaused);\n      return foundMutation?.continue() ?? Promise.resolve();\n    } else {\n      return Promise.resolve();\n    }\n  }\n  clear() {\n    notifyManager.batch(() => {\n      this.#mutations.forEach((mutation) => {\n        this.notify({ type: \"removed\", mutation });\n      });\n      this.#mutations.clear();\n      this.#scopes.clear();\n    });\n  }\n  getAll() {\n    return Array.from(this.#mutations);\n  }\n  find(filters) {\n    const defaultedFilters = { exact: true, ...filters };\n    return this.getAll().find(\n      (mutation) => matchMutation(defaultedFilters, mutation)\n    );\n  }\n  findAll(filters = {}) {\n    return this.getAll().filter((mutation) => matchMutation(filters, mutation));\n  }\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event);\n      });\n    });\n  }\n  resumePausedMutations() {\n    const pausedMutations = this.getAll().filter((x) => x.state.isPaused);\n    return notifyManager.batch(\n      () => Promise.all(\n        pausedMutations.map((mutation) => mutation.continue().catch(noop))\n      )\n    );\n  }\n};\nfunction scopeFor(mutation) {\n  return mutation.options.scope?.id;\n}\nexport {\n  MutationCache\n};\n//# sourceMappingURL=mutationCache.js.map","// src/queryCache.ts\nimport { hashQueryKeyByOptions, matchQuery } from \"./utils.js\";\nimport { Query } from \"./query.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Subscribable } from \"./subscribable.js\";\nvar QueryCache = class extends Subscribable {\n  constructor(config = {}) {\n    super();\n    this.config = config;\n    this.#queries = /* @__PURE__ */ new Map();\n  }\n  #queries;\n  build(client, options, state) {\n    const queryKey = options.queryKey;\n    const queryHash = options.queryHash ?? hashQueryKeyByOptions(queryKey, options);\n    let query = this.get(queryHash);\n    if (!query) {\n      query = new Query({\n        client,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey)\n      });\n      this.add(query);\n    }\n    return query;\n  }\n  add(query) {\n    if (!this.#queries.has(query.queryHash)) {\n      this.#queries.set(query.queryHash, query);\n      this.notify({\n        type: \"added\",\n        query\n      });\n    }\n  }\n  remove(query) {\n    const queryInMap = this.#queries.get(query.queryHash);\n    if (queryInMap) {\n      query.destroy();\n      if (queryInMap === query) {\n        this.#queries.delete(query.queryHash);\n      }\n      this.notify({ type: \"removed\", query });\n    }\n  }\n  clear() {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        this.remove(query);\n      });\n    });\n  }\n  get(queryHash) {\n    return this.#queries.get(queryHash);\n  }\n  getAll() {\n    return [...this.#queries.values()];\n  }\n  find(filters) {\n    const defaultedFilters = { exact: true, ...filters };\n    return this.getAll().find(\n      (query) => matchQuery(defaultedFilters, query)\n    );\n  }\n  findAll(filters = {}) {\n    const queries = this.getAll();\n    return Object.keys(filters).length > 0 ? queries.filter((query) => matchQuery(filters, query)) : queries;\n  }\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event);\n      });\n    });\n  }\n  onFocus() {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        query.onFocus();\n      });\n    });\n  }\n  onOnline() {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        query.onOnline();\n      });\n    });\n  }\n};\nexport {\n  QueryCache\n};\n//# sourceMappingURL=queryCache.js.map","\"use client\"\r\nimport { config } from \"@/utils/wagmi-config\"\r\nimport React from \"react\"\r\nimport { WagmiProvider } from \"wagmi\"\r\n\r\nexport const Wagmi = ({ children }: { children?: React.ReactNode }) => {\r\n  return <WagmiProvider config={config}>{children}</WagmiProvider>\r\n}\r\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.grammar = void 0;\n// copyright: Copyright (c) 2024 Lowell D. Thomas, all rights reserved<br>\n//   license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)<br>\n//\n// Generated by apg-js, Version 4.4.0 [apg-js](https://github.com/ldthomas/apg-js)\nfunction grammar() {\n    // ```\n    // SUMMARY\n    //      rules = 81\n    //       udts = 0\n    //    opcodes = 461\n    //        ---   ABNF original opcodes\n    //        ALT = 26\n    //        CAT = 63\n    //        REP = 63\n    //        RNM = 159\n    //        TLS = 41\n    //        TBS = 64\n    //        TRG = 41\n    //        ---   SABNF superset opcodes\n    //        UDT = 0\n    //        AND = 0\n    //        NOT = 4\n    //        BKA = 0\n    //        BKN = 0\n    //        BKR = 0\n    //        ABG = 0\n    //        AEN = 0\n    // characters = [10 - 126]\n    // ```\n    /* OBJECT IDENTIFIER (for internal parser use) */\n    this.grammarObject = 'grammarObject';\n    /* RULES */\n    this.rules = [];\n    this.rules[0] = { name: 'sign-in-with-ethereum', lower: 'sign-in-with-ethereum', index: 0, isBkr: false };\n    this.rules[1] = { name: 'ex-title', lower: 'ex-title', index: 1, isBkr: false };\n    this.rules[2] = { name: 'nb-title', lower: 'nb-title', index: 2, isBkr: false };\n    this.rules[3] = { name: 'ri-title', lower: 'ri-title', index: 3, isBkr: false };\n    this.rules[4] = { name: 're-title', lower: 're-title', index: 4, isBkr: false };\n    this.rules[5] = { name: 'oscheme', lower: 'oscheme', index: 5, isBkr: false };\n    this.rules[6] = { name: 'domain', lower: 'domain', index: 6, isBkr: false };\n    this.rules[7] = { name: 'address', lower: 'address', index: 7, isBkr: false };\n    this.rules[8] = { name: 'statement', lower: 'statement', index: 8, isBkr: false };\n    this.rules[9] = { name: 'empty-statement', lower: 'empty-statement', index: 9, isBkr: false };\n    this.rules[10] = { name: 'version', lower: 'version', index: 10, isBkr: false };\n    this.rules[11] = { name: 'nonce', lower: 'nonce', index: 11, isBkr: false };\n    this.rules[12] = { name: 'issued-at', lower: 'issued-at', index: 12, isBkr: false };\n    this.rules[13] = { name: 'expiration-time', lower: 'expiration-time', index: 13, isBkr: false };\n    this.rules[14] = { name: 'not-before', lower: 'not-before', index: 14, isBkr: false };\n    this.rules[15] = { name: 'request-id', lower: 'request-id', index: 15, isBkr: false };\n    this.rules[16] = { name: 'chain-id', lower: 'chain-id', index: 16, isBkr: false };\n    this.rules[17] = { name: 'resources', lower: 'resources', index: 17, isBkr: false };\n    this.rules[18] = { name: 'resource', lower: 'resource', index: 18, isBkr: false };\n    this.rules[19] = { name: 'URI', lower: 'uri', index: 19, isBkr: false };\n    this.rules[20] = { name: 'hier-part', lower: 'hier-part', index: 20, isBkr: false };\n    this.rules[21] = { name: 'scheme', lower: 'scheme', index: 21, isBkr: false };\n    this.rules[22] = { name: 'authority', lower: 'authority', index: 22, isBkr: false };\n    this.rules[23] = { name: 'path-abempty', lower: 'path-abempty', index: 23, isBkr: false };\n    this.rules[24] = { name: 'path-absolute', lower: 'path-absolute', index: 24, isBkr: false };\n    this.rules[25] = { name: 'path-rootless', lower: 'path-rootless', index: 25, isBkr: false };\n    this.rules[26] = { name: 'path-empty', lower: 'path-empty', index: 26, isBkr: false };\n    this.rules[27] = { name: 'userinfo-at', lower: 'userinfo-at', index: 27, isBkr: false };\n    this.rules[28] = { name: 'userinfo', lower: 'userinfo', index: 28, isBkr: false };\n    this.rules[29] = { name: 'host', lower: 'host', index: 29, isBkr: false };\n    this.rules[30] = { name: 'IP-literal', lower: 'ip-literal', index: 30, isBkr: false };\n    this.rules[31] = { name: 'IPvFuture', lower: 'ipvfuture', index: 31, isBkr: false };\n    this.rules[32] = { name: 'IPv6address', lower: 'ipv6address', index: 32, isBkr: false };\n    this.rules[33] = { name: 'nodcolon', lower: 'nodcolon', index: 33, isBkr: false };\n    this.rules[34] = { name: 'dcolon', lower: 'dcolon', index: 34, isBkr: false };\n    this.rules[35] = { name: 'h16', lower: 'h16', index: 35, isBkr: false };\n    this.rules[36] = { name: 'h16c', lower: 'h16c', index: 36, isBkr: false };\n    this.rules[37] = { name: 'h16n', lower: 'h16n', index: 37, isBkr: false };\n    this.rules[38] = { name: 'h16cn', lower: 'h16cn', index: 38, isBkr: false };\n    this.rules[39] = { name: 'IPv4address', lower: 'ipv4address', index: 39, isBkr: false };\n    this.rules[40] = { name: 'dec-octet', lower: 'dec-octet', index: 40, isBkr: false };\n    this.rules[41] = { name: 'dec-digit', lower: 'dec-digit', index: 41, isBkr: false };\n    this.rules[42] = { name: 'reg-name', lower: 'reg-name', index: 42, isBkr: false };\n    this.rules[43] = { name: 'reg-name-char', lower: 'reg-name-char', index: 43, isBkr: false };\n    this.rules[44] = { name: 'port', lower: 'port', index: 44, isBkr: false };\n    this.rules[45] = { name: 'query', lower: 'query', index: 45, isBkr: false };\n    this.rules[46] = { name: 'fragment', lower: 'fragment', index: 46, isBkr: false };\n    this.rules[47] = { name: 'URI-r', lower: 'uri-r', index: 47, isBkr: false };\n    this.rules[48] = { name: 'hier-part-r', lower: 'hier-part-r', index: 48, isBkr: false };\n    this.rules[49] = { name: 'scheme-r', lower: 'scheme-r', index: 49, isBkr: false };\n    this.rules[50] = { name: 'query-r', lower: 'query-r', index: 50, isBkr: false };\n    this.rules[51] = { name: 'fragment-r', lower: 'fragment-r', index: 51, isBkr: false };\n    this.rules[52] = { name: 'authority-d', lower: 'authority-d', index: 52, isBkr: false };\n    this.rules[53] = { name: 'userinfo-d', lower: 'userinfo-d', index: 53, isBkr: false };\n    this.rules[54] = { name: 'host-d', lower: 'host-d', index: 54, isBkr: false };\n    this.rules[55] = { name: 'port-d', lower: 'port-d', index: 55, isBkr: false };\n    this.rules[56] = { name: 'path-abempty-r', lower: 'path-abempty-r', index: 56, isBkr: false };\n    this.rules[57] = { name: 'path-absolute-r', lower: 'path-absolute-r', index: 57, isBkr: false };\n    this.rules[58] = { name: 'path-rootless-r', lower: 'path-rootless-r', index: 58, isBkr: false };\n    this.rules[59] = { name: 'path-empty-r', lower: 'path-empty-r', index: 59, isBkr: false };\n    this.rules[60] = { name: 'segment', lower: 'segment', index: 60, isBkr: false };\n    this.rules[61] = { name: 'segment-nz', lower: 'segment-nz', index: 61, isBkr: false };\n    this.rules[62] = { name: 'pchar', lower: 'pchar', index: 62, isBkr: false };\n    this.rules[63] = { name: 'pct-encoded', lower: 'pct-encoded', index: 63, isBkr: false };\n    this.rules[64] = { name: 'date-fullyear', lower: 'date-fullyear', index: 64, isBkr: false };\n    this.rules[65] = { name: 'date-month', lower: 'date-month', index: 65, isBkr: false };\n    this.rules[66] = { name: 'date-mday', lower: 'date-mday', index: 66, isBkr: false };\n    this.rules[67] = { name: 'time-hour', lower: 'time-hour', index: 67, isBkr: false };\n    this.rules[68] = { name: 'time-minute', lower: 'time-minute', index: 68, isBkr: false };\n    this.rules[69] = { name: 'time-second', lower: 'time-second', index: 69, isBkr: false };\n    this.rules[70] = { name: 'time-secfrac', lower: 'time-secfrac', index: 70, isBkr: false };\n    this.rules[71] = { name: 'time-numoffset', lower: 'time-numoffset', index: 71, isBkr: false };\n    this.rules[72] = { name: 'time-offset', lower: 'time-offset', index: 72, isBkr: false };\n    this.rules[73] = { name: 'partial-time', lower: 'partial-time', index: 73, isBkr: false };\n    this.rules[74] = { name: 'full-date', lower: 'full-date', index: 74, isBkr: false };\n    this.rules[75] = { name: 'full-time', lower: 'full-time', index: 75, isBkr: false };\n    this.rules[76] = { name: 'date-time', lower: 'date-time', index: 76, isBkr: false };\n    this.rules[77] = { name: 'ALPHA', lower: 'alpha', index: 77, isBkr: false };\n    this.rules[78] = { name: 'LF', lower: 'lf', index: 78, isBkr: false };\n    this.rules[79] = { name: 'DIGIT', lower: 'digit', index: 79, isBkr: false };\n    this.rules[80] = { name: 'HEXDIG', lower: 'hexdig', index: 80, isBkr: false };\n    /* UDTS */\n    this.udts = [];\n    /* OPCODES */\n    /* sign-in-with-ethereum */\n    this.rules[0].opcodes = [];\n    this.rules[0].opcodes[0] = { type: 2, children: [1, 2, 3, 4, 5, 6, 7, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 41, 46] }; // CAT\n    this.rules[0].opcodes[1] = { type: 4, index: 5 }; // RNM(oscheme)\n    this.rules[0].opcodes[2] = { type: 4, index: 6 }; // RNM(domain)\n    this.rules[0].opcodes[3] = { type: 6, string: [32, 119, 97, 110, 116, 115, 32, 121, 111, 117, 32, 116, 111, 32, 115, 105, 103, 110, 32, 105, 110, 32, 119, 105, 116, 104, 32, 121, 111, 117, 114, 32, 69, 116, 104, 101, 114, 101, 117, 109, 32, 97, 99, 99, 111, 117, 110, 116, 58] }; // TBS\n    this.rules[0].opcodes[4] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[5] = { type: 4, index: 7 }; // RNM(address)\n    this.rules[0].opcodes[6] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[7] = { type: 1, children: [8, 13, 14] }; // ALT\n    this.rules[0].opcodes[8] = { type: 2, children: [9, 10, 11, 12] }; // CAT\n    this.rules[0].opcodes[9] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[10] = { type: 4, index: 8 }; // RNM(statement)\n    this.rules[0].opcodes[11] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[12] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[13] = { type: 4, index: 9 }; // RNM(empty-statement)\n    this.rules[0].opcodes[14] = { type: 2, children: [15, 16] }; // CAT\n    this.rules[0].opcodes[15] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[16] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[17] = { type: 6, string: [85, 82, 73, 58, 32] }; // TBS\n    this.rules[0].opcodes[18] = { type: 4, index: 19 }; // RNM(URI)\n    this.rules[0].opcodes[19] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[20] = { type: 6, string: [86, 101, 114, 115, 105, 111, 110, 58, 32] }; // TBS\n    this.rules[0].opcodes[21] = { type: 4, index: 10 }; // RNM(version)\n    this.rules[0].opcodes[22] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[23] = { type: 6, string: [67, 104, 97, 105, 110, 32, 73, 68, 58, 32] }; // TBS\n    this.rules[0].opcodes[24] = { type: 4, index: 16 }; // RNM(chain-id)\n    this.rules[0].opcodes[25] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[26] = { type: 6, string: [78, 111, 110, 99, 101, 58, 32] }; // TBS\n    this.rules[0].opcodes[27] = { type: 4, index: 11 }; // RNM(nonce)\n    this.rules[0].opcodes[28] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[29] = { type: 6, string: [73, 115, 115, 117, 101, 100, 32, 65, 116, 58, 32] }; // TBS\n    this.rules[0].opcodes[30] = { type: 4, index: 12 }; // RNM(issued-at)\n    this.rules[0].opcodes[31] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[0].opcodes[32] = { type: 2, children: [33, 34, 35] }; // CAT\n    this.rules[0].opcodes[33] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[34] = { type: 4, index: 1 }; // RNM(ex-title)\n    this.rules[0].opcodes[35] = { type: 4, index: 13 }; // RNM(expiration-time)\n    this.rules[0].opcodes[36] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[0].opcodes[37] = { type: 2, children: [38, 39, 40] }; // CAT\n    this.rules[0].opcodes[38] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[39] = { type: 4, index: 2 }; // RNM(nb-title)\n    this.rules[0].opcodes[40] = { type: 4, index: 14 }; // RNM(not-before)\n    this.rules[0].opcodes[41] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[0].opcodes[42] = { type: 2, children: [43, 44, 45] }; // CAT\n    this.rules[0].opcodes[43] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[44] = { type: 4, index: 3 }; // RNM(ri-title)\n    this.rules[0].opcodes[45] = { type: 4, index: 15 }; // RNM(request-id)\n    this.rules[0].opcodes[46] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[0].opcodes[47] = { type: 2, children: [48, 49, 50] }; // CAT\n    this.rules[0].opcodes[48] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[49] = { type: 4, index: 4 }; // RNM(re-title)\n    this.rules[0].opcodes[50] = { type: 4, index: 17 }; // RNM(resources)\n    /* ex-title */\n    this.rules[1].opcodes = [];\n    this.rules[1].opcodes[0] = { type: 6, string: [69, 120, 112, 105, 114, 97, 116, 105, 111, 110, 32, 84, 105, 109, 101, 58, 32] }; // TBS\n    /* nb-title */\n    this.rules[2].opcodes = [];\n    this.rules[2].opcodes[0] = { type: 6, string: [78, 111, 116, 32, 66, 101, 102, 111, 114, 101, 58, 32] }; // TBS\n    /* ri-title */\n    this.rules[3].opcodes = [];\n    this.rules[3].opcodes[0] = { type: 6, string: [82, 101, 113, 117, 101, 115, 116, 32, 73, 68, 58, 32] }; // TBS\n    /* re-title */\n    this.rules[4].opcodes = [];\n    this.rules[4].opcodes[0] = { type: 6, string: [82, 101, 115, 111, 117, 114, 99, 101, 115, 58] }; // TBS\n    /* oscheme */\n    this.rules[5].opcodes = [];\n    this.rules[5].opcodes[0] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[5].opcodes[1] = { type: 2, children: [2, 3, 9] }; // CAT\n    this.rules[5].opcodes[2] = { type: 4, index: 77 }; // RNM(ALPHA)\n    this.rules[5].opcodes[3] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[5].opcodes[4] = { type: 1, children: [5, 6, 7, 8] }; // ALT\n    this.rules[5].opcodes[5] = { type: 4, index: 77 }; // RNM(ALPHA)\n    this.rules[5].opcodes[6] = { type: 4, index: 79 }; // RNM(DIGIT)\n    this.rules[5].opcodes[7] = { type: 6, string: [43] }; // TBS\n    this.rules[5].opcodes[8] = { type: 5, min: 45, max: 46 }; // TRG\n    this.rules[5].opcodes[9] = { type: 7, string: [58, 47, 47] }; // TLS\n    /* domain */\n    this.rules[6].opcodes = [];\n    this.rules[6].opcodes[0] = { type: 4, index: 52 }; // RNM(authority-d)\n    /* address */\n    this.rules[7].opcodes = [];\n    this.rules[7].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[7].opcodes[1] = { type: 7, string: [48, 120] }; // TLS\n    this.rules[7].opcodes[2] = { type: 3, min: 40, max: 40 }; // REP\n    this.rules[7].opcodes[3] = { type: 4, index: 80 }; // RNM(HEXDIG)\n    /* statement */\n    this.rules[8].opcodes = [];\n    this.rules[8].opcodes[0] = { type: 3, min: 1, max: Infinity }; // REP\n    this.rules[8].opcodes[1] = { type: 1, children: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] }; // ALT\n    this.rules[8].opcodes[2] = { type: 5, min: 97, max: 122 }; // TRG\n    this.rules[8].opcodes[3] = { type: 5, min: 65, max: 90 }; // TRG\n    this.rules[8].opcodes[4] = { type: 5, min: 48, max: 57 }; // TRG\n    this.rules[8].opcodes[5] = { type: 5, min: 32, max: 33 }; // TRG\n    this.rules[8].opcodes[6] = { type: 5, min: 35, max: 36 }; // TRG\n    this.rules[8].opcodes[7] = { type: 5, min: 38, max: 59 }; // TRG\n    this.rules[8].opcodes[8] = { type: 6, string: [61] }; // TBS\n    this.rules[8].opcodes[9] = { type: 5, min: 63, max: 64 }; // TRG\n    this.rules[8].opcodes[10] = { type: 6, string: [91] }; // TBS\n    this.rules[8].opcodes[11] = { type: 6, string: [93] }; // TBS\n    this.rules[8].opcodes[12] = { type: 6, string: [95] }; // TBS\n    this.rules[8].opcodes[13] = { type: 6, string: [126] }; // TBS\n    /* empty-statement */\n    this.rules[9].opcodes = [];\n    this.rules[9].opcodes[0] = { type: 2, children: [1, 2, 3] }; // CAT\n    this.rules[9].opcodes[1] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[9].opcodes[2] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[9].opcodes[3] = { type: 4, index: 78 }; // RNM(LF)\n    /* version */\n    this.rules[10].opcodes = [];\n    this.rules[10].opcodes[0] = { type: 7, string: [49] }; // TLS\n    /* nonce */\n    this.rules[11].opcodes = [];\n    this.rules[11].opcodes[0] = { type: 3, min: 8, max: Infinity }; // REP\n    this.rules[11].opcodes[1] = { type: 1, children: [2, 3] }; // ALT\n    this.rules[11].opcodes[2] = { type: 4, index: 77 }; // RNM(ALPHA)\n    this.rules[11].opcodes[3] = { type: 4, index: 79 }; // RNM(DIGIT)\n    /* issued-at */\n    this.rules[12].opcodes = [];\n    this.rules[12].opcodes[0] = { type: 4, index: 76 }; // RNM(date-time)\n    /* expiration-time */\n    this.rules[13].opcodes = [];\n    this.rules[13].opcodes[0] = { type: 4, index: 76 }; // RNM(date-time)\n    /* not-before */\n    this.rules[14].opcodes = [];\n    this.rules[14].opcodes[0] = { type: 4, index: 76 }; // RNM(date-time)\n    /* request-id */\n    this.rules[15].opcodes = [];\n    this.rules[15].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[15].opcodes[1] = { type: 4, index: 62 }; // RNM(pchar)\n    /* chain-id */\n    this.rules[16].opcodes = [];\n    this.rules[16].opcodes[0] = { type: 3, min: 1, max: Infinity }; // REP\n    this.rules[16].opcodes[1] = { type: 4, index: 79 }; // RNM(DIGIT)\n    /* resources */\n    this.rules[17].opcodes = [];\n    this.rules[17].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[17].opcodes[1] = { type: 2, children: [2, 3] }; // CAT\n    this.rules[17].opcodes[2] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[17].opcodes[3] = { type: 4, index: 18 }; // RNM(resource)\n    /* resource */\n    this.rules[18].opcodes = [];\n    this.rules[18].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[18].opcodes[1] = { type: 7, string: [45, 32] }; // TLS\n    this.rules[18].opcodes[2] = { type: 4, index: 47 }; // RNM(URI-r)\n    /* URI */\n    this.rules[19].opcodes = [];\n    this.rules[19].opcodes[0] = { type: 2, children: [1, 2, 3, 4, 8] }; // CAT\n    this.rules[19].opcodes[1] = { type: 4, index: 21 }; // RNM(scheme)\n    this.rules[19].opcodes[2] = { type: 7, string: [58] }; // TLS\n    this.rules[19].opcodes[3] = { type: 4, index: 20 }; // RNM(hier-part)\n    this.rules[19].opcodes[4] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[19].opcodes[5] = { type: 2, children: [6, 7] }; // CAT\n    this.rules[19].opcodes[6] = { type: 7, string: [63] }; // TLS\n    this.rules[19].opcodes[7] = { type: 4, index: 45 }; // RNM(query)\n    this.rules[19].opcodes[8] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[19].opcodes[9] = { type: 2, children: [10, 11] }; // CAT\n    this.rules[19].opcodes[10] = { type: 7, string: [35] }; // TLS\n    this.rules[19].opcodes[11] = { type: 4, index: 46 }; // RNM(fragment)\n    /* hier-part */\n    this.rules[20].opcodes = [];\n    this.rules[20].opcodes[0] = { type: 1, children: [1, 5, 6, 7] }; // ALT\n    this.rules[20].opcodes[1] = { type: 2, children: [2, 3, 4] }; // CAT\n    this.rules[20].opcodes[2] = { type: 7, string: [47, 47] }; // TLS\n    this.rules[20].opcodes[3] = { type: 4, index: 22 }; // RNM(authority)\n    this.rules[20].opcodes[4] = { type: 4, index: 23 }; // RNM(path-abempty)\n    this.rules[20].opcodes[5] = { type: 4, index: 24 }; // RNM(path-absolute)\n    this.rules[20].opcodes[6] = { type: 4, index: 25 }; // RNM(path-rootless)\n    this.rules[20].opcodes[7] = { type: 4, index: 26 }; // RNM(path-empty)\n    /* scheme */\n    this.rules[21].opcodes = [];\n    this.rules[21].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[21].opcodes[1] = { type: 4, index: 77 }; // RNM(ALPHA)\n    this.rules[21].opcodes[2] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[21].opcodes[3] = { type: 1, children: [4, 5, 6, 7] }; // ALT\n    this.rules[21].opcodes[4] = { type: 4, index: 77 }; // RNM(ALPHA)\n    this.rules[21].opcodes[5] = { type: 4, index: 79 }; // RNM(DIGIT)\n    this.rules[21].opcodes[6] = { type: 6, string: [43] }; // TBS\n    this.rules[21].opcodes[7] = { type: 5, min: 45, max: 46 }; // TRG\n    /* authority */\n    this.rules[22].opcodes = [];\n    this.rules[22].opcodes[0] = { type: 2, children: [1, 3, 4] }; // CAT\n    this.rules[22].opcodes[1] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[22].opcodes[2] = { type: 4, index: 27 }; // RNM(userinfo-at)\n    this.rules[22].opcodes[3] = { type: 4, index: 29 }; // RNM(host)\n    this.rules[22].opcodes[4] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[22].opcodes[5] = { type: 2, children: [6, 7] }; // CAT\n    this.rules[22].opcodes[6] = { type: 7, string: [58] }; // TLS\n    this.rules[22].opcodes[7] = { type: 4, index: 44 }; // RNM(port)\n    /* path-abempty */\n    this.rules[23].opcodes = [];\n    this.rules[23].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[23].opcodes[1] = { type: 2, children: [2, 3] }; // CAT\n    this.rules[23].opcodes[2] = { type: 7, string: [47] }; // TLS\n    this.rules[23].opcodes[3] = { type: 4, index: 60 }; // RNM(segment)\n    /* path-absolute */\n    this.rules[24].opcodes = [];\n    this.rules[24].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[24].opcodes[1] = { type: 7, string: [47] }; // TLS\n    this.rules[24].opcodes[2] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[24].opcodes[3] = { type: 2, children: [4, 5] }; // CAT\n    this.rules[24].opcodes[4] = { type: 4, index: 61 }; // RNM(segment-nz)\n    this.rules[24].opcodes[5] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[24].opcodes[6] = { type: 2, children: [7, 8] }; // CAT\n    this.rules[24].opcodes[7] = { type: 7, string: [47] }; // TLS\n    this.rules[24].opcodes[8] = { type: 4, index: 60 }; // RNM(segment)\n    /* path-rootless */\n    this.rules[25].opcodes = [];\n    this.rules[25].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[25].opcodes[1] = { type: 4, index: 61 }; // RNM(segment-nz)\n    this.rules[25].opcodes[2] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[25].opcodes[3] = { type: 2, children: [4, 5] }; // CAT\n    this.rules[25].opcodes[4] = { type: 7, string: [47] }; // TLS\n    this.rules[25].opcodes[5] = { type: 4, index: 60 }; // RNM(segment)\n    /* path-empty */\n    this.rules[26].opcodes = [];\n    this.rules[26].opcodes[0] = { type: 7, string: [] }; // TLS\n    /* userinfo-at */\n    this.rules[27].opcodes = [];\n    this.rules[27].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[27].opcodes[1] = { type: 4, index: 28 }; // RNM(userinfo)\n    this.rules[27].opcodes[2] = { type: 6, string: [64] }; // TBS\n    /* userinfo */\n    this.rules[28].opcodes = [];\n    this.rules[28].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[28].opcodes[1] = { type: 1, children: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] }; // ALT\n    this.rules[28].opcodes[2] = { type: 5, min: 97, max: 122 }; // TRG\n    this.rules[28].opcodes[3] = { type: 5, min: 65, max: 90 }; // TRG\n    this.rules[28].opcodes[4] = { type: 5, min: 48, max: 57 }; // TRG\n    this.rules[28].opcodes[5] = { type: 4, index: 63 }; // RNM(pct-encoded)\n    this.rules[28].opcodes[6] = { type: 6, string: [33] }; // TBS\n    this.rules[28].opcodes[7] = { type: 6, string: [36] }; // TBS\n    this.rules[28].opcodes[8] = { type: 5, min: 38, max: 46 }; // TRG\n    this.rules[28].opcodes[9] = { type: 5, min: 58, max: 59 }; // TRG\n    this.rules[28].opcodes[10] = { type: 6, string: [61] }; // TBS\n    this.rules[28].opcodes[11] = { type: 6, string: [95] }; // TBS\n    this.rules[28].opcodes[12] = { type: 6, string: [126] }; // TBS\n    /* host */\n    this.rules[29].opcodes = [];\n    this.rules[29].opcodes[0] = { type: 1, children: [1, 2, 6] }; // ALT\n    this.rules[29].opcodes[1] = { type: 4, index: 30 }; // RNM(IP-literal)\n    this.rules[29].opcodes[2] = { type: 2, children: [3, 4] }; // CAT\n    this.rules[29].opcodes[3] = { type: 4, index: 39 }; // RNM(IPv4address)\n    this.rules[29].opcodes[4] = { type: 13 }; // NOT\n    this.rules[29].opcodes[5] = { type: 4, index: 43 }; // RNM(reg-name-char)\n    this.rules[29].opcodes[6] = { type: 4, index: 42 }; // RNM(reg-name)\n    /* IP-literal */\n    this.rules[30].opcodes = [];\n    this.rules[30].opcodes[0] = { type: 2, children: [1, 2, 5] }; // CAT\n    this.rules[30].opcodes[1] = { type: 7, string: [91] }; // TLS\n    this.rules[30].opcodes[2] = { type: 1, children: [3, 4] }; // ALT\n    this.rules[30].opcodes[3] = { type: 4, index: 32 }; // RNM(IPv6address)\n    this.rules[30].opcodes[4] = { type: 4, index: 31 }; // RNM(IPvFuture)\n    this.rules[30].opcodes[5] = { type: 7, string: [93] }; // TLS\n    /* IPvFuture */\n    this.rules[31].opcodes = [];\n    this.rules[31].opcodes[0] = { type: 2, children: [1, 2, 4, 5] }; // CAT\n    this.rules[31].opcodes[1] = { type: 7, string: [118] }; // TLS\n    this.rules[31].opcodes[2] = { type: 3, min: 1, max: Infinity }; // REP\n    this.rules[31].opcodes[3] = { type: 4, index: 80 }; // RNM(HEXDIG)\n    this.rules[31].opcodes[4] = { type: 7, string: [46] }; // TLS\n    this.rules[31].opcodes[5] = { type: 3, min: 1, max: Infinity }; // REP\n    this.rules[31].opcodes[6] = { type: 1, children: [7, 8, 9, 10, 11, 12, 13, 14, 15, 16] }; // ALT\n    this.rules[31].opcodes[7] = { type: 5, min: 97, max: 122 }; // TRG\n    this.rules[31].opcodes[8] = { type: 5, min: 65, max: 90 }; // TRG\n    this.rules[31].opcodes[9] = { type: 5, min: 48, max: 57 }; // TRG\n    this.rules[31].opcodes[10] = { type: 6, string: [33] }; // TBS\n    this.rules[31].opcodes[11] = { type: 6, string: [36] }; // TBS\n    this.rules[31].opcodes[12] = { type: 5, min: 38, max: 46 }; // TRG\n    this.rules[31].opcodes[13] = { type: 5, min: 58, max: 59 }; // TRG\n    this.rules[31].opcodes[14] = { type: 6, string: [61] }; // TBS\n    this.rules[31].opcodes[15] = { type: 6, string: [95] }; // TBS\n    this.rules[31].opcodes[16] = { type: 6, string: [126] }; // TBS\n    /* IPv6address */\n    this.rules[32].opcodes = [];\n    this.rules[32].opcodes[0] = { type: 1, children: [1, 2] }; // ALT\n    this.rules[32].opcodes[1] = { type: 4, index: 33 }; // RNM(nodcolon)\n    this.rules[32].opcodes[2] = { type: 4, index: 34 }; // RNM(dcolon)\n    /* nodcolon */\n    this.rules[33].opcodes = [];\n    this.rules[33].opcodes[0] = { type: 2, children: [1, 5] }; // CAT\n    this.rules[33].opcodes[1] = { type: 2, children: [2, 3] }; // CAT\n    this.rules[33].opcodes[2] = { type: 4, index: 37 }; // RNM(h16n)\n    this.rules[33].opcodes[3] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[33].opcodes[4] = { type: 4, index: 38 }; // RNM(h16cn)\n    this.rules[33].opcodes[5] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[33].opcodes[6] = { type: 2, children: [7, 8] }; // CAT\n    this.rules[33].opcodes[7] = { type: 6, string: [58] }; // TBS\n    this.rules[33].opcodes[8] = { type: 4, index: 39 }; // RNM(IPv4address)\n    /* dcolon */\n    this.rules[34].opcodes = [];\n    this.rules[34].opcodes[0] = { type: 2, children: [1, 6, 7] }; // CAT\n    this.rules[34].opcodes[1] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[34].opcodes[2] = { type: 2, children: [3, 4] }; // CAT\n    this.rules[34].opcodes[3] = { type: 4, index: 35 }; // RNM(h16)\n    this.rules[34].opcodes[4] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[34].opcodes[5] = { type: 4, index: 36 }; // RNM(h16c)\n    this.rules[34].opcodes[6] = { type: 6, string: [58, 58] }; // TBS\n    this.rules[34].opcodes[7] = { type: 1, children: [8, 17] }; // ALT\n    this.rules[34].opcodes[8] = { type: 2, children: [9, 13] }; // CAT\n    this.rules[34].opcodes[9] = { type: 2, children: [10, 11] }; // CAT\n    this.rules[34].opcodes[10] = { type: 4, index: 37 }; // RNM(h16n)\n    this.rules[34].opcodes[11] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[34].opcodes[12] = { type: 4, index: 38 }; // RNM(h16cn)\n    this.rules[34].opcodes[13] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[34].opcodes[14] = { type: 2, children: [15, 16] }; // CAT\n    this.rules[34].opcodes[15] = { type: 6, string: [58] }; // TBS\n    this.rules[34].opcodes[16] = { type: 4, index: 39 }; // RNM(IPv4address)\n    this.rules[34].opcodes[17] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[34].opcodes[18] = { type: 4, index: 39 }; // RNM(IPv4address)\n    /* h16 */\n    this.rules[35].opcodes = [];\n    this.rules[35].opcodes[0] = { type: 3, min: 1, max: 4 }; // REP\n    this.rules[35].opcodes[1] = { type: 4, index: 80 }; // RNM(HEXDIG)\n    /* h16c */\n    this.rules[36].opcodes = [];\n    this.rules[36].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[36].opcodes[1] = { type: 6, string: [58] }; // TBS\n    this.rules[36].opcodes[2] = { type: 3, min: 1, max: 4 }; // REP\n    this.rules[36].opcodes[3] = { type: 4, index: 80 }; // RNM(HEXDIG)\n    /* h16n */\n    this.rules[37].opcodes = [];\n    this.rules[37].opcodes[0] = { type: 2, children: [1, 3] }; // CAT\n    this.rules[37].opcodes[1] = { type: 3, min: 1, max: 4 }; // REP\n    this.rules[37].opcodes[2] = { type: 4, index: 80 }; // RNM(HEXDIG)\n    this.rules[37].opcodes[3] = { type: 13 }; // NOT\n    this.rules[37].opcodes[4] = { type: 6, string: [46] }; // TBS\n    /* h16cn */\n    this.rules[38].opcodes = [];\n    this.rules[38].opcodes[0] = { type: 2, children: [1, 2, 4] }; // CAT\n    this.rules[38].opcodes[1] = { type: 6, string: [58] }; // TBS\n    this.rules[38].opcodes[2] = { type: 3, min: 1, max: 4 }; // REP\n    this.rules[38].opcodes[3] = { type: 4, index: 80 }; // RNM(HEXDIG)\n    this.rules[38].opcodes[4] = { type: 13 }; // NOT\n    this.rules[38].opcodes[5] = { type: 6, string: [46] }; // TBS\n    /* IPv4address */\n    this.rules[39].opcodes = [];\n    this.rules[39].opcodes[0] = { type: 2, children: [1, 2, 3, 4, 5, 6, 7] }; // CAT\n    this.rules[39].opcodes[1] = { type: 4, index: 40 }; // RNM(dec-octet)\n    this.rules[39].opcodes[2] = { type: 7, string: [46] }; // TLS\n    this.rules[39].opcodes[3] = { type: 4, index: 40 }; // RNM(dec-octet)\n    this.rules[39].opcodes[4] = { type: 7, string: [46] }; // TLS\n    this.rules[39].opcodes[5] = { type: 4, index: 40 }; // RNM(dec-octet)\n    this.rules[39].opcodes[6] = { type: 7, string: [46] }; // TLS\n    this.rules[39].opcodes[7] = { type: 4, index: 40 }; // RNM(dec-octet)\n    /* dec-octet */\n    this.rules[40].opcodes = [];\n    this.rules[40].opcodes[0] = { type: 3, min: 0, max: 3 }; // REP\n    this.rules[40].opcodes[1] = { type: 4, index: 41 }; // RNM(dec-digit)\n    /* dec-digit */\n    this.rules[41].opcodes = [];\n    this.rules[41].opcodes[0] = { type: 5, min: 48, max: 57 }; // TRG\n    /* reg-name */\n    this.rules[42].opcodes = [];\n    this.rules[42].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[42].opcodes[1] = { type: 4, index: 43 }; // RNM(reg-name-char)\n    /* reg-name-char */\n    this.rules[43].opcodes = [];\n    this.rules[43].opcodes[0] = { type: 1, children: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] }; // ALT\n    this.rules[43].opcodes[1] = { type: 5, min: 97, max: 122 }; // TRG\n    this.rules[43].opcodes[2] = { type: 5, min: 65, max: 90 }; // TRG\n    this.rules[43].opcodes[3] = { type: 5, min: 48, max: 57 }; // TRG\n    this.rules[43].opcodes[4] = { type: 4, index: 63 }; // RNM(pct-encoded)\n    this.rules[43].opcodes[5] = { type: 6, string: [33] }; // TBS\n    this.rules[43].opcodes[6] = { type: 6, string: [36] }; // TBS\n    this.rules[43].opcodes[7] = { type: 5, min: 38, max: 46 }; // TRG\n    this.rules[43].opcodes[8] = { type: 6, string: [59] }; // TBS\n    this.rules[43].opcodes[9] = { type: 6, string: [61] }; // TBS\n    this.rules[43].opcodes[10] = { type: 6, string: [95] }; // TBS\n    this.rules[43].opcodes[11] = { type: 6, string: [126] }; // TBS\n    /* port */\n    this.rules[44].opcodes = [];\n    this.rules[44].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[44].opcodes[1] = { type: 4, index: 79 }; // RNM(DIGIT)\n    /* query */\n    this.rules[45].opcodes = [];\n    this.rules[45].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[45].opcodes[1] = { type: 1, children: [2, 3, 4] }; // ALT\n    this.rules[45].opcodes[2] = { type: 4, index: 62 }; // RNM(pchar)\n    this.rules[45].opcodes[3] = { type: 6, string: [47] }; // TBS\n    this.rules[45].opcodes[4] = { type: 6, string: [63] }; // TBS\n    /* fragment */\n    this.rules[46].opcodes = [];\n    this.rules[46].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[46].opcodes[1] = { type: 1, children: [2, 3, 4] }; // ALT\n    this.rules[46].opcodes[2] = { type: 4, index: 62 }; // RNM(pchar)\n    this.rules[46].opcodes[3] = { type: 6, string: [47] }; // TBS\n    this.rules[46].opcodes[4] = { type: 6, string: [63] }; // TBS\n    /* URI-r */\n    this.rules[47].opcodes = [];\n    this.rules[47].opcodes[0] = { type: 2, children: [1, 2, 3, 4, 8] }; // CAT\n    this.rules[47].opcodes[1] = { type: 4, index: 49 }; // RNM(scheme-r)\n    this.rules[47].opcodes[2] = { type: 7, string: [58] }; // TLS\n    this.rules[47].opcodes[3] = { type: 4, index: 48 }; // RNM(hier-part-r)\n    this.rules[47].opcodes[4] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[47].opcodes[5] = { type: 2, children: [6, 7] }; // CAT\n    this.rules[47].opcodes[6] = { type: 7, string: [63] }; // TLS\n    this.rules[47].opcodes[7] = { type: 4, index: 50 }; // RNM(query-r)\n    this.rules[47].opcodes[8] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[47].opcodes[9] = { type: 2, children: [10, 11] }; // CAT\n    this.rules[47].opcodes[10] = { type: 7, string: [35] }; // TLS\n    this.rules[47].opcodes[11] = { type: 4, index: 51 }; // RNM(fragment-r)\n    /* hier-part-r */\n    this.rules[48].opcodes = [];\n    this.rules[48].opcodes[0] = { type: 1, children: [1, 5, 6, 7] }; // ALT\n    this.rules[48].opcodes[1] = { type: 2, children: [2, 3, 4] }; // CAT\n    this.rules[48].opcodes[2] = { type: 7, string: [47, 47] }; // TLS\n    this.rules[48].opcodes[3] = { type: 4, index: 52 }; // RNM(authority-d)\n    this.rules[48].opcodes[4] = { type: 4, index: 56 }; // RNM(path-abempty-r)\n    this.rules[48].opcodes[5] = { type: 4, index: 57 }; // RNM(path-absolute-r)\n    this.rules[48].opcodes[6] = { type: 4, index: 58 }; // RNM(path-rootless-r)\n    this.rules[48].opcodes[7] = { type: 4, index: 59 }; // RNM(path-empty-r)\n    /* scheme-r */\n    this.rules[49].opcodes = [];\n    this.rules[49].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[49].opcodes[1] = { type: 4, index: 77 }; // RNM(ALPHA)\n    this.rules[49].opcodes[2] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[49].opcodes[3] = { type: 1, children: [4, 5, 6, 7] }; // ALT\n    this.rules[49].opcodes[4] = { type: 4, index: 77 }; // RNM(ALPHA)\n    this.rules[49].opcodes[5] = { type: 4, index: 79 }; // RNM(DIGIT)\n    this.rules[49].opcodes[6] = { type: 6, string: [43] }; // TBS\n    this.rules[49].opcodes[7] = { type: 5, min: 45, max: 46 }; // TRG\n    /* query-r */\n    this.rules[50].opcodes = [];\n    this.rules[50].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[50].opcodes[1] = { type: 1, children: [2, 3, 4] }; // ALT\n    this.rules[50].opcodes[2] = { type: 4, index: 62 }; // RNM(pchar)\n    this.rules[50].opcodes[3] = { type: 6, string: [47] }; // TBS\n    this.rules[50].opcodes[4] = { type: 6, string: [63] }; // TBS\n    /* fragment-r */\n    this.rules[51].opcodes = [];\n    this.rules[51].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[51].opcodes[1] = { type: 1, children: [2, 3, 4] }; // ALT\n    this.rules[51].opcodes[2] = { type: 4, index: 62 }; // RNM(pchar)\n    this.rules[51].opcodes[3] = { type: 6, string: [47] }; // TBS\n    this.rules[51].opcodes[4] = { type: 6, string: [63] }; // TBS\n    /* authority-d */\n    this.rules[52].opcodes = [];\n    this.rules[52].opcodes[0] = { type: 2, children: [1, 5, 6] }; // CAT\n    this.rules[52].opcodes[1] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[52].opcodes[2] = { type: 2, children: [3, 4] }; // CAT\n    this.rules[52].opcodes[3] = { type: 4, index: 53 }; // RNM(userinfo-d)\n    this.rules[52].opcodes[4] = { type: 6, string: [64] }; // TBS\n    this.rules[52].opcodes[5] = { type: 4, index: 54 }; // RNM(host-d)\n    this.rules[52].opcodes[6] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[52].opcodes[7] = { type: 2, children: [8, 9] }; // CAT\n    this.rules[52].opcodes[8] = { type: 7, string: [58] }; // TLS\n    this.rules[52].opcodes[9] = { type: 4, index: 55 }; // RNM(port-d)\n    /* userinfo-d */\n    this.rules[53].opcodes = [];\n    this.rules[53].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[53].opcodes[1] = { type: 1, children: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] }; // ALT\n    this.rules[53].opcodes[2] = { type: 5, min: 97, max: 122 }; // TRG\n    this.rules[53].opcodes[3] = { type: 5, min: 65, max: 90 }; // TRG\n    this.rules[53].opcodes[4] = { type: 5, min: 48, max: 57 }; // TRG\n    this.rules[53].opcodes[5] = { type: 4, index: 63 }; // RNM(pct-encoded)\n    this.rules[53].opcodes[6] = { type: 6, string: [33] }; // TBS\n    this.rules[53].opcodes[7] = { type: 6, string: [36] }; // TBS\n    this.rules[53].opcodes[8] = { type: 5, min: 38, max: 46 }; // TRG\n    this.rules[53].opcodes[9] = { type: 5, min: 58, max: 59 }; // TRG\n    this.rules[53].opcodes[10] = { type: 6, string: [61] }; // TBS\n    this.rules[53].opcodes[11] = { type: 6, string: [95] }; // TBS\n    this.rules[53].opcodes[12] = { type: 6, string: [126] }; // TBS\n    /* host-d */\n    this.rules[54].opcodes = [];\n    this.rules[54].opcodes[0] = { type: 1, children: [1, 2, 6] }; // ALT\n    this.rules[54].opcodes[1] = { type: 4, index: 30 }; // RNM(IP-literal)\n    this.rules[54].opcodes[2] = { type: 2, children: [3, 4] }; // CAT\n    this.rules[54].opcodes[3] = { type: 4, index: 39 }; // RNM(IPv4address)\n    this.rules[54].opcodes[4] = { type: 13 }; // NOT\n    this.rules[54].opcodes[5] = { type: 4, index: 43 }; // RNM(reg-name-char)\n    this.rules[54].opcodes[6] = { type: 4, index: 42 }; // RNM(reg-name)\n    /* port-d */\n    this.rules[55].opcodes = [];\n    this.rules[55].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[55].opcodes[1] = { type: 4, index: 79 }; // RNM(DIGIT)\n    /* path-abempty-r */\n    this.rules[56].opcodes = [];\n    this.rules[56].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[56].opcodes[1] = { type: 2, children: [2, 3] }; // CAT\n    this.rules[56].opcodes[2] = { type: 7, string: [47] }; // TLS\n    this.rules[56].opcodes[3] = { type: 4, index: 60 }; // RNM(segment)\n    /* path-absolute-r */\n    this.rules[57].opcodes = [];\n    this.rules[57].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[57].opcodes[1] = { type: 7, string: [47] }; // TLS\n    this.rules[57].opcodes[2] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[57].opcodes[3] = { type: 2, children: [4, 5] }; // CAT\n    this.rules[57].opcodes[4] = { type: 4, index: 61 }; // RNM(segment-nz)\n    this.rules[57].opcodes[5] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[57].opcodes[6] = { type: 2, children: [7, 8] }; // CAT\n    this.rules[57].opcodes[7] = { type: 7, string: [47] }; // TLS\n    this.rules[57].opcodes[8] = { type: 4, index: 60 }; // RNM(segment)\n    /* path-rootless-r */\n    this.rules[58].opcodes = [];\n    this.rules[58].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[58].opcodes[1] = { type: 4, index: 61 }; // RNM(segment-nz)\n    this.rules[58].opcodes[2] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[58].opcodes[3] = { type: 2, children: [4, 5] }; // CAT\n    this.rules[58].opcodes[4] = { type: 7, string: [47] }; // TLS\n    this.rules[58].opcodes[5] = { type: 4, index: 60 }; // RNM(segment)\n    /* path-empty-r */\n    this.rules[59].opcodes = [];\n    this.rules[59].opcodes[0] = { type: 7, string: [] }; // TLS\n    /* segment */\n    this.rules[60].opcodes = [];\n    this.rules[60].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[60].opcodes[1] = { type: 4, index: 62 }; // RNM(pchar)\n    /* segment-nz */\n    this.rules[61].opcodes = [];\n    this.rules[61].opcodes[0] = { type: 3, min: 1, max: Infinity }; // REP\n    this.rules[61].opcodes[1] = { type: 4, index: 62 }; // RNM(pchar)\n    /* pchar */\n    this.rules[62].opcodes = [];\n    this.rules[62].opcodes[0] = { type: 1, children: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] }; // ALT\n    this.rules[62].opcodes[1] = { type: 5, min: 97, max: 122 }; // TRG\n    this.rules[62].opcodes[2] = { type: 5, min: 65, max: 90 }; // TRG\n    this.rules[62].opcodes[3] = { type: 5, min: 48, max: 57 }; // TRG\n    this.rules[62].opcodes[4] = { type: 4, index: 63 }; // RNM(pct-encoded)\n    this.rules[62].opcodes[5] = { type: 6, string: [33] }; // TBS\n    this.rules[62].opcodes[6] = { type: 6, string: [36] }; // TBS\n    this.rules[62].opcodes[7] = { type: 5, min: 38, max: 46 }; // TRG\n    this.rules[62].opcodes[8] = { type: 5, min: 58, max: 59 }; // TRG\n    this.rules[62].opcodes[9] = { type: 6, string: [61] }; // TBS\n    this.rules[62].opcodes[10] = { type: 6, string: [64] }; // TBS\n    this.rules[62].opcodes[11] = { type: 6, string: [95] }; // TBS\n    this.rules[62].opcodes[12] = { type: 6, string: [126] }; // TBS\n    /* pct-encoded */\n    this.rules[63].opcodes = [];\n    this.rules[63].opcodes[0] = { type: 2, children: [1, 2, 3] }; // CAT\n    this.rules[63].opcodes[1] = { type: 6, string: [37] }; // TBS\n    this.rules[63].opcodes[2] = { type: 4, index: 80 }; // RNM(HEXDIG)\n    this.rules[63].opcodes[3] = { type: 4, index: 80 }; // RNM(HEXDIG)\n    /* date-fullyear */\n    this.rules[64].opcodes = [];\n    this.rules[64].opcodes[0] = { type: 3, min: 4, max: 4 }; // REP\n    this.rules[64].opcodes[1] = { type: 4, index: 79 }; // RNM(DIGIT)\n    /* date-month */\n    this.rules[65].opcodes = [];\n    this.rules[65].opcodes[0] = { type: 3, min: 2, max: 2 }; // REP\n    this.rules[65].opcodes[1] = { type: 4, index: 79 }; // RNM(DIGIT)\n    /* date-mday */\n    this.rules[66].opcodes = [];\n    this.rules[66].opcodes[0] = { type: 3, min: 2, max: 2 }; // REP\n    this.rules[66].opcodes[1] = { type: 4, index: 79 }; // RNM(DIGIT)\n    /* time-hour */\n    this.rules[67].opcodes = [];\n    this.rules[67].opcodes[0] = { type: 3, min: 2, max: 2 }; // REP\n    this.rules[67].opcodes[1] = { type: 4, index: 79 }; // RNM(DIGIT)\n    /* time-minute */\n    this.rules[68].opcodes = [];\n    this.rules[68].opcodes[0] = { type: 3, min: 2, max: 2 }; // REP\n    this.rules[68].opcodes[1] = { type: 4, index: 79 }; // RNM(DIGIT)\n    /* time-second */\n    this.rules[69].opcodes = [];\n    this.rules[69].opcodes[0] = { type: 3, min: 2, max: 2 }; // REP\n    this.rules[69].opcodes[1] = { type: 4, index: 79 }; // RNM(DIGIT)\n    /* time-secfrac */\n    this.rules[70].opcodes = [];\n    this.rules[70].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[70].opcodes[1] = { type: 7, string: [46] }; // TLS\n    this.rules[70].opcodes[2] = { type: 3, min: 1, max: Infinity }; // REP\n    this.rules[70].opcodes[3] = { type: 4, index: 79 }; // RNM(DIGIT)\n    /* time-numoffset */\n    this.rules[71].opcodes = [];\n    this.rules[71].opcodes[0] = { type: 2, children: [1, 4, 5, 6] }; // CAT\n    this.rules[71].opcodes[1] = { type: 1, children: [2, 3] }; // ALT\n    this.rules[71].opcodes[2] = { type: 7, string: [43] }; // TLS\n    this.rules[71].opcodes[3] = { type: 7, string: [45] }; // TLS\n    this.rules[71].opcodes[4] = { type: 4, index: 67 }; // RNM(time-hour)\n    this.rules[71].opcodes[5] = { type: 7, string: [58] }; // TLS\n    this.rules[71].opcodes[6] = { type: 4, index: 68 }; // RNM(time-minute)\n    /* time-offset */\n    this.rules[72].opcodes = [];\n    this.rules[72].opcodes[0] = { type: 1, children: [1, 2] }; // ALT\n    this.rules[72].opcodes[1] = { type: 7, string: [122] }; // TLS\n    this.rules[72].opcodes[2] = { type: 4, index: 71 }; // RNM(time-numoffset)\n    /* partial-time */\n    this.rules[73].opcodes = [];\n    this.rules[73].opcodes[0] = { type: 2, children: [1, 2, 3, 4, 5, 6] }; // CAT\n    this.rules[73].opcodes[1] = { type: 4, index: 67 }; // RNM(time-hour)\n    this.rules[73].opcodes[2] = { type: 7, string: [58] }; // TLS\n    this.rules[73].opcodes[3] = { type: 4, index: 68 }; // RNM(time-minute)\n    this.rules[73].opcodes[4] = { type: 7, string: [58] }; // TLS\n    this.rules[73].opcodes[5] = { type: 4, index: 69 }; // RNM(time-second)\n    this.rules[73].opcodes[6] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[73].opcodes[7] = { type: 4, index: 70 }; // RNM(time-secfrac)\n    /* full-date */\n    this.rules[74].opcodes = [];\n    this.rules[74].opcodes[0] = { type: 2, children: [1, 2, 3, 4, 5] }; // CAT\n    this.rules[74].opcodes[1] = { type: 4, index: 64 }; // RNM(date-fullyear)\n    this.rules[74].opcodes[2] = { type: 7, string: [45] }; // TLS\n    this.rules[74].opcodes[3] = { type: 4, index: 65 }; // RNM(date-month)\n    this.rules[74].opcodes[4] = { type: 7, string: [45] }; // TLS\n    this.rules[74].opcodes[5] = { type: 4, index: 66 }; // RNM(date-mday)\n    /* full-time */\n    this.rules[75].opcodes = [];\n    this.rules[75].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[75].opcodes[1] = { type: 4, index: 73 }; // RNM(partial-time)\n    this.rules[75].opcodes[2] = { type: 4, index: 72 }; // RNM(time-offset)\n    /* date-time */\n    this.rules[76].opcodes = [];\n    this.rules[76].opcodes[0] = { type: 2, children: [1, 2, 3] }; // CAT\n    this.rules[76].opcodes[1] = { type: 4, index: 74 }; // RNM(full-date)\n    this.rules[76].opcodes[2] = { type: 7, string: [116] }; // TLS\n    this.rules[76].opcodes[3] = { type: 4, index: 75 }; // RNM(full-time)\n    /* ALPHA */\n    this.rules[77].opcodes = [];\n    this.rules[77].opcodes[0] = { type: 1, children: [1, 2] }; // ALT\n    this.rules[77].opcodes[1] = { type: 5, min: 65, max: 90 }; // TRG\n    this.rules[77].opcodes[2] = { type: 5, min: 97, max: 122 }; // TRG\n    /* LF */\n    this.rules[78].opcodes = [];\n    this.rules[78].opcodes[0] = { type: 6, string: [10] }; // TBS\n    /* DIGIT */\n    this.rules[79].opcodes = [];\n    this.rules[79].opcodes[0] = { type: 5, min: 48, max: 57 }; // TRG\n    /* HEXDIG */\n    this.rules[80].opcodes = [];\n    this.rules[80].opcodes[0] = { type: 1, children: [1, 2, 3] }; // ALT\n    this.rules[80].opcodes[1] = { type: 5, min: 48, max: 57 }; // TRG\n    this.rules[80].opcodes[2] = { type: 5, min: 65, max: 70 }; // TRG\n    this.rules[80].opcodes[3] = { type: 5, min: 97, max: 102 }; // TRG\n    // The `toString()` function will display the original grammar file(s) that produced these opcodes.\n    this.toString = function toString() {\n        let str = \"\";\n        str += \"; LDT 05/06/2024 \\n\";\n        str += \"; modified in several significant ways\\n\";\n        str += \"; 1) Literal strings are replaced with numbers and ranges (%d32 & %d32-126, etc.) when possible.\\n\";\n        str += \";    TRB and especially TRG operators are much more efficient than TLS operators.\\n\";\n        str += \"; 2) Two rules, authority and URI, are used multiple times in different contexts. These rules will be reproduced and renamed\\n\";\n        str += \";    in order to a) recognize the context and b) remove unneccary callback functions for certain contexts.\\n\";\n        str += \";    This will simiplify recognizing contexts AND remove unneccesary callbacks\\n\";\n        str += \"; 2.a) domain is defined as authority-d which is identical to authority except that there will be no\\n\";\n        str += \";      callback functions defined on authority-d or any of its *-d components.\\n\";\n        str += \"; 2.b) The resource URI is defined as URI-r and its components defined as *-r.\\n\";\n        str += \";      In this way, callback functions can be defined on URI and is components while\\n\";\n        str += \";      leaving URI-r to be parsed identically with no unnecessary callback functions to slow it down.\\n\";\n        str += \"; 3) IPv6address does not work because of APG's \\\"first-success disambiguation\\\" and \\\"greedy\\\" repetitions.\\n\";\n        str += \";    IPv6address redefined and validations moved to callback functions (semantic vs syntactic validation)\\n\";\n        str += \";    Redefinition requires negative look-ahead operators, https://en.wikipedia.org/wiki/Syntactic_predicate\\n\";\n        str += \";    That is SABNF instead of simple ABNF.\\n\";\n        str += \"; 4) IPv4address fails because of \\\"first-success disambiguation\\\".\\n\";\n        str += \";    This could be fixed with rearrangement of the alternative terms. However, it would still not\\n\";\n        str += \";    accept zero-padded (leading zeros) decimal octets.\\n\";\n        str += \";    Therefore, IPv4address is also done with callback functions and semantic validation.\\n\";\n        str += \"; 5) The negative look-ahead operator is also needed in the definition of host to\\n\";\n        str += \";    prevent failure with a reg-name that begins with an IPv4 address.\\n\";\n        str += \"; 6) NOTE: host = 1.1.1.256 is a valid host name even though it is an invalid IPv4address.\\n\";\n        str += \";          The IPv4address alternative fails but the reg-name alternative succeeds.\\n\";\n        str += \"; 7) The Ethereum spec (https://eips.ethereum.org/EIPS/eip-4361) message format ABNF\\n\";\n        str += \";    allows for empty statements. Because of the \\\"first success disambiguation\\\" of APG\\n\";\n        str += \";    the an explicit \\\"empty-statement\\\" rule is required to match the spec's intent.\\n\";\n        str += \"\\n\";\n        str += \"\\n\";\n        str += \"sign-in-with-ethereum =\\n\";\n        str += \"    oscheme domain %s\\\" wants you to sign in with your Ethereum account:\\\" LF\\n\";\n        str += \"    address LF\\n\";\n        str += \"    ((LF statement LF LF) / empty-statement / (LF LF))\\n\";\n        str += \"    %s\\\"URI: \\\" URI LF\\n\";\n        str += \"    %s\\\"Version: \\\" version LF\\n\";\n        str += \"    %s\\\"Chain ID: \\\" chain-id LF\\n\";\n        str += \"    %s\\\"Nonce: \\\" nonce LF\\n\";\n        str += \"    %s\\\"Issued At: \\\" issued-at\\n\";\n        str += \"    [ LF ex-title expiration-time ]\\n\";\n        str += \"    [ LF nb-title not-before ]\\n\";\n        str += \"    [ LF ri-title request-id ]\\n\";\n        str += \"    [ LF re-title resources ]\\n\";\n        str += \"ex-title        = %s\\\"Expiration Time: \\\"\\n\";\n        str += \"nb-title        = %s\\\"Not Before: \\\"\\n\";\n        str += \"ri-title        = %s\\\"Request ID: \\\"\\n\";\n        str += \"re-title        = %s\\\"Resources:\\\"\\n\";\n        str += \"oscheme         = [ ALPHA *( ALPHA / DIGIT / %d43 / %d45-46 ) \\\"://\\\" ]\\n\";\n        str += \"domain          = authority-d\\n\";\n        str += \"address         = \\\"0x\\\" 40*40HEXDIG\\n\";\n        str += \"    ; Must also conform to captilization\\n\";\n        str += \"    ; checksum encoding specified in EIP-55\\n\";\n        str += \"    ; where applicable (EOAs).\\n\";\n        str += \"\\n\";\n        str += \"statement       = 1*( %d97-122 / %d65-90 / %d48-57 / %d32-33 / %d35-36 / %d38-59 / %d61 / %d63-64 / %d91 / %d93 / %d95 / %d126)\\n\";\n        str += \"    ; The purpose is to exclude LF (line breaks).\\n\";\n        str += \"    ; LDT 10/04/2023: Do you mean %d32-126? All printing characters\\n\";\n        str += \"empty-statement = LF LF LF\\n\";\n        str += \"version         = \\\"1\\\"\\n\";\n        str += \"nonce           = 8*( ALPHA / DIGIT )\\n\";\n        str += \"issued-at       = date-time\\n\";\n        str += \"expiration-time = date-time\\n\";\n        str += \"not-before      = date-time\\n\";\n        str += \"request-id      = *pchar\\n\";\n        str += \"chain-id        = 1*DIGIT\\n\";\n        str += \"    ; See EIP-155 for valid CHAIN_IDs.\\n\";\n        str += \"resources       = *( LF resource )\\n\";\n        str += \"resource        = \\\"- \\\" URI-r\\n\";\n        str += \"\\n\";\n        str += \"; ------------------------------------------------------------------------------\\n\";\n        str += \"; RFC 3986\\n\";\n        str += \"\\n\";\n        str += \"URI           = scheme \\\":\\\" hier-part [ \\\"?\\\" query ] [ \\\"#\\\" fragment ]\\n\";\n        str += \"hier-part     = \\\"//\\\" authority path-abempty\\n\";\n        str += \"              / path-absolute\\n\";\n        str += \"              / path-rootless\\n\";\n        str += \"              / path-empty\\n\";\n        str += \"scheme        = ALPHA *( ALPHA / DIGIT / %d43 / %d45-46 )\\n\";\n        str += \"authority     = [ userinfo-at ] host [ \\\":\\\" port ]\\n\";\n        str += \"path-abempty  = *( \\\"/\\\" segment )\\n\";\n        str += \"path-absolute = \\\"/\\\" [ segment-nz *( \\\"/\\\" segment ) ]\\n\";\n        str += \"path-rootless = segment-nz *( \\\"/\\\" segment )\\n\";\n        str += \"path-empty    = \\\"\\\"\\n\";\n        str += \"userinfo-at   = userinfo %d64\\n\";\n        str += \"                ; userinfo redefined to include the \\\"@\\\" so that it will fail without it\\n\";\n        str += \"                ; otherwise userinfo can match host and then the parser will backtrack\\n\";\n        str += \"                ; incorrectly keeping the captured userinfo phrase\\n\";\n        str += \"userinfo      = *(%d97-122 / %d65-90 / %d48-57 / pct-encoded / %d33 / %d36 / %d38-46 / %d58-59 / %d61 / %d95 / %d126)\\n\";\n        str += \"host          = IP-literal / (IPv4address !reg-name-char) / reg-name\\n\";\n        str += \"                ; negative look-ahead required to prevent IPv4address from being recognized as first part of reg-name\\n\";\n        str += \"                ; same fix as https://github.com/garycourt/uri-js/issues/4\\n\";\n        str += \"IP-literal    = \\\"[\\\" ( IPv6address / IPvFuture  ) \\\"]\\\"\\n\";\n        str += \"IPvFuture     = \\\"v\\\" 1*HEXDIG \\\".\\\" 1*( %d97-122 / %d65-90 / %d48-57 / %d33 / %d36 /%d38-46 / %d58-59 /%d61 /%d95 / %d126 )\\n\";\n        str += \"IPv6address   = nodcolon / dcolon\\n\";\n        str += \"nodcolon      = (h16n *h16cn) [%d58 IPv4address]\\n\";\n        str += \"dcolon        = [h16 *h16c] %d58.58 (((h16n *h16cn) [%d58 IPv4address]) / [IPv4address])\\n\";\n        str += \"h16           = 1*4HEXDIG\\n\";\n        str += \"h16c          = %d58 1*4HEXDIG\\n\";\n        str += \"h16n          = 1*4HEXDIG !%d46\\n\";\n        str += \"h16cn         = %d58 1*4HEXDIG !%d46\\n\";\n        str += \"IPv4address   = dec-octet \\\".\\\" dec-octet \\\".\\\" dec-octet \\\".\\\" dec-octet\\n\";\n        str += \"; Here we will will use callback functions to evaluate and validate the (possibly zero-padded) dec-octet.\\n\";\n        str += \"dec-octet     =  *3dec-digit\\n\";\n        str += \"dec-digit     = %d48-57\\n\";\n        str += \"reg-name      = *reg-name-char\\n\";\n        str += \"reg-name-char = %d97-122 / %d65-90 / %d48-57 / pct-encoded / %d33 / %d36 / %d38-46 / %d59 / %d61 /%d95 / %d126\\n\";\n        str += \"port          = *DIGIT\\n\";\n        str += \"query         = *(pchar / %d47 / %d63)\\n\";\n        str += \"fragment      = *(pchar / %d47 / %d63)\\n\";\n        str += \"\\n\";\n        str += \"; URI-r is a redefiniton of URI but without the callback functions attached to it\\n\";\n        str += \"; it reuses athority-d from domain \\n\";\n        str += \"URI-r         = scheme-r \\\":\\\" hier-part-r [ \\\"?\\\" query-r ] [ \\\"#\\\" fragment-r ]\\n\";\n        str += \"hier-part-r   = \\\"//\\\" authority-d path-abempty-r\\n\";\n        str += \"              / path-absolute-r\\n\";\n        str += \"              / path-rootless-r\\n\";\n        str += \"              / path-empty-r\\n\";\n        str += \"scheme-r      = ALPHA *( ALPHA / DIGIT / %d43 / %d45-46 )\\n\";\n        str += \"query-r       = *(pchar / %d47 / %d63)\\n\";\n        str += \"fragment-r    = *(pchar / %d47 / %d63)\\n\";\n        str += \"\\n\";\n        str += \"; authority-d is a redefinition of authority for capturing the domian phrase\\n\";\n        str += \"; but without callback functions \\n\";\n        str += \"; it is reused for URI- for the same reason               \\n\";\n        str += \"authority-d   = [ userinfo-d %d64 ] host-d [ \\\":\\\" port-d ]\\n\";\n        str += \"userinfo-d    = *(%d97-122 / %d65-90 / %d48-57 / pct-encoded / %d33 / %d36 / %d38-46 / %d58-59 / %d61 / %d95 / %d126)\\n\";\n        str += \"host-d        = IP-literal / (IPv4address !reg-name-char) / reg-name\\n\";\n        str += \"port-d        = *DIGIT\\n\";\n        str += \"\\n\";\n        str += \"; for use with URI-r\\n\";\n        str += \"path-abempty-r  = *( \\\"/\\\" segment )\\n\";\n        str += \"path-absolute-r = \\\"/\\\" [ segment-nz *( \\\"/\\\" segment ) ]\\n\";\n        str += \"path-rootless-r = segment-nz *( \\\"/\\\" segment )\\n\";\n        str += \"path-empty-r    = \\\"\\\"\\n\";\n        str += \"segment       = *pchar\\n\";\n        str += \"segment-nz    = 1*pchar\\n\";\n        str += \"pchar         = (%d97-122 / %d65-90 / %d48-57 / pct-encoded / %d33 / %d36 / %d38-46 /%d58-59 / %d61 / %d64 / %d95 / %d126)\\n\";\n        str += \"pct-encoded   = %d37 HEXDIG HEXDIG\\n\";\n        str += \"\\n\";\n        str += \"; no longer needed - expanded for all usage for fewer branches in the parse there\\n\";\n        str += \"; and more efficient use of the TBS & TRG operators in place of TLS and rule names\\n\";\n        str += \"; does not work with APG probably because of \\\"first-success disambiguation\\\" and greedy repetitions.\\n\";\n        str += \"; will replace with semantic checking of valid number of h16s\\n\";\n        str += \";IPv6address   =                            6( h16 \\\":\\\" ) ls32\\n\";\n        str += \";              /                       \\\"::\\\" 5( h16 \\\":\\\" ) ls32\\n\";\n        str += \";              / [               h16 ] \\\"::\\\" 4( h16 \\\":\\\" ) ls32\\n\";\n        str += \";              / [ *1( h16 \\\":\\\" ) h16 ] \\\"::\\\" 3( h16 \\\":\\\" ) ls32\\n\";\n        str += \";              / [ *2( h16 \\\":\\\" ) h16 ] \\\"::\\\" 2( h16 \\\":\\\" ) ls32\\n\";\n        str += \";              / [ *3( h16 \\\":\\\" ) h16 ] \\\"::\\\"    h16 \\\":\\\"   ls32\\n\";\n        str += \";              / [ *4( h16 \\\":\\\" ) h16 ] \\\"::\\\"              ls32\\n\";\n        str += \";              / [ *5( h16 \\\":\\\" ) h16 ] \\\"::\\\"              h16\\n\";\n        str += \";              / [ *6( h16 \\\":\\\" ) h16 ] \\\"::\\\"\\n\";\n        str += \";ls32          = ( h16 \\\":\\\" h16 ) / IPv4address\\n\";\n        str += \"; dec-octet does not work because of \\\"first-success disambiguation\\\".\\n\";\n        str += \"; Must have the longest (3-digit) numbers first.\\n\";\n        str += \"; Even so, this form does not accept leading zeros.\\n\";\n        str += \"; There does not seem to be a clear standard for this (https://en.wikipedia.org/wiki/Dot-decimal_notation)\\n\";\n        str += \"; however and early RFC 790 did show leading-zero padding of the three digits.\\n\";\n        str += \";dec-octet     = DIGIT                 ; 0-9\\n\";\n        str += \";                 / %x31-39 DIGIT         ; 10-99\\n\";\n        str += \";                 / \\\"1\\\" 2DIGIT            ; 100-199\\n\";\n        str += \";                 / \\\"2\\\" %x30-34 DIGIT     ; 200-249\\n\";\n        str += \";                 / \\\"25\\\" %x30-35          ; 250-255\\n\";\n        str += \";statement = 1*( reserved / unreserved / \\\" \\\" )\\n\";\n        str += \";scheme        = ALPHA *( ALPHA / DIGIT / \\\"+\\\" / \\\"-\\\" / \\\".\\\" )\\n\";\n        str += \";authority     = [ userinfo \\\"@\\\" ] host [ \\\":\\\" port ]\\n\";\n        str += \";userinfo      = *( unreserved / pct-encoded / sub-delims / \\\":\\\" )\\n\";\n        str += \";query         = *( pchar / \\\"/\\\" / \\\"?\\\" )\\n\";\n        str += \";fragment      = *( pchar / \\\"/\\\" / \\\"?\\\" )\\n\";\n        str += \";IPvFuture     = \\\"v\\\" 1*HEXDIG \\\".\\\" 1*( unreserved / sub-delims / \\\":\\\" )\\n\";\n        str += \";reg-name      = *( unreserved / pct-encoded / sub-delims )\\n\";\n        str += \";pct-encoded   = \\\"%\\\" HEXDIG HEXDIG\\n\";\n        str += \";pchar         = unreserved / pct-encoded / sub-delims / \\\":\\\" / \\\"@\\\"\\n\";\n        str += \";path-empty    = 0pchar; deprecated - empty literal string, \\\"\\\", is more efficient \\n\";\n        str += \";unreserved    = ALPHA / DIGIT / \\\"-\\\" / \\\".\\\" / \\\"_\\\" / \\\"~\\\"\\n\";\n        str += \";reserved      = gen-delims / sub-delims\\n\";\n        str += \";gen-delims    = \\\":\\\" / \\\"/\\\" / \\\"?\\\" / \\\"#\\\" / \\\"[\\\" / \\\"]\\\" / \\\"@\\\"\\n\";\n        str += \";sub-delims    = \\\"!\\\" / \\\"$\\\" / \\\"&\\\" / \\\"'\\\" / \\\"(\\\" / \\\")\\\"\\n\";\n        str += \";              / \\\"*\\\" / \\\"+\\\" / \\\",\\\" / \\\";\\\" / \\\"=\\\"\\n\";\n        str += \";HEXDIG         =  DIGIT / \\\"A\\\" / \\\"B\\\" / \\\"C\\\" / \\\"D\\\" / \\\"E\\\" / \\\"F\\\"\\n\";\n        str += \"\\n\";\n        str += \"; ------------------------------------------------------------------------------\\n\";\n        str += \"; RFC 3339\\n\";\n        str += \"\\n\";\n        str += \"date-fullyear   = 4DIGIT\\n\";\n        str += \"date-month      = 2DIGIT  ; 01-12\\n\";\n        str += \"date-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on\\n\";\n        str += \"                          ; month/year\\n\";\n        str += \"time-hour       = 2DIGIT  ; 00-23\\n\";\n        str += \"time-minute     = 2DIGIT  ; 00-59\\n\";\n        str += \"time-second     = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second\\n\";\n        str += \"                          ; rules\\n\";\n        str += \"time-secfrac    = \\\".\\\" 1*DIGIT\\n\";\n        str += \"time-numoffset  = (\\\"+\\\" / \\\"-\\\") time-hour \\\":\\\" time-minute\\n\";\n        str += \"time-offset     = \\\"Z\\\" / time-numoffset\\n\";\n        str += \"\\n\";\n        str += \"partial-time    = time-hour \\\":\\\" time-minute \\\":\\\" time-second\\n\";\n        str += \"                  [time-secfrac]\\n\";\n        str += \"full-date       = date-fullyear \\\"-\\\" date-month \\\"-\\\" date-mday\\n\";\n        str += \"full-time       = partial-time time-offset\\n\";\n        str += \"\\n\";\n        str += \"date-time       = full-date \\\"T\\\" full-time\\n\";\n        str += \"\\n\";\n        str += \"; ------------------------------------------------------------------------------\\n\";\n        str += \"; RFC 5234\\n\";\n        str += \"\\n\";\n        str += \"ALPHA          =  %x41-5A / %x61-7A   ; A-Z / a-z\\n\";\n        str += \"LF             =  %x0A\\n\";\n        str += \"                  ; linefeed\\n\";\n        str += \"DIGIT          =  %x30-39\\n\";\n        str += \"                  ; 0-9\\n\";\n        str += \"HEXDIG         = %d48-57 / %d65-70 / %d97-102\\n\";\n        str += \"\\n\";\n        return str;\n    };\n}\nexports.grammar = grammar;\n","/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module exposes a list of named identifiers, shared across the parser generator\n// and the parsers that are generated.\n\nmodule.exports = {\n  // Identifies the operator type. Used by the generator\n  // to indicate operator types in the grammar object.\n  // Used by the [parser](./parser.html) when interpreting the grammar object.\n  /* the original ABNF operators */\n  ALT: 1 /* alternation */,\n  CAT: 2 /* concatenation */,\n  REP: 3 /* repetition */,\n  RNM: 4 /* rule name */,\n  TRG: 5 /* terminal range */,\n  TBS: 6 /* terminal binary string, case sensitive */,\n  TLS: 7 /* terminal literal string, case insensitive */,\n  /* the super set, SABNF operators */\n  UDT: 11 /* user-defined terminal */,\n  AND: 12 /* positive look ahead */,\n  NOT: 13 /* negative look ahead */,\n  BKR: 14 /* back reference to a previously matched rule name */,\n  BKA: 15 /* positive look behind */,\n  BKN: 16 /* negative look behind */,\n  ABG: 17 /* anchor - begin of string */,\n  AEN: 18 /* anchor - end of string */,\n  // Used by the parser and the user's `RNM` and `UDT` callback functions.\n  // Identifies the parser state as it traverses the parse tree nodes.\n  // - *ACTIVE* - indicates the downward direction through the parse tree node.\n  // - *MATCH* - indicates the upward direction and a phrase, of length \\> 0, has been successfully matched\n  // - *EMPTY* - indicates the upward direction and a phrase, of length = 0, has been successfully matched\n  // - *NOMATCH* - indicates the upward direction and the parser failed to match any phrase at all\n  ACTIVE: 100,\n  MATCH: 101,\n  EMPTY: 102,\n  NOMATCH: 103,\n  // Used by [`AST` translator](./ast.html) (semantic analysis) and the user's callback functions\n  // to indicate the direction of flow through the `AST` nodes.\n  // - *SEM_PRE* - indicates the downward (pre-branch) direction through the `AST` node.\n  // - *SEM_POST* - indicates the upward (post-branch) direction through the `AST` node.\n  SEM_PRE: 200,\n  SEM_POST: 201,\n  // Used by the user's callback functions to indicate to the `AST` translator (semantic analysis) how to proceed.\n  // - *SEM_OK* - normal return value\n  // - *SEM_SKIP* - if a callback function returns this value from the SEM_PRE state,\n  // the translator will skip processing all `AST` nodes in the branch below the current node.\n  // Ignored if returned from the SEM_POST state.\n  SEM_OK: 300,\n  SEM_SKIP: 301,\n  // Used in attribute generation to distinguish the necessary attribute categories.\n  // - *ATTR_N* - non-recursive\n  // - *ATTR_R* - recursive\n  // - *ATTR_MR* - belongs to a mutually-recursive set\n  ATTR_N: 400,\n  ATTR_R: 401,\n  ATTR_MR: 402,\n  // Look around values indicate whether the parser is in look ahead or look behind mode.\n  // Used by the tracing facility to indicate the look around mode in the trace records display.\n  // - *LOOKAROUND_NONE* - the parser is in normal parsing mode\n  // - *LOOKAROUND_AHEAD* - the parse is in look-ahead mode, phrase matching for operator `AND(&)` or `NOT(!)`\n  // - *LOOKAROUND_BEHIND* - the parse is in look-behind mode, phrase matching for operator `BKA(&&)` or `BKN(!!)`\n  LOOKAROUND_NONE: 500,\n  LOOKAROUND_AHEAD: 501,\n  LOOKAROUND_BEHIND: 502,\n  // Back reference rule mode indicators\n  // - *BKR_MODE_UM* - the back reference is using universal mode\n  // - *BKR_MODE_PM* - the back reference is using parent frame mode\n  // - *BKR_MODE_CS* - the back reference is using case-sensitive phrase matching\n  // - *BKR_MODE_CI* - the back reference is using case-insensitive phrase matching\n  BKR_MODE_UM: 601,\n  BKR_MODE_PM: 602,\n  BKR_MODE_CS: 603,\n  BKR_MODE_CI: 604,\n};\n","module.exports = {\n\n  // Generated by apglib/style.js \n  CLASS_MONOSPACE: 'apg-mono',\n  CLASS_ACTIVE: 'apg-active',\n  CLASS_EMPTY: 'apg-empty',\n  CLASS_MATCH: 'apg-match',\n  CLASS_NOMATCH: 'apg-nomatch',\n  CLASS_LOOKAHEAD: 'apg-lh-match',\n  CLASS_LOOKBEHIND: 'apg-lb-match',\n  CLASS_REMAINDER: 'apg-remainder',\n  CLASS_CTRLCHAR: 'apg-ctrl-char',\n  CLASS_LINEEND: 'apg-line-end',\n  CLASS_ERROR: 'apg-error',\n  CLASS_PHRASE: 'apg-phrase',\n  CLASS_EMPTYPHRASE: 'apg-empty-phrase',\n  CLASS_STATE: 'apg-state',\n  CLASS_STATS: 'apg-stats',\n  CLASS_TRACE: 'apg-trace',\n  CLASS_GRAMMAR: 'apg-grammar',\n  CLASS_RULES: 'apg-rules',\n  CLASS_RULESLINK: 'apg-rules-link',\n  CLASS_ATTRIBUTES: 'apg-attrs',\n}\n","/* eslint-disable prefer-destructuring */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-bitwise */\n/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module contains the actual encoding and decoding algorithms.\n// Throws \"RangeError\" exceptions on characters or bytes out of range for the given encoding.\n\n'use strict;';\n\nconst { Buffer } = require('buffer');\n\n/* decoding error codes */\nconst NON_SHORTEST = 0xfffffffc;\nconst TRAILING = 0xfffffffd;\nconst RANGE = 0xfffffffe;\nconst ILL_FORMED = 0xffffffff;\n\n/* mask[n] = 2**n - 1, ie. mask[n] = n bits on. e.g. mask[6] = %b111111 */\nconst mask = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023];\n\n/* ascii[n] = 'HH', where 0xHH = n, eg. ascii[254] = 'FE' */\nconst ascii = [\n  '00',\n  '01',\n  '02',\n  '03',\n  '04',\n  '05',\n  '06',\n  '07',\n  '08',\n  '09',\n  '0A',\n  '0B',\n  '0C',\n  '0D',\n  '0E',\n  '0F',\n  '10',\n  '11',\n  '12',\n  '13',\n  '14',\n  '15',\n  '16',\n  '17',\n  '18',\n  '19',\n  '1A',\n  '1B',\n  '1C',\n  '1D',\n  '1E',\n  '1F',\n  '20',\n  '21',\n  '22',\n  '23',\n  '24',\n  '25',\n  '26',\n  '27',\n  '28',\n  '29',\n  '2A',\n  '2B',\n  '2C',\n  '2D',\n  '2E',\n  '2F',\n  '30',\n  '31',\n  '32',\n  '33',\n  '34',\n  '35',\n  '36',\n  '37',\n  '38',\n  '39',\n  '3A',\n  '3B',\n  '3C',\n  '3D',\n  '3E',\n  '3F',\n  '40',\n  '41',\n  '42',\n  '43',\n  '44',\n  '45',\n  '46',\n  '47',\n  '48',\n  '49',\n  '4A',\n  '4B',\n  '4C',\n  '4D',\n  '4E',\n  '4F',\n  '50',\n  '51',\n  '52',\n  '53',\n  '54',\n  '55',\n  '56',\n  '57',\n  '58',\n  '59',\n  '5A',\n  '5B',\n  '5C',\n  '5D',\n  '5E',\n  '5F',\n  '60',\n  '61',\n  '62',\n  '63',\n  '64',\n  '65',\n  '66',\n  '67',\n  '68',\n  '69',\n  '6A',\n  '6B',\n  '6C',\n  '6D',\n  '6E',\n  '6F',\n  '70',\n  '71',\n  '72',\n  '73',\n  '74',\n  '75',\n  '76',\n  '77',\n  '78',\n  '79',\n  '7A',\n  '7B',\n  '7C',\n  '7D',\n  '7E',\n  '7F',\n  '80',\n  '81',\n  '82',\n  '83',\n  '84',\n  '85',\n  '86',\n  '87',\n  '88',\n  '89',\n  '8A',\n  '8B',\n  '8C',\n  '8D',\n  '8E',\n  '8F',\n  '90',\n  '91',\n  '92',\n  '93',\n  '94',\n  '95',\n  '96',\n  '97',\n  '98',\n  '99',\n  '9A',\n  '9B',\n  '9C',\n  '9D',\n  '9E',\n  '9F',\n  'A0',\n  'A1',\n  'A2',\n  'A3',\n  'A4',\n  'A5',\n  'A6',\n  'A7',\n  'A8',\n  'A9',\n  'AA',\n  'AB',\n  'AC',\n  'AD',\n  'AE',\n  'AF',\n  'B0',\n  'B1',\n  'B2',\n  'B3',\n  'B4',\n  'B5',\n  'B6',\n  'B7',\n  'B8',\n  'B9',\n  'BA',\n  'BB',\n  'BC',\n  'BD',\n  'BE',\n  'BF',\n  'C0',\n  'C1',\n  'C2',\n  'C3',\n  'C4',\n  'C5',\n  'C6',\n  'C7',\n  'C8',\n  'C9',\n  'CA',\n  'CB',\n  'CC',\n  'CD',\n  'CE',\n  'CF',\n  'D0',\n  'D1',\n  'D2',\n  'D3',\n  'D4',\n  'D5',\n  'D6',\n  'D7',\n  'D8',\n  'D9',\n  'DA',\n  'DB',\n  'DC',\n  'DD',\n  'DE',\n  'DF',\n  'E0',\n  'E1',\n  'E2',\n  'E3',\n  'E4',\n  'E5',\n  'E6',\n  'E7',\n  'E8',\n  'E9',\n  'EA',\n  'EB',\n  'EC',\n  'ED',\n  'EE',\n  'EF',\n  'F0',\n  'F1',\n  'F2',\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'FA',\n  'FB',\n  'FC',\n  'FD',\n  'FE',\n  'FF',\n];\n\n/* vector of base 64 characters */\nconst base64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='.split('');\n\n/* vector of base 64 character codes */\nconst base64codes = [];\nbase64chars.forEach((char) => {\n  base64codes.push(char.charCodeAt(0));\n});\n\n// The UTF8 algorithms.\nexports.utf8 = {\n  encode(chars) {\n    const bytes = [];\n    chars.forEach((char) => {\n      if (char >= 0 && char <= 0x7f) {\n        bytes.push(char);\n      } else if (char <= 0x7ff) {\n        bytes.push(0xc0 + ((char >> 6) & mask[5]));\n        bytes.push(0x80 + (char & mask[6]));\n      } else if (char < 0xd800 || (char > 0xdfff && char <= 0xffff)) {\n        bytes.push(0xe0 + ((char >> 12) & mask[4]));\n        bytes.push(0x80 + ((char >> 6) & mask[6]));\n        bytes.push(0x80 + (char & mask[6]));\n      } else if (char >= 0x10000 && char <= 0x10ffff) {\n        const u = (char >> 16) & mask[5];\n        bytes.push(0xf0 + (u >> 2));\n        bytes.push(0x80 + ((u & mask[2]) << 4) + ((char >> 12) & mask[4]));\n        bytes.push(0x80 + ((char >> 6) & mask[6]));\n        bytes.push(0x80 + (char & mask[6]));\n      } else {\n        throw new RangeError(`utf8.encode: character out of range: char: ${char}`);\n      }\n    });\n    return Buffer.from(bytes);\n  },\n  decode(buf, bom) {\n    /* bytes functions return error for non-shortest forms & values out of range */\n    function bytes2(b1, b2) {\n      /* U+0080..U+07FF */\n      /* 00000000 00000yyy yyxxxxxx | 110yyyyy 10xxxxxx */\n      if ((b2 & 0xc0) !== 0x80) {\n        return TRAILING;\n      }\n      const x = ((b1 & mask[5]) << 6) + (b2 & mask[6]);\n      if (x < 0x80) {\n        return NON_SHORTEST;\n      }\n      return x;\n    }\n    function bytes3(b1, b2, b3) {\n      /* U+0800..U+FFFF */\n      /* 00000000 zzzzyyyy yyxxxxxx | 1110zzzz 10yyyyyy 10xxxxxx */\n      if ((b3 & 0xc0) !== 0x80 || (b2 & 0xc0) !== 0x80) {\n        return TRAILING;\n      }\n      const x = ((b1 & mask[4]) << 12) + ((b2 & mask[6]) << 6) + (b3 & mask[6]);\n      if (x < 0x800) {\n        return NON_SHORTEST;\n      }\n      if (x >= 0xd800 && x <= 0xdfff) {\n        return RANGE;\n      }\n      return x;\n    }\n    function bytes4(b1, b2, b3, b4) {\n      /* U+10000..U+10FFFF */\n      /* 000uuuuu zzzzyyyy yyxxxxxx | 11110uuu 10uuzzzz 10yyyyyy 10xxxxxx */\n      if ((b4 & 0xc0) !== 0x80 || (b3 & 0xc0) !== 0x80 || (b2 & 0xc0) !== 0x80) {\n        return TRAILING;\n      }\n      const x =\n        ((((b1 & mask[3]) << 2) + ((b2 >> 4) & mask[2])) << 16) +\n        ((b2 & mask[4]) << 12) +\n        ((b3 & mask[6]) << 6) +\n        (b4 & mask[6]);\n      if (x < 0x10000) {\n        return NON_SHORTEST;\n      }\n      if (x > 0x10ffff) {\n        return RANGE;\n      }\n      return x;\n    }\n    let c;\n    let b1;\n    let i1;\n    let i2;\n    let i3;\n    let inc;\n    const len = buf.length;\n    let i = bom ? 3 : 0;\n    const chars = [];\n    while (i < len) {\n      b1 = buf[i];\n      c = ILL_FORMED;\n      const TRUE = true;\n      while (TRUE) {\n        if (b1 >= 0 && b1 <= 0x7f) {\n          /* U+0000..U+007F 00..7F */\n          c = b1;\n          inc = 1;\n          break;\n        }\n        i1 = i + 1;\n        if (i1 < len && b1 >= 0xc2 && b1 <= 0xdf) {\n          /* U+0080..U+07FF C2..DF 80..BF */\n          c = bytes2(b1, buf[i1]);\n          inc = 2;\n          break;\n        }\n        i2 = i + 2;\n        if (i2 < len && b1 >= 0xe0 && b1 <= 0xef) {\n          /* U+0800..U+FFFF */\n          c = bytes3(b1, buf[i1], buf[i2]);\n          inc = 3;\n          break;\n        }\n        i3 = i + 3;\n        if (i3 < len && b1 >= 0xf0 && b1 <= 0xf4) {\n          /* U+10000..U+10FFFF */\n          c = bytes4(b1, buf[i1], buf[i2], buf[i3]);\n          inc = 4;\n          break;\n        }\n        /* if we fall through to here, it is an ill-formed sequence */\n        break;\n      }\n      if (c > 0x10ffff) {\n        const at = `byte[${i}]`;\n        if (c === ILL_FORMED) {\n          throw new RangeError(`utf8.decode: ill-formed UTF8 byte sequence found at: ${at}`);\n        }\n        if (c === TRAILING) {\n          throw new RangeError(`utf8.decode: illegal trailing byte found at: ${at}`);\n        }\n        if (c === RANGE) {\n          throw new RangeError(`utf8.decode: code point out of range found at: ${at}`);\n        }\n        if (c === NON_SHORTEST) {\n          throw new RangeError(`utf8.decode: non-shortest form found at: ${at}`);\n        }\n        throw new RangeError(`utf8.decode: unrecognized error found at: ${at}`);\n      }\n      chars.push(c);\n      i += inc;\n    }\n    return chars;\n  },\n};\n\n// The UTF16BE algorithms.\nexports.utf16be = {\n  encode(chars) {\n    const bytes = [];\n    let char;\n    let h;\n    let l;\n    for (let i = 0; i < chars.length; i += 1) {\n      char = chars[i];\n      if ((char >= 0 && char <= 0xd7ff) || (char >= 0xe000 && char <= 0xffff)) {\n        bytes.push((char >> 8) & mask[8]);\n        bytes.push(char & mask[8]);\n      } else if (char >= 0x10000 && char <= 0x10ffff) {\n        l = char - 0x10000;\n        h = 0xd800 + (l >> 10);\n        l = 0xdc00 + (l & mask[10]);\n        bytes.push((h >> 8) & mask[8]);\n        bytes.push(h & mask[8]);\n        bytes.push((l >> 8) & mask[8]);\n        bytes.push(l & mask[8]);\n      } else {\n        throw new RangeError(`utf16be.encode: UTF16BE value out of range: char[${i}]: ${char}`);\n      }\n    }\n    return Buffer.from(bytes);\n  },\n  decode(buf, bom) {\n    /* assumes caller has insured that buf is a Buffer of bytes */\n    if (buf.length % 2 > 0) {\n      throw new RangeError(`utf16be.decode: data length must be even multiple of 2: length: ${buf.length}`);\n    }\n    const chars = [];\n    const len = buf.length;\n    let i = bom ? 2 : 0;\n    let j = 0;\n    let c;\n    let inc;\n    let i1;\n    let i3;\n    let high;\n    let low;\n    while (i < len) {\n      const TRUE = true;\n      while (TRUE) {\n        i1 = i + 1;\n        if (i1 < len) {\n          high = (buf[i] << 8) + buf[i1];\n          if (high < 0xd800 || high > 0xdfff) {\n            c = high;\n            inc = 2;\n            break;\n          }\n          i3 = i + 3;\n          if (i3 < len) {\n            low = (buf[i + 2] << 8) + buf[i3];\n            if (high <= 0xdbff && low >= 0xdc00 && low <= 0xdfff) {\n              c = 0x10000 + ((high - 0xd800) << 10) + (low - 0xdc00);\n              inc = 4;\n              break;\n            }\n          }\n        }\n        /* if we fall through to here, it is an ill-formed sequence */\n        throw new RangeError(`utf16be.decode: ill-formed UTF16BE byte sequence found: byte[${i}]`);\n      }\n      chars[j++] = c;\n      i += inc;\n    }\n    return chars;\n  },\n};\n\n// The UTF16LE algorithms.\nexports.utf16le = {\n  encode(chars) {\n    const bytes = [];\n    let char;\n    let h;\n    let l;\n    for (let i = 0; i < chars.length; i += 1) {\n      char = chars[i];\n      if ((char >= 0 && char <= 0xd7ff) || (char >= 0xe000 && char <= 0xffff)) {\n        bytes.push(char & mask[8]);\n        bytes.push((char >> 8) & mask[8]);\n      } else if (char >= 0x10000 && char <= 0x10ffff) {\n        l = char - 0x10000;\n        h = 0xd800 + (l >> 10);\n        l = 0xdc00 + (l & mask[10]);\n        bytes.push(h & mask[8]);\n        bytes.push((h >> 8) & mask[8]);\n        bytes.push(l & mask[8]);\n        bytes.push((l >> 8) & mask[8]);\n      } else {\n        throw new RangeError(`utf16le.encode: UTF16LE value out of range: char[${i}]: ${char}`);\n      }\n    }\n    return Buffer.from(bytes);\n  },\n  decode(buf, bom) {\n    /* assumes caller has insured that buf is a Buffer of bytes */\n    if (buf.length % 2 > 0) {\n      throw new RangeError(`utf16le.decode: data length must be even multiple of 2: length: ${buf.length}`);\n    }\n    const chars = [];\n    const len = buf.length;\n    let i = bom ? 2 : 0;\n    let j = 0;\n    let c;\n    let inc;\n    let i1;\n    let i3;\n    let high;\n    let low;\n    while (i < len) {\n      const TRUE = true;\n      while (TRUE) {\n        i1 = i + 1;\n        if (i1 < len) {\n          high = (buf[i1] << 8) + buf[i];\n          if (high < 0xd800 || high > 0xdfff) {\n            c = high;\n            inc = 2;\n            break;\n          }\n          i3 = i + 3;\n          if (i3 < len) {\n            low = (buf[i3] << 8) + buf[i + 2];\n            if (high <= 0xdbff && low >= 0xdc00 && low <= 0xdfff) {\n              c = 0x10000 + ((high - 0xd800) << 10) + (low - 0xdc00);\n              inc = 4;\n              break;\n            }\n          }\n        }\n        /* if we fall through to here, it is an ill-formed sequence */\n        throw new RangeError(`utf16le.decode: ill-formed UTF16LE byte sequence found: byte[${i}]`);\n      }\n      chars[j++] = c;\n      i += inc;\n    }\n    return chars;\n  },\n};\n\n// The UTF32BE algorithms.\nexports.utf32be = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 4);\n    let i = 0;\n    chars.forEach((char) => {\n      if ((char >= 0xd800 && char <= 0xdfff) || char > 0x10ffff) {\n        throw new RangeError(`utf32be.encode: UTF32BE character code out of range: char[${i / 4}]: ${char}`);\n      }\n      buf[i++] = (char >> 24) & mask[8];\n      buf[i++] = (char >> 16) & mask[8];\n      buf[i++] = (char >> 8) & mask[8];\n      buf[i++] = char & mask[8];\n    });\n    return buf;\n  },\n  decode(buf, bom) {\n    /* caller to insure buf is a Buffer of bytes */\n    if (buf.length % 4 > 0) {\n      throw new RangeError(`utf32be.decode: UTF32BE byte length must be even multiple of 4: length: ${buf.length}`);\n    }\n    const chars = [];\n    let i = bom ? 4 : 0;\n    for (; i < buf.length; i += 4) {\n      const char = (buf[i] << 24) + (buf[i + 1] << 16) + (buf[i + 2] << 8) + buf[i + 3];\n      if ((char >= 0xd800 && char <= 0xdfff) || char > 0x10ffff) {\n        throw new RangeError(`utf32be.decode: UTF32BE character code out of range: char[${i / 4}]: ${char}`);\n      }\n      chars.push(char);\n    }\n    return chars;\n  },\n};\n\n// The UTF32LE algorithms.\nexports.utf32le = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 4);\n    let i = 0;\n    chars.forEach((char) => {\n      if ((char >= 0xd800 && char <= 0xdfff) || char > 0x10ffff) {\n        throw new RangeError(`utf32le.encode: UTF32LE character code out of range: char[${i / 4}]: ${char}`);\n      }\n      buf[i++] = char & mask[8];\n      buf[i++] = (char >> 8) & mask[8];\n      buf[i++] = (char >> 16) & mask[8];\n      buf[i++] = (char >> 24) & mask[8];\n    });\n    return buf;\n  },\n  decode(buf, bom) {\n    /* caller to insure buf is a Buffer of bytes */\n    if (buf.length % 4 > 0) {\n      throw new RangeError(`utf32be.decode: UTF32LE byte length must be even multiple of 4: length: ${buf.length}`);\n    }\n    const chars = [];\n    let i = bom ? 4 : 0;\n    for (; i < buf.length; i += 4) {\n      const char = (buf[i + 3] << 24) + (buf[i + 2] << 16) + (buf[i + 1] << 8) + buf[i];\n      if ((char >= 0xd800 && char <= 0xdfff) || char > 0x10ffff) {\n        throw new RangeError(`utf32le.encode: UTF32LE character code out of range: char[${i / 4}]: ${char}`);\n      }\n      chars.push(char);\n    }\n    return chars;\n  },\n};\n\n// The UINT7 algorithms. ASCII or 7-bit unsigned integers.\nexports.uint7 = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length);\n    for (let i = 0; i < chars.length; i += 1) {\n      if (chars[i] > 0x7f) {\n        throw new RangeError(`uint7.encode: UINT7 character code out of range: char[${i}]: ${chars[i]}`);\n      }\n      buf[i] = chars[i];\n    }\n    return buf;\n  },\n  decode(buf) {\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 1) {\n      if (buf[i] > 0x7f) {\n        throw new RangeError(`uint7.decode: UINT7 character code out of range: byte[${i}]: ${buf[i]}`);\n      }\n      chars[i] = buf[i];\n    }\n    return chars;\n  },\n};\n\n// The UINT8 algorithms. BINARY, Latin 1 or 8-bit unsigned integers.\nexports.uint8 = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length);\n    for (let i = 0; i < chars.length; i += 1) {\n      if (chars[i] > 0xff) {\n        throw new RangeError(`uint8.encode: UINT8 character code out of range: char[${i}]: ${chars[i]}`);\n      }\n      buf[i] = chars[i];\n    }\n    return buf;\n  },\n  decode(buf) {\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 1) {\n      chars[i] = buf[i];\n    }\n    return chars;\n  },\n};\n\n// The UINT16BE algorithms. Big-endian 16-bit unsigned integers.\nexports.uint16be = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 2);\n    let i = 0;\n    chars.forEach((char) => {\n      if (char > 0xffff) {\n        throw new RangeError(`uint16be.encode: UINT16BE character code out of range: char[${i / 2}]: ${char}`);\n      }\n      buf[i++] = (char >> 8) & mask[8];\n      buf[i++] = char & mask[8];\n    });\n    return buf;\n  },\n  decode(buf) {\n    if (buf.length % 2 > 0) {\n      throw new RangeError(`uint16be.decode: UINT16BE byte length must be even multiple of 2: length: ${buf.length}`);\n    }\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 2) {\n      chars.push((buf[i] << 8) + buf[i + 1]);\n    }\n    return chars;\n  },\n};\n\n// The UINT16LE algorithms. Little-endian 16-bit unsigned integers.\nexports.uint16le = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 2);\n    let i = 0;\n    chars.forEach((char) => {\n      if (char > 0xffff) {\n        throw new RangeError(`uint16le.encode: UINT16LE character code out of range: char[${i / 2}]: ${char}`);\n      }\n      buf[i++] = char & mask[8];\n      buf[i++] = (char >> 8) & mask[8];\n    });\n    return buf;\n  },\n  decode(buf) {\n    if (buf.length % 2 > 0) {\n      throw new RangeError(`uint16le.decode: UINT16LE byte length must be even multiple of 2: length: ${buf.length}`);\n    }\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 2) {\n      chars.push((buf[i + 1] << 8) + buf[i]);\n    }\n    return chars;\n  },\n};\n\n// The UINT32BE algorithms. Big-endian 32-bit unsigned integers.\nexports.uint32be = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 4);\n    let i = 0;\n    chars.forEach((char) => {\n      buf[i++] = (char >> 24) & mask[8];\n      buf[i++] = (char >> 16) & mask[8];\n      buf[i++] = (char >> 8) & mask[8];\n      buf[i++] = char & mask[8];\n    });\n    return buf;\n  },\n  decode(buf) {\n    if (buf.length % 4 > 0) {\n      throw new RangeError(`uint32be.decode: UINT32BE byte length must be even multiple of 4: length: ${buf.length}`);\n    }\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 4) {\n      chars.push((buf[i] << 24) + (buf[i + 1] << 16) + (buf[i + 2] << 8) + buf[i + 3]);\n    }\n    return chars;\n  },\n};\n\n// The UINT32LE algorithms. Little-endian 32-bit unsigned integers.\nexports.uint32le = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 4);\n    let i = 0;\n    chars.forEach((char) => {\n      buf[i++] = char & mask[8];\n      buf[i++] = (char >> 8) & mask[8];\n      buf[i++] = (char >> 16) & mask[8];\n      buf[i++] = (char >> 24) & mask[8];\n    });\n    return buf;\n  },\n  decode(buf) {\n    /* caller to insure buf is a Buffer of bytes */\n    if (buf.length % 4 > 0) {\n      throw new RangeError(`uint32le.decode: UINT32LE byte length must be even multiple of 4: length: ${buf.length}`);\n    }\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 4) {\n      chars.push((buf[i + 3] << 24) + (buf[i + 2] << 16) + (buf[i + 1] << 8) + buf[i]);\n    }\n    return chars;\n  },\n};\n\n// The STRING algorithms. Converts JavaScript strings to Array of 32-bit integers and vice versa.\n// Uses the node.js Buffer's native \"utf16le\" capabilites.\nexports.string = {\n  encode(chars) {\n    return exports.utf16le.encode(chars).toString('utf16le');\n  },\n  decode(str) {\n    return exports.utf16le.decode(Buffer.from(str, 'utf16le'), 0);\n  },\n};\n\n// The ESCAPED algorithms.\n// Note that ESCAPED format contains only ASCII characters.\n// The characters are always in the form of a Buffer of bytes.\nexports.escaped = {\n  // Encodes an Array of 32-bit integers into ESCAPED format.\n  encode(chars) {\n    const bytes = [];\n    for (let i = 0; i < chars.length; i += 1) {\n      const char = chars[i];\n      if (char === 96) {\n        bytes.push(char);\n        bytes.push(char);\n      } else if (char === 10) {\n        bytes.push(char);\n      } else if (char >= 32 && char <= 126) {\n        bytes.push(char);\n      } else {\n        let str = '';\n        if (char >= 0 && char <= 31) {\n          str += `\\`x${ascii[char]}`;\n        } else if (char >= 127 && char <= 255) {\n          str += `\\`x${ascii[char]}`;\n        } else if (char >= 0x100 && char <= 0xffff) {\n          str += `\\`u${ascii[(char >> 8) & mask[8]]}${ascii[char & mask[8]]}`;\n        } else if (char >= 0x10000 && char <= 0xffffffff) {\n          str += '`u{';\n          const digit = (char >> 24) & mask[8];\n          if (digit > 0) {\n            str += ascii[digit];\n          }\n          str += `${ascii[(char >> 16) & mask[8]] + ascii[(char >> 8) & mask[8]] + ascii[char & mask[8]]}}`;\n        } else {\n          throw new Error('escape.encode(char): char > 0xffffffff not allowed');\n        }\n        const buf = Buffer.from(str);\n        buf.forEach((b) => {\n          bytes.push(b);\n        });\n      }\n    }\n    return Buffer.from(bytes);\n  },\n  // Decodes ESCAPED format from a Buffer of bytes to an Array of 32-bit integers.\n  decode(buf) {\n    function isHex(hex) {\n      if ((hex >= 48 && hex <= 57) || (hex >= 65 && hex <= 70) || (hex >= 97 && hex <= 102)) {\n        return true;\n      }\n      return false;\n    }\n    function getx(i, len, bufArg) {\n      const ret = { char: null, nexti: i + 2, error: true };\n      if (i + 1 < len) {\n        if (isHex(bufArg[i]) && isHex(bufArg[i + 1])) {\n          const str = String.fromCodePoint(bufArg[i], bufArg[i + 1]);\n          ret.char = parseInt(str, 16);\n          if (!Number.isNaN(ret.char)) {\n            ret.error = false;\n          }\n        }\n      }\n      return ret;\n    }\n    function getu(i, len, bufArg) {\n      const ret = { char: null, nexti: i + 4, error: true };\n      if (i + 3 < len) {\n        if (isHex(bufArg[i]) && isHex(bufArg[i + 1]) && isHex(bufArg[i + 2]) && isHex(bufArg[i + 3])) {\n          const str = String.fromCodePoint(bufArg[i], bufArg[i + 1], bufArg[i + 2], bufArg[i + 3]);\n          ret.char = parseInt(str, 16);\n          if (!Number.isNaN(ret.char)) {\n            ret.error = false;\n          }\n        }\n      }\n      return ret;\n    }\n    function getU(i, len, bufArg) {\n      const ret = { char: null, nexti: i + 4, error: true };\n      let str = '';\n      while (i < len && isHex(bufArg[i])) {\n        str += String.fromCodePoint(bufArg[i]);\n        // eslint-disable-next-line no-param-reassign\n        i += 1;\n      }\n      ret.char = parseInt(str, 16);\n      if (bufArg[i] === 125 && !Number.isNaN(ret.char)) {\n        ret.error = false;\n      }\n      ret.nexti = i + 1;\n      return ret;\n    }\n    const chars = [];\n    const len = buf.length;\n    let i1;\n    let ret;\n    let error;\n    let i = 0;\n    while (i < len) {\n      const TRUE = true;\n      while (TRUE) {\n        error = true;\n        if (buf[i] !== 96) {\n          /* unescaped character */\n          chars.push(buf[i]);\n          i += 1;\n          error = false;\n          break;\n        }\n        i1 = i + 1;\n        if (i1 >= len) {\n          break;\n        }\n        if (buf[i1] === 96) {\n          /* escaped grave accent */\n          chars.push(96);\n          i += 2;\n          error = false;\n          break;\n        }\n        if (buf[i1] === 120) {\n          ret = getx(i1 + 1, len, buf);\n          if (ret.error) {\n            break;\n          }\n          /* escaped hex */\n          chars.push(ret.char);\n          i = ret.nexti;\n          error = false;\n          break;\n        }\n        if (buf[i1] === 117) {\n          if (buf[i1 + 1] === 123) {\n            ret = getU(i1 + 2, len, buf);\n            if (ret.error) {\n              break;\n            }\n            /* escaped utf-32 */\n            chars.push(ret.char);\n            i = ret.nexti;\n            error = false;\n            break;\n          }\n          ret = getu(i1 + 1, len, buf);\n          if (ret.error) {\n            break;\n          }\n          /* escaped utf-16 */\n          chars.push(ret.char);\n          i = ret.nexti;\n          error = false;\n          break;\n        }\n        break;\n      }\n      if (error) {\n        throw new Error(`escaped.decode: ill-formed escape sequence at buf[${i}]`);\n      }\n    }\n    return chars;\n  },\n};\n\n// The line end conversion algorigthms.\nconst CR = 13;\nconst LF = 10;\nexports.lineEnds = {\n  crlf(chars) {\n    const lfchars = [];\n    let i = 0;\n    while (i < chars.length) {\n      switch (chars[i]) {\n        case CR:\n          if (i + 1 < chars.length && chars[i + 1] === LF) {\n            i += 2;\n          } else {\n            i += 1;\n          }\n          lfchars.push(CR);\n          lfchars.push(LF);\n          break;\n        case LF:\n          lfchars.push(CR);\n          lfchars.push(LF);\n          i += 1;\n          break;\n        default:\n          lfchars.push(chars[i]);\n          i += 1;\n          break;\n      }\n    }\n    if (lfchars.length > 0 && lfchars[lfchars.length - 1] !== LF) {\n      lfchars.push(CR);\n      lfchars.push(LF);\n    }\n    return lfchars;\n  },\n  lf(chars) {\n    const lfchars = [];\n    let i = 0;\n    while (i < chars.length) {\n      switch (chars[i]) {\n        case CR:\n          if (i + 1 < chars.length && chars[i + 1] === LF) {\n            i += 2;\n          } else {\n            i += 1;\n          }\n          lfchars.push(LF);\n          break;\n        case LF:\n          lfchars.push(LF);\n          i += 1;\n          break;\n        default:\n          lfchars.push(chars[i]);\n          i += 1;\n          break;\n      }\n    }\n    if (lfchars.length > 0 && lfchars[lfchars.length - 1] !== LF) {\n      lfchars.push(LF);\n    }\n    return lfchars;\n  },\n};\n\n// The base 64 algorithms.\nexports.base64 = {\n  encode(buf) {\n    if (buf.length === 0) {\n      return Buffer.alloc(0);\n    }\n    let i;\n    let j;\n    let n;\n    let tail = buf.length % 3;\n    tail = tail > 0 ? 3 - tail : 0;\n    let units = (buf.length + tail) / 3;\n    const base64 = Buffer.alloc(units * 4);\n    if (tail > 0) {\n      units -= 1;\n    }\n    i = 0;\n    j = 0;\n    for (let u = 0; u < units; u += 1) {\n      n = buf[i++] << 16;\n      n += buf[i++] << 8;\n      n += buf[i++];\n      base64[j++] = base64codes[(n >> 18) & mask[6]];\n      base64[j++] = base64codes[(n >> 12) & mask[6]];\n      base64[j++] = base64codes[(n >> 6) & mask[6]];\n      base64[j++] = base64codes[n & mask[6]];\n    }\n    if (tail === 0) {\n      return base64;\n    }\n    if (tail === 1) {\n      n = buf[i++] << 16;\n      n += buf[i] << 8;\n      base64[j++] = base64codes[(n >> 18) & mask[6]];\n      base64[j++] = base64codes[(n >> 12) & mask[6]];\n      base64[j++] = base64codes[(n >> 6) & mask[6]];\n      base64[j] = base64codes[64];\n      return base64;\n    }\n    if (tail === 2) {\n      n = buf[i] << 16;\n      base64[j++] = base64codes[(n >> 18) & mask[6]];\n      base64[j++] = base64codes[(n >> 12) & mask[6]];\n      base64[j++] = base64codes[64];\n      base64[j] = base64codes[64];\n      return base64;\n    }\n    return undefined;\n  },\n  decode(codes) {\n    /* remove white space and ctrl characters, validate & translate characters */\n    function validate(buf) {\n      const chars = [];\n      let tail = 0;\n      for (let i = 0; i < buf.length; i += 1) {\n        const char = buf[i];\n        const TRUE = true;\n        while (TRUE) {\n          if (char === 32 || char === 9 || char === 10 || char === 13) {\n            break;\n          }\n          if (char >= 65 && char <= 90) {\n            chars.push(char - 65);\n            break;\n          }\n          if (char >= 97 && char <= 122) {\n            chars.push(char - 71);\n            break;\n          }\n          if (char >= 48 && char <= 57) {\n            chars.push(char + 4);\n            break;\n          }\n          if (char === 43) {\n            chars.push(62);\n            break;\n          }\n          if (char === 47) {\n            chars.push(63);\n            break;\n          }\n          if (char === 61) {\n            chars.push(64);\n            tail += 1;\n            break;\n          }\n          /* invalid character */\n          throw new RangeError(`base64.decode: invalid character buf[${i}]: ${char}`);\n        }\n      }\n      /* validate length */\n      if (chars.length % 4 > 0) {\n        throw new RangeError(`base64.decode: string length not integral multiple of 4: ${chars.length}`);\n      }\n      /* validate tail */\n      switch (tail) {\n        case 0:\n          break;\n        case 1:\n          if (chars[chars.length - 1] !== 64) {\n            throw new RangeError('base64.decode: one tail character found: not last character');\n          }\n          break;\n        case 2:\n          if (chars[chars.length - 1] !== 64 || chars[chars.length - 2] !== 64) {\n            throw new RangeError('base64.decode: two tail characters found: not last characters');\n          }\n          break;\n        default:\n          throw new RangeError(`base64.decode: more than two tail characters found: ${tail}`);\n      }\n      return { tail, buf: Buffer.from(chars) };\n    }\n\n    if (codes.length === 0) {\n      return Buffer.alloc(0);\n    }\n    const val = validate(codes);\n    const { tail } = val;\n    const base64 = val.buf;\n    let i;\n    let j;\n    let n;\n    let units = base64.length / 4;\n    const buf = Buffer.alloc(units * 3 - tail);\n    if (tail > 0) {\n      units -= 1;\n    }\n    j = 0;\n    i = 0;\n    for (let u = 0; u < units; u += 1) {\n      n = base64[i++] << 18;\n      n += base64[i++] << 12;\n      n += base64[i++] << 6;\n      n += base64[i++];\n      buf[j++] = (n >> 16) & mask[8];\n      buf[j++] = (n >> 8) & mask[8];\n      buf[j++] = n & mask[8];\n    }\n    if (tail === 1) {\n      n = base64[i++] << 18;\n      n += base64[i++] << 12;\n      n += base64[i] << 6;\n      buf[j++] = (n >> 16) & mask[8];\n      buf[j] = (n >> 8) & mask[8];\n    }\n    if (tail === 2) {\n      n = base64[i++] << 18;\n      n += base64[i++] << 12;\n      buf[j] = (n >> 16) & mask[8];\n    }\n    return buf;\n  },\n  // Converts a base 64 Buffer of bytes to a JavaScript string with line breaks.\n  toString(buf) {\n    if (buf.length % 4 > 0) {\n      throw new RangeError(`base64.toString: input buffer length not multiple of 4: ${buf.length}`);\n    }\n    let str = '';\n    let lineLen = 0;\n    function buildLine(c1, c2, c3, c4) {\n      switch (lineLen) {\n        case 76:\n          str += `\\r\\n${c1}${c2}${c3}${c4}`;\n          lineLen = 4;\n          break;\n        case 75:\n          str += `${c1}\\r\\n${c2}${c3}${c4}`;\n          lineLen = 3;\n          break;\n        case 74:\n          str += `${c1 + c2}\\r\\n${c3}${c4}`;\n          lineLen = 2;\n          break;\n        case 73:\n          str += `${c1 + c2 + c3}\\r\\n${c4}`;\n          lineLen = 1;\n          break;\n        default:\n          str += c1 + c2 + c3 + c4;\n          lineLen += 4;\n          break;\n      }\n    }\n    function validate(c) {\n      if (c >= 65 && c <= 90) {\n        return true;\n      }\n      if (c >= 97 && c <= 122) {\n        return true;\n      }\n      if (c >= 48 && c <= 57) {\n        return true;\n      }\n      if (c === 43) {\n        return true;\n      }\n      if (c === 47) {\n        return true;\n      }\n      if (c === 61) {\n        return true;\n      }\n      return false;\n    }\n    for (let i = 0; i < buf.length; i += 4) {\n      for (let j = i; j < i + 4; j += 1) {\n        if (!validate(buf[j])) {\n          throw new RangeError(`base64.toString: buf[${j}]: ${buf[j]} : not valid base64 character code`);\n        }\n      }\n      buildLine(\n        String.fromCharCode(buf[i]),\n        String.fromCharCode(buf[i + 1]),\n        String.fromCharCode(buf[i + 2]),\n        String.fromCharCode(buf[i + 3])\n      );\n    }\n    return str;\n  },\n};\n","/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module exposes the public encoding, decoding and conversion functions.\n// Its private functions provide the disassembling and interpetation of the source and destination encoding types.\n// In the case of Unicode encodings, private functions determine the presence of Byte Order Marks (BOMs), if any.\n//\n// Throws \"TypeError\" exceptions on input errors.\n//\n\n'use strict;';\n\nconst { Buffer } = require('buffer');\n\nconst trans = require('./transformers');\n\n/* types */\nconst UTF8 = 'UTF8';\nconst UTF16 = 'UTF16';\nconst UTF16BE = 'UTF16BE';\nconst UTF16LE = 'UTF16LE';\nconst UTF32 = 'UTF32';\nconst UTF32BE = 'UTF32BE';\nconst UTF32LE = 'UTF32LE';\nconst UINT7 = 'UINT7';\nconst ASCII = 'ASCII';\nconst BINARY = 'BINARY';\nconst UINT8 = 'UINT8';\nconst UINT16 = 'UINT16';\nconst UINT16LE = 'UINT16LE';\nconst UINT16BE = 'UINT16BE';\nconst UINT32 = 'UINT32';\nconst UINT32LE = 'UINT32LE';\nconst UINT32BE = 'UINT32BE';\nconst ESCAPED = 'ESCAPED';\nconst STRING = 'STRING';\n\n/* private functions */\n// Find the UTF8 BOM, if any.\nconst bom8 = function bom8(src) {\n  src.type = UTF8;\n  const buf = src.data;\n  src.bom = 0;\n  if (buf.length >= 3) {\n    if (buf[0] === 0xef && buf[1] === 0xbb && buf[2] === 0xbf) {\n      src.bom = 3;\n    }\n  }\n};\n// Find the UTF16 BOM, if any, and determine the UTF16 type.\n// Defaults to UTF16BE.\n// Throws TypeError exception if BOM does not match the specified type.\nconst bom16 = function bom16(src) {\n  const buf = src.data;\n  src.bom = 0;\n  switch (src.type) {\n    case UTF16:\n      src.type = UTF16BE;\n      if (buf.length >= 2) {\n        if (buf[0] === 0xfe && buf[1] === 0xff) {\n          src.bom = 2;\n        } else if (buf[0] === 0xff && buf[1] === 0xfe) {\n          src.type = UTF16LE;\n          src.bom = 2;\n        }\n      }\n      break;\n    case UTF16BE:\n      src.type = UTF16BE;\n      if (buf.length >= 2) {\n        if (buf[0] === 0xfe && buf[1] === 0xff) {\n          src.bom = 2;\n        } else if (buf[0] === 0xff && buf[1] === 0xfe) {\n          throw new TypeError(`src type: \"${UTF16BE}\" specified but BOM is for \"${UTF16LE}\"`);\n        }\n      }\n      break;\n    case UTF16LE:\n      src.type = UTF16LE;\n      if (buf.length >= 0) {\n        if (buf[0] === 0xfe && buf[1] === 0xff) {\n          throw new TypeError(`src type: \"${UTF16LE}\" specified but BOM is for \"${UTF16BE}\"`);\n        } else if (buf[0] === 0xff && buf[1] === 0xfe) {\n          src.bom = 2;\n        }\n      }\n      break;\n    default:\n      throw new TypeError(`UTF16 BOM: src type \"${src.type}\" unrecognized`);\n  }\n};\n// Find the UTF32 BOM, if any, and determine the UTF32 type.\n// Defaults to UTF32BE.\n// Throws exception if BOM does not match the specified type.\nconst bom32 = function bom32(src) {\n  const buf = src.data;\n  src.bom = 0;\n  switch (src.type) {\n    case UTF32:\n      src.type = UTF32BE;\n      if (buf.length >= 4) {\n        if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0xfe && buf[3] === 0xff) {\n          src.bom = 4;\n        }\n        if (buf[0] === 0xff && buf[1] === 0xfe && buf[2] === 0 && buf[3] === 0) {\n          src.type = UTF32LE;\n          src.bom = 4;\n        }\n      }\n      break;\n    case UTF32BE:\n      src.type = UTF32BE;\n      if (buf.length >= 4) {\n        if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0xfe && buf[3] === 0xff) {\n          src.bom = 4;\n        }\n        if (buf[0] === 0xff && buf[1] === 0xfe && buf[2] === 0 && buf[3] === 0) {\n          throw new TypeError(`src type: ${UTF32BE} specified but BOM is for ${UTF32LE}\"`);\n        }\n      }\n      break;\n    case UTF32LE:\n      src.type = UTF32LE;\n      if (buf.length >= 4) {\n        if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0xfe && buf[3] === 0xff) {\n          throw new TypeError(`src type: \"${UTF32LE}\" specified but BOM is for \"${UTF32BE}\"`);\n        }\n        if (buf[0] === 0xff && buf[1] === 0xfe && buf[2] === 0 && buf[3] === 0) {\n          src.bom = 4;\n        }\n      }\n      break;\n    default:\n      throw new TypeError(`UTF32 BOM: src type \"${src.type}\" unrecognized`);\n  }\n};\n// Validates the source encoding type and matching data.\n// If the BASE64: prefix is present, the base 64 decoding is done here as the initial step.\n// - For type STRING, data must be a JavaScript string.\n// - For type BASE64:*, data may be a string or Buffer.\n// - For all other types, data must be a Buffer.\n// - The BASE64: prefix is not allowed for type STRING.\nconst validateSrc = function validateSrc(type, data) {\n  function getType(typeArg) {\n    const ret = {\n      type: '',\n      base64: false,\n    };\n    const rx = /^(base64:)?([a-zA-Z0-9]+)$/i;\n    const result = rx.exec(typeArg);\n    if (result) {\n      if (result[2]) {\n        ret.type = result[2].toUpperCase();\n      }\n      if (result[1]) {\n        ret.base64 = true;\n      }\n    }\n    return ret;\n  }\n  const ret = getType(type.toUpperCase());\n  if (ret.base64) {\n    /* handle base 64 */\n    if (ret.type === STRING) {\n      throw new TypeError(`type: \"${type} \"BASE64:\" prefix not allowed with type ${STRING}`);\n    }\n    if (Buffer.isBuffer(data)) {\n      ret.data = trans.base64.decode(data);\n    } else if (typeof data === 'string') {\n      const buf = Buffer.from(data, 'ascii');\n      ret.data = trans.base64.decode(buf);\n    } else {\n      throw new TypeError(`type: \"${type} unrecognized data type: typeof(data): ${typeof data}`);\n    }\n  } else {\n    ret.data = data;\n  }\n  switch (ret.type) {\n    case UTF8:\n      bom8(ret);\n      break;\n    case UTF16:\n    case UTF16BE:\n    case UTF16LE:\n      bom16(ret);\n      break;\n    case UTF32:\n    case UTF32BE:\n    case UTF32LE:\n      bom32(ret);\n      break;\n    case UINT16:\n      ret.type = UINT16BE;\n      break;\n    case UINT32:\n      ret.type = UINT32BE;\n      break;\n    case ASCII:\n      ret.type = UINT7;\n      break;\n    case BINARY:\n      ret.type = UINT8;\n      break;\n    case UINT7:\n    case UINT8:\n    case UINT16LE:\n    case UINT16BE:\n    case UINT32LE:\n    case UINT32BE:\n    case STRING:\n    case ESCAPED:\n      break;\n    default:\n      throw new TypeError(`type: \"${type}\" not recognized`);\n  }\n  if (ret.type === STRING) {\n    if (typeof ret.data !== 'string') {\n      throw new TypeError(`type: \"${type}\" but data is not a string`);\n    }\n  } else if (!Buffer.isBuffer(ret.data)) {\n    throw new TypeError(`type: \"${type}\" but data is not a Buffer`);\n  }\n  return ret;\n};\n// Disassembles and validates the destination type.\n// `chars` must be an Array of integers.\n// The :BASE64 suffix is not allowed for type STRING.\nconst validateDst = function validateDst(type, chars) {\n  function getType(typeArg) {\n    let fix;\n    let rem;\n    const ret = {\n      crlf: false,\n      lf: false,\n      base64: false,\n      type: '',\n    };\n    /* prefix, if any */\n    const TRUE = true;\n    while (TRUE) {\n      rem = typeArg;\n      fix = typeArg.slice(0, 5);\n      if (fix === 'CRLF:') {\n        ret.crlf = true;\n        rem = typeArg.slice(5);\n        break;\n      }\n      fix = typeArg.slice(0, 3);\n      if (fix === 'LF:') {\n        ret.lf = true;\n        rem = typeArg.slice(3);\n        break;\n      }\n      break;\n    }\n    /* suffix, if any */\n    fix = rem.split(':');\n    if (fix.length === 1) {\n      // eslint-disable-next-line prefer-destructuring\n      ret.type = fix[0];\n    } else if (fix.length === 2 && fix[1] === 'BASE64') {\n      ret.base64 = true;\n      // eslint-disable-next-line prefer-destructuring\n      ret.type = fix[0];\n    }\n    return ret;\n  }\n  if (!Array.isArray(chars)) {\n    throw new TypeError(`dst chars: not array: \"${typeof chars}`);\n  }\n  if (typeof type !== 'string') {\n    throw new TypeError(`dst type: not string: \"${typeof type}`);\n  }\n  const ret = getType(type.toUpperCase());\n  switch (ret.type) {\n    case UTF8:\n    case UTF16BE:\n    case UTF16LE:\n    case UTF32BE:\n    case UTF32LE:\n    case UINT7:\n    case UINT8:\n    case UINT16LE:\n    case UINT16BE:\n    case UINT32LE:\n    case UINT32BE:\n    case ESCAPED:\n      break;\n    case STRING:\n      if (ret.base64) {\n        throw new TypeError(`\":BASE64\" suffix not allowed with type ${STRING}`);\n      }\n      break;\n    case ASCII:\n      ret.type = UINT7;\n      break;\n    case BINARY:\n      ret.type = UINT8;\n      break;\n    case UTF16:\n      ret.type = UTF16BE;\n      break;\n    case UTF32:\n      ret.type = UTF32BE;\n      break;\n    case UINT16:\n      ret.type = UINT16BE;\n      break;\n    case UINT32:\n      ret.type = UINT32BE;\n      break;\n    default:\n      throw new TypeError(`dst type unrecognized: \"${type}\" : must have form [crlf:|lf:]type[:base64]`);\n  }\n  return ret;\n};\n// Select and call the requested encoding function.\nconst encode = function encode(type, chars) {\n  switch (type) {\n    case UTF8:\n      return trans.utf8.encode(chars);\n    case UTF16BE:\n      return trans.utf16be.encode(chars);\n    case UTF16LE:\n      return trans.utf16le.encode(chars);\n    case UTF32BE:\n      return trans.utf32be.encode(chars);\n    case UTF32LE:\n      return trans.utf32le.encode(chars);\n    case UINT7:\n      return trans.uint7.encode(chars);\n    case UINT8:\n      return trans.uint8.encode(chars);\n    case UINT16BE:\n      return trans.uint16be.encode(chars);\n    case UINT16LE:\n      return trans.uint16le.encode(chars);\n    case UINT32BE:\n      return trans.uint32be.encode(chars);\n    case UINT32LE:\n      return trans.uint32le.encode(chars);\n    case STRING:\n      return trans.string.encode(chars);\n    case ESCAPED:\n      return trans.escaped.encode(chars);\n    default:\n      throw new TypeError(`encode type \"${type}\" not recognized`);\n  }\n};\n// Select and call the requested decoding function.\n// `src` contains BOM information as well as the source type and data.\nconst decode = function decode(src) {\n  switch (src.type) {\n    case UTF8:\n      return trans.utf8.decode(src.data, src.bom);\n    case UTF16LE:\n      return trans.utf16le.decode(src.data, src.bom);\n    case UTF16BE:\n      return trans.utf16be.decode(src.data, src.bom);\n    case UTF32BE:\n      return trans.utf32be.decode(src.data, src.bom);\n    case UTF32LE:\n      return trans.utf32le.decode(src.data, src.bom);\n    case UINT7:\n      return trans.uint7.decode(src.data);\n    case UINT8:\n      return trans.uint8.decode(src.data);\n    case UINT16BE:\n      return trans.uint16be.decode(src.data);\n    case UINT16LE:\n      return trans.uint16le.decode(src.data);\n    case UINT32BE:\n      return trans.uint32be.decode(src.data);\n    case UINT32LE:\n      return trans.uint32le.decode(src.data);\n    case STRING:\n      return trans.string.decode(src.data);\n    case ESCAPED:\n      return trans.escaped.decode(src.data);\n    default:\n      throw new TypeError(`decode type \"${src.type}\" not recognized`);\n  }\n};\n\n// The public decoding function. Returns an array of integers.\nexports.decode = function exportsDecode(type, data) {\n  const src = validateSrc(type, data);\n  return decode(src);\n};\n// The public encoding function. Returns a Buffer-typed byte array.\nexports.encode = function exportsEncode(type, chars) {\n  let c;\n  let buf;\n  const dst = validateDst(type, chars);\n  if (dst.crlf) {\n    /* prefix with CRLF line end conversion, don't contaminate caller's chars array */\n    c = trans.lineEnds.crlf(chars);\n    buf = encode(dst.type, c);\n  } else if (dst.lf) {\n    /* prefix with LF line end conversion, don't contaminate caller's chars array */\n    c = trans.lineEnds.lf(chars);\n    buf = encode(dst.type, c);\n  } else {\n    buf = encode(dst.type, chars);\n  }\n  if (dst.base64) {\n    /* post base 64 encoding */\n    buf = trans.base64.encode(buf);\n  }\n  return buf;\n};\n// Converts data of type `srcType` to data of type `dstType`.\n// `srcData` may be a JavaScript String, or node.js Buffer, depending on the corresponding type.\nconst convert = function convert(srcType, srcData, dstType) {\n  return exports.encode(dstType, exports.decode(srcType, srcData));\n};\nexports.convert = convert;\n","// This module has been developed programmatically in the `apg-lib` build process.\n// It is used to build web pages programatically on the fly without the need for <script> or <style> tags.\n\nmodule.exports = function emittcss(){\nreturn '/* This file automatically generated by jsonToless() and LESS. */\\n.apg-mono {\\n  font-family: monospace;\\n}\\n.apg-active {\\n  font-weight: bold;\\n  color: #000000;\\n}\\n.apg-match {\\n  font-weight: bold;\\n  color: #264BFF;\\n}\\n.apg-empty {\\n  font-weight: bold;\\n  color: #0fbd0f;\\n}\\n.apg-nomatch {\\n  font-weight: bold;\\n  color: #FF4000;\\n}\\n.apg-lh-match {\\n  font-weight: bold;\\n  color: #1A97BA;\\n}\\n.apg-lb-match {\\n  font-weight: bold;\\n  color: #5F1687;\\n}\\n.apg-remainder {\\n  font-weight: bold;\\n  color: #999999;\\n}\\n.apg-ctrl-char {\\n  font-weight: bolder;\\n  font-style: italic;\\n  font-size: 0.6em;\\n}\\n.apg-line-end {\\n  font-weight: bold;\\n  color: #000000;\\n}\\n.apg-error {\\n  font-weight: bold;\\n  color: #FF4000;\\n}\\n.apg-phrase {\\n  color: #000000;\\n  background-color: #8caae6;\\n}\\n.apg-empty-phrase {\\n  color: #0fbd0f;\\n}\\ntable.apg-state {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: left;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-state th,\\ntable.apg-state td {\\n  text-align: left;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-state th:nth-last-child(2),\\ntable.apg-state td:nth-last-child(2) {\\n  text-align: right;\\n}\\ntable.apg-state caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-stats {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-stats th,\\ntable.apg-stats td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-stats caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-trace {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-trace caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-trace th,\\ntable.apg-trace td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-trace th:last-child,\\ntable.apg-trace th:nth-last-child(2),\\ntable.apg-trace td:last-child,\\ntable.apg-trace td:nth-last-child(2) {\\n  text-align: left;\\n}\\ntable.apg-grammar {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-grammar caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-grammar th,\\ntable.apg-grammar td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-grammar th:last-child,\\ntable.apg-grammar td:last-child {\\n  text-align: left;\\n}\\ntable.apg-rules {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-rules caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-rules th,\\ntable.apg-rules td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-rules a {\\n  color: #003399 !important;\\n}\\ntable.apg-rules a:hover {\\n  color: #8caae6 !important;\\n}\\ntable.apg-attrs {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: center;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-attrs caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-attrs th,\\ntable.apg-attrs td {\\n  text-align: center;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-attrs th:nth-child(1),\\ntable.apg-attrs th:nth-child(2),\\ntable.apg-attrs th:nth-child(3) {\\n  text-align: right;\\n}\\ntable.apg-attrs td:nth-child(1),\\ntable.apg-attrs td:nth-child(2),\\ntable.apg-attrs td:nth-child(3) {\\n  text-align: right;\\n}\\ntable.apg-attrs a {\\n  color: #003399 !important;\\n}\\ntable.apg-attrs a:hover {\\n  color: #8caae6 !important;\\n}\\n';\n}\n","/* eslint-disable func-names */\n/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module exports a variety of utility functions that support\n// [`apg`](https://github.com/ldthomas/apg-js2), [`apg-lib`](https://github.com/ldthomas/apg-js2-lib)\n// and the generated parser applications.\n\nconst style = require('./style');\nconst converter = require('../apg-conv-api/converter');\nconst emitCss = require('./emitcss');\nconst id = require('./identifiers');\n\nconst thisFileName = 'utilities.js: ';\n\n/* translate (implied) phrase beginning character and length to actual first and last character indexes */\n/* used by multiple phrase handling functions */\nconst getBounds = function (length, begArg, len) {\n  let end;\n  let beg = begArg;\n  const TRUE = true;\n  while (TRUE) {\n    if (length <= 0) {\n      beg = 0;\n      end = 0;\n      break;\n    }\n    if (typeof beg !== 'number') {\n      beg = 0;\n      end = length;\n      break;\n    }\n    if (beg >= length) {\n      beg = length;\n      end = length;\n      break;\n    }\n    if (typeof len !== 'number') {\n      end = length;\n      break;\n    }\n    end = beg + len;\n    if (end > length) {\n      end = length;\n      break;\n    }\n    break;\n  }\n  return {\n    beg,\n    end,\n  };\n};\n// Generates a complete, minimal HTML5 page, inserting the user's HTML text on the page.\n// - *html* - the page text in HTML format\n// - *title* - the HTML page `<title>` - defaults to `htmlToPage`.\nexports.htmlToPage = function (html, titleArg) {\n  let title;\n  if (typeof html !== 'string') {\n    throw new Error(`${thisFileName}htmlToPage: input HTML is not a string`);\n  }\n  if (typeof titleArg !== 'string') {\n    title = 'htmlToPage';\n  } else {\n    title = titleArg;\n  }\n  let page = '';\n  page += '<!DOCTYPE html>\\n';\n  page += '<html lang=\"en\">\\n';\n  page += '<head>\\n';\n  page += '<meta charset=\"utf-8\">\\n';\n  page += `<title>${title}</title>\\n`;\n  page += '<style>\\n';\n  page += emitCss();\n  page += '</style>\\n';\n  page += '</head>\\n<body>\\n';\n  page += `<p>${new Date()}</p>\\n`;\n  page += html;\n  page += '</body>\\n</html>\\n';\n  return page;\n};\n// Formats the returned object from `parser.parse()`\n// into an HTML table.\n// ```\n// return {\n//   success : sysData.success,\n//   state : sysData.state,\n//   length : charsLength,\n//   matched : sysData.phraseLength,\n//   maxMatched : maxMatched,\n//   maxTreeDepth : maxTreeDepth,\n//   nodeHits : nodeHits,\n//   inputLength : chars.length,\n//   subBegin : charsBegin,\n//   subEnd : charsEnd,\n//   subLength : charsLength\n// };\n// ```\nexports.parserResultToHtml = function (result, caption) {\n  let cap = null;\n  if (typeof caption === 'string' && caption !== '') {\n    cap = caption;\n  }\n  let success;\n  let state;\n  if (result.success === true) {\n    success = `<span class=\"${style.CLASS_MATCH}\">true</span>`;\n  } else {\n    success = `<span class=\"${style.CLASS_NOMATCH}\">false</span>`;\n  }\n  if (result.state === id.EMPTY) {\n    state = `<span class=\"${style.CLASS_EMPTY}\">EMPTY</span>`;\n  } else if (result.state === id.MATCH) {\n    state = `<span class=\"${style.CLASS_MATCH}\">MATCH</span>`;\n  } else if (result.state === id.NOMATCH) {\n    state = `<span class=\"${style.CLASS_NOMATCH}\">NOMATCH</span>`;\n  } else {\n    state = `<span class=\"${style.CLASS_NOMATCH}\">unrecognized</span>`;\n  }\n  let html = '';\n  html += `<table class=\"${style.CLASS_STATE}\">\\n`;\n  if (cap) {\n    html += `<caption>${cap}</caption>\\n`;\n  }\n  html += '<tr><th>state item</th><th>value</th><th>description</th></tr>\\n';\n  html += `<tr><td>parser success</td><td>${success}</td>\\n`;\n  html += `<td><span class=\"${style.CLASS_MATCH}\">true</span> if the parse succeeded,\\n`;\n  html += ` <span class=\"${style.CLASS_NOMATCH}\">false</span> otherwise`;\n  html += '<br><i>NOTE: for success, entire string must be matched</i></td></tr>\\n';\n  html += `<tr><td>parser state</td><td>${state}</td>\\n`;\n  html += `<td><span class=\"${style.CLASS_EMPTY}\">EMPTY</span>, `;\n  html += `<span class=\"${style.CLASS_MATCH}\">MATCH</span> or \\n`;\n  html += `<span class=\"${style.CLASS_NOMATCH}\">NOMATCH</span></td></tr>\\n`;\n  html += `<tr><td>string length</td><td>${result.length}</td><td>length of the input (sub)string</td></tr>\\n`;\n  html += `<tr><td>matched length</td><td>${result.matched}</td><td>number of input string characters matched</td></tr>\\n`;\n  html += `<tr><td>max matched</td><td>${result.maxMatched}</td><td>maximum number of input string characters matched</td></tr>\\n`;\n  html += `<tr><td>max tree depth</td><td>${result.maxTreeDepth}</td><td>maximum depth of the parse tree reached</td></tr>\\n`;\n  html += `<tr><td>node hits</td><td>${result.nodeHits}</td><td>number of parse tree node hits (opcode function calls)</td></tr>\\n`;\n  html += `<tr><td>input length</td><td>${result.inputLength}</td><td>length of full input string</td></tr>\\n`;\n  html += `<tr><td>sub-string begin</td><td>${result.subBegin}</td><td>sub-string first character index</td></tr>\\n`;\n  html += `<tr><td>sub-string end</td><td>${result.subEnd}</td><td>sub-string end-of-string index</td></tr>\\n`;\n  html += `<tr><td>sub-string length</td><td>${result.subLength}</td><td>sub-string length</td></tr>\\n`;\n  html += '</table>\\n';\n  return html;\n};\n// Translates a sub-array of integer character codes into a string.\n// Very useful in callback functions to translate the matched phrases into strings.\nexports.charsToString = function (chars, phraseIndex, phraseLength) {\n  let beg;\n  let end;\n  if (typeof phraseIndex === 'number') {\n    if (phraseIndex >= chars.length) {\n      return '';\n    }\n    beg = phraseIndex < 0 ? 0 : phraseIndex;\n  } else {\n    beg = 0;\n  }\n  if (typeof phraseLength === 'number') {\n    if (phraseLength <= 0) {\n      return '';\n    }\n    end = phraseLength > chars.length - beg ? chars.length : beg + phraseLength;\n  } else {\n    end = chars.length;\n  }\n  if (beg < end) {\n    return converter.encode('UTF16LE', chars.slice(beg, end)).toString('utf16le');\n  }\n  return '';\n};\n// Translates a string into an array of integer character codes.\nexports.stringToChars = function (string) {\n  return converter.decode('STRING', string);\n};\n// Translates an opcode identifier into a human-readable string.\nexports.opcodeToString = function (type) {\n  let ret = 'unknown';\n  switch (type) {\n    case id.ALT:\n      ret = 'ALT';\n      break;\n    case id.CAT:\n      ret = 'CAT';\n      break;\n    case id.RNM:\n      ret = 'RNM';\n      break;\n    case id.UDT:\n      ret = 'UDT';\n      break;\n    case id.AND:\n      ret = 'AND';\n      break;\n    case id.NOT:\n      ret = 'NOT';\n      break;\n    case id.REP:\n      ret = 'REP';\n      break;\n    case id.TRG:\n      ret = 'TRG';\n      break;\n    case id.TBS:\n      ret = 'TBS';\n      break;\n    case id.TLS:\n      ret = 'TLS';\n      break;\n    case id.BKR:\n      ret = 'BKR';\n      break;\n    case id.BKA:\n      ret = 'BKA';\n      break;\n    case id.BKN:\n      ret = 'BKN';\n      break;\n    case id.ABG:\n      ret = 'ABG';\n      break;\n    case id.AEN:\n      ret = 'AEN';\n      break;\n    default:\n      throw new Error('unrecognized opcode');\n  }\n  return ret;\n};\n// Translates an state identifier into a human-readable string.\nexports.stateToString = function (state) {\n  let ret = 'unknown';\n  switch (state) {\n    case id.ACTIVE:\n      ret = 'ACTIVE';\n      break;\n    case id.MATCH:\n      ret = 'MATCH';\n      break;\n    case id.EMPTY:\n      ret = 'EMPTY';\n      break;\n    case id.NOMATCH:\n      ret = 'NOMATCH';\n      break;\n    default:\n      throw new Error('unrecognized state');\n  }\n  return ret;\n};\n// Array which translates all 128, 7-bit ASCII character codes to their respective HTML format.\nexports.asciiChars = [\n  'NUL',\n  'SOH',\n  'STX',\n  'ETX',\n  'EOT',\n  'ENQ',\n  'ACK',\n  'BEL',\n  'BS',\n  'TAB',\n  'LF',\n  'VT',\n  'FF',\n  'CR',\n  'SO',\n  'SI',\n  'DLE',\n  'DC1',\n  'DC2',\n  'DC3',\n  'DC4',\n  'NAK',\n  'SYN',\n  'ETB',\n  'CAN',\n  'EM',\n  'SUB',\n  'ESC',\n  'FS',\n  'GS',\n  'RS',\n  'US',\n  '&nbsp;',\n  '!',\n  '&#34;',\n  '#',\n  '$',\n  '%',\n  '&#38;',\n  '&#39;',\n  '(',\n  ')',\n  '*',\n  '+',\n  ',',\n  '-',\n  '.',\n  '/',\n  '0',\n  '1',\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  ':',\n  ';',\n  '&#60;',\n  '=',\n  '&#62;',\n  '?',\n  '@',\n  'A',\n  'B',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z',\n  '[',\n  '&#92;',\n  ']',\n  '^',\n  '_',\n  '`',\n  'a',\n  'b',\n  'c',\n  'd',\n  'e',\n  'f',\n  'g',\n  'h',\n  'i',\n  'j',\n  'k',\n  'l',\n  'm',\n  'n',\n  'o',\n  'p',\n  'q',\n  'r',\n  's',\n  't',\n  'u',\n  'v',\n  'w',\n  'x',\n  'y',\n  'z',\n  '{',\n  '|',\n  '}',\n  '~',\n  'DEL',\n];\n// Translates a single character to hexadecimal with leading zeros for 2, 4, or 8 digit display.\nexports.charToHex = function (char) {\n  let ch = char.toString(16).toUpperCase();\n  switch (ch.length) {\n    case 1:\n    case 3:\n    case 7:\n      ch = `0${ch}`;\n      break;\n    case 2:\n    case 6:\n      ch = `00${ch}`;\n      break;\n    case 4:\n      break;\n    case 5:\n      ch = `000${ch}`;\n      break;\n    default:\n      throw new Error('unrecognized option');\n  }\n  return ch;\n};\n// Translates a sub-array of character codes to decimal display format.\nexports.charsToDec = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToDec: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  if (bounds.end > bounds.beg) {\n    ret += chars[bounds.beg];\n    for (let i = bounds.beg + 1; i < bounds.end; i += 1) {\n      ret += `,${chars[i]}`;\n    }\n  }\n  return ret;\n};\n// Translates a sub-array of character codes to hexadecimal display format.\nexports.charsToHex = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToHex: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  if (bounds.end > bounds.beg) {\n    ret += `\\\\x${exports.charToHex(chars[bounds.beg])}`;\n    for (let i = bounds.beg + 1; i < bounds.end; i += 1) {\n      ret += `,\\\\x${exports.charToHex(chars[i])}`;\n    }\n  }\n  return ret;\n};\nexports.charsToHtmlEntities = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToHex: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  if (bounds.end > bounds.beg) {\n    for (let i = bounds.beg; i < bounds.end; i += 1) {\n      ret += `&#x${chars[i].toString(16)};`;\n    }\n  }\n  return ret;\n};\n// Translates a sub-array of character codes to Unicode display format.\nfunction isUnicode(char) {\n  if (char >= 0xd800 && char <= 0xdfff) {\n    return false;\n  }\n  if (char > 0x10ffff) {\n    return false;\n  }\n  return true;\n}\nexports.charsToUnicode = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToUnicode: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  if (bounds.end > bounds.beg) {\n    for (let i = bounds.beg; i < bounds.end; i += 1) {\n      if (isUnicode(chars[i])) {\n        ret += `&#${chars[i]};`;\n      } else {\n        ret += ` U+${exports.charToHex(chars[i])}`;\n      }\n    }\n  }\n  return ret;\n};\n// Translates a sub-array of character codes to JavaScript Unicode display format (`\\uXXXX`).\nexports.charsToJsUnicode = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToJsUnicode: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  if (bounds.end > bounds.beg) {\n    ret += `\\\\u${exports.charToHex(chars[bounds.beg])}`;\n    for (let i = bounds.beg + 1; i < bounds.end; i += 1) {\n      ret += `,\\\\u${exports.charToHex(chars[i])}`;\n    }\n  }\n  return ret;\n};\n// Translates a sub-array of character codes to printing ASCII character display format.\nexports.charsToAscii = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToAscii: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  for (let i = bounds.beg; i < bounds.end; i += 1) {\n    const char = chars[i];\n    if (char >= 32 && char <= 126) {\n      ret += String.fromCharCode(char);\n    } else {\n      ret += `\\\\x${exports.charToHex(char)}`;\n    }\n  }\n  return ret;\n};\n// Translates a sub-array of character codes to HTML display format.\nexports.charsToAsciiHtml = function (chars, beg, len) {\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToAsciiHtml: input must be an array of integers`);\n  }\n  let html = '';\n  let char;\n  const bounds = getBounds(chars.length, beg, len);\n  for (let i = bounds.beg; i < bounds.end; i += 1) {\n    char = chars[i];\n    if (char < 32 || char === 127) {\n      /* control characters */\n      html += `<span class=\"${style.CLASS_CTRLCHAR}\">${exports.asciiChars[char]}</span>`;\n    } else if (char > 127) {\n      /* non-ASCII */\n      html += `<span class=\"${style.CLASS_CTRLCHAR}\">U+${exports.charToHex(char)}</span>`;\n    } else {\n      /* printing ASCII, 32 <= char <= 126 */\n      html += exports.asciiChars[char];\n    }\n  }\n  return html;\n};\n// Translates a JavaScript string to HTML display format.\nexports.stringToAsciiHtml = function (str) {\n  const chars = converter.decode('STRING', str);\n  return this.charsToAsciiHtml(chars);\n};\n","/* eslint-disable guard-for-in */\n/* eslint-disable no-restricted-syntax */\n/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module is used by the parser to build an [Abstract Syntax Tree](https://en.wikipedia.org/wiki/Abstract_syntax_tree) (AST).\n// The AST can be thought of as a subset of the full parse tree.\n// Each node of the AST holds the phrase that was matched at the corresponding, named parse tree node.\n// It is built as the parser successfully matches phrases to the rule names\n// (`RNM` operators) and `UDT`s as it parses an input string.\n// The user controls which `RNM` or `UDT` names to keep on the AST.\n// The user can also associate callback functions with some or all of the retained\n// AST nodes to be used to translate the node phrases. That is, associate semantic\n// actions to the matched phrases.\n// Translating the AST rather that attempting to apply semantic actions during\n// the parsing process, has the advantage that there is no backtracking and that the phrases\n// are known while traversing down tree as will as up.\n//\n// Let `ast` be an `ast.js` object. To identify a node to be kept on the AST:\n// ```\n// ast.callbacks[\"rulename\"] = true; (all nodes default to false)\n// ```\n// To associate a callback function with a node:\n// ```\n// ast.callbacks[\"rulename\"] = fn\n// ```\n// `rulename` is any `RNM` or `UDT` name defined by the associated grammar\n// and `fn` is a user-written callback function.\n// (See [`apg-examples`](https://github.com/ldthomas/apg-js2-examples/tree/master/ast) for examples of how to create an AST,\n// define the nodes and callback functions and attach it to a parser.)\nmodule.exports = function exportsAst() {\n  const id = require('./identifiers');\n  const utils = require('./utilities');\n\n  const thisFileName = 'ast.js: ';\n  const that = this;\n  let rules = null;\n  let udts = null;\n  let chars = null;\n  let nodeCount = 0;\n  const nodesDefined = [];\n  const nodeCallbacks = [];\n  const stack = [];\n  const records = [];\n  this.callbacks = [];\n  this.astObject = 'astObject';\n  /* called by the parser to initialize the AST with the rules, UDTs and the input characters */\n  this.init = function init(rulesIn, udtsIn, charsIn) {\n    stack.length = 0;\n    records.length = 0;\n    nodesDefined.length = 0;\n    nodeCount = 0;\n    rules = rulesIn;\n    udts = udtsIn;\n    chars = charsIn;\n    let i;\n    const list = [];\n    for (i = 0; i < rules.length; i += 1) {\n      list.push(rules[i].lower);\n    }\n    for (i = 0; i < udts.length; i += 1) {\n      list.push(udts[i].lower);\n    }\n    nodeCount = rules.length + udts.length;\n    for (i = 0; i < nodeCount; i += 1) {\n      nodesDefined[i] = false;\n      nodeCallbacks[i] = null;\n    }\n    for (const index in that.callbacks) {\n      const lower = index.toLowerCase();\n      i = list.indexOf(lower);\n      if (i < 0) {\n        throw new Error(`${thisFileName}init: node '${index}' not a rule or udt name`);\n      }\n      if (typeof that.callbacks[index] === 'function') {\n        nodesDefined[i] = true;\n        nodeCallbacks[i] = that.callbacks[index];\n      }\n      if (that.callbacks[index] === true) {\n        nodesDefined[i] = true;\n      }\n    }\n  };\n  /* AST node definitions - called by the parser's `RNM` operator */\n  this.ruleDefined = function ruleDefined(index) {\n    return nodesDefined[index] !== false;\n  };\n  /* AST node definitions - called by the parser's `UDT` operator */\n  this.udtDefined = function udtDefined(index) {\n    return nodesDefined[rules.length + index] !== false;\n  };\n  /* called by the parser's `RNM` & `UDT` operators */\n  /* builds a record for the downward traversal of the node */\n  this.down = function down(callbackIndex, name) {\n    const thisIndex = records.length;\n    stack.push(thisIndex);\n    records.push({\n      name,\n      thisIndex,\n      thatIndex: null,\n      state: id.SEM_PRE,\n      callbackIndex,\n      phraseIndex: null,\n      phraseLength: null,\n      stack: stack.length,\n    });\n    return thisIndex;\n  };\n  /* called by the parser's `RNM` & `UDT` operators */\n  /* builds a record for the upward traversal of the node */\n  this.up = function up(callbackIndex, name, phraseIndex, phraseLength) {\n    const thisIndex = records.length;\n    const thatIndex = stack.pop();\n    records.push({\n      name,\n      thisIndex,\n      thatIndex,\n      state: id.SEM_POST,\n      callbackIndex,\n      phraseIndex,\n      phraseLength,\n      stack: stack.length,\n    });\n    records[thatIndex].thatIndex = thisIndex;\n    records[thatIndex].phraseIndex = phraseIndex;\n    records[thatIndex].phraseLength = phraseLength;\n    return thisIndex;\n  };\n  // Called by the user to translate the AST.\n  // Translate means to associate or apply some semantic action to the\n  // phrases that were syntactically matched to the AST nodes according\n  // to the defining grammar.\n  // ```\n  // data - optional user-defined data\n  //        passed to the callback functions by the translator\n  // ```\n  this.translate = function translate(data) {\n    let ret;\n    let callback;\n    let record;\n    for (let i = 0; i < records.length; i += 1) {\n      record = records[i];\n      callback = nodeCallbacks[record.callbackIndex];\n      if (record.state === id.SEM_PRE) {\n        if (callback !== null) {\n          ret = callback(id.SEM_PRE, chars, record.phraseIndex, record.phraseLength, data);\n          if (ret === id.SEM_SKIP) {\n            i = record.thatIndex;\n          }\n        }\n      } else if (callback !== null) {\n        callback(id.SEM_POST, chars, record.phraseIndex, record.phraseLength, data);\n      }\n    }\n  };\n  /* called by the parser to reset the length of the records array */\n  /* necessary on backtracking */\n  this.setLength = function setLength(length) {\n    records.length = length;\n    if (length > 0) {\n      stack.length = records[length - 1].stack;\n    } else {\n      stack.length = 0;\n    }\n  };\n  /* called by the parser to get the length of the records array */\n  this.getLength = function getLength() {\n    return records.length;\n  };\n  /* helper for XML display */\n  function indent(n) {\n    let ret = '';\n    for (let i = 0; i < n; i += 1) {\n      ret += ' ';\n    }\n    return ret;\n  }\n  // Generate an `XML` version of the AST.\n  // Useful if you want to use a special or favorite XML parser to translate the\n  // AST.\n  // ```\n  // mode - the display mode of the captured phrases\n  //      - default mode is \"ascii\"\n  //      - can be: \"ascii\"\n  //                \"decimal\"\n  //                \"hexadecimal\"\n  //                \"unicode\"\n  // ```\n  this.toXml = function toSml(modeArg) {\n    let display = utils.charsToDec;\n    let caption = 'decimal integer character codes';\n    if (typeof modeArg === 'string' && modeArg.length >= 3) {\n      const mode = modeArg.slice(0, 3).toLowerCase();\n      if (mode === 'asc') {\n        display = utils.charsToAscii;\n        caption = 'ASCII for printing characters, hex for non-printing';\n      } else if (mode === 'hex') {\n        display = utils.charsToHex;\n        caption = 'hexadecimal integer character codes';\n      } else if (mode === 'uni') {\n        display = utils.charsToUnicode;\n        caption = 'Unicode UTF-32 integer character codes';\n      }\n    }\n    let xml = '';\n    let depth = 0;\n    xml += '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n';\n    xml += `<root nodes=\"${records.length / 2}\" characters=\"${chars.length}\">\\n`;\n    xml += `<!-- input string, ${caption} -->\\n`;\n    xml += indent(depth + 2);\n    xml += display(chars);\n    xml += '\\n';\n    records.forEach((rec) => {\n      if (rec.state === id.SEM_PRE) {\n        depth += 1;\n        xml += indent(depth);\n        xml += `<node name=\"${rec.name}\" index=\"${rec.phraseIndex}\" length=\"${rec.phraseLength}\">\\n`;\n        xml += indent(depth + 2);\n        xml += display(chars, rec.phraseIndex, rec.phraseLength);\n        xml += '\\n';\n      } else {\n        xml += indent(depth);\n        xml += `</node><!-- name=\"${rec.name}\" -->\\n`;\n        depth -= 1;\n      }\n    });\n\n    xml += '</root>\\n';\n    return xml;\n  };\n  /* generate a JavaScript object version of the AST */\n  /* for the phrase-matching engine apg-exp */\n  this.phrases = function phrases() {\n    const obj = {};\n    let i;\n    let record;\n    for (i = 0; i < records.length; i += 1) {\n      record = records[i];\n      if (record.state === id.SEM_PRE) {\n        if (!Array.isArray(obj[record.name])) {\n          obj[record.name] = [];\n        }\n        obj[record.name].push({\n          index: record.phraseIndex,\n          length: record.phraseLength,\n        });\n      }\n    }\n    return obj;\n  };\n};\n","/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module acts as a \"circular buffer\". It is used to keep track\n// only the last N records in an array of records. If more than N records\n// are saved, each additional record overwrites the previously oldest record.\n// This module deals only with the record indexes and does not save\n// any actual records. It is used by [`trace.js`](./trace.html) for limiting the number of\n// trace records saved.\nmodule.exports = function exportsCircularBuffer() {\n  'use strict;';\n\n  const thisFileName = 'circular-buffer.js: ';\n  let itemIndex = -1;\n  let maxListSize = 0;\n  // Initialize buffer.<br>\n  // *size* is `maxListSize`, the maximum number of records saved before overwriting begins.\n  this.init = function init(size) {\n    if (typeof size !== 'number' || size <= 0) {\n      throw new Error(`${thisFileName}init: circular buffer size must an integer > 0`);\n    }\n    maxListSize = Math.ceil(size);\n    itemIndex = -1;\n  };\n  // Call this to increment the number of records collected.<br>\n  // Returns the array index number to store the next record in.\n  this.increment = function increment() {\n    itemIndex += 1;\n    return (itemIndex + maxListSize) % maxListSize;\n  };\n  // Returns `maxListSize` - the maximum number of records to keep in the buffer.\n  this.maxSize = function maxSize() {\n    return maxListSize;\n  };\n  // Returns the highest number of items saved.<br>\n  // (The number of items is the actual number of records processed\n  // even though only `maxListSize` records are actually retained.)\n  this.items = function items() {\n    return itemIndex + 1;\n  };\n  // Returns the record number associated with this item index.\n  this.getListIndex = function getListIndex(item) {\n    if (itemIndex === -1) {\n      return -1;\n    }\n    if (item < 0 || item > itemIndex) {\n      return -1;\n    }\n    if (itemIndex - item >= maxListSize) {\n      return -1;\n    }\n    return (item + maxListSize) % maxListSize;\n  };\n  // The iterator over the circular buffer.\n  // The user's function, `fn`, will be called with arguments `fn(listIndex, itemIndex)`\n  // where `listIndex` is the saved record index and `itemIndex` is the actual item index.\n  this.forEach = function forEach(fn) {\n    if (itemIndex === -1) {\n      /* no records have been collected */\n      return;\n    }\n    if (itemIndex < maxListSize) {\n      /* fewer than maxListSize records have been collected - number of items = number of records */\n      for (let i = 0; i <= itemIndex; i += 1) {\n        fn(i, i);\n      }\n      return;\n    }\n    /* start with the oldest record saved and finish with the most recent record saved */\n    for (let i = itemIndex - maxListSize + 1; i <= itemIndex; i += 1) {\n      const listIndex = (i + maxListSize) % maxListSize;\n      fn(listIndex, i);\n    }\n  };\n};\n","/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable new-cap */\n/* eslint-disable guard-for-in */\n/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This is the primary object of `apg-lib`. Calling its `parse()` member function\n// walks the parse tree of opcodes, matching phrases from the input string as it goes.\n// The working code for all of the operators, `ALT`, `CAT`, etc. is in this module.\nmodule.exports = function parser() {\n  const id = require('./identifiers');\n  const utils = require('./utilities');\n\n  const thisFileName = 'parser.js: ';\n  const thisThis = this;\n  let opExecute;\n  this.ast = null;\n  this.stats = null;\n  this.trace = null;\n  this.callbacks = [];\n  let opcodes = null;\n  let chars = null;\n  let charsBegin;\n  let charsLength;\n  let charsEnd;\n  let lookAround;\n  let treeDepth = 0;\n  let maxTreeDepth = 0;\n  let nodeHits = 0;\n  let ruleCallbacks = null;\n  let udtCallbacks = null;\n  let rules = null;\n  let udts = null;\n  let syntaxData = null;\n  let maxMatched = 0;\n  let limitTreeDepth = Infinity;\n  let limitNodeHits = Infinity;\n  // Evaluates any given rule. This can be called from the syntax callback\n  // functions to evaluate any rule in the grammar's rule list. Great caution\n  // should be used. Use of this function will alter the language that the\n  // parser accepts.\n  const evaluateRule = function evaluateRule(ruleIndex, phraseIndex, sysData) {\n    const functionName = `${thisFileName}evaluateRule(): `;\n    if (ruleIndex >= rules.length) {\n      throw new Error(`${functionName}rule index: ${ruleIndex} out of range`);\n    }\n    if (phraseIndex >= charsEnd) {\n      throw new Error(`${functionName}phrase index: ${phraseIndex} out of range`);\n    }\n    const { length } = opcodes;\n    opcodes.push({\n      type: id.RNM,\n      index: ruleIndex,\n    });\n    opExecute(length, phraseIndex, sysData);\n    opcodes.pop();\n  };\n  // Evaluates any given UDT. This can be called from the syntax callback\n  // functions to evaluate any UDT in the grammar's UDT list. Great caution\n  // should be used. Use of this function will alter the language that the\n  // parser accepts.\n  const evaluateUdt = function (udtIndex, phraseIndex, sysData) {\n    const functionName = `${thisFileName}evaluateUdt(): `;\n    if (udtIndex >= udts.length) {\n      throw new Error(`${functionName}udt index: ${udtIndex} out of range`);\n    }\n    if (phraseIndex >= charsEnd) {\n      throw new Error(`${functionName}phrase index: ${phraseIndex} out of range`);\n    }\n    const { length } = opcodes;\n    opcodes.push({\n      type: id.UDT,\n      empty: udts[udtIndex].empty,\n      index: udtIndex,\n    });\n    opExecute(length, phraseIndex, sysData);\n    opcodes.pop();\n  };\n  /* Clears this object of any/all data that has been initialized or added to it. */\n  /* Called by parse() on initialization, allowing this object to be re-used for multiple parsing calls. */\n  const clear = function () {\n    treeDepth = 0;\n    maxTreeDepth = 0;\n    nodeHits = 0;\n    maxMatched = 0;\n    lookAround = [\n      {\n        lookAround: id.LOOKAROUND_NONE,\n        anchor: 0,\n        charsEnd: 0,\n        charsLength: 0,\n      },\n    ];\n    rules = null;\n    udts = null;\n    chars = null;\n    charsBegin = 0;\n    charsLength = 0;\n    charsEnd = 0;\n    ruleCallbacks = null;\n    udtCallbacks = null;\n    syntaxData = null;\n    opcodes = null;\n  };\n  /* object for maintaining a stack of back reference frames */\n  const backRef = function () {\n    const stack = [];\n    const init = function () {\n      const obj = {};\n      rules.forEach((rule) => {\n        if (rule.isBkr) {\n          obj[rule.lower] = null;\n        }\n      });\n      if (udts.length > 0) {\n        udts.forEach((udt) => {\n          if (udt.isBkr) {\n            obj[udt.lower] = null;\n          }\n        });\n      }\n      stack.push(obj);\n    };\n    const copy = function () {\n      const top = stack[stack.length - 1];\n      const obj = {};\n      /* // eslint-disable-next-line no-restricted-syntax */\n      for (const name in top) {\n        obj[name] = top[name];\n      }\n      return obj;\n    };\n    this.push = function push() {\n      stack.push(copy());\n    };\n    this.pop = function pop(lengthArg) {\n      let length = lengthArg;\n      if (!length) {\n        length = stack.length - 1;\n      }\n      if (length < 1 || length > stack.length) {\n        throw new Error(`${thisFileName}backRef.pop(): bad length: ${length}`);\n      }\n      stack.length = length;\n      return stack[stack.length - 1];\n    };\n    this.length = function length() {\n      return stack.length;\n    };\n    this.savePhrase = function savePhrase(name, index, length) {\n      stack[stack.length - 1][name] = {\n        phraseIndex: index,\n        phraseLength: length,\n      };\n    };\n    this.getPhrase = function (name) {\n      return stack[stack.length - 1][name];\n    };\n    /* constructor */\n    init();\n  };\n  // The system data structure that relays system information to and from the rule and UDT callback functions.\n  // - *state* - the state of the parser, ACTIVE, MATCH, EMPTY or NOMATCH (see the `identifiers` object in\n  // [`apg-lib`](https://github.com/ldthomas/apg-js2-lib))\n  // - *phraseLength* - the number of characters matched if the state is MATCHED or EMPTY\n  // - *lookaround* - the top of the stack holds the current look around state,\n  // LOOKAROUND_NONE, LOOKAROUND_AHEAD or LOOKAROUND_BEHIND,\n  // - *uFrame* - the \"universal\" back reference frame.\n  // Holds the last matched phrase for each of the back referenced rules and UDTs.\n  // - *pFrame* - the stack of \"parent\" back reference frames.\n  // Holds the matched phrase from the parent frame of each back referenced rules and UDTs.\n  // - *evaluateRule* - a reference to this object's `evaluateRule()` function.\n  // Can be called from a callback function (use with extreme caution!)\n  // - *evaluateUdt* - a reference to this object's `evaluateUdt()` function.\n  // Can be called from a callback function (use with extreme caution!)\n  const systemData = function systemData() {\n    const thisData = this;\n    this.state = id.ACTIVE;\n    this.phraseLength = 0;\n    this.ruleIndex = 0;\n    this.udtIndex = 0;\n    this.lookAround = lookAround[lookAround.length - 1];\n    this.uFrame = new backRef();\n    this.pFrame = new backRef();\n    this.evaluateRule = evaluateRule;\n    this.evaluateUdt = evaluateUdt;\n    /* refresh the parser state for the next operation */\n    this.refresh = function refresh() {\n      thisData.state = id.ACTIVE;\n      thisData.phraseLength = 0;\n      thisData.lookAround = lookAround[lookAround.length - 1];\n    };\n  };\n  /* some look around helper functions */\n  const lookAroundValue = function lookAroundValue() {\n    return lookAround[lookAround.length - 1];\n  };\n  /* return true if parser is in look around (ahead or behind) state */\n  const inLookAround = function inLookAround() {\n    return lookAround.length > 1;\n  };\n  /* return true if parser is in look behind state */\n  const inLookBehind = function () {\n    return lookAround[lookAround.length - 1].lookAround === id.LOOKAROUND_BEHIND;\n  };\n  /* called by parse() to initialize the AST object, if one has been defined */\n  const initializeAst = function () {\n    const functionName = `${thisFileName}initializeAst(): `;\n    const TRUE = true;\n    while (TRUE) {\n      if (thisThis.ast === undefined) {\n        thisThis.ast = null;\n        break;\n      }\n      if (thisThis.ast === null) {\n        break;\n      }\n      if (thisThis.ast.astObject !== 'astObject') {\n        throw new Error(`${functionName}ast object not recognized`);\n      }\n      break;\n    }\n    if (thisThis.ast !== null) {\n      thisThis.ast.init(rules, udts, chars);\n    }\n  };\n  /* called by parse() to initialize the trace object, if one has been defined */\n  const initializeTrace = function () {\n    const functionName = `${thisFileName}initializeTrace(): `;\n    const TRUE = true;\n    while (TRUE) {\n      if (thisThis.trace === undefined) {\n        thisThis.trace = null;\n        break;\n      }\n      if (thisThis.trace === null) {\n        break;\n      }\n      if (thisThis.trace.traceObject !== 'traceObject') {\n        throw new Error(`${functionName}trace object not recognized`);\n      }\n      break;\n    }\n    if (thisThis.trace !== null) {\n      thisThis.trace.init(rules, udts, chars);\n    }\n  };\n  /* called by parse() to initialize the statistics object, if one has been defined */\n  const initializeStats = function () {\n    const functionName = `${thisFileName}initializeStats(): `;\n    const TRUE = true;\n    while (TRUE) {\n      if (thisThis.stats === undefined) {\n        thisThis.stats = null;\n        break;\n      }\n      if (thisThis.stats === null) {\n        break;\n      }\n      if (thisThis.stats.statsObject !== 'statsObject') {\n        throw new Error(`${functionName}stats object not recognized`);\n      }\n      break;\n    }\n    if (thisThis.stats !== null) {\n      thisThis.stats.init(rules, udts);\n    }\n  };\n  /* called by parse() to initialize the rules & udts from the grammar object */\n  /* (the grammar object generated previously by apg) */\n  const initializeGrammar = function (grammar) {\n    const functionName = `${thisFileName}initializeGrammar(): `;\n    if (!grammar) {\n      throw new Error(`${functionName}grammar object undefined`);\n    }\n    if (grammar.grammarObject !== 'grammarObject') {\n      throw new Error(`${functionName}bad grammar object`);\n    }\n    rules = grammar.rules;\n    udts = grammar.udts;\n  };\n  /* called by parse() to initialize the start rule */\n  const initializeStartRule = function (startRule) {\n    const functionName = `${thisFileName}initializeStartRule(): `;\n    let start = null;\n    if (typeof startRule === 'number') {\n      if (startRule >= rules.length) {\n        throw new Error(`${functionName}start rule index too large: max: ${rules.length}: index: ${startRule}`);\n      }\n      start = startRule;\n    } else if (typeof startRule === 'string') {\n      const lower = startRule.toLowerCase();\n      for (let i = 0; i < rules.length; i += 1) {\n        if (lower === rules[i].lower) {\n          start = rules[i].index;\n          break;\n        }\n      }\n      if (start === null) {\n        throw new Error(`${functionName}start rule name '${startRule}' not recognized`);\n      }\n    } else {\n      throw new Error(`${functionName}type of start rule '${typeof startRule}' not recognized`);\n    }\n    return start;\n  };\n  /* called by parse() to initialize the array of characters codes representing the input string */\n  const initializeInputChars = function initializeInputChars(inputArg, begArg, lenArg) {\n    const functionName = `${thisFileName}initializeInputChars(): `;\n    /* varify and normalize input */\n    let input = inputArg;\n    let beg = begArg;\n    let len = lenArg;\n    if (input === undefined) {\n      throw new Error(`${functionName}input string is undefined`);\n    }\n    if (input === null) {\n      throw new Error(`${functionName}input string is null`);\n    }\n    if (typeof input === 'string') {\n      input = utils.stringToChars(input);\n    } else if (!Array.isArray(input)) {\n      throw new Error(`${functionName}input string is not a string or array`);\n    }\n    if (input.length > 0) {\n      if (typeof input[0] !== 'number') {\n        throw new Error(`${functionName}input string not an array of integers`);\n      }\n    }\n    /* verify and normalize beginning index */\n    if (typeof beg !== 'number') {\n      beg = 0;\n    } else {\n      beg = Math.floor(beg);\n      if (beg < 0 || beg > input.length) {\n        throw new Error(`${functionName}input beginning index out of range: ${beg}`);\n      }\n    }\n    /* verify and normalize input length */\n    if (typeof len !== 'number') {\n      len = input.length - beg;\n    } else {\n      len = Math.floor(len);\n      if (len < 0 || len > input.length - beg) {\n        throw new Error(`${functionName}input length out of range: ${len}`);\n      }\n    }\n    chars = input;\n    charsBegin = beg;\n    charsLength = len;\n    charsEnd = charsBegin + charsLength;\n  };\n  /* called by parse() to initialize the user-written, syntax callback functions, if any */\n  const initializeCallbacks = function () {\n    const functionName = `${thisFileName}initializeCallbacks(): `;\n    let i;\n    ruleCallbacks = [];\n    udtCallbacks = [];\n    for (i = 0; i < rules.length; i += 1) {\n      ruleCallbacks[i] = null;\n    }\n    for (i = 0; i < udts.length; i += 1) {\n      udtCallbacks[i] = null;\n    }\n    let func;\n    const list = [];\n    for (i = 0; i < rules.length; i += 1) {\n      list.push(rules[i].lower);\n    }\n    for (i = 0; i < udts.length; i += 1) {\n      list.push(udts[i].lower);\n    }\n    for (const index in thisThis.callbacks) {\n      i = list.indexOf(index.toLowerCase());\n      if (i < 0) {\n        throw new Error(`${functionName}syntax callback '${index}' not a rule or udt name`);\n      }\n      func = thisThis.callbacks[index];\n      if (!func) {\n        func = null;\n      }\n      if (typeof func === 'function' || func === null) {\n        if (i < rules.length) {\n          ruleCallbacks[i] = func;\n        } else {\n          udtCallbacks[i - rules.length] = func;\n        }\n      } else {\n        throw new Error(\n          `${functionName}syntax callback[${index}] must be function reference or 'false' (false/null/undefined/etc.)`\n        );\n      }\n    }\n    /* make sure all udts have been defined - the parser can't work without them */\n    for (i = 0; i < udts.length; i += 1) {\n      if (udtCallbacks[i] === null) {\n        throw new Error(\n          `${functionName}all UDT callbacks must be defined. UDT callback[${udts[i].lower}] not a function reference`\n        );\n      }\n    }\n  };\n  // Set the maximum parse tree depth allowed. The default is `Infinity`.\n  // A limit is not normally needed, but can be used to protect against an\n  // exponentual or \"catastrophically backtracking\" grammar.\n  // <ul>\n  // <li>\n  // depth - max allowed parse tree depth. An exception is thrown if exceeded.\n  // </li>\n  // </ul>\n  this.setMaxTreeDepth = function (depth) {\n    if (typeof depth !== 'number') {\n      throw new Error(`parser: max tree depth must be integer > 0: ${depth}`);\n    }\n    limitTreeDepth = Math.floor(depth);\n    if (limitTreeDepth <= 0) {\n      throw new Error(`parser: max tree depth must be integer > 0: ${depth}`);\n    }\n  };\n  // Set the maximum number of node hits (parser unit steps or opcode function calls) allowed.\n  // The default is `Infinity`.\n  // A limit is not normally needed, but can be used to protect against an\n  // exponentual or \"catastrophically backtracking\" grammar.\n  // <ul>\n  // <li>\n  // hits - maximum number of node hits or parser unit steps allowed.\n  // An exception thrown if exceeded.\n  // </li>\n  // </ul>\n  this.setMaxNodeHits = function (hits) {\n    if (typeof hits !== 'number') {\n      throw new Error(`parser: max node hits must be integer > 0: ${hits}`);\n    }\n    limitNodeHits = Math.floor(hits);\n    if (limitNodeHits <= 0) {\n      throw new Error(`parser: max node hits must be integer > 0: ${hits}`);\n    }\n  };\n  /* the main parser function */\n  const privateParse = function (grammar, startRuleArg, callbackData) {\n    let success;\n    const functionName = `${thisFileName}parse(): `;\n    initializeGrammar(grammar);\n    const startRule = initializeStartRule(startRuleArg);\n    initializeCallbacks();\n    initializeTrace();\n    initializeStats();\n    initializeAst();\n    const sysData = new systemData();\n    if (!(callbackData === undefined || callbackData === null)) {\n      syntaxData = callbackData;\n    }\n    /* create a dummy opcode for the start rule */\n    opcodes = [\n      {\n        type: id.RNM,\n        index: startRule,\n      },\n    ];\n    /* execute the start rule */\n    opExecute(0, charsBegin, sysData);\n    opcodes = null;\n    /* test and return the sysData */\n    switch (sysData.state) {\n      case id.ACTIVE:\n        throw new Error(`${functionName}final state should never be 'ACTIVE'`);\n      case id.NOMATCH:\n        success = false;\n        break;\n      case id.EMPTY:\n      case id.MATCH:\n        if (sysData.phraseLength === charsLength) {\n          success = true;\n        } else {\n          success = false;\n        }\n        break;\n      default:\n        throw new Error('unrecognized state');\n    }\n    return {\n      success,\n      state: sysData.state,\n      length: charsLength,\n      matched: sysData.phraseLength,\n      maxMatched,\n      maxTreeDepth,\n      nodeHits,\n      inputLength: chars.length,\n      subBegin: charsBegin,\n      subEnd: charsEnd,\n      subLength: charsLength,\n    };\n  };\n\n  // This form allows parsing of a sub-string of the full input string.\n  // <ul>\n  // <li>*inputIndex* - index of the first character in the sub-string</li>\n  // <li>*inputLength* - length of the sub-string</li>\n  // </ul>\n  // All other parameters as for the above function `parse()`.\n  this.parseSubstring = function parseSubstring(grammar, startRule, inputChars, inputIndex, inputLength, callbackData) {\n    clear();\n    initializeInputChars(inputChars, inputIndex, inputLength);\n    return privateParse(grammar, startRule, callbackData);\n  };\n  // This is the main function, called to parse an input string.\n  // <ul>\n  // <li>*grammar* - an instantiated grammar object - the output of `apg` for a\n  // specific SABNF grammar</li>\n  // <li>*startRule* - the rule name or rule index to be used as the root of the\n  // parse tree. This is usually the first rule, index = 0, of the grammar\n  // but can be any rule defined in the above grammar object.</li>\n  // <li>*inputChars* - the input string. Can be a string or an array of integer character codes representing the\n  // string.</li>\n  // <li>*callbackData* - user-defined data object to be passed to the user's\n  // callback functions.\n  // This is not used by the parser in any way, merely passed on to the user.\n  // May be `null` or omitted.</li>\n  // </ul>\n  this.parse = function parse(grammar, startRule, inputChars, callbackData) {\n    clear();\n    initializeInputChars(inputChars, 0, inputChars.length);\n    return privateParse(grammar, startRule, callbackData);\n  };\n  // The `ALT` operator.<br>\n  // Executes its child nodes, from left to right, until it finds a match.\n  // Fails if *all* of its child nodes fail.\n  const opALT = function (opIndex, phraseIndex, sysData) {\n    const op = opcodes[opIndex];\n    for (let i = 0; i < op.children.length; i += 1) {\n      opExecute(op.children[i], phraseIndex, sysData);\n      if (sysData.state !== id.NOMATCH) {\n        break;\n      }\n    }\n  };\n  // The `CAT` operator.<br>\n  // Executes all of its child nodes, from left to right,\n  // concatenating the matched phrases.\n  // Fails if *any* child nodes fail.\n  const opCAT = function (opIndex, phraseIndex, sysData) {\n    let success;\n    let astLength;\n    let catCharIndex;\n    let catPhrase;\n    const op = opcodes[opIndex];\n    const ulen = sysData.uFrame.length();\n    const plen = sysData.pFrame.length();\n    if (thisThis.ast) {\n      astLength = thisThis.ast.getLength();\n    }\n    success = true;\n    catCharIndex = phraseIndex;\n    catPhrase = 0;\n    for (let i = 0; i < op.children.length; i += 1) {\n      opExecute(op.children[i], catCharIndex, sysData);\n      if (sysData.state === id.NOMATCH) {\n        success = false;\n        break;\n      } else {\n        catCharIndex += sysData.phraseLength;\n        catPhrase += sysData.phraseLength;\n      }\n    }\n    if (success) {\n      sysData.state = catPhrase === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = catPhrase;\n    } else {\n      sysData.state = id.NOMATCH;\n      sysData.phraseLength = 0;\n      /* reset the back referencing frames on failure */\n      sysData.uFrame.pop(ulen);\n      sysData.pFrame.pop(plen);\n      if (thisThis.ast) {\n        thisThis.ast.setLength(astLength);\n      }\n    }\n  };\n  // The `REP` operator.<br>\n  // Repeatedly executes its single child node,\n  // concatenating each of the matched phrases found.\n  // The number of repetitions executed and its final sysData depends\n  // on its `min` & `max` repetition values.\n  const opREP = function (opIndex, phraseIndex, sysData) {\n    let astLength;\n    let repCharIndex;\n    let repPhrase;\n    let repCount;\n    const op = opcodes[opIndex];\n    if (op.max === 0) {\n      // this is an empty-string acceptor\n      // deprecated: use the TLS empty string operator, \"\", instead\n      sysData.state = id.EMPTY;\n      sysData.phraseLength = 0;\n      return;\n    }\n    repCharIndex = phraseIndex;\n    repPhrase = 0;\n    repCount = 0;\n    const ulen = sysData.uFrame.length();\n    const plen = sysData.pFrame.length();\n    if (thisThis.ast) {\n      astLength = thisThis.ast.getLength();\n    }\n    const TRUE = true;\n    while (TRUE) {\n      if (repCharIndex >= charsEnd) {\n        /* exit on end of input string */\n        break;\n      }\n      opExecute(opIndex + 1, repCharIndex, sysData);\n      if (sysData.state === id.NOMATCH) {\n        /* always end if the child node fails */\n        break;\n      }\n      if (sysData.state === id.EMPTY) {\n        /* REP always succeeds when the child node returns an empty phrase */\n        /* this may not seem obvious, but that's the way it works out */\n        break;\n      }\n      repCount += 1;\n      repPhrase += sysData.phraseLength;\n      repCharIndex += sysData.phraseLength;\n      if (repCount === op.max) {\n        /* end on maxed out reps */\n        break;\n      }\n    }\n    /* evaluate the match count according to the min, max values */\n    if (sysData.state === id.EMPTY) {\n      sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = repPhrase;\n    } else if (repCount >= op.min) {\n      sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = repPhrase;\n    } else {\n      sysData.state = id.NOMATCH;\n      sysData.phraseLength = 0;\n      /* reset the back referencing frames on failure */\n      sysData.uFrame.pop(ulen);\n      sysData.pFrame.pop(plen);\n      if (thisThis.ast) {\n        thisThis.ast.setLength(astLength);\n      }\n    }\n  };\n  // Validate the callback function's returned sysData values.\n  // It's the user's responsibility to get them right\n  // but `RNM` fails if not.\n  const validateRnmCallbackResult = function (rule, sysData, charsLeft, down) {\n    if (sysData.phraseLength > charsLeft) {\n      let str = `${thisFileName}opRNM(${rule.name}): callback function error: `;\n      str += `sysData.phraseLength: ${sysData.phraseLength}`;\n      str += ` must be <= remaining chars: ${charsLeft}`;\n      throw new Error(str);\n    }\n    switch (sysData.state) {\n      case id.ACTIVE:\n        if (down !== true) {\n          throw new Error(\n            `${thisFileName}opRNM(${rule.name}): callback function return error. ACTIVE state not allowed.`\n          );\n        }\n        break;\n      case id.EMPTY:\n        sysData.phraseLength = 0;\n        break;\n      case id.MATCH:\n        if (sysData.phraseLength === 0) {\n          sysData.state = id.EMPTY;\n        }\n        break;\n      case id.NOMATCH:\n        sysData.phraseLength = 0;\n        break;\n      default:\n        throw new Error(\n          `${thisFileName}opRNM(${rule.name}): callback function return error. Unrecognized return state: ${sysData.state}`\n        );\n    }\n  };\n  // The `RNM` operator.<br>\n  // This operator will acts as a root node for a parse tree branch below and\n  // returns the matched phrase to its parent.\n  // However, its larger responsibility is handling user-defined callback functions, back references and `AST` nodes.\n  // Note that the `AST` is a separate object, but `RNM` calls its functions to create its nodes.\n  // See [`ast.js`](./ast.html) for usage.\n  const opRNM = function (opIndex, phraseIndex, sysData) {\n    let astLength;\n    let astDefined;\n    let savedOpcodes;\n    let ulen;\n    let plen;\n    let saveFrame;\n    const op = opcodes[opIndex];\n    const rule = rules[op.index];\n    const callback = ruleCallbacks[rule.index];\n    const notLookAround = !inLookAround();\n    /* ignore AST and back references in lookaround */\n    if (notLookAround) {\n      /* begin AST and back references */\n      astDefined = thisThis.ast && thisThis.ast.ruleDefined(op.index);\n      if (astDefined) {\n        astLength = thisThis.ast.getLength();\n        thisThis.ast.down(op.index, rules[op.index].name);\n      }\n      ulen = sysData.uFrame.length();\n      plen = sysData.pFrame.length();\n      sysData.uFrame.push();\n      sysData.pFrame.push();\n      saveFrame = sysData.pFrame;\n      sysData.pFrame = new backRef();\n    }\n    if (callback === null) {\n      /* no callback - just execute the rule */\n      savedOpcodes = opcodes;\n      opcodes = rule.opcodes;\n      opExecute(0, phraseIndex, sysData);\n      opcodes = savedOpcodes;\n    } else {\n      /* call user's callback */\n      const charsLeft = charsEnd - phraseIndex;\n      sysData.ruleIndex = rule.index;\n      callback(sysData, chars, phraseIndex, syntaxData);\n      validateRnmCallbackResult(rule, sysData, charsLeft, true);\n      if (sysData.state === id.ACTIVE) {\n        savedOpcodes = opcodes;\n        opcodes = rule.opcodes;\n        opExecute(0, phraseIndex, sysData);\n        opcodes = savedOpcodes;\n        sysData.ruleIndex = rule.index;\n        callback(sysData, chars, phraseIndex, syntaxData);\n        validateRnmCallbackResult(rule, sysData, charsLeft, false);\n      } /* implied else clause: just accept the callback sysData - RNM acting as UDT */\n    }\n    if (notLookAround) {\n      /* end AST */\n      if (astDefined) {\n        if (sysData.state === id.NOMATCH) {\n          thisThis.ast.setLength(astLength);\n        } else {\n          thisThis.ast.up(op.index, rule.name, phraseIndex, sysData.phraseLength);\n        }\n      }\n      /* end back reference */\n      sysData.pFrame = saveFrame;\n      if (sysData.state === id.NOMATCH) {\n        sysData.uFrame.pop(ulen);\n        sysData.pFrame.pop(plen);\n      } else if (rule.isBkr) {\n        /* save phrase on both the parent and universal frames */\n        /* BKR operator will decide which to use later */\n        sysData.pFrame.savePhrase(rule.lower, phraseIndex, sysData.phraseLength);\n        sysData.uFrame.savePhrase(rule.lower, phraseIndex, sysData.phraseLength);\n      }\n    }\n  };\n  // Validate the callback function's returned sysData values.\n  // It's the user's responsibility to get it right but `UDT` fails if not.\n  const validateUdtCallbackResult = function (udt, sysData, charsLeft) {\n    if (sysData.phraseLength > charsLeft) {\n      let str = `${thisFileName}opUDT(${udt.name}): callback function error: `;\n      str += `sysData.phraseLength: ${sysData.phraseLength}`;\n      str += ` must be <= remaining chars: ${charsLeft}`;\n      throw new Error(str);\n    }\n    switch (sysData.state) {\n      case id.ACTIVE:\n        throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. ACTIVE state not allowed.`);\n      case id.EMPTY:\n        if (udt.empty === false) {\n          throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. May not return EMPTY.`);\n        } else {\n          sysData.phraseLength = 0;\n        }\n        break;\n      case id.MATCH:\n        if (sysData.phraseLength === 0) {\n          if (udt.empty === false) {\n            throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. May not return EMPTY.`);\n          } else {\n            sysData.state = id.EMPTY;\n          }\n        }\n        break;\n      case id.NOMATCH:\n        sysData.phraseLength = 0;\n        break;\n      default:\n        throw new Error(\n          `${thisFileName}opUDT(${udt.name}): callback function return error. Unrecognized return state: ${sysData.state}`\n        );\n    }\n  };\n  // The `UDT` operator.<br>\n  // Simply calls the user's callback function, but operates like `RNM` with regard to the `AST`\n  // and back referencing.\n  // There is some ambiguity here. `UDT`s act as terminals for phrase recognition but as named rules\n  // for `AST` nodes and back referencing.\n  // See [`ast.js`](./ast.html) for usage.\n  const opUDT = function (opIndex, phraseIndex, sysData) {\n    let astLength;\n    let astIndex;\n    let astDefined;\n    let ulen;\n    let plen;\n    let saveFrame;\n    const op = opcodes[opIndex];\n    const udt = udts[op.index];\n    sysData.UdtIndex = udt.index;\n\n    const notLookAround = !inLookAround();\n    /* ignore AST and back references in lookaround */\n    if (notLookAround) {\n      /* begin AST and back reference */\n      astDefined = thisThis.ast && thisThis.ast.udtDefined(op.index);\n      if (astDefined) {\n        astIndex = rules.length + op.index;\n        astLength = thisThis.ast.getLength();\n        thisThis.ast.down(astIndex, udt.name);\n      }\n      /* NOTE: push and pop of the back reference frame is normally not necessary */\n      /* only in the case that the UDT calls evaluateRule() or evaluateUdt() */\n      ulen = sysData.uFrame.length();\n      plen = sysData.pFrame.length();\n      sysData.uFrame.push();\n      sysData.pFrame.push();\n      saveFrame = sysData.pFrame;\n      sysData.pFrame = new backRef();\n    }\n    /* call the UDT */\n    const charsLeft = charsEnd - phraseIndex;\n    udtCallbacks[op.index](sysData, chars, phraseIndex, syntaxData);\n    validateUdtCallbackResult(udt, sysData, charsLeft);\n    if (notLookAround) {\n      /* end AST */\n      if (astDefined) {\n        if (sysData.state === id.NOMATCH) {\n          thisThis.ast.setLength(astLength);\n        } else {\n          thisThis.ast.up(astIndex, udt.name, phraseIndex, sysData.phraseLength);\n        }\n      }\n      /* end back reference */\n      sysData.pFrame = saveFrame;\n      if (sysData.state === id.NOMATCH) {\n        sysData.uFrame.pop(ulen);\n        sysData.pFrame.pop(plen);\n      } else if (udt.isBkr) {\n        /* save phrase on both the parent and universal frames */\n        /* BKR operator will decide which to use later */\n        sysData.pFrame.savePhrase(udt.lower, phraseIndex, sysData.phraseLength);\n        sysData.uFrame.savePhrase(udt.lower, phraseIndex, sysData.phraseLength);\n      }\n    }\n  };\n  // The `AND` operator.<br>\n  // This is the positive `look ahead` operator.\n  // Executes its single child node, returning the EMPTY state\n  // if it succeedsand NOMATCH if it fails.\n  // *Always* backtracks on any matched phrase and returns EMPTY on success.\n  const opAND = function (opIndex, phraseIndex, sysData) {\n    lookAround.push({\n      lookAround: id.LOOKAROUND_AHEAD,\n      anchor: phraseIndex,\n      charsEnd,\n      charsLength,\n    });\n    charsEnd = chars.length;\n    charsLength = chars.length - charsBegin;\n    opExecute(opIndex + 1, phraseIndex, sysData);\n    const pop = lookAround.pop();\n    charsEnd = pop.charsEnd;\n    charsLength = pop.charsLength;\n    sysData.phraseLength = 0;\n    switch (sysData.state) {\n      case id.EMPTY:\n        sysData.state = id.EMPTY;\n        break;\n      case id.MATCH:\n        sysData.state = id.EMPTY;\n        break;\n      case id.NOMATCH:\n        sysData.state = id.NOMATCH;\n        break;\n      default:\n        throw new Error(`opAND: invalid state ${sysData.state}`);\n    }\n  };\n  // The `NOT` operator.<br>\n  // This is the negative `look ahead` operator.\n  // Executes its single child node, returning the EMPTY state\n  // if it *fails* and NOMATCH if it succeeds.\n  // *Always* backtracks on any matched phrase and returns EMPTY\n  // on success (failure of its child node).\n  const opNOT = function (opIndex, phraseIndex, sysData) {\n    lookAround.push({\n      lookAround: id.LOOKAROUND_AHEAD,\n      anchor: phraseIndex,\n      charsEnd,\n      charsLength,\n    });\n    charsEnd = chars.length;\n    charsLength = chars.length - charsBegin;\n    opExecute(opIndex + 1, phraseIndex, sysData);\n    const pop = lookAround.pop();\n    charsEnd = pop.charsEnd;\n    charsLength = pop.charsLength;\n    sysData.phraseLength = 0;\n    switch (sysData.state) {\n      case id.EMPTY:\n      case id.MATCH:\n        sysData.state = id.NOMATCH;\n        break;\n      case id.NOMATCH:\n        sysData.state = id.EMPTY;\n        break;\n      default:\n        throw new Error(`opNOT: invalid state ${sysData.state}`);\n    }\n  };\n  // The `TRG` operator.<br>\n  // Succeeds if the single first character of the phrase is\n  // within the `min - max` range.\n  const opTRG = function (opIndex, phraseIndex, sysData) {\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    if (phraseIndex < charsEnd) {\n      if (op.min <= chars[phraseIndex] && chars[phraseIndex] <= op.max) {\n        sysData.state = id.MATCH;\n        sysData.phraseLength = 1;\n      }\n    }\n  };\n  // The `TBS` operator.<br>\n  // Matches its pre-defined phrase against the input string.\n  // All characters must match exactly.\n  // Case-sensitive literal strings (`'string'` & `%s\"string\"`) are translated to `TBS`\n  // operators by `apg`.\n  // Phrase length of zero is not allowed.\n  // Empty phrases can only be defined with `TLS` operators.\n  const opTBS = function (opIndex, phraseIndex, sysData) {\n    let i;\n    const op = opcodes[opIndex];\n    const len = op.string.length;\n    sysData.state = id.NOMATCH;\n    if (phraseIndex + len <= charsEnd) {\n      for (i = 0; i < len; i += 1) {\n        if (chars[phraseIndex + i] !== op.string[i]) {\n          return;\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    } /* implied else NOMATCH */\n  };\n  // The `TLS` operator.<br>\n  // Matches its pre-defined phrase against the input string.\n  // A case-insensitive match is attempted for ASCII alphbetical characters.\n  // `TLS` is the only operator that explicitly allows empty phrases.\n  // `apg` will fail for empty `TBS`, case-sensitive strings (`''`) or\n  // zero repetitions (`0*0RuleName` or `0RuleName`).\n  const opTLS = function (opIndex, phraseIndex, sysData) {\n    let i;\n    let code;\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    const len = op.string.length;\n    if (len === 0) {\n      /* EMPTY match allowed for TLS */\n      sysData.state = id.EMPTY;\n      return;\n    }\n    if (phraseIndex + len <= charsEnd) {\n      for (i = 0; i < len; i += 1) {\n        code = chars[phraseIndex + i];\n        if (code >= 65 && code <= 90) {\n          code += 32;\n        }\n        if (code !== op.string[i]) {\n          return;\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    } /* implied else NOMATCH */\n  };\n  // The `ABG` operator.<br>\n  // This is an \"anchor\" for the beginning of the string, similar to the familiar regex `^` anchor.\n  // An anchor matches a position rather than a phrase.\n  // Returns EMPTY if `phraseIndex` is 0, NOMATCH otherwise.\n  const opABG = function (opIndex, phraseIndex, sysData) {\n    sysData.state = id.NOMATCH;\n    sysData.phraseLength = 0;\n    sysData.state = phraseIndex === 0 ? id.EMPTY : id.NOMATCH;\n  };\n  // The `AEN` operator.<br>\n  // This is an \"anchor\" for the end of the string, similar to the familiar regex `$` anchor.\n  // An anchor matches a position rather than a phrase.\n  // Returns EMPTY if `phraseIndex` equals the input string length, NOMATCH otherwise.\n  const opAEN = function (opIndex, phraseIndex, sysData) {\n    sysData.state = id.NOMATCH;\n    sysData.phraseLength = 0;\n    sysData.state = phraseIndex === chars.length ? id.EMPTY : id.NOMATCH;\n  };\n  // The `BKR` operator.<br>\n  // The back reference operator.\n  // Matches the last matched phrase of the named rule or UDT against the input string.\n  // For ASCII alphbetical characters the match may be case sensitive (`%s`) or insensitive (`%i`),\n  // depending on the back reference definition.\n  // For `universal` mode (`%u`) matches the last phrase found anywhere in the grammar.\n  // For `parent frame` mode (`%p`) matches the last phrase found in the parent rule only.\n  const opBKR = function (opIndex, phraseIndex, sysData) {\n    let i;\n    let code;\n    let lmcode;\n    let lower;\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    if (op.index < rules.length) {\n      lower = rules[op.index].lower;\n    } else {\n      lower = udts[op.index - rules.length].lower;\n    }\n    const frame = op.bkrMode === id.BKR_MODE_PM ? sysData.pFrame.getPhrase(lower) : sysData.uFrame.getPhrase(lower);\n    const insensitive = op.bkrCase === id.BKR_MODE_CI;\n    if (frame === null) {\n      return;\n    }\n    const lmIndex = frame.phraseIndex;\n    const len = frame.phraseLength;\n    if (len === 0) {\n      sysData.state = id.EMPTY;\n      return;\n    }\n    if (phraseIndex + len <= charsEnd) {\n      if (insensitive) {\n        /* case-insensitive match */\n        for (i = 0; i < len; i += 1) {\n          code = chars[phraseIndex + i];\n          lmcode = chars[lmIndex + i];\n          if (code >= 65 && code <= 90) {\n            code += 32;\n          }\n          if (lmcode >= 65 && lmcode <= 90) {\n            lmcode += 32;\n          }\n          if (code !== lmcode) {\n            return;\n          }\n        }\n        sysData.state = id.MATCH;\n        sysData.phraseLength = len;\n      } else {\n        /* case-sensitive match */\n        for (i = 0; i < len; i += 1) {\n          code = chars[phraseIndex + i];\n          lmcode = chars[lmIndex + i];\n          if (code !== lmcode) {\n            return;\n          }\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    }\n  };\n  // The `BKA` operator.<br>\n  // This is the positive `look behind` operator.\n  // It's child node is parsed right-to-left.\n  // Returns the EMPTY state if a match is found, NOMATCH otherwise.\n  // Like the look ahead operators, it always backtracks to `phraseIndex`.\n  const opBKA = function (opIndex, phraseIndex, sysData) {\n    lookAround.push({\n      lookAround: id.LOOKAROUND_BEHIND,\n      anchor: phraseIndex,\n    });\n    opExecute(opIndex + 1, phraseIndex, sysData);\n    lookAround.pop();\n    sysData.phraseLength = 0;\n    switch (sysData.state) {\n      case id.EMPTY:\n        sysData.state = id.EMPTY;\n        break;\n      case id.MATCH:\n        sysData.state = id.EMPTY;\n        break;\n      case id.NOMATCH:\n        sysData.state = id.NOMATCH;\n        break;\n      default:\n        throw new Error(`opBKA: invalid state ${sysData.state}`);\n    }\n  };\n  // The `BKN` operator.<br>\n  // This is the negative `look behind` operator.\n  // It's child node is parsed right-to-left.\n  // Returns the EMPTY state if a match is *not* found, NOMATCH otherwise.\n  // Like the look ahead operators, it always backtracks to `phraseIndex`.\n  const opBKN = function (opIndex, phraseIndex, sysData) {\n    // let op;\n    // op = opcodes[opIndex];\n    lookAround.push({\n      lookAround: id.LOOKAROUND_BEHIND,\n      anchor: phraseIndex,\n    });\n    opExecute(opIndex + 1, phraseIndex, sysData);\n    lookAround.pop();\n    sysData.phraseLength = 0;\n    switch (sysData.state) {\n      case id.EMPTY:\n      case id.MATCH:\n        sysData.state = id.NOMATCH;\n        break;\n      case id.NOMATCH:\n        sysData.state = id.EMPTY;\n        break;\n      default:\n        throw new Error(`opBKN: invalid state ${sysData.state}`);\n    }\n  };\n  // The right-to-left `CAT` operator.<br>\n  // Called for `CAT` operators when in look behind mode.\n  // Calls its child nodes from right to left concatenating matched phrases right to left.\n  const opCATBehind = function (opIndex, phraseIndex, sysData) {\n    let success;\n    let astLength;\n    let catCharIndex;\n    let catMatched;\n    const op = opcodes[opIndex];\n    const ulen = sysData.uFrame.length();\n    const plen = sysData.pFrame.length();\n    if (thisThis.ast) {\n      astLength = thisThis.ast.getLength();\n    }\n    success = true;\n    catCharIndex = phraseIndex;\n    catMatched = 0;\n    // catPhrase = 0;\n    for (let i = op.children.length - 1; i >= 0; i -= 1) {\n      opExecute(op.children[i], catCharIndex, sysData);\n      catCharIndex -= sysData.phraseLength;\n      catMatched += sysData.phraseLength;\n      // catPhrase += sysData.phraseLength;\n      if (sysData.state === id.NOMATCH) {\n        success = false;\n        break;\n      }\n    }\n    if (success) {\n      sysData.state = catMatched === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = catMatched;\n    } else {\n      sysData.state = id.NOMATCH;\n      sysData.phraseLength = 0;\n      sysData.uFrame.pop(ulen);\n      sysData.pFrame.pop(plen);\n      if (thisThis.ast) {\n        thisThis.ast.setLength(astLength);\n      }\n    }\n  };\n  // The right-to-left `REP` operator.<br>\n  // Called for `REP` operators in look behind mode.\n  // Makes repeated calls to its child node, concatenating matched phrases right to left.\n  const opREPBehind = function (opIndex, phraseIndex, sysData) {\n    let astLength;\n    let repCharIndex;\n    let repPhrase;\n    let repCount;\n    const op = opcodes[opIndex];\n    repCharIndex = phraseIndex;\n    repPhrase = 0;\n    repCount = 0;\n    const ulen = sysData.uFrame.length();\n    const plen = sysData.pFrame.length();\n    if (thisThis.ast) {\n      astLength = thisThis.ast.getLength();\n    }\n    const TRUE = true;\n    while (TRUE) {\n      if (repCharIndex <= 0) {\n        /* exit on end of input string */\n        break;\n      }\n      opExecute(opIndex + 1, repCharIndex, sysData);\n      if (sysData.state === id.NOMATCH) {\n        /* always end if the child node fails */\n        break;\n      }\n      if (sysData.state === id.EMPTY) {\n        /* REP always succeeds when the child node returns an empty phrase */\n        /* this may not seem obvious, but that's the way it works out */\n        break;\n      }\n      repCount += 1;\n      repPhrase += sysData.phraseLength;\n      repCharIndex -= sysData.phraseLength;\n      if (repCount === op.max) {\n        /* end on maxed out reps */\n        break;\n      }\n    }\n    /* evaluate the match count according to the min, max values */\n    if (sysData.state === id.EMPTY) {\n      sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = repPhrase;\n    } else if (repCount >= op.min) {\n      sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = repPhrase;\n    } else {\n      sysData.state = id.NOMATCH;\n      sysData.phraseLength = 0;\n      sysData.uFrame.pop(ulen);\n      sysData.pFrame.pop(plen);\n      if (thisThis.ast) {\n        thisThis.ast.setLength(astLength);\n      }\n    }\n  };\n  // The right-to-left `TRG` operator.<br>\n  // Called for `TRG` operators in look behind mode.\n  // Matches a single character at `phraseIndex - 1` to the `min` - `max` range.\n  const opTRGBehind = function (opIndex, phraseIndex, sysData) {\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    sysData.phraseLength = 0;\n    if (phraseIndex > 0) {\n      const char = chars[phraseIndex - 1];\n      if (op.min <= char && char <= op.max) {\n        sysData.state = id.MATCH;\n        sysData.phraseLength = 1;\n      }\n    }\n  };\n  // The right-to-left `TBS` operator.<br>\n  // Called for `TBS` operators in look behind mode.\n  // Matches the `TBS` phrase to the left of `phraseIndex`.\n  const opTBSBehind = function (opIndex, phraseIndex, sysData) {\n    let i;\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    const len = op.string.length;\n    const beg = phraseIndex - len;\n    if (beg >= 0) {\n      for (i = 0; i < len; i += 1) {\n        if (chars[beg + i] !== op.string[i]) {\n          return;\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    }\n  };\n  // The right-to-left `TLS` operator.<br>\n  // Called for `TLS` operators in look behind mode.\n  // Matches the `TLS` phrase to the left of `phraseIndex`.\n  const opTLSBehind = function (opIndex, phraseIndex, sysData) {\n    let char;\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    const len = op.string.length;\n    if (len === 0) {\n      /* EMPTY match allowed for TLS */\n      sysData.state = id.EMPTY;\n      return;\n    }\n    const beg = phraseIndex - len;\n    if (beg >= 0) {\n      for (let i = 0; i < len; i += 1) {\n        char = chars[beg + i];\n        if (char >= 65 && char <= 90) {\n          char += 32;\n        }\n        if (char !== op.string[i]) {\n          return;\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    }\n  };\n  // The right-to-left back reference operator.<br>\n  // Matches the back referenced phrase to the left of `phraseIndex`.\n  const opBKRBehind = function (opIndex, phraseIndex, sysData) {\n    let i;\n    let code;\n    let lmcode;\n    let lower;\n    const op = opcodes[opIndex];\n    /* NOMATCH default */\n    sysData.state = id.NOMATCH;\n    sysData.phraseLength = 0;\n    if (op.index < rules.length) {\n      lower = rules[op.index].lower;\n    } else {\n      lower = udts[op.index - rules.length].lower;\n    }\n    const frame = op.bkrMode === id.BKR_MODE_PM ? sysData.pFrame.getPhrase(lower) : sysData.uFrame.getPhrase(lower);\n    const insensitive = op.bkrCase === id.BKR_MODE_CI;\n    if (frame === null) {\n      return;\n    }\n    const lmIndex = frame.phraseIndex;\n    const len = frame.phraseLength;\n    if (len === 0) {\n      sysData.state = id.EMPTY;\n      sysData.phraseLength = 0;\n      return;\n    }\n    const beg = phraseIndex - len;\n    if (beg >= 0) {\n      if (insensitive) {\n        /* case-insensitive match */\n        for (i = 0; i < len; i += 1) {\n          code = chars[beg + i];\n          lmcode = chars[lmIndex + i];\n          if (code >= 65 && code <= 90) {\n            code += 32;\n          }\n          if (lmcode >= 65 && lmcode <= 90) {\n            lmcode += 32;\n          }\n          if (code !== lmcode) {\n            return;\n          }\n        }\n        sysData.state = id.MATCH;\n        sysData.phraseLength = len;\n      } else {\n        /* case-sensitive match */\n        for (i = 0; i < len; i += 1) {\n          code = chars[beg + i];\n          lmcode = chars[lmIndex + i];\n          if (code !== lmcode) {\n            return;\n          }\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    }\n  };\n  // Generalized execution function.<br>\n  // Having a single, generalized function, allows a single location\n  // for tracing and statistics gathering functions to be called.\n  // Tracing and statistics are handled in separate objects.\n  // However, the parser calls their API to build the object data records.\n  // See [`trace.js`](./trace.html) and [`stats.js`](./stats.html) for their\n  // usage.\n  opExecute = function opExecuteFunc(opIndex, phraseIndex, sysData) {\n    let ret = true;\n    const op = opcodes[opIndex];\n    nodeHits += 1;\n    if (nodeHits > limitNodeHits) {\n      throw new Error(`parser: maximum number of node hits exceeded: ${limitNodeHits}`);\n    }\n    treeDepth += 1;\n    if (treeDepth > maxTreeDepth) {\n      maxTreeDepth = treeDepth;\n      if (maxTreeDepth > limitTreeDepth) {\n        throw new Error(`parser: maximum parse tree depth exceeded: ${limitTreeDepth}`);\n      }\n    }\n    sysData.refresh();\n    if (thisThis.trace !== null) {\n      /* collect the trace record for down the parse tree */\n      const lk = lookAroundValue();\n      thisThis.trace.down(op, sysData.state, phraseIndex, sysData.phraseLength, lk.anchor, lk.lookAround);\n    }\n    if (inLookBehind()) {\n      switch (op.type) {\n        case id.ALT:\n          opALT(opIndex, phraseIndex, sysData);\n          break;\n        case id.CAT:\n          opCATBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.REP:\n          opREPBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.RNM:\n          opRNM(opIndex, phraseIndex, sysData);\n          break;\n        case id.UDT:\n          opUDT(opIndex, phraseIndex, sysData);\n          break;\n        case id.AND:\n          opAND(opIndex, phraseIndex, sysData);\n          break;\n        case id.NOT:\n          opNOT(opIndex, phraseIndex, sysData);\n          break;\n        case id.TRG:\n          opTRGBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.TBS:\n          opTBSBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.TLS:\n          opTLSBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKR:\n          opBKRBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKA:\n          opBKA(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKN:\n          opBKN(opIndex, phraseIndex, sysData);\n          break;\n        case id.ABG:\n          opABG(opIndex, phraseIndex, sysData);\n          break;\n        case id.AEN:\n          opAEN(opIndex, phraseIndex, sysData);\n          break;\n        default:\n          ret = false;\n          break;\n      }\n    } else {\n      switch (op.type) {\n        case id.ALT:\n          opALT(opIndex, phraseIndex, sysData);\n          break;\n        case id.CAT:\n          opCAT(opIndex, phraseIndex, sysData);\n          break;\n        case id.REP:\n          opREP(opIndex, phraseIndex, sysData);\n          break;\n        case id.RNM:\n          opRNM(opIndex, phraseIndex, sysData);\n          break;\n        case id.UDT:\n          opUDT(opIndex, phraseIndex, sysData);\n          break;\n        case id.AND:\n          opAND(opIndex, phraseIndex, sysData);\n          break;\n        case id.NOT:\n          opNOT(opIndex, phraseIndex, sysData);\n          break;\n        case id.TRG:\n          opTRG(opIndex, phraseIndex, sysData);\n          break;\n        case id.TBS:\n          opTBS(opIndex, phraseIndex, sysData);\n          break;\n        case id.TLS:\n          opTLS(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKR:\n          opBKR(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKA:\n          opBKA(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKN:\n          opBKN(opIndex, phraseIndex, sysData);\n          break;\n        case id.ABG:\n          opABG(opIndex, phraseIndex, sysData);\n          break;\n        case id.AEN:\n          opAEN(opIndex, phraseIndex, sysData);\n          break;\n        default:\n          ret = false;\n          break;\n      }\n    }\n    if (!inLookAround() && phraseIndex + sysData.phraseLength > maxMatched) {\n      maxMatched = phraseIndex + sysData.phraseLength;\n    }\n    if (thisThis.stats !== null) {\n      /* collect the statistics */\n      thisThis.stats.collect(op, sysData);\n    }\n    if (thisThis.trace !== null) {\n      /* collect the trace record for up the parse tree */\n      const lk = lookAroundValue();\n      thisThis.trace.up(op, sysData.state, phraseIndex, sysData.phraseLength, lk.anchor, lk.lookAround);\n    }\n    treeDepth -= 1;\n    return ret;\n  };\n};\n","/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module is the constructor for the statistics gathering object.\n// The statistics are nothing more than keeping a count of the\n// number of times each node in the parse tree is traversed.\n//\n// Counts are collected for each of the individual types of operators.\n// Additionally, counts are collected for each of the individually named\n// `RNM` and `UDT` operators.\nmodule.exports = function statsFunc() {\n  const id = require('./identifiers');\n  const utils = require('./utilities');\n  const style = require('./style');\n\n  const thisFileName = 'stats.js: ';\n  let rules = [];\n  let udts = [];\n  const stats = [];\n  let totals;\n  const ruleStats = [];\n  const udtStats = [];\n  this.statsObject = 'statsObject';\n  const nameId = 'stats';\n  /* `Array.sort()` callback function for sorting `RNM` and `UDT` operators alphabetically by name. */\n  const sortAlpha = function sortAlpha(lhs, rhs) {\n    if (lhs.lower < rhs.lower) {\n      return -1;\n    }\n    if (lhs.lower > rhs.lower) {\n      return 1;\n    }\n    return 0;\n  };\n  /* `Array.sort()` callback function for sorting `RNM` and `UDT` operators by hit count. */\n  const sortHits = function sortHits(lhs, rhs) {\n    if (lhs.total < rhs.total) {\n      return 1;\n    }\n    if (lhs.total > rhs.total) {\n      return -1;\n    }\n    return sortAlpha(lhs, rhs);\n  };\n  /* `Array.sort()` callback function for sorting `RNM` and `UDT` operators by index */\n  /* (in the order in which they appear in the SABNF grammar). */\n  const sortIndex = function sortIndex(lhs, rhs) {\n    if (lhs.index < rhs.index) {\n      return -1;\n    }\n    if (lhs.index > rhs.index) {\n      return 1;\n    }\n    return 0;\n  };\n  const EmptyStat = function EmptyStat() {\n    this.empty = 0;\n    this.match = 0;\n    this.nomatch = 0;\n    this.total = 0;\n  };\n  /* Zero out all stats */\n  const clear = function clear() {\n    stats.length = 0;\n    totals = new EmptyStat();\n    stats[id.ALT] = new EmptyStat();\n    stats[id.CAT] = new EmptyStat();\n    stats[id.REP] = new EmptyStat();\n    stats[id.RNM] = new EmptyStat();\n    stats[id.TRG] = new EmptyStat();\n    stats[id.TBS] = new EmptyStat();\n    stats[id.TLS] = new EmptyStat();\n    stats[id.UDT] = new EmptyStat();\n    stats[id.AND] = new EmptyStat();\n    stats[id.NOT] = new EmptyStat();\n    stats[id.BKR] = new EmptyStat();\n    stats[id.BKA] = new EmptyStat();\n    stats[id.BKN] = new EmptyStat();\n    stats[id.ABG] = new EmptyStat();\n    stats[id.AEN] = new EmptyStat();\n    ruleStats.length = 0;\n    for (let i = 0; i < rules.length; i += 1) {\n      ruleStats.push({\n        empty: 0,\n        match: 0,\n        nomatch: 0,\n        total: 0,\n        name: rules[i].name,\n        lower: rules[i].lower,\n        index: rules[i].index,\n      });\n    }\n    if (udts.length > 0) {\n      udtStats.length = 0;\n      for (let i = 0; i < udts.length; i += 1) {\n        udtStats.push({\n          empty: 0,\n          match: 0,\n          nomatch: 0,\n          total: 0,\n          name: udts[i].name,\n          lower: udts[i].lower,\n          index: udts[i].index,\n        });\n      }\n    }\n  };\n  /* increment the designated operator hit count by one */\n  const incStat = function incStat(stat, state) {\n    stat.total += 1;\n    switch (state) {\n      case id.EMPTY:\n        stat.empty += 1;\n        break;\n      case id.MATCH:\n        stat.match += 1;\n        break;\n      case id.NOMATCH:\n        stat.nomatch += 1;\n        break;\n      default:\n        throw new Error(`${thisFileName}collect(): incStat(): unrecognized state: ${state}`);\n    }\n  };\n  /* helper for toHtml() */\n  const displayRow = function displayRow(name, stat) {\n    let html = '';\n    html += '<tr>';\n    html += `<td class=\"${style.CLASS_ACTIVE}\">${name}</td>`;\n    html += `<td class=\"${style.CLASS_EMPTY}\">${stat.empty}</td>`;\n    html += `<td class=\"${style.CLASS_MATCH}\">${stat.match}</td>`;\n    html += `<td class=\"${style.CLASS_NOMATCH}\">${stat.nomatch}</td>`;\n    html += `<td class=\"${style.CLASS_ACTIVE}\">${stat.total}</td>`;\n    html += '</tr>\\n';\n    return html;\n  };\n  const displayOpsOnly = function displayOpsOnly() {\n    let html = '';\n    html += displayRow('ALT', stats[id.ALT]);\n    html += displayRow('CAT', stats[id.CAT]);\n    html += displayRow('REP', stats[id.REP]);\n    html += displayRow('RNM', stats[id.RNM]);\n    html += displayRow('TRG', stats[id.TRG]);\n    html += displayRow('TBS', stats[id.TBS]);\n    html += displayRow('TLS', stats[id.TLS]);\n    html += displayRow('UDT', stats[id.UDT]);\n    html += displayRow('AND', stats[id.AND]);\n    html += displayRow('NOT', stats[id.NOT]);\n    html += displayRow('BKR', stats[id.BKR]);\n    html += displayRow('BKA', stats[id.BKA]);\n    html += displayRow('BKN', stats[id.BKN]);\n    html += displayRow('ABG', stats[id.ABG]);\n    html += displayRow('AEN', stats[id.AEN]);\n    html += displayRow('totals', totals);\n    return html;\n  };\n  /* helper for toHtml() */\n  const displayRules = function displayRules() {\n    let html = '';\n    html += '<tr><th></th><th></th><th></th><th></th><th></th></tr>\\n';\n    html += '<tr><th>rules</th><th></th><th></th><th></th><th></th></tr>\\n';\n    for (let i = 0; i < rules.length; i += 1) {\n      if (ruleStats[i].total > 0) {\n        html += '<tr>';\n        html += `<td class=\"${style.CLASS_ACTIVE}\">${ruleStats[i].name}</td>`;\n        html += `<td class=\"${style.CLASS_EMPTY}\">${ruleStats[i].empty}</td>`;\n        html += `<td class=\"${style.CLASS_MATCH}\">${ruleStats[i].match}</td>`;\n        html += `<td class=\"${style.CLASS_NOMATCH}\">${ruleStats[i].nomatch}</td>`;\n        html += `<td class=\"${style.CLASS_ACTIVE}\">${ruleStats[i].total}</td>`;\n        html += '</tr>\\n';\n      }\n    }\n    if (udts.length > 0) {\n      html += '<tr><th></th><th></th><th></th><th></th><th></th></tr>\\n';\n      html += '<tr><th>udts</th><th></th><th></th><th></th><th></th></tr>\\n';\n      for (let i = 0; i < udts.length; i += 1) {\n        if (udtStats[i].total > 0) {\n          html += '<tr>';\n          html += `<td class=\"${style.CLASS_ACTIVE}\">${udtStats[i].name}</td>`;\n          html += `<td class=\"${style.CLASS_EMPTY}\">${udtStats[i].empty}</td>`;\n          html += `<td class=\"${style.CLASS_MATCH}\">${udtStats[i].match}</td>`;\n          html += `<td class=\"${style.CLASS_NOMATCH}\">${udtStats[i].nomatch}</td>`;\n          html += `<td class=\"${style.CLASS_ACTIVE}\">${udtStats[i].total}</td>`;\n          html += '</tr>\\n';\n        }\n      }\n    }\n    return html;\n  };\n  /* called only by the parser to validate a stats object */\n  this.validate = function validate(name) {\n    let ret = false;\n    if (typeof name === 'string' && nameId === name) {\n      ret = true;\n    }\n    return ret;\n  };\n  /* no verification of input - only called by parser() */\n  this.init = function init(inputRules, inputUdts) {\n    rules = inputRules;\n    udts = inputUdts;\n    clear();\n  };\n  /* This function is the main interaction with the parser. */\n  /* The parser calls it after each node has been traversed. */\n  this.collect = function collect(op, result) {\n    incStat(totals, result.state, result.phraseLength);\n    incStat(stats[op.type], result.state, result.phraseLength);\n    if (op.type === id.RNM) {\n      incStat(ruleStats[op.index], result.state, result.phraseLength);\n    }\n    if (op.type === id.UDT) {\n      incStat(udtStats[op.index], result.state, result.phraseLength);\n    }\n  };\n  // Display the statistics as an HTML table.\n  // - *type*\n  //   - \"ops\" - (default) display only the total hit counts for all operator types.\n  //   - \"index\" - additionally, display the hit counts for the individual `RNM` and `UDT` operators ordered by index.\n  //   - \"hits\" - additionally, display the hit counts for the individual `RNM` and `UDT` operators by hit count.\n  //   - \"alpha\" - additionally, display the hit counts for the individual `RNM` and `UDT` operators by name alphabetically.\n  // - *caption* - optional caption for the table\n  this.toHtml = function toHtml(type, caption) {\n    let html = '';\n    html += `<table class=\"${style.CLASS_STATS}\">\\n`;\n    if (typeof caption === 'string') {\n      html += `<caption>${caption}</caption>\\n`;\n    }\n    html += `<tr><th class=\"${style.CLASS_ACTIVE}\">ops</th>\\n`;\n    html += `<th class=\"${style.CLASS_EMPTY}\">EMPTY</th>\\n`;\n    html += `<th class=\"${style.CLASS_MATCH}\">MATCH</th>\\n`;\n    html += `<th class=\"${style.CLASS_NOMATCH}\">NOMATCH</th>\\n`;\n    html += `<th class=\"${style.CLASS_ACTIVE}\">totals</th></tr>\\n`;\n    const test = true;\n    while (test) {\n      if (type === undefined) {\n        html += displayOpsOnly();\n        break;\n      }\n      if (type === null) {\n        html += displayOpsOnly();\n        break;\n      }\n      if (type === 'ops') {\n        html += displayOpsOnly();\n        break;\n      }\n      if (type === 'index') {\n        ruleStats.sort(sortIndex);\n        if (udtStats.length > 0) {\n          udtStats.sort(sortIndex);\n        }\n        html += displayOpsOnly();\n        html += displayRules();\n        break;\n      }\n      if (type === 'hits') {\n        ruleStats.sort(sortHits);\n        if (udtStats.length > 0) {\n          udtStats.sort(sortIndex);\n        }\n        html += displayOpsOnly();\n        html += displayRules();\n        break;\n      }\n      if (type === 'alpha') {\n        ruleStats.sort(sortAlpha);\n        if (udtStats.length > 0) {\n          udtStats.sort(sortAlpha);\n        }\n        html += displayOpsOnly();\n        html += displayRules();\n        break;\n      }\n      break;\n    }\n    html += '</table>\\n';\n    return html;\n  };\n  // Display the stats table in a complete HTML5 page.\n  this.toHtmlPage = function toHtmlPage(type, caption, title) {\n    return utils.htmlToPage(this.toHtml(type, caption), title);\n  };\n};\n","/* eslint-disable func-names */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable guard-for-in */\n/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module provides a means of tracing the parser through the parse tree as it goes.\n// It is the primary debugging facility for debugging both the SABNF grammar syntax\n// and the input strings that are supposed to be valid grammar sentences.\n// It is also a very informative and educational tool for understanding\n// how a parser actually operates for a given language.\n//\n// Tracing is the process of generating and saving a record of information for each passage\n// of the parser through a parse tree node. And since it traverses each node twice, once down the tree\n// and once coming back up, there are two records for each node.\n// This, obviously, has the potential of generating lots of records.\n// And since these records are normally displayed on a web page\n// it is important to have a means to limit the actual number of records generated to\n// probably no more that a few thousand. This is almost always enough to find any errors.\n// The problem is to get the *right* few thousand records.\n// Therefore, this module has a number of ways of limiting and/or filtering, the number and type of records.\n// Considerable effort has been made to make this filtering of the trace output as simple\n// and intuitive as possible.\n//\n// However, the ability to filter the trace records, or for that matter even understand what they are\n// and the information they contain, does require a minimum amount of understanding of the APG parsing\n// method. The parse tree nodes are all represented by APG operators. They break down into two natural groups.\n// - The `RNM` operators and `UDT` operators are named phrases.\n// These are names chosen by the writer of the SABNF grammar to represent special phrases of interest.\n// - All others collect, concatenate and otherwise manipulate various intermediate phrases along the way.\n//\n// There are separate means of filtering which of these operators in each of these two groups get traced.\n// Let `trace` be an instantiated `trace.js` object.\n// Prior to parsing the string, filtering the rules and UDTs can be defined as follows:\n// ```\n// trace.filter.rules[\"rulename\"] = true;\n//     /* trace rule name \"rulename\" */\n// trace.filter.rules[\"udtname\"]  = true;\n//     /* trace UDT name \"udtname\" */\n// trace.filter.rules[\"<ALL>\"]    = true;\n//     /* trace all rules and UDTs (the default) */\n// trace.filter.rules[\"<NONE>\"]   = true;\n//     /* trace no rules or UDTS */\n// ```\n// If any rule or UDT name other than \"&lt;ALL>\" or \"&lt;NONE>\" is specified, all other names are turned off.\n// Therefore, to be selective of rule names, a filter statement is required for each rule/UDT name desired.\n//\n// Filtering of the other operators follows a similar procedure.\n// ```\n// trace.filter.operators[\"TRG\"] = true;\n//     /* trace the terminal range, TRG, operators */\n// trace.filter.operators[\"CAT\"]  = true;\n//     /* trace the concatenations, CAT, operators */\n// trace.filter.operators[\"<ALL>\"]    = true;\n//     /* trace all operators */\n// trace.filter.operators[\"<NONE>\"]   = true;\n//     /* trace no operators (the default) */\n// ```\n// If any operator name other than \"&lt;ALL>\" or \"&lt;NONE>\" is specified, all other names are turned off.\n// Therefore, to be selective of operator names, a filter statement is required for each name desired.\n//\n// There is, additionally, a means for limiting the total number of filtered or saved trace records.\n// See the function, `setMaxRecords(max)` below. This will result in only the last `max` records being saved.\n//\n// (See [`apg-examples`](https://github.com/ldthomas/apg-js-examples) for examples of using `trace.js`.)\nmodule.exports = function exportTrace() {\n  const utils = require('./utilities');\n  const style = require('./style');\n  const circular = new (require('./circular-buffer'))();\n  const id = require('./identifiers');\n\n  const thisFileName = 'trace.js: ';\n  const that = this;\n  const MODE_HEX = 16;\n  const MODE_DEC = 10;\n  const MODE_ASCII = 8;\n  const MODE_UNICODE = 32;\n  const MAX_PHRASE = 80;\n  const MAX_TLS = 5;\n  const records = [];\n  let maxRecords = 5000;\n  let lastRecord = -1;\n  let filteredRecords = 0;\n  let treeDepth = 0;\n  const recordStack = [];\n  let chars = null;\n  let rules = null;\n  let udts = null;\n  const operatorFilter = [];\n  const ruleFilter = [];\n  /* special trace table phrases */\n  const PHRASE_END = `<span class=\"${style.CLASS_LINEEND}\">&bull;</span>`;\n  const PHRASE_CONTINUE = `<span class=\"${style.CLASS_LINEEND}\">&hellip;</span>`;\n  const PHRASE_EMPTY = `<span class=\"${style.CLASS_EMPTY}\">&#120634;</span>`;\n  /* filter the non-RNM & non-UDT operators */\n  const initOperatorFilter = function () {\n    const setOperators = function (set) {\n      operatorFilter[id.ALT] = set;\n      operatorFilter[id.CAT] = set;\n      operatorFilter[id.REP] = set;\n      operatorFilter[id.TLS] = set;\n      operatorFilter[id.TBS] = set;\n      operatorFilter[id.TRG] = set;\n      operatorFilter[id.AND] = set;\n      operatorFilter[id.NOT] = set;\n      operatorFilter[id.BKR] = set;\n      operatorFilter[id.BKA] = set;\n      operatorFilter[id.BKN] = set;\n      operatorFilter[id.ABG] = set;\n      operatorFilter[id.AEN] = set;\n    };\n    let items = 0;\n    // eslint-disable-next-line no-unused-vars\n    for (const name in that.filter.operators) {\n      items += 1;\n    }\n    if (items === 0) {\n      /* case 1: no operators specified: default: do not trace any operators */\n      setOperators(false);\n      return;\n    }\n    for (const name in that.filter.operators) {\n      const upper = name.toUpperCase();\n      if (upper === '<ALL>') {\n        /* case 2: <all> operators specified: trace all operators ignore all other operator commands */\n        setOperators(true);\n        return;\n      }\n      if (upper === '<NONE>') {\n        /* case 3: <none> operators specified: trace NO operators ignore all other operator commands */\n        setOperators(false);\n        return;\n      }\n    }\n    setOperators(false);\n    for (const name in that.filter.operators) {\n      const upper = name.toUpperCase();\n      /* case 4: one or more individual operators specified: trace 'true' operators only */\n      if (upper === 'ALT') {\n        operatorFilter[id.ALT] = that.filter.operators[name] === true;\n      } else if (upper === 'CAT') {\n        operatorFilter[id.CAT] = that.filter.operators[name] === true;\n      } else if (upper === 'REP') {\n        operatorFilter[id.REP] = that.filter.operators[name] === true;\n      } else if (upper === 'AND') {\n        operatorFilter[id.AND] = that.filter.operators[name] === true;\n      } else if (upper === 'NOT') {\n        operatorFilter[id.NOT] = that.filter.operators[name] === true;\n      } else if (upper === 'TLS') {\n        operatorFilter[id.TLS] = that.filter.operators[name] === true;\n      } else if (upper === 'TBS') {\n        operatorFilter[id.TBS] = that.filter.operators[name] === true;\n      } else if (upper === 'TRG') {\n        operatorFilter[id.TRG] = that.filter.operators[name] === true;\n      } else if (upper === 'BKR') {\n        operatorFilter[id.BKR] = that.filter.operators[name] === true;\n      } else if (upper === 'BKA') {\n        operatorFilter[id.BKA] = that.filter.operators[name] === true;\n      } else if (upper === 'BKN') {\n        operatorFilter[id.BKN] = that.filter.operators[name] === true;\n      } else if (upper === 'ABG') {\n        operatorFilter[id.ABG] = that.filter.operators[name] === true;\n      } else if (upper === 'AEN') {\n        operatorFilter[id.AEN] = that.filter.operators[name] === true;\n      } else {\n        throw new Error(\n          `${thisFileName}initOpratorFilter: '${name}' not a valid operator name.` +\n            ` Must be <all>, <none>, alt, cat, rep, tls, tbs, trg, and, not, bkr, bka or bkn`\n        );\n      }\n    }\n  };\n  /* filter the rule and `UDT` named operators */\n  const initRuleFilter = function () {\n    const setRules = function (set) {\n      operatorFilter[id.RNM] = set;\n      operatorFilter[id.UDT] = set;\n      const count = rules.length + udts.length;\n      ruleFilter.length = 0;\n      for (let i = 0; i < count; i += 1) {\n        ruleFilter.push(set);\n      }\n    };\n    let items;\n    let i;\n    const list = [];\n    for (i = 0; i < rules.length; i += 1) {\n      list.push(rules[i].lower);\n    }\n    for (i = 0; i < udts.length; i += 1) {\n      list.push(udts[i].lower);\n    }\n    ruleFilter.length = 0;\n    items = 0;\n    // eslint-disable-next-line no-unused-vars\n    for (const name in that.filter.rules) {\n      items += 1;\n    }\n    if (items === 0) {\n      /* case 1: default to all rules & udts */\n      setRules(true);\n      return;\n    }\n    for (const name in that.filter.rules) {\n      const lower = name.toLowerCase();\n      if (lower === '<all>') {\n        /* case 2: trace all rules ignore all other rule commands */\n        setRules(true);\n        return;\n      }\n      if (lower === '<none>') {\n        /* case 3: trace no rules */\n        setRules(false);\n        return;\n      }\n    }\n    /* case 4: trace only individually specified rules */\n    setRules(false);\n    operatorFilter[id.RNM] = true;\n    operatorFilter[id.UDT] = true;\n    for (const name in that.filter.rules) {\n      const lower = name.toLowerCase();\n      i = list.indexOf(lower);\n      if (i < 0) {\n        throw new Error(`${thisFileName}initRuleFilter: '${name}' not a valid rule or udt name`);\n      }\n      ruleFilter[i] = that.filter.rules[name] === true;\n    }\n  };\n  /* used by other APG components to verify that they have a valid trace object */\n  this.traceObject = 'traceObject';\n  this.filter = {\n    operators: [],\n    rules: [],\n  };\n  // Set the maximum number of records to keep (default = 5000).\n  // Each record number larger than `maxRecords`\n  // will result in deleting the previously oldest record.\n  // - `max`: maximum number of records to retain (default = 5000)\n  // - `last`: last record number to retain, (default = -1 for (unknown) actual last record)\n  this.setMaxRecords = function (max, last) {\n    lastRecord = -1;\n    if (typeof max === 'number' && max > 0) {\n      maxRecords = Math.ceil(max);\n    } else {\n      maxRecords = 0;\n      return;\n    }\n    if (typeof last === 'number') {\n      lastRecord = Math.floor(last);\n      if (lastRecord < 0) {\n        lastRecord = -1;\n      }\n    }\n  };\n  // Returns `maxRecords` to the caller.\n  this.getMaxRecords = function () {\n    return maxRecords;\n  };\n  // Returns `lastRecord` to the caller.\n  this.getLastRecord = function () {\n    return lastRecord;\n  };\n  /* Called only by the `parser.js` object. No verification of input. */\n  this.init = function (rulesIn, udtsIn, charsIn) {\n    records.length = 0;\n    recordStack.length = 0;\n    filteredRecords = 0;\n    treeDepth = 0;\n    chars = charsIn;\n    rules = rulesIn;\n    udts = udtsIn;\n    initOperatorFilter();\n    initRuleFilter();\n    circular.init(maxRecords);\n  };\n  /* returns true if this records passes through the designated filter, false if the record is to be skipped */\n  const filterOps = function (op) {\n    let ret = false;\n    if (op.type === id.RNM) {\n      if (operatorFilter[op.type] && ruleFilter[op.index]) {\n        ret = true;\n      } else {\n        ret = false;\n      }\n    } else if (op.type === id.UDT) {\n      if (operatorFilter[op.type] && ruleFilter[rules.length + op.index]) {\n        ret = true;\n      } else {\n        ret = false;\n      }\n    } else {\n      ret = operatorFilter[op.type];\n    }\n    return ret;\n  };\n  const filterRecords = function (record) {\n    if (lastRecord === -1) {\n      return true;\n    }\n    if (record <= lastRecord) {\n      return true;\n    }\n    return false;\n  };\n  /* Collect the \"down\" record. */\n  this.down = function (op, state, offset, length, anchor, lookAround) {\n    if (filterRecords(filteredRecords) && filterOps(op)) {\n      recordStack.push(filteredRecords);\n      records[circular.increment()] = {\n        dirUp: false,\n        depth: treeDepth,\n        thisLine: filteredRecords,\n        thatLine: undefined,\n        opcode: op,\n        state,\n        phraseIndex: offset,\n        phraseLength: length,\n        lookAnchor: anchor,\n        lookAround,\n      };\n      filteredRecords += 1;\n      treeDepth += 1;\n    }\n  };\n  /* Collect the \"up\" record. */\n  this.up = function (op, state, offset, length, anchor, lookAround) {\n    if (filterRecords(filteredRecords) && filterOps(op)) {\n      const thisLine = filteredRecords;\n      const thatLine = recordStack.pop();\n      const thatRecord = circular.getListIndex(thatLine);\n      if (thatRecord !== -1) {\n        records[thatRecord].thatLine = thisLine;\n      }\n      treeDepth -= 1;\n      records[circular.increment()] = {\n        dirUp: true,\n        depth: treeDepth,\n        thisLine,\n        thatLine,\n        opcode: op,\n        state,\n        phraseIndex: offset,\n        phraseLength: length,\n        lookAnchor: anchor,\n        lookAround,\n      };\n      filteredRecords += 1;\n    }\n  };\n  /* convert the trace records to a tree of nodes */\n  const toTreeObj = function () {\n    /* private helper functions */\n    function nodeOpcode(node, opcode) {\n      let name;\n      let casetype;\n      let modetype;\n      if (opcode) {\n        node.op = { id: opcode.type, name: utils.opcodeToString(opcode.type) };\n        node.opData = undefined;\n        switch (opcode.type) {\n          case id.RNM:\n            node.opData = rules[opcode.index].name;\n            break;\n          case id.UDT:\n            node.opData = udts[opcode.index].name;\n            break;\n          case id.BKR:\n            if (opcode.index < rules.length) {\n              name = rules[opcode.index].name;\n            } else {\n              name = udts[opcode.index - rules.length].name;\n            }\n            casetype = opcode.bkrCase === id.BKR_MODE_CI ? '%i' : '%s';\n            modetype = opcode.bkrMode === id.BKR_MODE_UM ? '%u' : '%p';\n            node.opData = `\\\\\\\\${casetype}${modetype}${name}`;\n            break;\n          case id.TLS:\n            node.opData = [];\n            for (let i = 0; i < opcode.string.length; i += 1) {\n              node.opData.push(opcode.string[i]);\n            }\n            break;\n          case id.TBS:\n            node.opData = [];\n            for (let i = 0; i < opcode.string.length; i += 1) {\n              node.opData.push(opcode.string[i]);\n            }\n            break;\n          case id.TRG:\n            node.opData = [opcode.min, opcode.max];\n            break;\n          case id.REP:\n            node.opData = [opcode.min, opcode.max];\n            break;\n          default:\n            throw new Error('unrecognized opcode');\n        }\n      } else {\n        node.op = { id: undefined, name: undefined };\n        node.opData = undefined;\n      }\n    }\n    function nodePhrase(state, index, length) {\n      if (state === id.MATCH) {\n        return {\n          index,\n          length,\n        };\n      }\n      if (state === id.NOMATCH) {\n        return {\n          index,\n          length: 0,\n        };\n      }\n      if (state === id.EMPTY) {\n        return {\n          index,\n          length: 0,\n        };\n      }\n      return null;\n    }\n    let nodeId = -1;\n    function nodeDown(parent, record, depth) {\n      const node = {\n        // eslint-disable-next-line no-plusplus\n        id: nodeId++,\n        branch: -1,\n        parent,\n        up: false,\n        down: false,\n        depth,\n        children: [],\n      };\n      if (record) {\n        node.down = true;\n        node.state = { id: record.state, name: utils.stateToString(record.state) };\n        node.phrase = null;\n        nodeOpcode(node, record.opcode);\n      } else {\n        node.state = { id: undefined, name: undefined };\n        node.phrase = nodePhrase();\n        nodeOpcode(node, undefined);\n      }\n      return node;\n    }\n    function nodeUp(node, record) {\n      if (record) {\n        node.up = true;\n        node.state = { id: record.state, name: utils.stateToString(record.state) };\n        node.phrase = nodePhrase(record.state, record.phraseIndex, record.phraseLength);\n        if (!node.down) {\n          nodeOpcode(node, record.opcode);\n        }\n      }\n    }\n    /* walk the final tree: label branches and count leaf nodes */\n    let leafNodes = 0;\n    let depth = -1;\n    let branchCount = 1;\n    function walk(node) {\n      depth += 1;\n      node.branch = branchCount;\n      if (depth > treeDepth) {\n        treeDepth = depth;\n      }\n      if (node.children.length === 0) {\n        leafNodes += 1;\n      } else {\n        for (let i = 0; i < node.children.length; i += 1) {\n          if (i > 0) {\n            branchCount += 1;\n          }\n          node.children[i].leftMost = false;\n          node.children[i].rightMost = false;\n          if (node.leftMost) {\n            node.children[i].leftMost = i === 0;\n          }\n          if (node.rightMost) {\n            node.children[i].rightMost = i === node.children.length - 1;\n          }\n          walk(node.children[i]);\n        }\n      }\n      depth -= 1;\n    }\n    function display(node, offset) {\n      let name;\n      const obj = {};\n      obj.id = node.id;\n      obj.branch = node.branch;\n      obj.leftMost = node.leftMost;\n      obj.rightMost = node.rightMost;\n      name = node.state.name ? node.state.name : 'ACTIVE';\n      obj.state = { id: node.state.id, name };\n      name = node.op.name ? node.op.name : '?';\n      obj.op = { id: node.op.id, name };\n      if (typeof node.opData === 'string') {\n        obj.opData = node.opData;\n      } else if (Array.isArray(node.opData)) {\n        obj.opData = [];\n        for (let i = 0; i < node.opData.length; i += 1) {\n          obj.opData[i] = node.opData[i];\n        }\n      } else {\n        obj.opData = undefined;\n      }\n      if (node.phrase) {\n        obj.phrase = { index: node.phrase.index, length: node.phrase.length };\n      } else {\n        obj.phrase = null;\n      }\n      obj.depth = node.depth;\n      obj.children = [];\n      for (let i = 0; i < node.children.length; i += 1) {\n        const c = i !== node.children.length - 1;\n        obj.children[i] = display(node.children[i], offset, c);\n      }\n      return obj;\n    }\n\n    /* construct the tree beginning here */\n    const branch = [];\n    let root;\n    let node;\n    let parent;\n    let record;\n    let firstRecord = true;\n    /* push a dummy node so the root node will have a non-null parent */\n    const dummy = nodeDown(null, null, -1);\n    branch.push(dummy);\n    node = dummy;\n    circular.forEach((lineIndex) => {\n      record = records[lineIndex];\n      if (firstRecord) {\n        firstRecord = false;\n        if (record.depth > 0) {\n          /* push some dummy nodes to fill in for missing records */\n          const num = record.dirUp ? record.depth + 1 : record.depth;\n          for (let i = 0; i < num; i += 1) {\n            parent = node;\n            node = nodeDown(node, null, i);\n            branch.push(node);\n            parent.children.push(node);\n          }\n        }\n      }\n      if (record.dirUp) {\n        /* handle the next record up */\n        node = branch.pop();\n        nodeUp(node, record);\n        node = branch[branch.length - 1];\n      } else {\n        /* handle the next record down */\n        parent = node;\n        node = nodeDown(node, record, record.depth);\n        branch.push(node);\n        parent.children.push(node);\n      }\n    });\n\n    /* if not at root, walk it up to root */\n    while (branch.length > 1) {\n      node = branch.pop();\n      nodeUp(node, null);\n    }\n    /* maybe redundant or paranoid tests: these should never happen */\n    if (dummy.children.length === 0) {\n      throw new Error('trace.toTree(): parse tree has no nodes');\n    }\n    if (branch.length === 0) {\n      throw new Error('trace.toTree(): integrity check: dummy root node disappeared?');\n    }\n\n    /* if no record for start rule: find the pseudo root node (first dummy node above a real node) */\n    root = dummy.children[0];\n    let prev = root;\n    while (root && !root.down && !root.up) {\n      prev = root;\n      root = root.children[0];\n    }\n    root = prev;\n\n    /* walk the tree of nodes: label brances and count leaves */\n    root.leftMost = true;\n    root.rightMost = true;\n    walk(root);\n    root.branch = 0;\n\n    /* generate the exported object */\n    const obj = {};\n    obj.string = [];\n    for (let i = 0; i < chars.length; i += 1) {\n      obj.string[i] = chars[i];\n    }\n    /* generate the exported rule names */\n    obj.rules = [];\n    for (let i = 0; i < rules.length; i += 1) {\n      obj.rules[i] = rules[i].name;\n    }\n    /* generate the exported UDT names */\n    obj.udts = [];\n    for (let i = 0; i < udts.length; i += 1) {\n      obj.udts[i] = udts[i].name;\n    }\n    /* generate the ids */\n    obj.id = {};\n    obj.id.ALT = { id: id.ALT, name: 'ALT' };\n    obj.id.CAT = { id: id.CAT, name: 'CAT' };\n    obj.id.REP = { id: id.REP, name: 'REP' };\n    obj.id.RNM = { id: id.RNM, name: 'RNM' };\n    obj.id.TLS = { id: id.TLS, name: 'TLS' };\n    obj.id.TBS = { id: id.TBS, name: 'TBS' };\n    obj.id.TRG = { id: id.TRG, name: 'TRG' };\n    obj.id.UDT = { id: id.UDT, name: 'UDT' };\n    obj.id.AND = { id: id.AND, name: 'AND' };\n    obj.id.NOT = { id: id.NOT, name: 'NOT' };\n    obj.id.BKR = { id: id.BKR, name: 'BKR' };\n    obj.id.BKA = { id: id.BKA, name: 'BKA' };\n    obj.id.BKN = { id: id.BKN, name: 'BKN' };\n    obj.id.ABG = { id: id.ABG, name: 'ABG' };\n    obj.id.AEN = { id: id.AEN, name: 'AEN' };\n    obj.id.ACTIVE = { id: id.ACTIVE, name: 'ACTIVE' };\n    obj.id.MATCH = { id: id.MATCH, name: 'MATCH' };\n    obj.id.EMPTY = { id: id.EMPTY, name: 'EMPTY' };\n    obj.id.NOMATCH = { id: id.NOMATCH, name: 'NOMATCH' };\n    /* generate the max tree depth */\n    obj.treeDepth = treeDepth;\n    /* generate the number of leaf nodes (branches) */\n    obj.leafNodes = leafNodes;\n    /* generate the types of the left- and right-most branches */\n    let branchesIncomplete;\n    if (root.down) {\n      if (root.up) {\n        branchesIncomplete = 'none';\n      } else {\n        branchesIncomplete = 'right';\n      }\n    } else if (root.up) {\n      branchesIncomplete = 'left';\n    } else {\n      branchesIncomplete = 'both';\n    }\n    obj.branchesIncomplete = branchesIncomplete;\n    obj.tree = display(root, root.depth, false);\n    return obj;\n  };\n  // Returns the trace records as JSON parse tree object.\n  // - stringify: if `true`, the object is 'stringified' before returning, otherwise, the object itself is returned.\n  this.toTree = function (stringify) {\n    const obj = toTreeObj();\n    if (stringify) {\n      return JSON.stringify(obj);\n    }\n    return obj;\n  };\n  // Translate the trace records to HTML format and create a complete HTML page for browser display.\n  this.toHtmlPage = function (mode, caption, title) {\n    return utils.htmlToPage(this.toHtml(mode, caption), title);\n  };\n\n  /* From here on down, these are just helper functions for `toHtml()`. */\n  const htmlHeader = function (mode, caption) {\n    /* open the page */\n    /* write the HTML5 header with table style */\n    /* open the <table> tag */\n    let modeName;\n    switch (mode) {\n      case MODE_HEX:\n        modeName = 'hexadecimal';\n        break;\n      case MODE_DEC:\n        modeName = 'decimal';\n        break;\n      case MODE_ASCII:\n        modeName = 'ASCII';\n        break;\n      case MODE_UNICODE:\n        modeName = 'UNICODE';\n        break;\n      default:\n        throw new Error(`${thisFileName}htmlHeader: unrecognized mode: ${mode}`);\n    }\n    let header = '';\n    header += `<p>display mode: ${modeName}</p>\\n`;\n    header += `<table class=\"${style.CLASS_TRACE}\">\\n`;\n    if (typeof caption === 'string') {\n      header += `<caption>${caption}</caption>`;\n    }\n    return header;\n  };\n  const htmlFooter = function () {\n    let footer = '';\n    /* close the </table> tag */\n    footer += '</table>\\n';\n    /* display a table legend */\n    footer += `<p class=\"${style.CLASS_MONOSPACE}\">legend:<br>\\n`;\n    footer += '(a)&nbsp;-&nbsp;line number<br>\\n';\n    footer += '(b)&nbsp;-&nbsp;matching line number<br>\\n';\n    footer += '(c)&nbsp;-&nbsp;phrase offset<br>\\n';\n    footer += '(d)&nbsp;-&nbsp;phrase length<br>\\n';\n    footer += '(e)&nbsp;-&nbsp;tree depth<br>\\n';\n    footer += '(f)&nbsp;-&nbsp;operator state<br>\\n';\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_ACTIVE}\">&darr;</span>&nbsp;&nbsp;phrase opened<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_MATCH}\">&uarr;M</span> phrase matched<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_EMPTY}\">&uarr;E</span> empty phrase matched<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_NOMATCH}\">&uarr;N</span> phrase not matched<br>\\n`;\n    footer +=\n      'operator&nbsp;-&nbsp;ALT, CAT, REP, RNM, TRG, TLS, TBS<sup>&dagger;</sup>, UDT, AND, NOT, BKA, BKN, BKR, ABG, AEN<sup>&Dagger;</sup><br>\\n';\n    footer += `phrase&nbsp;&nbsp;&nbsp;-&nbsp;up to ${MAX_PHRASE} characters of the phrase being matched<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_MATCH}\">matched characters</span><br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_LOOKAHEAD}\">matched characters in look ahead mode</span><br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_LOOKBEHIND}\">matched characters in look behind mode</span><br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_REMAINDER}\">remainder characters(not yet examined by parser)</span><br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_CTRLCHAR}\">control characters, TAB, LF, CR, etc. (ASCII mode only)</span><br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_EMPTY} empty string<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_END} end of input string<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_CONTINUE} input string display truncated<br>\\n`;\n    footer += '</p>\\n';\n    footer += `<p class=\"${style.CLASS_MONOSPACE}\">\\n`;\n    footer += '<sup>&dagger;</sup>original ABNF operators:<br>\\n';\n    footer += 'ALT - alternation<br>\\n';\n    footer += 'CAT - concatenation<br>\\n';\n    footer += 'REP - repetition<br>\\n';\n    footer += 'RNM - rule name<br>\\n';\n    footer += 'TRG - terminal range<br>\\n';\n    footer += 'TLS - terminal literal string (case insensitive)<br>\\n';\n    footer += 'TBS - terminal binary string (case sensitive)<br>\\n';\n    footer += '<br>\\n';\n    footer += '<sup>&Dagger;</sup>super set SABNF operators:<br>\\n';\n    footer += 'UDT - user-defined terminal<br>\\n';\n    footer += 'AND - positive look ahead<br>\\n';\n    footer += 'NOT - negative look ahead<br>\\n';\n    footer += 'BKA - positive look behind<br>\\n';\n    footer += 'BKN - negative look behind<br>\\n';\n    footer += 'BKR - back reference<br>\\n';\n    footer += 'ABG - anchor - begin of input string<br>\\n';\n    footer += 'AEN - anchor - end of input string<br>\\n';\n    footer += '</p>\\n';\n    return footer;\n  };\n  this.indent = function (depth) {\n    let html = '';\n    for (let i = 0; i < depth; i += 1) {\n      html += '.';\n    }\n    return html;\n  };\n  /* format the TRG operator */\n  const displayTrg = function (mode, op) {\n    let html = '';\n    if (op.type === id.TRG) {\n      if (mode === MODE_HEX || mode === MODE_UNICODE) {\n        let hex = op.min.toString(16).toUpperCase();\n        if (hex.length % 2 !== 0) {\n          hex = `0${hex}`;\n        }\n        html += mode === MODE_HEX ? '%x' : 'U+';\n        html += hex;\n        hex = op.max.toString(16).toUpperCase();\n        if (hex.length % 2 !== 0) {\n          hex = `0${hex}`;\n        }\n        html += `&ndash;${hex}`;\n      } else {\n        html = `%d${op.min.toString(10)}&ndash;${op.max.toString(10)}`;\n      }\n    }\n    return html;\n  };\n  /* format the REP operator */\n  const displayRep = function (mode, op) {\n    let html = '';\n    if (op.type === id.REP) {\n      if (mode === MODE_HEX) {\n        let hex = op.min.toString(16).toUpperCase();\n        if (hex.length % 2 !== 0) {\n          hex = `0${hex}`;\n        }\n        html = `x${hex}`;\n        if (op.max < Infinity) {\n          hex = op.max.toString(16).toUpperCase();\n          if (hex.length % 2 !== 0) {\n            hex = `0${hex}`;\n          }\n        } else {\n          hex = 'inf';\n        }\n        html += `&ndash;${hex}`;\n      } else if (op.max < Infinity) {\n        html = `${op.min.toString(10)}&ndash;${op.max.toString(10)}`;\n      } else {\n        html = `${op.min.toString(10)}&ndash;inf`;\n      }\n    }\n    return html;\n  };\n  /* format the TBS operator */\n  const displayTbs = function (mode, op) {\n    let html = '';\n    if (op.type === id.TBS) {\n      const len = Math.min(op.string.length, MAX_TLS * 2);\n      if (mode === MODE_HEX || mode === MODE_UNICODE) {\n        html += mode === MODE_HEX ? '%x' : 'U+';\n        for (let i = 0; i < len; i += 1) {\n          let hex;\n          if (i > 0) {\n            html += '.';\n          }\n          hex = op.string[i].toString(16).toUpperCase();\n          if (hex.length % 2 !== 0) {\n            hex = `0${hex}`;\n          }\n          html += hex;\n        }\n      } else {\n        html = '%d';\n        for (let i = 0; i < len; i += 1) {\n          if (i > 0) {\n            html += '.';\n          }\n          html += op.string[i].toString(10);\n        }\n      }\n      if (len < op.string.length) {\n        html += PHRASE_CONTINUE;\n      }\n    }\n    return html;\n  };\n  /* format the TLS operator */\n  const displayTls = function (mode, op) {\n    let html = '';\n    if (op.type === id.TLS) {\n      const len = Math.min(op.string.length, MAX_TLS);\n      if (mode === MODE_HEX || mode === MODE_DEC) {\n        let charu;\n        let charl;\n        let base;\n        if (mode === MODE_HEX) {\n          html = '%x';\n          base = 16;\n        } else {\n          html = '%d';\n          base = 10;\n        }\n        for (let i = 0; i < len; i += 1) {\n          if (i > 0) {\n            html += '.';\n          }\n          charl = op.string[i];\n          if (charl >= 97 && charl <= 122) {\n            charu = charl - 32;\n            html += `${charu.toString(base)}/${charl.toString(base)}`.toUpperCase();\n          } else if (charl >= 65 && charl <= 90) {\n            charu = charl;\n            charl += 32;\n            html += `${charu.toString(base)}/${charl.toString(base)}`.toUpperCase();\n          } else {\n            html += charl.toString(base).toUpperCase();\n          }\n        }\n        if (len < op.string.length) {\n          html += PHRASE_CONTINUE;\n        }\n      } else {\n        html = '\"';\n        for (let i = 0; i < len; i += 1) {\n          html += utils.asciiChars[op.string[i]];\n        }\n        if (len < op.string.length) {\n          html += PHRASE_CONTINUE;\n        }\n        html += '\"';\n      }\n    }\n    return html;\n  };\n  const subPhrase = function (mode, charsArg, index, length, prev) {\n    if (length === 0) {\n      return '';\n    }\n    let phrase = '';\n    const comma = prev ? ',' : '';\n    switch (mode) {\n      case MODE_HEX:\n        phrase = comma + utils.charsToHex(charsArg, index, length);\n        break;\n      case MODE_DEC:\n        if (prev) {\n          return `,${utils.charsToDec(charsArg, index, length)}`;\n        }\n        phrase = comma + utils.charsToDec(charsArg, index, length);\n        break;\n      case MODE_UNICODE:\n        phrase = utils.charsToUnicode(charsArg, index, length);\n        break;\n      case MODE_ASCII:\n      default:\n        phrase = utils.charsToAsciiHtml(charsArg, index, length);\n        break;\n    }\n    return phrase;\n  };\n  /* display phrases matched in look-behind mode */\n  const displayBehind = function (mode, charsArg, state, index, length, anchor) {\n    let html = '';\n    let beg1;\n    let len1;\n    let beg2;\n    let len2;\n    let lastchar = PHRASE_END;\n    const spanBehind = `<span class=\"${style.CLASS_LOOKBEHIND}\">`;\n    const spanRemainder = `<span class=\"${style.CLASS_REMAINDER}\">`;\n    const spanend = '</span>';\n    let prev = false;\n    switch (state) {\n      case id.EMPTY:\n        html += PHRASE_EMPTY;\n      /* // eslint-disable-next-line no-fallthrough */\n      case id.NOMATCH:\n      case id.MATCH:\n      case id.ACTIVE:\n        beg1 = index - length;\n        len1 = anchor - beg1;\n        beg2 = anchor;\n        len2 = charsArg.length - beg2;\n        break;\n      default:\n        throw new Error('unrecognized state');\n    }\n    lastchar = PHRASE_END;\n    if (len1 > MAX_PHRASE) {\n      len1 = MAX_PHRASE;\n      lastchar = PHRASE_CONTINUE;\n      len2 = 0;\n    } else if (len1 + len2 > MAX_PHRASE) {\n      lastchar = PHRASE_CONTINUE;\n      len2 = MAX_PHRASE - len1;\n    }\n    if (len1 > 0) {\n      html += spanBehind;\n      html += subPhrase(mode, charsArg, beg1, len1, prev);\n      html += spanend;\n      prev = true;\n    }\n    if (len2 > 0) {\n      html += spanRemainder;\n      html += subPhrase(mode, charsArg, beg2, len2, prev);\n      html += spanend;\n    }\n    return html + lastchar;\n  };\n  const displayForward = function (mode, charsArg, state, index, length, spanAhead) {\n    let html = '';\n    let beg1;\n    let len1;\n    let beg2;\n    let len2;\n    let lastchar = PHRASE_END;\n    const spanRemainder = `<span class=\"${style.CLASS_REMAINDER}\">`;\n    const spanend = '</span>';\n    let prev = false;\n    switch (state) {\n      case id.EMPTY:\n        html += PHRASE_EMPTY;\n      /* // eslint-disable-next-line no-fallthrough */\n      case id.NOMATCH:\n      case id.ACTIVE:\n        beg1 = index;\n        len1 = 0;\n        beg2 = index;\n        len2 = charsArg.length - beg2;\n        break;\n      case id.MATCH:\n        beg1 = index;\n        len1 = length;\n        beg2 = index + len1;\n        len2 = charsArg.length - beg2;\n        break;\n      default:\n        throw new Error('unrecognized state');\n    }\n    lastchar = PHRASE_END;\n    if (len1 > MAX_PHRASE) {\n      len1 = MAX_PHRASE;\n      lastchar = PHRASE_CONTINUE;\n      len2 = 0;\n    } else if (len1 + len2 > MAX_PHRASE) {\n      lastchar = PHRASE_CONTINUE;\n      len2 = MAX_PHRASE - len1;\n    }\n    if (len1 > 0) {\n      html += spanAhead;\n      html += subPhrase(mode, charsArg, beg1, len1, prev);\n      html += spanend;\n      prev = true;\n    }\n    if (len2 > 0) {\n      html += spanRemainder;\n      html += subPhrase(mode, charsArg, beg2, len2, prev);\n      html += spanend;\n    }\n    return html + lastchar;\n  };\n  /* display phrases matched in look-ahead mode */\n  const displayAhead = function (mode, charsArg, state, index, length) {\n    const spanAhead = `<span class=\"${style.CLASS_LOOKAHEAD}\">`;\n    return displayForward(mode, charsArg, state, index, length, spanAhead);\n  };\n  /* display phrases matched in normal parsing mode */\n  const displayNone = function (mode, charsArg, state, index, length) {\n    const spanAhead = `<span class=\"${style.CLASS_MATCH}\">`;\n    return displayForward(mode, charsArg, state, index, length, spanAhead);\n  };\n  /* Returns the filtered records, formatted as an HTML table. */\n  const htmlTable = function (mode) {\n    if (rules === null) {\n      return '';\n    }\n    let html = '';\n    let thisLine;\n    let thatLine;\n    let lookAhead;\n    let lookBehind;\n    let lookAround;\n    let anchor;\n    html += '<tr><th>(a)</th><th>(b)</th><th>(c)</th><th>(d)</th><th>(e)</th><th>(f)</th>';\n    html += '<th>operator</th><th>phrase</th></tr>\\n';\n    circular.forEach((lineIndex) => {\n      const line = records[lineIndex];\n      thisLine = line.thisLine;\n      thatLine = line.thatLine !== undefined ? line.thatLine : '--';\n      lookAhead = false;\n      lookBehind = false;\n      lookAround = false;\n      if (line.lookAround === id.LOOKAROUND_AHEAD) {\n        lookAhead = true;\n        lookAround = true;\n        anchor = line.lookAnchor;\n      }\n      if (line.opcode.type === id.AND || line.opcode.type === id.NOT) {\n        lookAhead = true;\n        lookAround = true;\n        anchor = line.phraseIndex;\n      }\n      if (line.lookAround === id.LOOKAROUND_BEHIND) {\n        lookBehind = true;\n        lookAround = true;\n        anchor = line.lookAnchor;\n      }\n      if (line.opcode.type === id.BKA || line.opcode.type === id.BKN) {\n        lookBehind = true;\n        lookAround = true;\n        anchor = line.phraseIndex;\n      }\n      html += '<tr>';\n      html += `<td>${thisLine}</td><td>${thatLine}</td>`;\n      html += `<td>${line.phraseIndex}</td>`;\n      html += `<td>${line.phraseLength}</td>`;\n      html += `<td>${line.depth}</td>`;\n      html += '<td>';\n      switch (line.state) {\n        case id.ACTIVE:\n          html += `<span class=\"${style.CLASS_ACTIVE}\">&darr;&nbsp;</span>`;\n          break;\n        case id.MATCH:\n          html += `<span class=\"${style.CLASS_MATCH}\">&uarr;M</span>`;\n          break;\n        case id.NOMATCH:\n          html += `<span class=\"${style.CLASS_NOMATCH}\">&uarr;N</span>`;\n          break;\n        case id.EMPTY:\n          html += `<span class=\"${style.CLASS_EMPTY}\">&uarr;E</span>`;\n          break;\n        default:\n          html += `<span class=\"${style.CLASS_ACTIVE}\">--</span>`;\n          break;\n      }\n      html += '</td>';\n      html += '<td>';\n      html += that.indent(line.depth);\n      if (lookAhead) {\n        html += `<span class=\"${style.CLASS_LOOKAHEAD}\">`;\n      } else if (lookBehind) {\n        html += `<span class=\"${style.CLASS_LOOKBEHIND}\">`;\n      }\n      html += utils.opcodeToString(line.opcode.type);\n      if (line.opcode.type === id.RNM) {\n        html += `(${rules[line.opcode.index].name}) `;\n      }\n      if (line.opcode.type === id.BKR) {\n        const casetype = line.opcode.bkrCase === id.BKR_MODE_CI ? '%i' : '%s';\n        const modetype = line.opcode.bkrMode === id.BKR_MODE_UM ? '%u' : '%p';\n        html += `(\\\\${casetype}${modetype}${rules[line.opcode.index].name}) `;\n      }\n      if (line.opcode.type === id.UDT) {\n        html += `(${udts[line.opcode.index].name}) `;\n      }\n      if (line.opcode.type === id.TRG) {\n        html += `(${displayTrg(mode, line.opcode)}) `;\n      }\n      if (line.opcode.type === id.TBS) {\n        html += `(${displayTbs(mode, line.opcode)}) `;\n      }\n      if (line.opcode.type === id.TLS) {\n        html += `(${displayTls(mode, line.opcode)}) `;\n      }\n      if (line.opcode.type === id.REP) {\n        html += `(${displayRep(mode, line.opcode)}) `;\n      }\n      if (lookAround) {\n        html += '</span>';\n      }\n      html += '</td>';\n      html += '<td>';\n      if (lookBehind) {\n        html += displayBehind(mode, chars, line.state, line.phraseIndex, line.phraseLength, anchor);\n      } else if (lookAhead) {\n        html += displayAhead(mode, chars, line.state, line.phraseIndex, line.phraseLength);\n      } else {\n        html += displayNone(mode, chars, line.state, line.phraseIndex, line.phraseLength);\n      }\n      html += '</td></tr>\\n';\n    });\n    html += '<tr><th>(a)</th><th>(b)</th><th>(c)</th><th>(d)</th><th>(e)</th><th>(f)</th>';\n    html += '<th>operator</th><th>phrase</th></tr>\\n';\n    html += '</table>\\n';\n    return html;\n  };\n  // Translate the trace records to HTML format.\n  // - *modearg* - can be `\"ascii\"`, `\"decimal\"`, `\"hexadecimal\"` or `\"unicode\"`.\n  // Determines the format of the string character code display.\n  // - *caption* - optional caption for the HTML table.\n  this.toHtml = function (modearg, caption) {\n    /* writes the trace records as a table in a complete html page */\n    let mode = MODE_ASCII;\n    if (typeof modearg === 'string' && modearg.length >= 3) {\n      const modein = modearg.toLowerCase().slice(0, 3);\n      if (modein === 'hex') {\n        mode = MODE_HEX;\n      } else if (modein === 'dec') {\n        mode = MODE_DEC;\n      } else if (modein === 'uni') {\n        mode = MODE_UNICODE;\n      }\n    }\n    let html = '';\n    html += htmlHeader(mode, caption);\n    html += htmlTable(mode);\n    html += htmlFooter();\n    return html;\n  };\n};\n","/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module serves to export all library objects and object constructors with the `require(\"apg-lib\")` statement.\n// For example, to create a new parser in your program,\n// ````\n// let apglib = require(\"../apg-lib/node-exports\");\n// let my-parser = new apglib.parser();\n// ````\nmodule.exports = {\n  ast: require('./ast'),\n  circular: require('./circular-buffer'),\n  ids: require('./identifiers'),\n  parser: require('./parser'),\n  stats: require('./stats'),\n  trace: require('./trace'),\n  utils: require('./utilities'),\n  emitcss: require('./emitcss'),\n  style: require('./style'),\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseIntegerNumber = exports.isEIP55Address = void 0;\nconst sha3_1 = require(\"@noble/hashes/sha3\");\nconst utils_1 = require(\"@noble/hashes/utils\");\n/**\n * This method is supposed to check if an address is conforming to EIP-55.\n * @param address Address to be checked if conforms with EIP-55.\n * @returns Either the return is or not in the EIP-55 format.\n */\nconst isEIP55Address = (address) => {\n    if (address.length != 42) {\n        return false;\n    }\n    const lowerAddress = `${address}`.toLowerCase().replace(\"0x\", \"\");\n    const hash = (0, utils_1.bytesToHex)((0, sha3_1.keccak_256)(lowerAddress));\n    let ret = \"0x\";\n    for (let i = 0; i < lowerAddress.length; i++) {\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += lowerAddress[i].toUpperCase();\n        }\n        else {\n            ret += lowerAddress[i];\n        }\n    }\n    return address === ret;\n};\nexports.isEIP55Address = isEIP55Address;\nconst parseIntegerNumber = (number) => {\n    const parsed = parseInt(number);\n    if (isNaN(parsed))\n        throw new Error(\"Invalid number.\");\n    if (parsed === Infinity)\n        throw new Error(\"Invalid number.\");\n    return parsed;\n};\nexports.parseIntegerNumber = parseIntegerNumber;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cb = void 0;\nconst node_exports_1 = __importDefault(require(\"apg-js/src/apg-lib/node-exports\"));\nconst utils = node_exports_1.default.utils;\nconst id = node_exports_1.default.ids;\nconst utils_1 = require(\"./utils\");\n/* copied from siwe/lib/utils.ts */\nconst ISO8601 = /^(?<date>[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]))[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(.[0-9]+)?(([Zz])|([+|-]([01][0-9]|2[0-3]):[0-5][0-9]))$/;\nconst isValidISO8601Date = (inputDate) => {\n    /* Split groups and make sure inputDate is in ISO8601 format */\n    const inputMatch = ISO8601.exec(inputDate);\n    /* if inputMatch is null the date is not ISO-8601 */\n    if (!inputMatch) {\n        return false;\n    }\n    /* Creates a date object with input date to parse for invalid days e.g. Feb, 30 -> Mar, 01 */\n    const inputDateParsed = new Date(inputMatch.groups.date).toISOString();\n    /* Get groups from new parsed date to compare with the original input */\n    const parsedInputMatch = ISO8601.exec(inputDateParsed);\n    /* Compare remaining fields */\n    return inputMatch.groups.date === parsedInputMatch.groups.date;\n};\nexports.cb = {\n    signInWithEtherium: function (result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.ACTIVE:\n                if (typeof data !== \"object\" || data === null) {\n                    throw new Error(\"data must be an object\");\n                }\n                break;\n            case id.NOMATCH:\n                data.errors.push(`invalid message: max line number was ${data.lineno}`);\n        }\n    },\n    lineno: function lineno(result, chars, phraseIndex, data) {\n        if (result.state === id.MATCH) {\n            data.lineno += 1;\n        }\n    },\n    exTitle: function exTitle(result, chars, phraseIndex, data) {\n        if (result.state === id.NOMATCH) {\n            data.lineno -= 1;\n        }\n    },\n    nbTitle: function nbTitle(result, chars, phraseIndex, data) {\n        if (result.state === id.NOMATCH) {\n            data.lineno -= 1;\n        }\n    },\n    riTitle: function riTitle(result, chars, phraseIndex, data) {\n        if (result.state === id.NOMATCH) {\n            data.lineno -= 1;\n        }\n    },\n    reTitle: function reTitle(result, chars, phraseIndex, data) {\n        if (result.state === id.MATCH) {\n            data.resources = [];\n        }\n        else if (result.state === id.NOMATCH) {\n            data.lineno -= 1;\n        }\n    },\n    oscheme: function oscheme(result, chars, phraseIndex, data) {\n        if (result.state === id.MATCH) {\n            // if matched, remove :// from oscheme\n            data.scheme = utils.charsToString(chars, phraseIndex, result.phraseLength - 3);\n        }\n    },\n    domain: function domain(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.domain = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n            case id.EMPTY:\n                data.errors.push(`line ${data.lineno}: domain cannot be empty`);\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid domain`);\n        }\n    },\n    address: function address(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.address = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                if (!(0, utils_1.isEIP55Address)(data.address)) {\n                    data.errors.push(`line ${data.lineno}: invalid EIP-55 address - ${data.address}`);\n                }\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid address`);\n                break;\n        }\n    },\n    statement: function statement(result, chars, phraseIndex, data) {\n        if (result.state === id.MATCH) {\n            data.statement = utils.charsToString(chars, phraseIndex, result.phraseLength);\n        }\n    },\n    emptyStatement: function emptyStatement(result, chars, phraseIndex, data) {\n        if (result.state === id.MATCH) {\n            data.statement = \"\";\n        }\n    },\n    version: function version(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.version = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid version`);\n                break;\n        }\n    },\n    nonce: function nonce(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.nonce = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid nonce`);\n                break;\n        }\n    },\n    issuedAt: function issuedAt(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.issuedAt = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                if (!isValidISO8601Date(data.issuedAt)) {\n                    data.errors.push(`line ${data.lineno}: invalid issued-at date time semantics`);\n                }\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid issued-at date time syntax`);\n                break;\n        }\n    },\n    expirationTime: function expirationTime(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.expirationTime = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                if (!isValidISO8601Date(data.expirationTime)) {\n                    data.errors.push(`line ${data.lineno}: invalid expiration-time date time semantics`);\n                }\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid expiration-time date time syntax`);\n                break;\n        }\n    },\n    notBefore: function notBefore(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.notBefore = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                if (!isValidISO8601Date(data.notBefore)) {\n                    data.errors.push(`line ${data.lineno}: invalid not-before date time semantics`);\n                }\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid not-before date time syntax`);\n                break;\n        }\n    },\n    requestId: function requestId(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.requestId = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n            case id.EMPTY:\n                data.requestId = \"\";\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid requestID`);\n                break;\n        }\n    },\n    chainId: function chainId(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.chainId = (0, utils_1.parseIntegerNumber)(utils.charsToString(chars, phraseIndex, result.phraseLength));\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid chain-id`);\n                break;\n        }\n    },\n    uriR: function uriR(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.uriR = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid resource URI`);\n                break;\n        }\n    },\n    resource: function resource(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.resources.push(data.uriR);\n                delete data.uriR;\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid resource`);\n                break;\n        }\n    },\n    // handle the URI\n    scheme: function scheme(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.uriElements.scheme = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid URI scheme`);\n                break;\n        }\n    },\n    userinfo: function userinfo(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.uriElements.userinfo = utils.charsToString(chars, phraseIndex, result.phraseLength - 1);\n                break;\n        }\n    },\n    host: function host(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.ACTIVE:\n                data.iplit = false;\n                break;\n            case id.MATCH:\n                if (data.iplit) {\n                    // strip leading \"[\" and trailing \"]\" brackets\n                    data.uriElements.host = utils.charsToString(chars, phraseIndex + 1, result.phraseLength - 2);\n                }\n                else {\n                    data.uriElements.host = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                }\n                break;\n            case id.EMPTY:\n                data.uriElements.host = \"\";\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid URI host`);\n                break;\n        }\n    },\n    ipLiteral: function ipLiteral(result, chars, phraseIndex, data) {\n        if (result.state === id.MATCH) {\n            data.iplit = true;\n        }\n    },\n    port: function port(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.uriElements.port = (0, utils_1.parseIntegerNumber)(utils.charsToString(chars, phraseIndex, result.phraseLength));\n                break;\n            case id.EMPTY:\n                data.uriElements.port = \"\";\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid URI port`);\n                break;\n        }\n    },\n    pathAbempty: function pathAbempty(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.uriElements.path = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n            case id.EMPTY:\n                data.uriElements.path = \"\";\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid URI path-abempty`);\n                break;\n        }\n    },\n    pathAbsolute: function pathAbsolute(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.uriElements.path = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n        }\n    },\n    pathRootless: function pathRootless(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.uriElements.path = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n        }\n    },\n    pathEmpty: function pathEmpty(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid URI - path-empty must be empty`);\n                break;\n            case id.EMPTY:\n                data.uriElements.path = \"\";\n                break;\n        }\n    },\n    query: function query(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.uriElements.query = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n            case id.EMPTY:\n                data.uriElements.query = \"\";\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid URI query`);\n                break;\n        }\n    },\n    fragment: function fragment(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.uriElements.fragment = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n            case id.EMPTY:\n                data.uriElements.fragment = \"\";\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid URI fragment`);\n                break;\n        }\n    },\n    uri: function URI(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                //NOTE: all \"valid-url\" tests are satisfied if URI ABNF parses without error.\n                data.uri = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n            case id.EMPTY:\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid URI`);\n                break;\n        }\n    },\n    ipv4: function ipv4(result, chars, phraseIndex, data) {\n        if (result.state === id.MATCH) {\n            data.ipv4 = true;\n        }\n    },\n    h16: function h16(result, chars, phraseIndex, data) {\n        if (result.state === id.MATCH) {\n            data.h16count += 1;\n        }\n    },\n    nodcolon: function nodcolon(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.ACTIVE:\n                data.h16count = 0;\n                data.ipv4 = false;\n                break;\n            case id.MATCH:\n                // semantically validate the number of 16-bit digits\n                if (data.ipv4) {\n                    if (data.h16count === 6) {\n                        result.state = id.MATCH;\n                    }\n                    else {\n                        result.state = id.NOMATCH;\n                        result.phraseLength = 0;\n                    }\n                }\n                else {\n                    if (data.h16count === 8) {\n                        result.state = id.MATCH;\n                    }\n                    else {\n                        result.state = id.NOMATCH;\n                        result.phraseLength = 0;\n                    }\n                }\n                break;\n        }\n    },\n    dcolon: function dcolon(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.ACTIVE:\n                data.h16count = 0;\n                data.ipv4 = false;\n                break;\n            case id.MATCH:\n                // semantically validate the number of 16-bit digits\n                if (data.ipv4) {\n                    if (data.h16count < 6) {\n                        result.state = id.MATCH;\n                    }\n                    else {\n                        result.state = id.NOMATCH;\n                        result.phraseLength = 0;\n                    }\n                }\n                else {\n                    if (data.h16count < 8) {\n                        result.state = id.MATCH;\n                    }\n                    else {\n                        result.state = id.NOMATCH;\n                        result.phraseLength = 0;\n                    }\n                }\n                break;\n        }\n    },\n    decOctet: function decOctet(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.ACTIVE:\n                data.octet = 0;\n                break;\n            case id.MATCH:\n                // semantically validate the octet\n                if (data.octet > 255) {\n                    result.state = id.NOMATCH;\n                    result.phraseLength = 0;\n                }\n                else {\n                    result.state = id.MATCH;\n                }\n                break;\n        }\n    },\n    decDigit: function decDigit(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.octet = 10 * data.octet + chars[phraseIndex] - 48;\n                break;\n        }\n    },\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isUri = exports.ParsedMessage = void 0;\nconst siwe_grammar_1 = require(\"./siwe-grammar\");\nconst callbacks_1 = require(\"./callbacks\");\nconst node_exports_1 = __importDefault(require(\"apg-js/src/apg-lib/node-exports\"));\nconst grammarObj = new siwe_grammar_1.grammar();\nclass ParsedMessage {\n    // and display it on an HTML page.\n    constructor(msg) {\n        const parser = new node_exports_1.default.parser();\n        parser.callbacks[\"sign-in-with-ethereum\"] = callbacks_1.cb.signInWithEtherium;\n        parser.callbacks[\"oscheme\"] = callbacks_1.cb.oscheme;\n        parser.callbacks[\"domain\"] = callbacks_1.cb.domain;\n        parser.callbacks[\"LF\"] = callbacks_1.cb.lineno;\n        parser.callbacks[\"ex-title\"] = callbacks_1.cb.exTitle;\n        parser.callbacks[\"nb-title\"] = callbacks_1.cb.nbTitle;\n        parser.callbacks[\"ri-title\"] = callbacks_1.cb.riTitle;\n        parser.callbacks[\"re-title\"] = callbacks_1.cb.reTitle;\n        parser.callbacks[\"address\"] = callbacks_1.cb.address;\n        parser.callbacks[\"statement\"] = callbacks_1.cb.statement;\n        parser.callbacks[\"empty-statement\"] = callbacks_1.cb.emptyStatement;\n        parser.callbacks[\"version\"] = callbacks_1.cb.version;\n        parser.callbacks[\"chain-id\"] = callbacks_1.cb.chainId;\n        parser.callbacks[\"nonce\"] = callbacks_1.cb.nonce;\n        parser.callbacks[\"issued-at\"] = callbacks_1.cb.issuedAt;\n        parser.callbacks[\"expiration-time\"] = callbacks_1.cb.expirationTime;\n        parser.callbacks[\"not-before\"] = callbacks_1.cb.notBefore;\n        parser.callbacks[\"request-id\"] = callbacks_1.cb.requestId;\n        parser.callbacks[\"uri\"] = callbacks_1.cb.uri;\n        parser.callbacks[\"uri-r\"] = callbacks_1.cb.uriR;\n        parser.callbacks[\"resource\"] = callbacks_1.cb.resource;\n        parser.callbacks[\"scheme\"] = callbacks_1.cb.scheme;\n        parser.callbacks[\"userinfo-at\"] = callbacks_1.cb.userinfo;\n        parser.callbacks[\"host\"] = callbacks_1.cb.host;\n        parser.callbacks[\"IP-literal\"] = callbacks_1.cb.ipLiteral;\n        parser.callbacks[\"port\"] = callbacks_1.cb.port;\n        parser.callbacks[\"path-abempty\"] = callbacks_1.cb.pathAbempty;\n        parser.callbacks[\"path-absolute\"] = callbacks_1.cb.pathAbsolute;\n        parser.callbacks[\"path-rootless\"] = callbacks_1.cb.pathRootless;\n        parser.callbacks[\"path-empty\"] = callbacks_1.cb.pathEmpty;\n        parser.callbacks[\"query\"] = callbacks_1.cb.query;\n        parser.callbacks[\"fragment\"] = callbacks_1.cb.fragment;\n        parser.callbacks[\"IPv4address\"] = callbacks_1.cb.ipv4;\n        parser.callbacks[\"nodcolon\"] = callbacks_1.cb.nodcolon;\n        parser.callbacks[\"dcolon\"] = callbacks_1.cb.dcolon;\n        parser.callbacks[\"h16\"] = callbacks_1.cb.h16;\n        parser.callbacks[\"h16c\"] = callbacks_1.cb.h16;\n        parser.callbacks[\"h16n\"] = callbacks_1.cb.h16;\n        parser.callbacks[\"h16cn\"] = callbacks_1.cb.h16;\n        parser.callbacks[\"dec-octet\"] = callbacks_1.cb.decOctet;\n        parser.callbacks[\"dec-digit\"] = callbacks_1.cb.decDigit;\n        // initialize parsed elements\n        const elements = {\n            errors: [],\n            lineno: 1,\n            scheme: undefined,\n            domain: undefined,\n            address: undefined,\n            statement: undefined,\n            uri: undefined,\n            version: undefined,\n            chainId: undefined,\n            nonce: undefined,\n            issuedAt: undefined,\n            expirationTime: undefined,\n            notBefore: undefined,\n            requestId: undefined,\n            resources: undefined,\n            uriElements: {\n                scheme: undefined,\n                userinfo: undefined,\n                host: undefined,\n                port: undefined,\n                path: undefined,\n                query: undefined,\n                fragment: undefined,\n            },\n        };\n        const result = parser.parse(grammarObj, 0, msg, elements);\n        let throwMsg = \"\";\n        for (let i = 0; i < elements.errors.length; i += 1) {\n            throwMsg += elements.errors[i] + \"\\n\";\n        }\n        if (!result.success) {\n            throwMsg += `Invalid message: ${JSON.stringify(result)}`;\n        }\n        if (throwMsg !== \"\") {\n            throw new Error(throwMsg);\n        }\n        this.scheme = elements.scheme;\n        this.domain = elements.domain;\n        this.address = elements.address;\n        this.statement = elements.statement;\n        this.uri = elements.uri;\n        this.version = elements.version;\n        this.chainId = elements.chainId;\n        this.nonce = elements.nonce;\n        this.issuedAt = elements.issuedAt;\n        this.expirationTime = elements.expirationTime;\n        this.notBefore = elements.notBefore;\n        this.requestId = elements.requestId;\n        this.resources = elements.resources;\n        this.uriElements = elements.uriElements;\n    }\n}\nexports.ParsedMessage = ParsedMessage;\nconst isUri = (uri) => {\n    const parser = new node_exports_1.default.parser();\n    parser.callbacks[\"IP-literal\"] = callbacks_1.cb.ipLiteral;\n    parser.callbacks[\"IPv4address\"] = callbacks_1.cb.ipv4;\n    parser.callbacks[\"nodcolon\"] = callbacks_1.cb.nodcolon;\n    parser.callbacks[\"dcolon\"] = callbacks_1.cb.dcolon;\n    parser.callbacks[\"h16\"] = callbacks_1.cb.h16;\n    parser.callbacks[\"h16c\"] = callbacks_1.cb.h16;\n    parser.callbacks[\"h16n\"] = callbacks_1.cb.h16;\n    parser.callbacks[\"h16cn\"] = callbacks_1.cb.h16;\n    parser.callbacks[\"dec-octet\"] = callbacks_1.cb.decOctet;\n    parser.callbacks[\"dec-digit\"] = callbacks_1.cb.decDigit;\n    const data = { errors: [] };\n    const result = parser.parse(grammarObj, \"uri-r\", uri, data);\n    return result.success;\n};\nexports.isUri = isUri;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isUri = exports.ParsedMessage = void 0;\nconst abnf_1 = require(\"./abnf\");\nObject.defineProperty(exports, \"ParsedMessage\", { enumerable: true, get: function () { return abnf_1.ParsedMessage; } });\nconst abnf_2 = require(\"./abnf\");\nObject.defineProperty(exports, \"isUri\", { enumerable: true, get: function () { return abnf_2.isUri; } });\n__exportStar(require(\"./utils\"), exports);\n","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n};\n","'use strict';\n\n// created 2023-09-25T01:01:55.148Z\n// compressed base64-encoded blob for include-ens data\n// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js\n// see: https://github.com/adraffy/ens-normalize.js#security\n// SHA-256: 0565ed049b9cf1614bb9e11ba7d8ac6a6fb96c893253d890f7e2b2884b9ded32\nvar COMPRESSED$1 = '';\nconst FENCED = new Map([[8217,\"apostrophe\"],[8260,\"fraction slash\"],[12539,\"middle dot\"]]);\nconst NSM_MAX = 4;\n\nfunction decode_arithmetic(bytes) {\r\n\tlet pos = 0;\r\n\tfunction u16() { return (bytes[pos++] << 8) | bytes[pos++]; }\r\n\t\r\n\t// decode the frequency table\r\n\tlet symbol_count = u16();\r\n\tlet total = 1;\r\n\tlet acc = [0, 1]; // first symbol has frequency 1\r\n\tfor (let i = 1; i < symbol_count; i++) {\r\n\t\tacc.push(total += u16());\r\n\t}\r\n\r\n\t// skip the sized-payload that the last 3 symbols index into\r\n\tlet skip = u16();\r\n\tlet pos_payload = pos;\r\n\tpos += skip;\r\n\r\n\tlet read_width = 0;\r\n\tlet read_buffer = 0; \r\n\tfunction read_bit() {\r\n\t\tif (read_width == 0) {\r\n\t\t\t// this will read beyond end of buffer\r\n\t\t\t// but (undefined|0) => zero pad\r\n\t\t\tread_buffer = (read_buffer << 8) | bytes[pos++];\r\n\t\t\tread_width = 8;\r\n\t\t}\r\n\t\treturn (read_buffer >> --read_width) & 1;\r\n\t}\r\n\r\n\tconst N = 31;\r\n\tconst FULL = 2**N;\r\n\tconst HALF = FULL >>> 1;\r\n\tconst QRTR = HALF >> 1;\r\n\tconst MASK = FULL - 1;\r\n\r\n\t// fill register\r\n\tlet register = 0;\r\n\tfor (let i = 0; i < N; i++) register = (register << 1) | read_bit();\r\n\r\n\tlet symbols = [];\r\n\tlet low = 0;\r\n\tlet range = FULL; // treat like a float\r\n\twhile (true) {\r\n\t\tlet value = Math.floor((((register - low + 1) * total) - 1) / range);\r\n\t\tlet start = 0;\r\n\t\tlet end = symbol_count;\r\n\t\twhile (end - start > 1) { // binary search\r\n\t\t\tlet mid = (start + end) >>> 1;\r\n\t\t\tif (value < acc[mid]) {\r\n\t\t\t\tend = mid;\r\n\t\t\t} else {\r\n\t\t\t\tstart = mid;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (start == 0) break; // first symbol is end mark\r\n\t\tsymbols.push(start);\r\n\t\tlet a = low + Math.floor(range * acc[start]   / total);\r\n\t\tlet b = low + Math.floor(range * acc[start+1] / total) - 1;\r\n\t\twhile (((a ^ b) & HALF) == 0) {\r\n\t\t\tregister = (register << 1) & MASK | read_bit();\r\n\t\t\ta = (a << 1) & MASK;\r\n\t\t\tb = (b << 1) & MASK | 1;\r\n\t\t}\r\n\t\twhile (a & ~b & QRTR) {\r\n\t\t\tregister = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();\r\n\t\t\ta = (a << 1) ^ HALF;\r\n\t\t\tb = ((b ^ HALF) << 1) | HALF | 1;\r\n\t\t}\r\n\t\tlow = a;\r\n\t\trange = 1 + b - a;\r\n\t}\r\n\tlet offset = symbol_count - 4;\r\n\treturn symbols.map(x => { // index into payload\r\n\t\tswitch (x - offset) {\r\n\t\t\tcase 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);\r\n\t\t\tcase 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);\r\n\t\t\tcase 1: return offset + bytes[pos_payload++];\r\n\t\t\tdefault: return x - 1;\r\n\t\t}\r\n\t});\r\n}\t\r\n\r\n// returns an iterator which returns the next symbol\r\nfunction read_payload(v) {\r\n\tlet pos = 0;\r\n\treturn () => v[pos++];\r\n}\r\nfunction read_compressed_payload(s) {\r\n\treturn read_payload(decode_arithmetic(unsafe_atob(s)));\r\n}\r\n\r\n// unsafe in the sense:\r\n// expected well-formed Base64 w/o padding \r\n// 20220922: added for https://github.com/adraffy/ens-normalize.js/issues/4\r\nfunction unsafe_atob(s) {\r\n\tlet lookup = [];\r\n\t[...'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'].forEach((c, i) => lookup[c.charCodeAt(0)] = i);\r\n\tlet n = s.length;\r\n\tlet ret = new Uint8Array((6 * n) >> 3);\r\n\tfor (let i = 0, pos = 0, width = 0, carry = 0; i < n; i++) {\r\n\t\tcarry = (carry << 6) | lookup[s.charCodeAt(i)];\r\n\t\twidth += 6;\r\n\t\tif (width >= 8) {\r\n\t\t\tret[pos++] = (carry >> (width -= 8));\r\n\t\t}\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\r\nfunction signed(i) { \r\n\treturn (i & 1) ? (~i >> 1) : (i >> 1);\r\n}\r\n\r\nfunction read_deltas(n, next) {\r\n\tlet v = Array(n);\r\n\tfor (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());\r\n\treturn v;\r\n}\r\n\r\n// [123][5] => [0 3] [1 1] [0 0]\r\nfunction read_sorted(next, prev = 0) {\r\n\tlet ret = [];\r\n\twhile (true) {\r\n\t\tlet x = next();\r\n\t\tlet n = next();\r\n\t\tif (!n) break;\r\n\t\tprev += x;\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tret.push(prev + i);\r\n\t\t}\r\n\t\tprev += n + 1;\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction read_sorted_arrays(next) {\r\n\treturn read_array_while(() => { \r\n\t\tlet v = read_sorted(next);\r\n\t\tif (v.length) return v;\r\n\t});\r\n}\r\n\r\n// returns map of x => ys\r\nfunction read_mapped(next) {\r\n\tlet ret = [];\r\n\twhile (true) {\r\n\t\tlet w = next();\r\n\t\tif (w == 0) break;\r\n\t\tret.push(read_linear_table(w, next));\r\n\t}\r\n\twhile (true) {\r\n\t\tlet w = next() - 1;\r\n\t\tif (w < 0) break;\r\n\t\tret.push(read_replacement_table(w, next));\r\n\t}\r\n\treturn ret.flat();\r\n}\r\n\r\n// read until next is falsy\r\n// return array of read values\r\nfunction read_array_while(next) {\r\n\tlet v = [];\r\n\twhile (true) {\r\n\t\tlet x = next(v.length);\r\n\t\tif (!x) break;\r\n\t\tv.push(x);\r\n\t}\r\n\treturn v;\r\n}\r\n\r\n// read w columns of length n\r\n// return as n rows of length w\r\nfunction read_transposed(n, w, next) {\r\n\tlet m = Array(n).fill().map(() => []);\r\n\tfor (let i = 0; i < w; i++) {\r\n\t\tread_deltas(n, next).forEach((x, j) => m[j].push(x));\r\n\t}\r\n\treturn m;\r\n}\r\n \r\n// returns [[x, ys], [x+dx, ys+dy], [x+2*dx, ys+2*dy], ...]\r\n// where dx/dy = steps, n = run size, w = length of y\r\nfunction read_linear_table(w, next) {\r\n\tlet dx = 1 + next();\r\n\tlet dy = next();\r\n\tlet vN = read_array_while(next);\r\n\tlet m = read_transposed(vN.length, 1+w, next);\r\n\treturn m.flatMap((v, i) => {\r\n\t\tlet [x, ...ys] = v;\r\n\t\treturn Array(vN[i]).fill().map((_, j) => {\r\n\t\t\tlet j_dy = j * dy;\r\n\t\t\treturn [x + j * dx, ys.map(y => y + j_dy)];\r\n\t\t});\r\n\t});\r\n}\r\n\r\n// return [[x, ys...], ...]\r\n// where w = length of y\r\nfunction read_replacement_table(w, next) { \r\n\tlet n = 1 + next();\r\n\tlet m = read_transposed(n, 1+w, next);\r\n\treturn m.map(v => [v[0], v.slice(1)]);\r\n}\r\n\r\n\r\nfunction read_trie(next) {\r\n\tlet ret = [];\r\n\tlet sorted = read_sorted(next); \r\n\texpand(decode([]), []);\r\n\treturn ret; // not sorted\r\n\tfunction decode(Q) { // characters that lead into this node\r\n\t\tlet S = next(); // state: valid, save, check\r\n\t\tlet B = read_array_while(() => { // buckets leading to new nodes\r\n\t\t\tlet cps = read_sorted(next).map(i => sorted[i]);\r\n\t\t\tif (cps.length) return decode(cps);\r\n\t\t});\r\n\t\treturn {S, B, Q};\r\n\t}\r\n\tfunction expand({S, B}, cps, saved) {\r\n\t\tif (S & 4 && saved === cps[cps.length-1]) return;\r\n\t\tif (S & 2) saved = cps[cps.length-1];\r\n\t\tif (S & 1) ret.push(cps); \r\n\t\tfor (let br of B) {\r\n\t\t\tfor (let cp of br.Q) {\r\n\t\t\t\texpand(br, [...cps, cp], saved);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\n\nfunction hex_cp(cp) {\r\n\treturn cp.toString(16).toUpperCase().padStart(2, '0');\r\n}\r\n\r\nfunction quote_cp(cp) {\r\n\treturn `{${hex_cp(cp)}}`; // raffy convention: like \"\\u{X}\" w/o the \"\\u\"\r\n}\r\n\r\n/*\r\nexport function explode_cp(s) {\r\n\treturn [...s].map(c => c.codePointAt(0));\r\n}\r\n*/\r\nfunction explode_cp(s) { // this is about 2x faster\r\n\tlet cps = [];\r\n\tfor (let pos = 0, len = s.length; pos < len; ) {\r\n\t\tlet cp = s.codePointAt(pos);\r\n\t\tpos += cp < 0x10000 ? 1 : 2;\r\n\t\tcps.push(cp);\r\n\t}\r\n\treturn cps;\r\n}\r\n\r\nfunction str_from_cps(cps) {\r\n\tconst chunk = 4096;\r\n\tlet len = cps.length;\r\n\tif (len < chunk) return String.fromCodePoint(...cps);\r\n\tlet buf = [];\r\n\tfor (let i = 0; i < len; ) {\r\n\t\tbuf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));\r\n\t}\r\n\treturn buf.join('');\r\n}\r\n\r\nfunction compare_arrays(a, b) {\r\n\tlet n = a.length;\r\n\tlet c = n - b.length;\r\n\tfor (let i = 0; c == 0 && i < n; i++) c = a[i] - b[i];\r\n\treturn c;\r\n}\n\n// created 2023-09-25T01:01:55.148Z\n// compressed base64-encoded blob for include-nf data\n// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js\n// see: https://github.com/adraffy/ens-normalize.js#security\n// SHA-256: a974b6f8541fc29d919bc85118af0a44015851fab5343f8679cb31be2bdb209e\nvar COMPRESSED = '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';\n\n// https://unicode.org/reports/tr15/\r\n// for reference implementation\r\n// see: /derive/nf.js\r\n\r\n\r\n// algorithmic hangul\r\n// https://www.unicode.org/versions/Unicode15.0.0/ch03.pdf (page 144)\r\nconst S0 = 0xAC00;\r\nconst L0 = 0x1100;\r\nconst V0 = 0x1161;\r\nconst T0 = 0x11A7;\r\nconst L_COUNT = 19;\r\nconst V_COUNT = 21;\r\nconst T_COUNT = 28;\r\nconst N_COUNT = V_COUNT * T_COUNT;\r\nconst S_COUNT = L_COUNT * N_COUNT;\r\nconst S1 = S0 + S_COUNT;\r\nconst L1 = L0 + L_COUNT;\r\nconst V1 = V0 + V_COUNT;\r\nconst T1 = T0 + T_COUNT;\r\n\r\nfunction unpack_cc(packed) {\r\n\treturn (packed >> 24) & 0xFF;\r\n}\r\nfunction unpack_cp(packed) {\r\n\treturn packed & 0xFFFFFF;\r\n}\r\n\r\nlet SHIFTED_RANK, EXCLUSIONS, DECOMP, RECOMP;\r\n\r\nfunction init$1() {\r\n\t//console.time('nf');\r\n\tlet r = read_compressed_payload(COMPRESSED);\r\n\tSHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i) => v.map(x => [x, (i+1) << 24]))); // pre-shifted\r\n\tEXCLUSIONS = new Set(read_sorted(r));\r\n\tDECOMP = new Map();\r\n\tRECOMP = new Map();\r\n\tfor (let [cp, cps] of read_mapped(r)) {\r\n\t\tif (!EXCLUSIONS.has(cp) && cps.length == 2) {\r\n\t\t\tlet [a, b] = cps;\r\n\t\t\tlet bucket = RECOMP.get(a);\r\n\t\t\tif (!bucket) {\r\n\t\t\t\tbucket = new Map();\r\n\t\t\t\tRECOMP.set(a, bucket);\r\n\t\t\t}\r\n\t\t\tbucket.set(b, cp);\r\n\t\t}\r\n\t\tDECOMP.set(cp, cps.reverse()); // stored reversed\r\n\t}\r\n\t//console.timeEnd('nf');\r\n\t// 20230905: 11ms\r\n}\r\n\r\nfunction is_hangul(cp) {\r\n\treturn cp >= S0 && cp < S1;\r\n}\r\n\r\nfunction compose_pair(a, b) {\r\n\tif (a >= L0 && a < L1 && b >= V0 && b < V1) {\r\n\t\treturn S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;\r\n\t} else if (is_hangul(a) && b > T0 && b < T1 && (a - S0) % T_COUNT == 0) {\r\n\t\treturn a + (b - T0);\r\n\t} else {\r\n\t\tlet recomp = RECOMP.get(a);\r\n\t\tif (recomp) {\r\n\t\t\trecomp = recomp.get(b);\r\n\t\t\tif (recomp) {\r\n\t\t\t\treturn recomp;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n}\r\n\r\nfunction decomposed(cps) {\r\n\tif (!SHIFTED_RANK) init$1();\r\n\tlet ret = [];\r\n\tlet buf = [];\r\n\tlet check_order = false;\r\n\tfunction add(cp) {\r\n\t\tlet cc = SHIFTED_RANK.get(cp);\r\n\t\tif (cc) {\r\n\t\t\tcheck_order = true;\r\n\t\t\tcp |= cc;\r\n\t\t}\r\n\t\tret.push(cp);\r\n\t}\r\n\tfor (let cp of cps) {\r\n\t\twhile (true) {\r\n\t\t\tif (cp < 0x80) {\r\n\t\t\t\tret.push(cp);\r\n\t\t\t} else if (is_hangul(cp)) {\r\n\t\t\t\tlet s_index = cp - S0;\r\n\t\t\t\tlet l_index = s_index / N_COUNT | 0;\r\n\t\t\t\tlet v_index = (s_index % N_COUNT) / T_COUNT | 0;\r\n\t\t\t\tlet t_index = s_index % T_COUNT;\r\n\t\t\t\tadd(L0 + l_index);\r\n\t\t\t\tadd(V0 + v_index);\r\n\t\t\t\tif (t_index > 0) add(T0 + t_index);\r\n\t\t\t} else {\r\n\t\t\t\tlet mapped = DECOMP.get(cp);\r\n\t\t\t\tif (mapped) {\r\n\t\t\t\t\tbuf.push(...mapped);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tadd(cp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!buf.length) break;\r\n\t\t\tcp = buf.pop();\r\n\t\t}\r\n\t}\r\n\tif (check_order && ret.length > 1) {\r\n\t\tlet prev_cc = unpack_cc(ret[0]);\r\n\t\tfor (let i = 1; i < ret.length; i++) {\r\n\t\t\tlet cc = unpack_cc(ret[i]);\r\n\t\t\tif (cc == 0 || prev_cc <= cc) {\r\n\t\t\t\tprev_cc = cc;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tlet j = i-1;\r\n\t\t\twhile (true) {\r\n\t\t\t\tlet tmp = ret[j+1];\r\n\t\t\t\tret[j+1] = ret[j];\r\n\t\t\t\tret[j] = tmp;\r\n\t\t\t\tif (!j) break;\r\n\t\t\t\tprev_cc = unpack_cc(ret[--j]);\r\n\t\t\t\tif (prev_cc <= cc) break;\r\n\t\t\t}\r\n\t\t\tprev_cc = unpack_cc(ret[i]);\r\n\t\t}\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction composed_from_decomposed(v) {\r\n\tlet ret = [];\r\n\tlet stack = [];\r\n\tlet prev_cp = -1;\r\n\tlet prev_cc = 0;\r\n\tfor (let packed of v) {\r\n\t\tlet cc = unpack_cc(packed);\r\n\t\tlet cp = unpack_cp(packed);\r\n\t\tif (prev_cp == -1) {\r\n\t\t\tif (cc == 0) {\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tret.push(cp);\r\n\t\t\t}\r\n\t\t} else if (prev_cc > 0 && prev_cc >= cc) {\r\n\t\t\tif (cc == 0) {\r\n\t\t\t\tret.push(prev_cp, ...stack);\r\n\t\t\t\tstack.length = 0;\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tstack.push(cp);\r\n\t\t\t}\r\n\t\t\tprev_cc = cc;\r\n\t\t} else {\r\n\t\t\tlet composed = compose_pair(prev_cp, cp);\r\n\t\t\tif (composed >= 0) {\r\n\t\t\t\tprev_cp = composed;\r\n\t\t\t} else if (prev_cc == 0 && cc == 0) {\r\n\t\t\t\tret.push(prev_cp);\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tstack.push(cp);\r\n\t\t\t\tprev_cc = cc;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (prev_cp >= 0) {\r\n\t\tret.push(prev_cp, ...stack);\t\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\n// note: cps can be iterable\r\nfunction nfd(cps) {\r\n\treturn decomposed(cps).map(unpack_cp);\r\n}\r\nfunction nfc(cps) {\r\n\treturn composed_from_decomposed(decomposed(cps));\r\n}\n\nconst HYPHEN = 0x2D;\r\nconst STOP = 0x2E;\r\nconst STOP_CH = '.';\r\nconst FE0F = 0xFE0F;\r\nconst UNIQUE_PH = 1;\r\n\r\n// 20230913: replace [...v] with Array_from(v) to avoid large spreads\r\nconst Array_from = x => Array.from(x); // Array.from.bind(Array);\r\n\r\nfunction group_has_cp(g, cp) {\r\n\t// 20230913: keep primary and secondary distinct instead of creating valid union\r\n\treturn g.P.has(cp) || g.Q.has(cp);\r\n}\r\n\r\nclass Emoji extends Array {\r\n\tget is_emoji() { return true; } // free tagging system\r\n}\r\n\r\nlet MAPPED, IGNORED, CM, NSM, ESCAPE, NFC_CHECK, GROUPS, WHOLE_VALID, WHOLE_MAP, VALID, EMOJI_LIST, EMOJI_ROOT;\r\n\r\nfunction init() {\r\n\tif (MAPPED) return;\r\n\t\r\n\tlet r = read_compressed_payload(COMPRESSED$1);\r\n\tconst read_sorted_array = () => read_sorted(r);\r\n\tconst read_sorted_set = () => new Set(read_sorted_array());\r\n\tconst set_add_many = (set, v) => v.forEach(x => set.add(x));\r\n\r\n\tMAPPED = new Map(read_mapped(r)); \r\n\tIGNORED = read_sorted_set(); // ignored characters are not valid, so just read raw codepoints\r\n\r\n\t/*\r\n\t// direct include from payload is smaller than the decompression code\r\n\tconst FENCED = new Map(read_array_while(() => {\r\n\t\tlet cp = r();\r\n\t\tif (cp) return [cp, read_str(r())];\r\n\t}));\r\n\t*/\r\n\t// 20230217: we still need all CM for proper error formatting\r\n\t// but norm only needs NSM subset that are potentially-valid\r\n\tCM = read_sorted_array();\r\n\tNSM = new Set(read_sorted_array().map(i => CM[i]));\r\n\tCM = new Set(CM);\r\n\t\r\n\tESCAPE = read_sorted_set(); // characters that should not be printed\r\n\tNFC_CHECK = read_sorted_set(); // only needed to illustrate ens_tokenize() transformations\r\n\r\n\tlet chunks = read_sorted_arrays(r);\r\n\tlet unrestricted = r();\r\n\t//const read_chunked = () => new Set(read_sorted_array().flatMap(i => chunks[i]).concat(read_sorted_array()));\r\n\tconst read_chunked = () => {\r\n\t\t// 20230921: build set in parts, 2x faster\r\n\t\tlet set = new Set();\r\n\t\tread_sorted_array().forEach(i => set_add_many(set, chunks[i]));\r\n\t\tset_add_many(set, read_sorted_array());\r\n\t\treturn set; \r\n\t};\r\n\tGROUPS = read_array_while(i => {\r\n\t\t// minifier property mangling seems unsafe\r\n\t\t// so these are manually renamed to single chars\r\n\t\tlet N = read_array_while(r).map(x => x+0x60);\r\n\t\tif (N.length) {\r\n\t\t\tlet R = i >= unrestricted; // unrestricted then restricted\r\n\t\t\tN[0] -= 32; // capitalize\r\n\t\t\tN = str_from_cps(N);\r\n\t\t\tif (R) N=`Restricted[${N}]`;\r\n\t\t\tlet P = read_chunked(); // primary\r\n\t\t\tlet Q = read_chunked(); // secondary\r\n\t\t\tlet M = !r(); // not-whitelisted, check for NSM\r\n\t\t\t// *** this code currently isn't needed ***\r\n\t\t\t/*\r\n\t\t\tlet V = [...P, ...Q].sort((a, b) => a-b); // derive: sorted valid\r\n\t\t\tlet M = r()-1; // number of combining mark\r\n\t\t\tif (M < 0) { // whitelisted\r\n\t\t\t\tM = new Map(read_array_while(() => {\r\n\t\t\t\t\tlet i = r();\r\n\t\t\t\t\tif (i) return [V[i-1], read_array_while(() => {\r\n\t\t\t\t\t\tlet v = read_array_while(r);\r\n\t\t\t\t\t\tif (v.length) return v.map(x => x-1);\r\n\t\t\t\t\t})];\r\n\t\t\t\t}));\r\n\t\t\t}*/\r\n\t\t\treturn {N, P, Q, M, R};\r\n\t\t}\r\n\t});\r\n\r\n\t// decode compressed wholes\r\n\tWHOLE_VALID = read_sorted_set();\r\n\tWHOLE_MAP = new Map();\r\n\tlet wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b) => a-b); // must be sorted\r\n\twholes.forEach((cp, i) => {\r\n\t\tlet d = r(); \r\n\t\tlet w = wholes[i] = d ? wholes[i-d] : {V: [], M: new Map()};\r\n\t\tw.V.push(cp); // add to member set\r\n\t\tif (!WHOLE_VALID.has(cp)) {\r\n\t\t\tWHOLE_MAP.set(cp, w);  // register with whole map\r\n\t\t}\r\n\t});\r\n\r\n\t// compute confusable-extent complements\r\n\t// usage: WHOLE_MAP.get(cp).M.get(cp) = complement set\r\n\tfor (let {V, M} of new Set(WHOLE_MAP.values())) {\r\n\t\t// connect all groups that have each whole character\r\n\t\tlet recs = [];\r\n\t\tfor (let cp of V) {\r\n\t\t\tlet gs = GROUPS.filter(g => group_has_cp(g, cp));\r\n\t\t\tlet rec = recs.find(({G}) => gs.some(g => G.has(g)));\r\n\t\t\tif (!rec) {\r\n\t\t\t\trec = {G: new Set(), V: []};\r\n\t\t\t\trecs.push(rec);\r\n\t\t\t}\r\n\t\t\trec.V.push(cp);\r\n\t\t\tset_add_many(rec.G, gs);\r\n\t\t}\r\n\t\t// per character cache groups which are not a member of the extent\r\n\t\tlet union = recs.flatMap(x => Array_from(x.G)); // all of the groups used by this whole\r\n\t\tfor (let {G, V} of recs) {\r\n\t\t\tlet complement = new Set(union.filter(g => !G.has(g))); // groups not covered by the extent\r\n\t\t\tfor (let cp of V) {\r\n\t\t\t\tM.set(cp, complement); // this is the same reference\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// compute valid set\r\n\t// 20230924: VALID was union but can be re-used\r\n\tVALID = new Set(); // exists in 1+ groups\r\n\tlet multi = new Set(); // exists in 2+ groups\r\n\tconst add_to_union = cp => VALID.has(cp) ? multi.add(cp) : VALID.add(cp);\r\n\tfor (let g of GROUPS) {\r\n\t\tfor (let cp of g.P) add_to_union(cp);\r\n\t\tfor (let cp of g.Q) add_to_union(cp);\r\n\t}\r\n\t// dual purpose WHOLE_MAP: return placeholder if unique non-confusable\r\n\tfor (let cp of VALID) {\r\n\t\tif (!WHOLE_MAP.has(cp) && !multi.has(cp)) {\r\n\t\t\tWHOLE_MAP.set(cp, UNIQUE_PH);\r\n\t\t}\r\n\t}\r\n\t// add all decomposed parts\r\n\t// see derive: \"Valid is Closed (via Brute-force)\"\r\n\tset_add_many(VALID, nfd(VALID));\r\n\t\r\n\t// decode emoji\r\n\t// 20230719: emoji are now fully-expanded to avoid quirk logic \r\n\tEMOJI_LIST = read_trie(r).map(v => Emoji.from(v)).sort(compare_arrays);\r\n\tEMOJI_ROOT = new Map(); // this has approx 7K nodes (2+ per emoji)\r\n\tfor (let cps of EMOJI_LIST) {\r\n\t\t// 20230719: change to *slightly* stricter algorithm which disallows \r\n\t\t// insertion of misplaced FE0F in emoji sequences (matching ENSIP-15)\r\n\t\t// example: beautified [A B] (eg. flag emoji) \r\n\t\t//  before: allow: [A FE0F B], error: [A FE0F FE0F B] \r\n\t\t//   after: error: both\r\n\t\t// note: this code now matches ENSNormalize.{cs,java} logic\r\n\t\tlet prev = [EMOJI_ROOT];\r\n\t\tfor (let cp of cps) {\r\n\t\t\tlet next = prev.map(node => {\r\n\t\t\t\tlet child = node.get(cp);\r\n\t\t\t\tif (!child) {\r\n\t\t\t\t\t// should this be object? \r\n\t\t\t\t\t// (most have 1-2 items, few have many)\r\n\t\t\t\t\t// 20230719: no, v8 default map is 4?\r\n\t\t\t\t\tchild = new Map();\r\n\t\t\t\t\tnode.set(cp, child);\r\n\t\t\t\t}\r\n\t\t\t\treturn child;\r\n\t\t\t});\r\n\t\t\tif (cp === FE0F) {\r\n\t\t\t\tprev.push(...next); // less than 20 elements\r\n\t\t\t} else {\r\n\t\t\t\tprev = next;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let x of prev) {\r\n\t\t\tx.V = cps;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// if escaped: {HEX}\r\n//       else: \"x\" {HEX}\r\nfunction quoted_cp(cp) {\r\n\treturn (should_escape(cp) ? '' : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);\r\n}\r\n\r\n// 20230211: some messages can be mixed-directional and result in spillover\r\n// use 200E after a quoted string to force the remainder of a string from \r\n// acquring the direction of the quote\r\n// https://www.w3.org/International/questions/qa-bidi-unicode-controls#exceptions\r\nfunction bidi_qq(s) {\r\n\treturn `\"${s}\"\\u200E`; // strong LTR\r\n}\r\n\r\nfunction check_label_extension(cps) {\r\n\tif (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {\r\n\t\tthrow new Error(`invalid label extension: \"${str_from_cps(cps.slice(0, 4))}\"`); // this can only be ascii so cant be bidi\r\n\t}\r\n}\r\nfunction check_leading_underscore(cps) {\r\n\tconst UNDERSCORE = 0x5F;\r\n\tfor (let i = cps.lastIndexOf(UNDERSCORE); i > 0; ) {\r\n\t\tif (cps[--i] !== UNDERSCORE) {\r\n\t\t\tthrow new Error('underscore allowed only at start');\r\n\t\t}\r\n\t}\r\n}\r\n// check that a fenced cp is not leading, trailing, or touching another fenced cp\r\nfunction check_fenced(cps) {\r\n\tlet cp = cps[0];\r\n\tlet prev = FENCED.get(cp);\r\n\tif (prev) throw error_placement(`leading ${prev}`);\r\n\tlet n = cps.length;\r\n\tlet last = -1; // prevents trailing from throwing\r\n\tfor (let i = 1; i < n; i++) {\r\n\t\tcp = cps[i];\r\n\t\tlet match = FENCED.get(cp);\r\n\t\tif (match) {\r\n\t\t\t// since cps[0] isn't fenced, cps[1] cannot throw\r\n\t\t\tif (last == i) throw error_placement(`${prev} + ${match}`);\r\n\t\t\tlast = i + 1;\r\n\t\t\tprev = match;\r\n\t\t}\r\n\t}\r\n\tif (last == n) throw error_placement(`trailing ${prev}`);\r\n}\r\n\r\n// create a safe to print string \r\n// invisibles are escaped\r\n// leading cm uses placeholder\r\n// if cps exceed max, middle truncate with ellipsis\r\n// quoter(cp) => string, eg. 3000 => \"{3000}\"\r\n// note: in html, you'd call this function then replace [<>&] with entities\r\nfunction safe_str_from_cps(cps, max = Infinity, quoter = quote_cp) {\r\n\t//if (Number.isInteger(cps)) cps = [cps];\r\n\t//if (!Array.isArray(cps)) throw new TypeError(`expected codepoints`);\r\n\tlet buf = [];\r\n\tif (is_combining_mark(cps[0])) buf.push('◌');\r\n\tif (cps.length > max) {\r\n\t\tmax >>= 1;\r\n\t\tcps = [...cps.slice(0, max), 0x2026, ...cps.slice(-max)];\r\n\t}\r\n\tlet prev = 0;\r\n\tlet n = cps.length;\r\n\tfor (let i = 0; i < n; i++) {\r\n\t\tlet cp = cps[i];\r\n\t\tif (should_escape(cp)) {\r\n\t\t\tbuf.push(str_from_cps(cps.slice(prev, i)));\r\n\t\t\tbuf.push(quoter(cp));\r\n\t\t\tprev = i + 1;\r\n\t\t}\r\n\t}\r\n\tbuf.push(str_from_cps(cps.slice(prev, n)));\r\n\treturn buf.join('');\r\n}\r\n\r\n// note: set(s) cannot be exposed because they can be modified\r\n// note: Object.freeze() doesn't work\r\nfunction is_combining_mark(cp) {\r\n\tinit();\r\n\treturn CM.has(cp);\r\n}\r\nfunction should_escape(cp) {\r\n\tinit();\r\n\treturn ESCAPE.has(cp);\r\n}\r\n\r\n// return all supported emoji as fully-qualified emoji \r\n// ordered by length then lexicographic \r\nfunction ens_emoji() {\r\n\tinit();\r\n\treturn EMOJI_LIST.map(x => x.slice()); // emoji are exposed so copy\r\n}\r\n\r\nfunction ens_normalize_fragment(frag, decompose) {\r\n\tinit();\r\n\tlet nf = decompose ? nfd : nfc;\r\n\treturn frag.split(STOP_CH).map(label => str_from_cps(tokens_from_str(explode_cp(label), nf, filter_fe0f).flat())).join(STOP_CH);\r\n}\r\n\r\nfunction ens_normalize(name) {\r\n\treturn flatten(split(name, nfc, filter_fe0f));\r\n}\r\n\r\nfunction ens_beautify(name) {\r\n\tlet labels = split(name, nfc, x => x); // emoji not exposed\r\n\tfor (let {type, output, error} of labels) {\r\n\t\tif (error) break; // flatten will throw\r\n\r\n\t\t// replace leading/trailing hyphen\r\n\t\t// 20230121: consider beautifing all or leading/trailing hyphen to unicode variant\r\n\t\t// not exactly the same in every font, but very similar: \"-\" vs \"‐\"\r\n\t\t/*\r\n\t\tconst UNICODE_HYPHEN = 0x2010;\r\n\t\t// maybe this should replace all for visual consistancy?\r\n\t\t// `node tools/reg-count.js regex ^-\\{2,\\}` => 592\r\n\t\t//for (let i = 0; i < output.length; i++) if (output[i] == 0x2D) output[i] = 0x2010;\r\n\t\tif (output[0] == HYPHEN) output[0] = UNICODE_HYPHEN;\r\n\t\tlet end = output.length-1;\r\n\t\tif (output[end] == HYPHEN) output[end] = UNICODE_HYPHEN;\r\n\t\t*/\r\n\t\t// 20230123: WHATWG URL uses \"CheckHyphens\" false\r\n\t\t// https://url.spec.whatwg.org/#idna\r\n\r\n\t\t// update ethereum symbol\r\n\t\t// ξ => Ξ if not greek\r\n\t\tif (type !== 'Greek') array_replace(output, 0x3BE, 0x39E);\r\n\r\n\t\t// 20221213: fixes bidi subdomain issue, but breaks invariant (200E is disallowed)\r\n\t\t// could be fixed with special case for: 2D (.) + 200E (LTR)\r\n\t\t// https://discuss.ens.domains/t/bidi-label-ordering-spoof/15824\r\n\t\t//output.splice(0, 0, 0x200E);\r\n\t}\r\n\treturn flatten(labels);\r\n}\r\n\r\nfunction array_replace(v, a, b) {\r\n\tlet prev = 0;\r\n\twhile (true) {\r\n\t\tlet next = v.indexOf(a, prev);\r\n\t\tif (next < 0) break;\r\n\t\tv[next] = b; \r\n\t\tprev = next + 1;\r\n\t}\r\n}\r\n\r\nfunction ens_split(name, preserve_emoji) {\r\n\treturn split(name, nfc, preserve_emoji ? x => x.slice() : filter_fe0f); // emoji are exposed so copy\r\n}\r\n\r\nfunction split(name, nf, ef) {\r\n\tif (!name) return []; // 20230719: empty name allowance\r\n\tinit();\r\n\tlet offset = 0;\r\n\t// https://unicode.org/reports/tr46/#Validity_Criteria\r\n\t// 4.) \"The label must not contain a U+002E ( . ) FULL STOP.\"\r\n\treturn name.split(STOP_CH).map(label => {\r\n\t\tlet input = explode_cp(label);\r\n\t\tlet info = {\r\n\t\t\tinput,\r\n\t\t\toffset, // codepoint, not substring!\r\n\t\t};\r\n\t\toffset += input.length + 1; // + stop\r\n\t\ttry {\r\n\t\t\t// 1.) \"The label must be in Unicode Normalization Form NFC\"\r\n\t\t\tlet tokens = info.tokens = tokens_from_str(input, nf, ef);\r\n\t\t\tlet token_count = tokens.length;\r\n\t\t\tlet type;\r\n\t\t\tif (!token_count) { // the label was effectively empty (could of had ignored characters)\r\n\t\t\t\t//norm = [];\r\n\t\t\t\t//type = 'None'; // use this instead of next match, \"ASCII\"\r\n\t\t\t\t// 20230120: change to strict\r\n\t\t\t\t// https://discuss.ens.domains/t/ens-name-normalization-2nd/14564/59\r\n\t\t\t\tthrow new Error(`empty label`);\r\n\t\t\t} \r\n\t\t\tlet norm = info.output = tokens.flat();\r\n\t\t\tcheck_leading_underscore(norm);\r\n\t\t\tlet emoji = info.emoji = token_count > 1 || tokens[0].is_emoji; // same as: tokens.some(x => x.is_emoji);\r\n\t\t\tif (!emoji && norm.every(cp => cp < 0x80)) { // special case for ascii\r\n\t\t\t\t// 20230123: matches matches WHATWG, see note 3.3\r\n\t\t\t\tcheck_label_extension(norm); // only needed for ascii\r\n\t\t\t\t// cant have fenced\r\n\t\t\t\t// cant have cm\r\n\t\t\t\t// cant have wholes\r\n\t\t\t\t// see derive: \"Fastpath ASCII\"\r\n\t\t\t\ttype = 'ASCII';\r\n\t\t\t} else {\r\n\t\t\t\tlet chars = tokens.flatMap(x => x.is_emoji ? [] : x); // all of the nfc tokens concat together\r\n\t\t\t\tif (!chars.length) { // theres no text, just emoji\r\n\t\t\t\t\ttype = 'Emoji';\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// 5.) \"The label must not begin with a combining mark, that is: General_Category=Mark.\"\r\n\t\t\t\t\tif (CM.has(norm[0])) throw error_placement('leading combining mark');\r\n\t\t\t\t\tfor (let i = 1; i < token_count; i++) { // we've already checked the first token\r\n\t\t\t\t\t\tlet cps = tokens[i];\r\n\t\t\t\t\t\tif (!cps.is_emoji && CM.has(cps[0])) { // every text token has emoji neighbors, eg. EtEEEtEt...\r\n\t\t\t\t\t\t\t// bidi_qq() not needed since emoji is LTR and cps is a CM\r\n\t\t\t\t\t\t\tthrow error_placement(`emoji + combining mark: \"${str_from_cps(tokens[i-1])} + ${safe_str_from_cps([cps[0]])}\"`); \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcheck_fenced(norm);\r\n\t\t\t\t\tlet unique = Array_from(new Set(chars));\r\n\t\t\t\t\tlet [g] = determine_group(unique); // take the first match\r\n\t\t\t\t\t// see derive: \"Matching Groups have Same CM Style\"\r\n\t\t\t\t\t// alternative: could form a hybrid type: Latin/Japanese/...\t\r\n\t\t\t\t\tcheck_group(g, chars); // need text in order\r\n\t\t\t\t\tcheck_whole(g, unique); // only need unique text (order would be required for multiple-char confusables)\r\n\t\t\t\t\ttype = g.N;\r\n\t\t\t\t\t// 20230121: consider exposing restricted flag\r\n\t\t\t\t\t// it's simpler to just check for 'Restricted'\r\n\t\t\t\t\t// or even better: type.endsWith(']')\r\n\t\t\t\t\t//if (g.R) info.restricted = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tinfo.type = type;\r\n\t\t} catch (err) {\r\n\t\t\tinfo.error = err; // use full error object\r\n\t\t}\r\n\t\treturn info;\r\n\t});\r\n}\r\n\r\nfunction check_whole(group, unique) {\r\n\tlet maker;\r\n\tlet shared = [];\r\n\tfor (let cp of unique) {\r\n\t\tlet whole = WHOLE_MAP.get(cp);\r\n\t\tif (whole === UNIQUE_PH) return; // unique, non-confusable\r\n\t\tif (whole) {\r\n\t\t\tlet set = whole.M.get(cp); // groups which have a character that look-like this character\r\n\t\t\tmaker = maker ? maker.filter(g => set.has(g)) : Array_from(set);\r\n\t\t\tif (!maker.length) return; // confusable intersection is empty\r\n\t\t} else {\r\n\t\t\tshared.push(cp); \r\n\t\t}\r\n\t}\r\n\tif (maker) {\r\n\t\t// we have 1+ confusable\r\n\t\t// check if any of the remaining groups\r\n\t\t// contain the shared characters too\r\n\t\tfor (let g of maker) {\r\n\t\t\tif (shared.every(cp => group_has_cp(g, cp))) {\r\n\t\t\t\tthrow new Error(`whole-script confusable: ${group.N}/${g.N}`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// assumption: unique.size > 0\r\n// returns list of matching groups\r\nfunction determine_group(unique) {\r\n\tlet groups = GROUPS;\r\n\tfor (let cp of unique) {\r\n\t\t// note: we need to dodge CM that are whitelisted\r\n\t\t// but that code isn't currently necessary\r\n\t\tlet gs = groups.filter(g => group_has_cp(g, cp));\r\n\t\tif (!gs.length) {\r\n\t\t\tif (!GROUPS.some(g => group_has_cp(g, cp))) { \r\n\t\t\t\t// the character was composed of valid parts\r\n\t\t\t\t// but it's NFC form is invalid\r\n\t\t\t\t// 20230716: change to more exact statement, see: ENSNormalize.{cs,java}\r\n\t\t\t\t// note: this doesn't have to be a composition\r\n\t\t\t\t// 20230720: change to full check\r\n\t\t\t\tthrow error_disallowed(cp); // this should be rare\r\n\t\t\t} else {\r\n\t\t\t\t// there is no group that contains all these characters\r\n\t\t\t\t// throw using the highest priority group that matched\r\n\t\t\t\t// https://www.unicode.org/reports/tr39/#mixed_script_confusables\r\n\t\t\t\tthrow error_group_member(groups[0], cp);\r\n\t\t\t}\r\n\t\t}\r\n\t\tgroups = gs;\r\n\t\tif (gs.length == 1) break; // there is only one group left\r\n\t}\r\n\t// there are at least 1 group(s) with all of these characters\r\n\treturn groups;\r\n}\r\n\r\n// throw on first error\r\nfunction flatten(split) {\r\n\treturn split.map(({input, error, output}) => {\r\n\t\tif (error) {\r\n\t\t\t// don't print label again if just a single label\r\n\t\t\tlet msg = error.message;\r\n\t\t\t// bidi_qq() only necessary if msg is digits\r\n\t\t\tthrow new Error(split.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input, 63))}: ${msg}`); \r\n\t\t}\r\n\t\treturn str_from_cps(output);\r\n\t}).join(STOP_CH);\r\n}\r\n\r\nfunction error_disallowed(cp) {\r\n\t// TODO: add cp to error?\r\n\treturn new Error(`disallowed character: ${quoted_cp(cp)}`); \r\n}\r\nfunction error_group_member(g, cp) {\r\n\tlet quoted = quoted_cp(cp);\r\n\tlet gg = GROUPS.find(g => g.P.has(cp)); // only check primary\r\n\tif (gg) {\r\n\t\tquoted = `${gg.N} ${quoted}`;\r\n\t}\r\n\treturn new Error(`illegal mixture: ${g.N} + ${quoted}`);\r\n}\r\nfunction error_placement(where) {\r\n\treturn new Error(`illegal placement: ${where}`);\r\n}\r\n\r\n// assumption: cps.length > 0\r\n// assumption: cps[0] isn't a CM\r\n// assumption: the previous character isn't an emoji\r\nfunction check_group(g, cps) {\r\n\tfor (let cp of cps) {\r\n\t\tif (!group_has_cp(g, cp)) {\r\n\t\t\t// for whitelisted scripts, this will throw illegal mixture on invalid cm, eg. \"e{300}{300}\"\r\n\t\t\t// at the moment, it's unnecessary to introduce an extra error type\r\n\t\t\t// until there exists a whitelisted multi-character\r\n\t\t\t//   eg. if (M < 0 && is_combining_mark(cp)) { ... }\r\n\t\t\t// there are 3 cases:\r\n\t\t\t//   1. illegal cm for wrong group => mixture error\r\n\t\t\t//   2. illegal cm for same group => cm error\r\n\t\t\t//       requires set of whitelist cm per group: \r\n\t\t\t//        eg. new Set([...g.P, ...g.Q].flatMap(nfc).filter(cp => CM.has(cp)))\r\n\t\t\t//   3. wrong group => mixture error\r\n\t\t\tthrow error_group_member(g, cp);\r\n\t\t}\r\n\t}\r\n\t//if (M >= 0) { // we have a known fixed cm count\r\n\tif (g.M) { // we need to check for NSM\r\n\t\tlet decomposed = nfd(cps);\r\n\t\tfor (let i = 1, e = decomposed.length; i < e; i++) { // see: assumption\r\n\t\t\t// 20230210: bugfix: using cps instead of decomposed h/t Carbon225\r\n\t\t\t/*\r\n\t\t\tif (CM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\twhile (j < e && CM.has(decomposed[j])) j++;\r\n\t\t\t\tif (j - i > M) {\r\n\t\t\t\t\tthrow new Error(`too many combining marks: ${g.N} ${bidi_qq(str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${M})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\t// 20230217: switch to NSM counting\r\n\t\t\t// https://www.unicode.org/reports/tr39/#Optional_Detection\r\n\t\t\tif (NSM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\tfor (let cp; j < e && NSM.has(cp = decomposed[j]); j++) {\r\n\t\t\t\t\t// a. Forbid sequences of the same nonspacing mark.\r\n\t\t\t\t\tfor (let k = i; k < j; k++) { // O(n^2) but n < 100\r\n\t\t\t\t\t\tif (decomposed[k] == cp) {\r\n\t\t\t\t\t\t\tthrow new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// parse to end so we have full nsm count\r\n\t\t\t\t// b. Forbid sequences of more than 4 nonspacing marks (gc=Mn or gc=Me).\r\n\t\t\t\tif (j - i > NSM_MAX) {\r\n\t\t\t\t\t// note: this slice starts with a base char or spacing-mark cm\r\n\t\t\t\t\tthrow new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${NSM_MAX})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// *** this code currently isn't needed ***\r\n\t/*\r\n\tlet cm_whitelist = M instanceof Map;\r\n\tfor (let i = 0, e = cps.length; i < e; ) {\r\n\t\tlet cp = cps[i++];\r\n\t\tlet seqs = cm_whitelist && M.get(cp);\r\n\t\tif (seqs) { \r\n\t\t\t// list of codepoints that can follow\r\n\t\t\t// if this exists, this will always be 1+\r\n\t\t\tlet j = i;\r\n\t\t\twhile (j < e && CM.has(cps[j])) j++;\r\n\t\t\tlet cms = cps.slice(i, j);\r\n\t\t\tlet match = seqs.find(seq => !compare_arrays(seq, cms));\r\n\t\t\tif (!match) throw new Error(`disallowed combining mark sequence: \"${safe_str_from_cps([cp, ...cms])}\"`);\r\n\t\t\ti = j;\r\n\t\t} else if (!V.has(cp)) {\r\n\t\t\t// https://www.unicode.org/reports/tr39/#mixed_script_confusables\r\n\t\t\tlet quoted = quoted_cp(cp);\r\n\t\t\tfor (let cp of cps) {\r\n\t\t\t\tlet u = UNIQUE.get(cp);\r\n\t\t\t\tif (u && u !== g) {\r\n\t\t\t\t\t// if both scripts are restricted this error is confusing\r\n\t\t\t\t\t// because we don't differentiate RestrictedA from RestrictedB \r\n\t\t\t\t\tif (!u.R) quoted = `${quoted} is ${u.N}`;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthrow new Error(`disallowed ${g.N} character: ${quoted}`);\r\n\t\t\t//throw new Error(`disallowed character: ${quoted} (expected ${g.N})`);\r\n\t\t\t//throw new Error(`${g.N} does not allow: ${quoted}`);\r\n\t\t}\r\n\t}\r\n\tif (!cm_whitelist) {\r\n\t\tlet decomposed = nfd(cps);\r\n\t\tfor (let i = 1, e = decomposed.length; i < e; i++) { // we know it can't be cm leading\r\n\t\t\tif (CM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\twhile (j < e && CM.has(decomposed[j])) j++;\r\n\t\t\t\tif (j - i > M) {\r\n\t\t\t\t\tthrow new Error(`too many combining marks: \"${str_from_cps(decomposed.slice(i-1, j))}\" (${j-i}/${M})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t*/\r\n}\r\n\r\n// given a list of codepoints\r\n// returns a list of lists, where emoji are a fully-qualified (as Array subclass)\r\n// eg. explode_cp(\"abc💩d\") => [[61, 62, 63], Emoji[1F4A9, FE0F], [64]]\r\n// 20230818: rename for 'process' name collision h/t Javarome\r\n// https://github.com/adraffy/ens-normalize.js/issues/23\r\nfunction tokens_from_str(input, nf, ef) {\r\n\tlet ret = [];\r\n\tlet chars = [];\r\n\tinput = input.slice().reverse(); // flip so we can pop\r\n\twhile (input.length) {\r\n\t\tlet emoji = consume_emoji_reversed(input);\r\n\t\tif (emoji) {\r\n\t\t\tif (chars.length) {\r\n\t\t\t\tret.push(nf(chars));\r\n\t\t\t\tchars = [];\r\n\t\t\t}\r\n\t\t\tret.push(ef(emoji));\r\n\t\t} else {\r\n\t\t\tlet cp = input.pop();\r\n\t\t\tif (VALID.has(cp)) {\r\n\t\t\t\tchars.push(cp);\r\n\t\t\t} else {\r\n\t\t\t\tlet cps = MAPPED.get(cp);\r\n\t\t\t\tif (cps) {\r\n\t\t\t\t\tchars.push(...cps); // less than 10 elements\r\n\t\t\t\t} else if (!IGNORED.has(cp)) {\r\n\t\t\t\t\t// 20230912: unicode 15.1 changed the order of processing such that\r\n\t\t\t\t\t// disallowed parts are only rejected after NFC\r\n\t\t\t\t\t// https://unicode.org/reports/tr46/#Validity_Criteria\r\n\t\t\t\t\t// this doesn't impact normalization as of today\r\n\t\t\t\t\t// technically, this error can be removed as the group logic will apply similar logic\r\n\t\t\t\t\t// however the error type might be less clear\r\n\t\t\t\t\tthrow error_disallowed(cp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (chars.length) {\r\n\t\tret.push(nf(chars));\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction filter_fe0f(cps) {\r\n\treturn cps.filter(cp => cp != FE0F);\r\n}\r\n\r\n// given array of codepoints\r\n// returns the longest valid emoji sequence (or undefined if no match)\r\n// *MUTATES* the supplied array\r\n// disallows interleaved ignored characters\r\n// fills (optional) eaten array with matched codepoints\r\nfunction consume_emoji_reversed(cps, eaten) {\r\n\tlet node = EMOJI_ROOT;\r\n\tlet emoji;\r\n\tlet pos = cps.length;\r\n\twhile (pos) {\r\n\t\tnode = node.get(cps[--pos]);\r\n\t\tif (!node) break;\r\n\t\tlet {V} = node;\r\n\t\tif (V) { // this is a valid emoji (so far)\r\n\t\t\temoji = V;\r\n\t\t\tif (eaten) eaten.push(...cps.slice(pos).reverse()); // (optional) copy input, used for ens_tokenize()\r\n\t\t\tcps.length = pos; // truncate\r\n\t\t}\r\n\t}\r\n\treturn emoji;\r\n}\r\n\r\n// ************************************************************\r\n// tokenizer \r\n\r\nconst TY_VALID = 'valid';\r\nconst TY_MAPPED = 'mapped';\r\nconst TY_IGNORED = 'ignored';\r\nconst TY_DISALLOWED = 'disallowed';\r\nconst TY_EMOJI = 'emoji';\r\nconst TY_NFC = 'nfc';\r\nconst TY_STOP = 'stop';\r\n\r\nfunction ens_tokenize(name, {\r\n\tnf = true, // collapse unnormalized runs into a single token\r\n} = {}) {\r\n\tinit();\r\n\tlet input = explode_cp(name).reverse();\r\n\tlet eaten = [];\r\n\tlet tokens = [];\r\n\twhile (input.length) {\r\n\t\tlet emoji = consume_emoji_reversed(input, eaten);\r\n\t\tif (emoji) {\r\n\t\t\ttokens.push({\r\n\t\t\t\ttype: TY_EMOJI,\r\n\t\t\t\temoji: emoji.slice(), // copy emoji\r\n\t\t\t\tinput: eaten,\r\n\t\t\t\tcps: filter_fe0f(emoji)\r\n\t\t\t});\r\n\t\t\teaten = []; // reset buffer\r\n\t\t} else {\r\n\t\t\tlet cp = input.pop();\r\n\t\t\tif (cp == STOP) {\r\n\t\t\t\ttokens.push({type: TY_STOP, cp});\r\n\t\t\t} else if (VALID.has(cp)) {\r\n\t\t\t\ttokens.push({type: TY_VALID, cps: [cp]});\r\n\t\t\t} else if (IGNORED.has(cp)) {\r\n\t\t\t\ttokens.push({type: TY_IGNORED, cp});\r\n\t\t\t} else {\r\n\t\t\t\tlet cps = MAPPED.get(cp);\r\n\t\t\t\tif (cps) {\r\n\t\t\t\t\ttokens.push({type: TY_MAPPED, cp, cps: cps.slice()});\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttokens.push({type: TY_DISALLOWED, cp});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (nf) {\r\n\t\tfor (let i = 0, start = -1; i < tokens.length; i++) {\r\n\t\t\tlet token = tokens[i];\r\n\t\t\tif (is_valid_or_mapped(token.type)) {\r\n\t\t\t\tif (requires_check(token.cps)) { // normalization might be needed\r\n\t\t\t\t\tlet end = i + 1;\r\n\t\t\t\t\tfor (let pos = end; pos < tokens.length; pos++) { // find adjacent text\r\n\t\t\t\t\t\tlet {type, cps} = tokens[pos];\r\n\t\t\t\t\t\tif (is_valid_or_mapped(type)) {\r\n\t\t\t\t\t\t\tif (!requires_check(cps)) break;\r\n\t\t\t\t\t\t\tend = pos + 1;\r\n\t\t\t\t\t\t} else if (type !== TY_IGNORED) { // || type !== TY_DISALLOWED) { \r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (start < 0) start = i;\r\n\t\t\t\t\tlet slice = tokens.slice(start, end);\r\n\t\t\t\t\tlet cps0 = slice.flatMap(x => is_valid_or_mapped(x.type) ? x.cps : []); // strip junk tokens\r\n\t\t\t\t\tlet cps = nfc(cps0);\r\n\t\t\t\t\tif (compare_arrays(cps, cps0)) { // bundle into an nfc token\r\n\t\t\t\t\t\ttokens.splice(start, end - start, {\r\n\t\t\t\t\t\t\ttype: TY_NFC, \r\n\t\t\t\t\t\t\tinput: cps0, // there are 3 states: tokens0 ==(process)=> input ==(nfc)=> tokens/cps\r\n\t\t\t\t\t\t\tcps, \r\n\t\t\t\t\t\t\ttokens0: collapse_valid_tokens(slice),\r\n\t\t\t\t\t\t\ttokens: ens_tokenize(str_from_cps(cps), {nf: false})\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\ti = start;\r\n\t\t\t\t\t} else { \r\n\t\t\t\t\t\ti = end - 1; // skip to end of slice\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstart = -1; // reset\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstart = i; // remember last\r\n\t\t\t\t}\r\n\t\t\t} else if (token.type !== TY_IGNORED) { // 20221024: is this correct?\r\n\t\t\t\tstart = -1; // reset\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn collapse_valid_tokens(tokens);\r\n}\r\n\r\nfunction is_valid_or_mapped(type) {\r\n\treturn type == TY_VALID || type == TY_MAPPED;\r\n}\r\n\r\nfunction requires_check(cps) {\r\n\treturn cps.some(cp => NFC_CHECK.has(cp));\r\n}\r\n\r\nfunction collapse_valid_tokens(tokens) {\r\n\tfor (let i = 0; i < tokens.length; i++) {\r\n\t\tif (tokens[i].type == TY_VALID) {\r\n\t\t\tlet j = i + 1;\r\n\t\t\twhile (j < tokens.length && tokens[j].type == TY_VALID) j++;\r\n\t\t\ttokens.splice(i, j - i, {type: TY_VALID, cps: tokens.slice(i, j).flatMap(x => x.cps)});\r\n\t\t}\r\n\t}\r\n\treturn tokens;\r\n}\n\nexports.ens_beautify = ens_beautify;\nexports.ens_emoji = ens_emoji;\nexports.ens_normalize = ens_normalize;\nexports.ens_normalize_fragment = ens_normalize_fragment;\nexports.ens_split = ens_split;\nexports.ens_tokenize = ens_tokenize;\nexports.is_combining_mark = is_combining_mark;\nexports.nfc = nfc;\nexports.nfd = nfd;\nexports.safe_str_from_cps = safe_str_from_cps;\nexports.should_escape = should_escape;\n","'use strict';\n\nconst WebSocket = require('./lib/websocket');\n\nWebSocket.createWebSocketStream = require('./lib/stream');\nWebSocket.Server = require('./lib/websocket-server');\nWebSocket.Receiver = require('./lib/receiver');\nWebSocket.Sender = require('./lib/sender');\n\nWebSocket.WebSocket = WebSocket;\nWebSocket.WebSocketServer = WebSocket.Server;\n\nmodule.exports = WebSocket;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAddress = exports.hashMessage = exports.verifyMessage = void 0;\nconst ethers_1 = require(\"ethers\");\nlet ethersVerifyMessage = null;\nlet ethersHashMessage = null;\nlet ethersGetAddress = null;\ntry {\n    // @ts-expect-error -- v6 compatibility hack\n    ethersVerifyMessage = ethers_1.ethers.utils.verifyMessage;\n    // @ts-expect-error -- v6 compatibility hack\n    ethersHashMessage = ethers_1.ethers.utils.hashMessage;\n    // @ts-expect-error -- v6 compatibility hack\n    ethersGetAddress = ethers_1.ethers.utils.getAddress;\n}\ncatch (_a) {\n    ethersVerifyMessage = ethers_1.ethers.verifyMessage;\n    ethersHashMessage = ethers_1.ethers.hashMessage;\n    ethersGetAddress = ethers_1.ethers.getAddress;\n}\nexports.verifyMessage = ethersVerifyMessage;\nexports.hashMessage = ethersHashMessage;\nexports.getAddress = ethersGetAddress;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SiweErrorType = exports.SiweError = exports.VerifyOptsKeys = exports.VerifyParamsKeys = void 0;\nexports.VerifyParamsKeys = [\n    'signature',\n    'scheme',\n    'domain',\n    'nonce',\n    'time',\n];\nexports.VerifyOptsKeys = [\n    'provider',\n    'suppressExceptions',\n    'verificationFallback',\n];\n/**\n * Interface used to return errors in SiweResponses.\n */\nclass SiweError {\n    constructor(type, expected, received) {\n        this.type = type;\n        this.expected = expected;\n        this.received = received;\n    }\n}\nexports.SiweError = SiweError;\n/**\n * Possible message error types.\n */\nvar SiweErrorType;\n(function (SiweErrorType) {\n    /** `expirationTime` is present and in the past. */\n    SiweErrorType[\"EXPIRED_MESSAGE\"] = \"Expired message.\";\n    /** `domain` is not a valid authority or is empty. */\n    SiweErrorType[\"INVALID_DOMAIN\"] = \"Invalid domain.\";\n    /** `scheme` don't match the scheme provided for verification. */\n    SiweErrorType[\"SCHEME_MISMATCH\"] = \"Scheme does not match provided scheme for verification.\";\n    /** `domain` don't match the domain provided for verification. */\n    SiweErrorType[\"DOMAIN_MISMATCH\"] = \"Domain does not match provided domain for verification.\";\n    /** `nonce` don't match the nonce provided for verification. */\n    SiweErrorType[\"NONCE_MISMATCH\"] = \"Nonce does not match provided nonce for verification.\";\n    /** `address` does not conform to EIP-55 or is not a valid address. */\n    SiweErrorType[\"INVALID_ADDRESS\"] = \"Invalid address.\";\n    /** `uri` does not conform to RFC 3986. */\n    SiweErrorType[\"INVALID_URI\"] = \"URI does not conform to RFC 3986.\";\n    /** `nonce` is smaller then 8 characters or is not alphanumeric */\n    SiweErrorType[\"INVALID_NONCE\"] = \"Nonce size smaller then 8 characters or is not alphanumeric.\";\n    /** `notBefore` is present and in the future. */\n    SiweErrorType[\"NOT_YET_VALID_MESSAGE\"] = \"Message is not valid yet.\";\n    /** Signature doesn't match the address of the message. */\n    SiweErrorType[\"INVALID_SIGNATURE\"] = \"Signature does not match address of the message.\";\n    /** `expirationTime`, `notBefore` or `issuedAt` not compliant to ISO-8601. */\n    SiweErrorType[\"INVALID_TIME_FORMAT\"] = \"Invalid time format.\";\n    /** `version` is not 1. */\n    SiweErrorType[\"INVALID_MESSAGE_VERSION\"] = \"Invalid message version.\";\n    /** Thrown when some required field is missing. */\n    SiweErrorType[\"UNABLE_TO_PARSE\"] = \"Unable to parse the message.\";\n})(SiweErrorType = exports.SiweErrorType || (exports.SiweErrorType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkInvalidKeys = exports.isValidISO8601Date = exports.generateNonce = exports.checkContractWalletSignature = void 0;\nconst random_1 = require(\"@stablelib/random\");\n// @ts-expect-error -- ethers v6 compatibility hack\nconst ethers_1 = require(\"ethers\");\nconst ethersCompat_1 = require(\"./ethersCompat\");\nconst EIP1271_ABI = [\n    'function isValidSignature(bytes32 _message, bytes _signature) public view returns (bytes4)',\n];\nconst EIP1271_MAGICVALUE = '0x1626ba7e';\nconst ISO8601 = /^(?<date>[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]))[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(.[0-9]+)?(([Zz])|([+|-]([01][0-9]|2[0-3]):[0-5][0-9]))$/;\n/**\n * This method calls the EIP-1271 method for Smart Contract wallets\n * @param message The EIP-4361 parsed message\n * @param provider Web3 provider able to perform a contract check (Web3/EthersJS).\n * @returns {Promise<boolean>} Checks for the smart contract (if it exists) if\n * the signature is valid for given address.\n */\nconst checkContractWalletSignature = async (message, signature, provider) => {\n    if (!provider) {\n        return false;\n    }\n    const walletContract = new ethers_1.Contract(message.address, EIP1271_ABI, provider);\n    const hashedMessage = (0, ethersCompat_1.hashMessage)(message.prepareMessage());\n    const res = await walletContract.isValidSignature(hashedMessage, signature);\n    return res === EIP1271_MAGICVALUE;\n};\nexports.checkContractWalletSignature = checkContractWalletSignature;\n/**\n * This method leverages a native CSPRNG with support for both browser and Node.js\n * environments in order generate a cryptographically secure nonce for use in the\n * SiweMessage in order to prevent replay attacks.\n *\n * 96 bits has been chosen as a number to sufficiently balance size and security considerations\n * relative to the lifespan of it's usage.\n *\n * @returns cryptographically generated random nonce with 96 bits of entropy encoded with\n * an alphanumeric character set.\n */\nconst generateNonce = () => {\n    const nonce = (0, random_1.randomStringForEntropy)(96);\n    if (!nonce || nonce.length < 8) {\n        throw new Error('Error during nonce creation.');\n    }\n    return nonce;\n};\nexports.generateNonce = generateNonce;\n/**\n * This method matches the given date string against the ISO-8601 regex and also\n * performs checks if it's a valid date.\n * @param inputDate any string to be validated against ISO-8601\n * @returns boolean indicating if the provided date is valid and conformant to ISO-8601\n */\nconst isValidISO8601Date = (inputDate) => {\n    /* Split groups and make sure inputDate is in ISO8601 format */\n    const inputMatch = ISO8601.exec(inputDate);\n    /* if inputMatch is null the date is not ISO-8601 */\n    if (!inputMatch) {\n        return false;\n    }\n    /* Creates a date object with input date to parse for invalid days e.g. Feb, 30 -> Mar, 01 */\n    const inputDateParsed = new Date(inputMatch.groups.date).toISOString();\n    /* Get groups from new parsed date to compare with the original input */\n    const parsedInputMatch = ISO8601.exec(inputDateParsed);\n    /* Compare remaining fields */\n    return inputMatch.groups.date === parsedInputMatch.groups.date;\n};\nexports.isValidISO8601Date = isValidISO8601Date;\nconst checkInvalidKeys = (obj, keys) => {\n    const invalidKeys = [];\n    Object.keys(obj).forEach(key => {\n        if (!keys.includes(key)) {\n            invalidKeys.push(key);\n        }\n    });\n    return invalidKeys;\n};\nexports.checkInvalidKeys = checkInvalidKeys;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SiweMessage = void 0;\n// TODO: Figure out how to get types from this lib:\nconst siwe_parser_1 = require(\"@spruceid/siwe-parser\");\nconst ethersCompat_1 = require(\"./ethersCompat\");\nconst types_1 = require(\"./types\");\nconst utils_1 = require(\"./utils\");\nclass SiweMessage {\n    /**\n     * Creates a parsed Sign-In with Ethereum Message (EIP-4361) object from a\n     * string or an object. If a string is used an ABNF parser is called to\n     * validate the parameter, otherwise the fields are attributed.\n     * @param param {string | SiweMessage} Sign message as a string or an object.\n     */\n    constructor(param) {\n        if (typeof param === 'string') {\n            /* the message string (including nonce) is valid or ParsedMessage will throw */\n            const parsedMessage = new siwe_parser_1.ParsedMessage(param);\n            this.scheme = parsedMessage.scheme;\n            this.domain = parsedMessage.domain;\n            this.address = parsedMessage.address;\n            this.statement = parsedMessage.statement;\n            this.uri = parsedMessage.uri;\n            this.version = parsedMessage.version;\n            this.nonce = parsedMessage.nonce;\n            this.issuedAt = parsedMessage.issuedAt;\n            this.expirationTime = parsedMessage.expirationTime;\n            this.notBefore = parsedMessage.notBefore;\n            this.requestId = parsedMessage.requestId;\n            this.chainId = parsedMessage.chainId;\n            this.resources = parsedMessage.resources;\n        }\n        else {\n            this.scheme = param === null || param === void 0 ? void 0 : param.scheme;\n            this.domain = param.domain;\n            this.address = param.address;\n            this.statement = param === null || param === void 0 ? void 0 : param.statement;\n            this.uri = param.uri;\n            this.version = param.version;\n            this.chainId = param.chainId;\n            this.nonce = param.nonce;\n            this.issuedAt = param === null || param === void 0 ? void 0 : param.issuedAt;\n            this.expirationTime = param === null || param === void 0 ? void 0 : param.expirationTime;\n            this.notBefore = param === null || param === void 0 ? void 0 : param.notBefore;\n            this.requestId = param === null || param === void 0 ? void 0 : param.requestId;\n            this.resources = param === null || param === void 0 ? void 0 : param.resources;\n            if (typeof this.chainId === 'string') {\n                this.chainId = (0, siwe_parser_1.parseIntegerNumber)(this.chainId);\n            }\n            this.nonce = this.nonce || (0, utils_1.generateNonce)();\n            /* the message object is valid or parsing its stringified value will throw */\n            new siwe_parser_1.ParsedMessage(this.prepareMessage());\n        }\n    }\n    /**\n     * This function can be used to retrieve an EIP-4361 formatted message for\n     * signature, although you can call it directly it's advised to use\n     * [prepareMessage()] instead which will resolve to the correct method based\n     * on the [type] attribute of this object, in case of other formats being\n     * implemented.\n     * @returns {string} EIP-4361 formatted message, ready for EIP-191 signing.\n     */\n    toMessage() {\n        /** Validates all fields of the object */\n        // this.validateMessage();\n        const headerPrefix = this.scheme\n            ? `${this.scheme}://${this.domain}`\n            : this.domain;\n        const header = `${headerPrefix} wants you to sign in with your Ethereum account:`;\n        const uriField = `URI: ${this.uri}`;\n        let prefix = [header, this.address].join('\\n');\n        const versionField = `Version: ${this.version}`;\n        if (!this.nonce) {\n            this.nonce = (0, utils_1.generateNonce)();\n        }\n        const chainField = `Chain ID: ` + this.chainId || '1';\n        const nonceField = `Nonce: ${this.nonce}`;\n        const suffixArray = [uriField, versionField, chainField, nonceField];\n        this.issuedAt = this.issuedAt || new Date().toISOString();\n        suffixArray.push(`Issued At: ${this.issuedAt}`);\n        if (this.expirationTime) {\n            const expiryField = `Expiration Time: ${this.expirationTime}`;\n            suffixArray.push(expiryField);\n        }\n        if (this.notBefore) {\n            suffixArray.push(`Not Before: ${this.notBefore}`);\n        }\n        if (this.requestId) {\n            suffixArray.push(`Request ID: ${this.requestId}`);\n        }\n        if (this.resources) {\n            suffixArray.push([`Resources:`, ...this.resources.map(x => `- ${x}`)].join('\\n'));\n        }\n        const suffix = suffixArray.join('\\n');\n        prefix = [prefix, this.statement].join('\\n\\n');\n        if (this.statement !== undefined) {\n            prefix += '\\n';\n        }\n        return [prefix, suffix].join('\\n');\n    }\n    /**\n     * This method parses all the fields in the object and creates a messaging for signing\n     * message according with the type defined.\n     * @returns {string} Returns a message ready to be signed according with the\n     * type defined in the object.\n     */\n    prepareMessage() {\n        let message;\n        switch (this.version) {\n            case '1': {\n                message = this.toMessage();\n                break;\n            }\n            default: {\n                message = this.toMessage();\n                break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Verifies the integrity of the object by matching its signature.\n     * @param params Parameters to verify the integrity of the message, signature is required.\n     * @returns {Promise<SiweMessage>} This object if valid.\n     */\n    async verify(params, opts = { suppressExceptions: false }) {\n        return new Promise((resolve, reject) => {\n            var _a, _b, _c;\n            const fail = result => {\n                if (opts.suppressExceptions) {\n                    return resolve(result);\n                }\n                else {\n                    return reject(result);\n                }\n            };\n            const invalidParams = (0, utils_1.checkInvalidKeys)(params, types_1.VerifyParamsKeys);\n            if (invalidParams.length > 0) {\n                fail({\n                    success: false,\n                    data: this,\n                    error: new Error(`${invalidParams.join(', ')} is/are not valid key(s) for VerifyParams.`),\n                });\n            }\n            const invalidOpts = (0, utils_1.checkInvalidKeys)(opts, types_1.VerifyOptsKeys);\n            if (invalidOpts.length > 0) {\n                fail({\n                    success: false,\n                    data: this,\n                    error: new Error(`${invalidOpts.join(', ')} is/are not valid key(s) for VerifyOpts.`),\n                });\n            }\n            const { signature, scheme, domain, nonce, time } = params;\n            /** Scheme for domain binding */\n            if (scheme && scheme !== this.scheme) {\n                fail({\n                    success: false,\n                    data: this,\n                    error: new types_1.SiweError(types_1.SiweErrorType.SCHEME_MISMATCH, scheme, this.scheme),\n                });\n            }\n            /** Domain binding */\n            if (domain && domain !== this.domain) {\n                fail({\n                    success: false,\n                    data: this,\n                    error: new types_1.SiweError(types_1.SiweErrorType.DOMAIN_MISMATCH, domain, this.domain),\n                });\n            }\n            /** Nonce binding */\n            if (nonce && nonce !== this.nonce) {\n                fail({\n                    success: false,\n                    data: this,\n                    error: new types_1.SiweError(types_1.SiweErrorType.NONCE_MISMATCH, nonce, this.nonce),\n                });\n            }\n            /** Check time or now */\n            const checkTime = new Date(time || new Date());\n            /** Message not expired */\n            if (this.expirationTime) {\n                const expirationDate = new Date(this.expirationTime);\n                if (checkTime.getTime() >= expirationDate.getTime()) {\n                    fail({\n                        success: false,\n                        data: this,\n                        error: new types_1.SiweError(types_1.SiweErrorType.EXPIRED_MESSAGE, `${checkTime.toISOString()} < ${expirationDate.toISOString()}`, `${checkTime.toISOString()} >= ${expirationDate.toISOString()}`),\n                    });\n                }\n            }\n            /** Message is valid already */\n            if (this.notBefore) {\n                const notBefore = new Date(this.notBefore);\n                if (checkTime.getTime() < notBefore.getTime()) {\n                    fail({\n                        success: false,\n                        data: this,\n                        error: new types_1.SiweError(types_1.SiweErrorType.NOT_YET_VALID_MESSAGE, `${checkTime.toISOString()} >= ${notBefore.toISOString()}`, `${checkTime.toISOString()} < ${notBefore.toISOString()}`),\n                    });\n                }\n            }\n            let EIP4361Message;\n            try {\n                EIP4361Message = this.prepareMessage();\n            }\n            catch (e) {\n                fail({\n                    success: false,\n                    data: this,\n                    error: e,\n                });\n            }\n            /** Recover address from signature */\n            let addr;\n            try {\n                addr = (0, ethersCompat_1.verifyMessage)(EIP4361Message, signature);\n            }\n            catch (e) {\n                console.error(e);\n            }\n            /** Match signature with message's address */\n            if (addr === this.address) {\n                return resolve({\n                    success: true,\n                    data: this,\n                });\n            }\n            else {\n                const EIP1271Promise = (0, utils_1.checkContractWalletSignature)(this, signature, opts.provider)\n                    .then(isValid => {\n                    if (!isValid) {\n                        return {\n                            success: false,\n                            data: this,\n                            error: new types_1.SiweError(types_1.SiweErrorType.INVALID_SIGNATURE, addr, `Resolved address to be ${this.address}`),\n                        };\n                    }\n                    return {\n                        success: true,\n                        data: this,\n                    };\n                })\n                    .catch(error => {\n                    return {\n                        success: false,\n                        data: this,\n                        error,\n                    };\n                });\n                Promise.all([\n                    EIP1271Promise,\n                    (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.verificationFallback) === null || _a === void 0 ? void 0 : _a.call(opts, params, opts, this, EIP1271Promise)) === null || _b === void 0 ? void 0 : _b.then(res => res)) === null || _c === void 0 ? void 0 : _c.catch((res) => res),\n                ]).then(([EIP1271Response, fallbackResponse]) => {\n                    if (fallbackResponse) {\n                        if (fallbackResponse.success) {\n                            return resolve(fallbackResponse);\n                        }\n                        else {\n                            fail(fallbackResponse);\n                        }\n                    }\n                    else {\n                        if (EIP1271Response.success) {\n                            return resolve(EIP1271Response);\n                        }\n                        else {\n                            fail(EIP1271Response);\n                        }\n                    }\n                });\n            }\n        });\n    }\n}\nexports.SiweMessage = SiweMessage;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./client\"), exports);\n__exportStar(require(\"./types\"), exports);\n__exportStar(require(\"./utils\"), exports);\n","\"use client\"\r\nimport {\r\n  createAuthenticationAdapter,\r\n  darkTheme,\r\n  RainbowKitAuthenticationProvider,\r\n  RainbowKitProvider,\r\n} from \"@rainbow-me/rainbowkit\"\r\nimport React, { useMemo } from \"react\"\r\nimport { SiweMessage } from \"siwe\"\r\nimport { useAccount } from \"wagmi\"\r\nimport Cookies from \"js-cookie\"\r\n\r\nfunction useAuthenticationAdapter() {\r\n  // If the user is logged in but the account is different (e.g. they changed account in Metamask), log them out and reload the page.\r\n  const account = useAccount()\r\n\r\n  return useMemo(() => {\r\n    return createAuthenticationAdapter({\r\n      getNonce: async () => {\r\n        const res = await fetch(\r\n          \"https://proofbridge.onrender.com/v1/auth/challenge\",\r\n          {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n              address: account.address,\r\n            }),\r\n          }\r\n        )\r\n        const data = await res.json()\r\n        return data.nonce\r\n      },\r\n      createMessage: ({ nonce, address, chainId }) => {\r\n        return new SiweMessage({\r\n          domain: \"proofbridge.xyz\",\r\n          address,\r\n          statement: \"Sign in with Ethereum to the app.\",\r\n          uri: \"https://proofbridge.xyz\",\r\n          version: \"1\",\r\n          chainId,\r\n          nonce,\r\n        }).prepareMessage()\r\n      },\r\n\r\n      verify: async ({ message, signature }) => {\r\n        const loginRes = await fetch(\r\n          \"https://proofbridge.onrender.com/v1/auth/login\",\r\n          {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ message, signature }),\r\n          }\r\n        )\r\n        const data = await loginRes.json()\r\n        Cookies.set(\"auth_token\", data.tokens.access)\r\n        Cookies.set(\"refresh_token\", data.tokens.refresh)\r\n        window.location.reload()\r\n        return Boolean(loginRes.ok)\r\n      },\r\n      signOut: async () => {\r\n        // await fetch(\"/api/logout\")\r\n        Cookies.remove(\"auth_token\")\r\n        Cookies.remove(\"refresh_token\")\r\n        window.location.reload()\r\n      },\r\n    })\r\n  }, [account])\r\n}\r\n\r\nexport const RainbowKit = ({ children }: { children: React.ReactNode }) => {\r\n  const adapter = useAuthenticationAdapter()\r\n  const token = Cookies.get(\"auth_token\")\r\n\r\n  return (\r\n    <RainbowKitAuthenticationProvider\r\n      adapter={adapter}\r\n      status={token ? \"authenticated\" : \"unauthenticated\"}\r\n    >\r\n      <RainbowKitProvider\r\n        theme={darkTheme({\r\n          accentColor: \"#c3ff49\",\r\n          accentColorForeground: \"#000\",\r\n        })}\r\n      >\r\n        {children}\r\n      </RainbowKitProvider>\r\n    </RainbowKitAuthenticationProvider>\r\n  )\r\n}\r\n","\"use client\";import*as t from\"react\";var M=(e,i,s,u,m,a,l,h)=>{let d=document.documentElement,w=[\"light\",\"dark\"];function p(n){(Array.isArray(e)?e:[e]).forEach(y=>{let k=y===\"class\",S=k&&a?m.map(f=>a[f]||f):m;k?(d.classList.remove(...S),d.classList.add(a&&a[n]?a[n]:n)):d.setAttribute(y,n)}),R(n)}function R(n){h&&w.includes(n)&&(d.style.colorScheme=n)}function c(){return window.matchMedia(\"(prefers-color-scheme: dark)\").matches?\"dark\":\"light\"}if(u)p(u);else try{let n=localStorage.getItem(i)||s,y=l&&n===\"system\"?c():n;p(y)}catch(n){}};var b=[\"light\",\"dark\"],I=\"(prefers-color-scheme: dark)\",O=typeof window==\"undefined\",x=t.createContext(void 0),U={setTheme:e=>{},themes:[]},z=()=>{var e;return(e=t.useContext(x))!=null?e:U},J=e=>t.useContext(x)?t.createElement(t.Fragment,null,e.children):t.createElement(V,{...e}),N=[\"light\",\"dark\"],V=({forcedTheme:e,disableTransitionOnChange:i=!1,enableSystem:s=!0,enableColorScheme:u=!0,storageKey:m=\"theme\",themes:a=N,defaultTheme:l=s?\"system\":\"light\",attribute:h=\"data-theme\",value:d,children:w,nonce:p,scriptProps:R})=>{let[c,n]=t.useState(()=>H(m,l)),[T,y]=t.useState(()=>c===\"system\"?E():c),k=d?Object.values(d):a,S=t.useCallback(o=>{let r=o;if(!r)return;o===\"system\"&&s&&(r=E());let v=d?d[r]:r,C=i?W(p):null,P=document.documentElement,L=g=>{g===\"class\"?(P.classList.remove(...k),v&&P.classList.add(v)):g.startsWith(\"data-\")&&(v?P.setAttribute(g,v):P.removeAttribute(g))};if(Array.isArray(h)?h.forEach(L):L(h),u){let g=b.includes(l)?l:null,D=b.includes(r)?r:g;P.style.colorScheme=D}C==null||C()},[p]),f=t.useCallback(o=>{let r=typeof o==\"function\"?o(c):o;n(r);try{localStorage.setItem(m,r)}catch(v){}},[c]),A=t.useCallback(o=>{let r=E(o);y(r),c===\"system\"&&s&&!e&&S(\"system\")},[c,e]);t.useEffect(()=>{let o=window.matchMedia(I);return o.addListener(A),A(o),()=>o.removeListener(A)},[A]),t.useEffect(()=>{let o=r=>{r.key===m&&(r.newValue?n(r.newValue):f(l))};return window.addEventListener(\"storage\",o),()=>window.removeEventListener(\"storage\",o)},[f]),t.useEffect(()=>{S(e!=null?e:c)},[e,c]);let Q=t.useMemo(()=>({theme:c,setTheme:f,forcedTheme:e,resolvedTheme:c===\"system\"?T:c,themes:s?[...a,\"system\"]:a,systemTheme:s?T:void 0}),[c,f,e,T,s,a]);return t.createElement(x.Provider,{value:Q},t.createElement(_,{forcedTheme:e,storageKey:m,attribute:h,enableSystem:s,enableColorScheme:u,defaultTheme:l,value:d,themes:a,nonce:p,scriptProps:R}),w)},_=t.memo(({forcedTheme:e,storageKey:i,attribute:s,enableSystem:u,enableColorScheme:m,defaultTheme:a,value:l,themes:h,nonce:d,scriptProps:w})=>{let p=JSON.stringify([s,i,a,e,h,l,u,m]).slice(1,-1);return t.createElement(\"script\",{...w,suppressHydrationWarning:!0,nonce:typeof window==\"undefined\"?d:\"\",dangerouslySetInnerHTML:{__html:`(${M.toString()})(${p})`}})}),H=(e,i)=>{if(O)return;let s;try{s=localStorage.getItem(e)||void 0}catch(u){}return s||i},W=e=>{let i=document.createElement(\"style\");return e&&i.setAttribute(\"nonce\",e),i.appendChild(document.createTextNode(\"*,*::before,*::after{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}\")),document.head.appendChild(i),()=>{window.getComputedStyle(document.body),setTimeout(()=>{document.head.removeChild(i)},1)}},E=e=>(e||(e=window.matchMedia(I)),e.matches?\"dark\":\"light\");export{J as ThemeProvider,z as useTheme};\n","\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, ToasterProps } from \"sonner\"\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={\"dark\"}\n      className=\"toaster group\"\n      style={\n        {\n          \"--normal-bg\": \"var(--popover)\",\n          \"--normal-text\": \"var(--popover-foreground)\",\n          \"--normal-border\": \"var(--border)\",\n        } as React.CSSProperties\n      }\n      toastOptions={{\n        classNames: {\n          error: \"!bg-red-500 !text-white !border-none\",\n          success: \"!bg-primary !border-none\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n"],"names":[],"mappings":"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BAAiB,gBACjB,eAAgB,gBAChB,cAAe,eACf,YAAa,YACb,aAAc,aACd,kBAAmB,mBACnB,YAAa,YACb,YAAa,YACb,YAAa,YACb,cAAe,cACf,YAAa,YACb,gBAAiB,iBACjB,iBAAkB,WACpB,oBCXA,GAAM,QAAE,CAAM,CAAE,CAAA,EAAA,CAAA,CAAA,QAYV,EAAQ,CACZ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KA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L,KAAK,CAAA,EAAA,CAAA,CAAA,QACL,OAAO,CAAA,EAAA,CAAA,CAAA,QACP,KAAK,CAAA,EAAA,CAAA,CAAA,OACP,6P,E,G,C,E,E,A,O,C,E,E,I,C,C,E,I,A,E,M,C,C,A,G,C,E,K,C,C,C,A,E,A,E,A,G,C,C,E,C,C,A,O,E,A,E,C,C,E,C,A,C,S,A,E,A,C,C,A,C,M,C,C,C,G,C,C,K,C,A,C,C,E,E,E,A,C,A,C,A,C,C,C,C,C,C,C,I,C,C,E,E,E,C,A,C,C,C,C,G,C,E,C,C,C,E,C,A,C,A,A,M,C,E,E,C,C,C,C,C,C,E,I,E,C,C,C,K,C,A,E,A,I,W,C,G,A,C,C,A,A,I,W,C,G,A,C,C,E,I,C,C,C,C,C,C,E,C,A,E,C,C,A,G,G,C,G,C,C,C,E,C,C,C,C,C,A,E,A,C,C,A,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,A,C,A,A,M,C,E,A,E,A,A,C,A,A,I,E,C,C,C,A,C,E,C,C,K,C,C,G,C,C,E,E,E,C,G,C,C,G,C,C,C,A,E,K,C,E,I,A,E,C,C,C,A,E,A,C,E,C,C,A,G,C,C,A,E,K,C,E,I,A,E,C,C,C,A,C,C,C,E,C,C,A,E,E,C,C,C,A,C,A,C,E,C,C,A,C,C,K,C,E,I,A,E,C,C,C,C,A,C,C,E,C,C,A,G,C,C,A,C,A,E,E,C,C,C,A,C,C,A,M,C,E,I,C,C,C,C,C,C,A,C,C,E,C,C,A,E,E,C,C,C,A,C,A,C,E,C,C,A,C,C,M,C,E,I,C,C,C,C,C,C,A,C,C,E,C,C,A,E,E,C,C,C,A,C,A,C,E,C,C,E,C,A,C,C,A,M,C,E,I,C,C,C,C,C,C,A,C,C,E,C,C,A,G,C,C,E,C,A,C,A,C,C,E,C,C,C,A,C,C,A,M,C,E,I,C,C,C,E,A,C,C,C,C,C,A,C,A,E,O,C,E,I,E,A,C,C,C,E,A,E,A,C,A,C,A,E,O,C,E,I,E,A,C,C,C,C,A,C,C,E,C,C,A,E,C,C,A,C,A,G,E,C,C,A,C,C,C,A,M,C,E,I,C,C,C,C,C,C,A,C,C,E,C,C,A,E,C,C,A,C,A,G,E,C,C,C,A,C,C,A,M,C,E,I,C,C,C,C,C,C,A,C,C,E,C,C,A,E,C,C,E,C,A,C,A,C,E,E,C,C,C,A,C,C,A,M,C,E,I,C,C,C,C,C,C,A,C,C,E,C,C,A,E,C,C,E,C,A,C,A,C,E,E,C,C,C,A,C,C,O,E,C,A,C,C,C,C,C,C,E,I,C,C,C,E,G,C,C,C,E,A,G,C,C,A,C,K,C,C,C,E,A,E,C,C,C,A,C,I,E,C,K,C,C,A,C,A,C,C,C,A,C,A,E,C,A,C,A,A,E,M,C,E,I,C,C,C,E,A,A,E,A,E,E,A,C,E,G,C,C,C,E,A,G,C,C,C,E,A,G,C,C,A,C,C,K,C,E,I,A,E,C,E,A,C,C,A,E,A,E,E,A,C,C,A,E,A,E,C,E,A,C,A,I,E,C,K,C,C,A,C,A,C,A,E,K,C,E,I,A,E,C,E,A,A,E,A,E,A,E,E,A,C,E,G,C,C,C,E,A,G,C,C,A,E,C,G,C,C,C,E,A,E,C,C,C,A,E,K,C,E,I,A,E,C,E,A,C,C,A,E,A,E,A,E,E,A,C,C,A,E,A,E,A,E,C,E,A,C,A,I,E,C,K,C,C,A,C,A,C,A,E,K,C,E,I,A,E,C,E,A,A,E,A,E,A,E,A,E,E,A,C,E,G,C,C,C,E,A,G,C,C,C,E,A,G,C,C,C,E,A,G,C,C,C,E,A,G,C,C,A,C,C,K,C,E,I,A,E,C,E,A,C,C,A,E,A,E,A,E,A,E,E,A,C,C,A,E,A,E,A,E,A,E,C,E,A,C,A,I,E,C,K,C,C,A,C,A,A,C,E,K,C,E,E,E,K,C,E,G,C,G,O,C,K,G,K,G,K,G,K,I,M,G,M,G,M,G,M,I,O,G,E,K,C,G,M,U,M,G,M,A,G,K,K,G,K,G,K,G,K,G,K,G,E,C,E,8F,I,E,E,C,C,Q,E,M,C,E,C,Q,E,O,E,C,W,G,E,A,E,A,S,C,E,C,A,Q,S,E,C,a,G,E,A,E,K,S,C,uB,O,c,C,E,a,6J,E,O,C,E,E,I,G,C,E,E,I,E,C,E,E,G,E,C,E,M,C,A,C,E,E,C,U,E,O,C,E,U,E,O,C,C,M,C,M,A,K,C,8C,C,C,A,E,C,C,G,M,C,C,A,E,C,C,G,K,C,A,C,A,C,E,O,C,E,O,A,C,A,C,G,C,C,C,G,E,E,I,G,C,M,A,K,C,kC,C,C,A,G,G,E,M,E,A,C,M,A,K,C,uC,C,A,C,A,C,E,O,C,E,O,A,C,A,C,C,E,E,A,G,A,C,A,C,E,E,C,C,M,G,C,A,G,E,C,K,C,E,C,E,C,E,A,K,C,wD,C,E,C,A,C,A,C,C,E,C,E,G,I,A,C,C,C,O,I,U,C,E,C,K,C,E,C,S,C,E,C,S,C,A,C,A,C,E,G,C,E,I,G,A,C,E,A,O,I,W,C,E,C,K,C,E,C,S,C,I,C,K,C,E,C,S,C,C,C,C,A,C,A,C,E,K,C,E,M,C,A,G,C,C,C,I,I,C,C,C,C,C,C,E,I,E,C,C,E,C,A,C,A,C,C,C,C,I,C,C,C,A,C,A,C,E,U,C,E,O,A,C,E,C,M,A,I,Q,C,E,C,K,C,E,C,S,C,E,C,S,C,A,C,A,C,E,I,C,E,K,E,A,C,C,C,C,C,O,G,C,C,C,E,E,C,C,A,A,C,A,C,C,E,A,C,C,E,C,E,K,E,A,C,C,C,C,C,O,G,C,C,C,E,C,A,A,E,C,I,C,A,A,C,A,A,C,A,A,E,Q,C,E,E,K,K,C,E,E,O,G,C,E,O,A,C,E,C,E,E,E,C,C,C,A,C,C,K,E,E,C,E,E,C,A,I,E,C,C,C,A,I,I,C,C,C,C,C,C,E,G,G,C,C,E,C,A,C,E,A,C,C,C,C,C,C,C,C,A,O,C,C,C,A,C,C,U,C,E,O,A,C,E,C,E,I,I,E,O,E,C,K,A,K,C,2B,C,O,G,A,C,C,C,E,O,I,M,C,O,C,G,A,C,C,E,E,A,E,C,K,C,A,E,A,E,A,C,C,A,G,E,A,C,C,M,A,K,C,kD,C,E,C,A,C,G,E,G,C,U,C,E,C,A,C,G,I,E,A,C,C,E,A,C,C,E,A,E,A,E,E,A,E,C,C,C,C,A,I,E,A,E,E,C,Q,C,C,E,C,C,A,C,C,A,E,E,C,Q,C,C,E,A,C,C,C,C,A,Q,I,E,G,G,I,E,A,G,E,C,A,A,K,C,8C,E,C,A,C,E,A,C,A,C,C,E,A,E,A,C,C,a,C,E,C,A,C,A,C,E,A,C,A,E,A,G,C,C,A,A,C,C,K,C,C,C,E,A,C,Q,C,E,E,M,K,C,E,E,Q,G,C,E,O,A,C,C,C,E,K,C,G,W,E,C,M,C,E,C,C,C,C,A,C,M,C,E,E,I,W,C,E,O,A,C,E,M,A,M,E,E,O,I,A,E,E,A,E,C,C,A,E,G,A,C,A,A,C,A,C,A,C,C,A,W,C,E,O,A,G,C,C,C,I,C,C,C,A,C,A,I,I,C,C,C,C,C,C,E,I,E,C,C,E,C,C,A,I,C,C,C,C,C,C,C,A,E,C,C,C,A,C,E,A,C,C,M,A,C,A,A,I,E,C,G,U,C,G,A,C,C,E,I,C,C,C,C,E,C,A,C,C,C,E,I,E,C,C,E,C,C,A,I,C,C,C,C,C,C,C,A,E,C,E,C,C,C,G,A,C,C,C,A,C,C,M,A,C,A,A,O,C,C,C,A,C,C,S,C,E,O,A,C,C,C,A,E,G,A,C,G,K,G,A,iB,G,A,G,C,C,A,Q,C,I,C,G,C,C,I,A,K,C,uC,C,C,A,O,A,M,A,C,A,M,C,E,E,C,C,A,C,C,A,A,Y,C,E,E,S,M,C,E,E,W,C,A,E,E,Q,G,C,E,O,A,E,E,C,C,G,E,A,A,M,E,U,E,A,C,M,E,M,C,e,C,O,E,M,C,e,C,I,U,C,I,G,E,E,C,C,C,C,E,U,E,A,C,M,E,M,C,W,C,O,U,C,I,C,E,M,C,W,C,G,O,A,C,C,C,C,C,C,wC,C,A,C,A,C,I,E,E,C,C,Q,A,S,E,C,E,E,K,C,Y,U,E,W,C,M,C,C,C,E,Y,C,C,C,C,C,W,C,I,A,C,A,S,E,C,E,E,C,C,M,C,a,C,C,C,E,C,C,C,C,M,A,K,C,iC,C,C,C,A,C,A,A,S,E,C,C,E,C,C,E,G,C,E,C,C,C,E,I,A,K,C,qB,C,C,A,G,E,K,C,C,C,E,C,E,K,G,C,C,C,M,C,C,M,A,K,C,gC,C,E,K,U,C,C,C,M,C,A,C,A,A,S,E,C,E,G,I,C,E,C,C,C,A,U,C,A,G,C,A,C,A,Q,C,A,I,A,C,C,A,M,A,C,G,A,E,C,A,G,C,A,A,C,C,C,M,E,C,E,I,C,G,C,C,C,C,C,C,E,C,K,C,C,E,C,A,C,A,C,C,C,C,E,C,C,C,C,C,C,A,A,O,C,C,A,C,C,A,I,C,E,C,C,C,A,C,A,C,C,C,U,C,I,W,C,C,U,C,C,C,M,C,C,C,C,C,E,S,C,E,I,C,A,C,E,A,C,A,C,A,C,E,A,C,C,C,C,C,A,E,C,W,C,E,S,C,A,E,U,C,E,I,C,A,C,E,A,C,A,C,E,I,E,E,C,O,C,C,E,K,Q,E,A,C,A,C,G,A,C,A,C,C,C,C,K,E,E,Q,C,C,C,C,K,U,C,O,C,E,G,E,C,A,I,C,C,M,C,A,E,C,C,C,C,C,C,C,E,C,C,A,C,Q,C,E,C,C,Q,C,C,C,G,C,C,C,A,E,C,E,C,A,E,C,E,C,E,C,C,C,E,C,C,C,E,C,C,C,E,C,C,C,G,C,C,A,S,E,C,S,A,C,C,C,E,E,E,A,E,C,E,E,C,C,A,C,A,E,E,C,A,C,A,C,C,E,C,E,C,C,C,E,C,C,C,A,C,A,C,E,A,C,C,E,A,C,C,A,C,C,A,C,E,C,E,C,C,C,E,C,C,C,C,A,C,E,A,C,C,A,E,A,C,C,C,C,I,C,A,K,U,A,E,C,C,C,C,C,E,A,I,E,A,I,C,G,E,C,A,I,I,C,C,C,C,C,C,E,C,E,A,C,C,A,E,A,C,C,C,A,I,E,E,E,C,G,E,C,E,A,C,E,C,A,E,E,E,E,A,E,I,C,E,E,A,Q,A,G,C,A,E,C,E,C,A,C,A,A,C,Q,E,C,E,G,G,K,E,O,E,C,K,A,K,C,iB,C,C,A,O,I,U,C,I,W,E,C,M,C,G,A,C,A,A,C,C,C,M,E,C,E,E,I,Q,E,C,M,I,A,E,E,A,E,C,C,A,E,G,A,C,A,A,C,A,A,C,C,C,M,E,C,E,I,E,A,C,E,A,A,C,C,E,I,E,A,C,E,G,C,A,C,A,K,E,C,A,E,C,G,I,E,C,A,E,G,M,C,E,C,Q,C,A,E,G,K,C,E,C,O,C,A,E,G,G,C,G,C,C,G,C,C,A,E,C,C,A,C,I,E,C,E,I,E,C,E,A,C,A,G,A,C,C,A,G,C,C,C,G,C,E,G,C,A,C,A,K,E,C,A,E,C,C,C,C,C,C,A,E,K,E,G,M,C,E,C,Q,C,A,E,G,K,C,E,C,O,C,A,E,G,G,C,A,G,C,A,C,C,E,C,A,C,A,A,C,A,E,C,K,E,C,E,I,E,A,C,E,A,C,G,A,C,C,A,G,C,C,C,G,C,E,G,C,A,C,A,K,E,C,A,E,C,C,C,C,C,C,A,E,K,E,G,M,C,E,C,Q,C,A,E,G,K,C,E,C,O,C,A,E,G,G,C,A,G,C,A,C,C,E,C,A,C,A,A,C,A,C,C,C,M,C,E,G,I,C,C,A,C,A,E,I,C,E,I,C,C,E,A,e,C,E,E,Q,C,c,C,E,E,W,C,c,C,W,C,4M,E,O,C,E,I,E,A,E,C,C,Q,E,E,C,C,G,K,E,C,K,C,C,C,C,A,E,C,K,C,C,C,C,A,E,C,K,C,C,C,C,A,E,C,K,C,C,C,C,A,E,G,G,C,G,C,C,A,E,I,E,C,I,C,A,C,C,E,C,A,E,A,E,C,A,E,E,A,C,A,I,C,G,E,C,C,C,A,C,E,C,A,C,C,C,C,C,C,C,E,E,C,A,I,C,A,A,C,C,A,C,C,C,C,C,C,C,C,C,C,C,C,C,E,C,C,A,C,C,C,A,E,I,C,A,C,E,C,A,C,C,E,C,C,C,A,C,C,I,C,C,C,E,C,C,A,C,E,C,C,C,A,A,C,A,C,A,E,C,C,A,I,C,C,E,C,C,E,I,C,C,C,C,C,C,C,C,C,E,C,A,C,A,A,C,C,A,C,G,E,C,A,C,A,E,C,C,C,A,C,C,A,C,A,C,C,C,A,G,C,C,E,G,A,C,G,A,I,E,C,E,C,C,A,C,C,C,A,C,C,C,E,C,C,C,C,A,C,A,A,A,I,E,C,E,A,E,K,A,E,G,G,C,C,A,C,A,C,A,C,C,C,A,E,C,C,A,C,C,C,A,E,C,C,A,C,A,C,C,C,E,C,C,A,C,A,E,C,A,C,A,E,E,M,A,E,C,C,C,C,C,C,C,A,C,A,E,E,M,A,E,C,C,C,C,C,C,C,A,C,C,C,C,C,A,C,C,C,E,C,C,A,C,A,E,C,A,C,A,E,E,M,A,E,C,C,C,C,C,C,C,A,C,E,E,M,A,E,C,C,C,C,C,C,C,A,C,Q,E,C,C,E,C,C,E,I,C,C,I,W,C,C,G,A,C,C,C,C,I,E,E,C,A,E,E,E,A,C,A,I,C,A,A,E,E,I,C,C,C,C,C,C,E,C,C,E,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,E,C,C,C,C,C,C,E,C,C,C,C,C,C,E,C,C,C,C,C,C,E,C,C,A,I,I,C,C,C,C,C,C,E,C,C,E,C,C,C,A,I,E,C,C,A,E,C,C,A,E,C,A,E,C,C,A,E,C,C,A,E,C,A,E,A,C,C,E,C,A,C,C,A,C,C,E,C,C,A,C,A,E,A,E,E,A,C,C,A,C,C,C,C,C,E,C,A,C,C,A,E,E,A,C,C,A,C,C,C,C,C,E,C,C,A,C,A,I,I,C,C,C,C,C,C,E,C,C,E,E,C,A,C,A,C,C,C,C,C,E,E,A,C,A,C,C,C,C,C,C,C,E,C,C,A,A,C,G,E,C,C,A,C,C,C,A,E,C,C,A,C,C,C,A,I,I,C,C,C,C,C,C,E,C,C,E,C,C,A,I,E,C,C,C,A,C,C,A,E,A,E,E,C,C,A,E,C,E,A,A,C,C,A,E,C,C,A,E,C,E,A,A,C,A,C,A,C,C,C,A,E,C,C,A,E,A,C,A,E,C,C,A,E,A,C,C,C,A,C,C,E,A,C,E,A,C,A,C,E,A,C,C,C,C,C,A,A,C,G,I,C,C,C,C,C,C,E,C,C,E,E,C,C,A,I,I,C,C,C,C,C,C,E,C,C,E,C,C,C,C,C,C,C,C,C,C,C,C,C,A,I,I,C,C,C,C,C,C,E,C,C,E,C,C,C,C,C,C,C,E,C,C,C,C,C,E,C,C,A,E,C,C,C,C,C,C,E,C,C,A,E,C,A,C,A,A,C,C,C,C,E,C,C,E,C,A,C,C,A,C,C,E,C,C,E,A,C,A,A,C,C,C,E,K,A,E,C,C,A,C,A,A,M,M,I,E,I,C,Y,C,C,C,C,C,C,G,C,C,E,E,A,C,C,G,K,E,C,A,I,C,G,C,C,C,A,I,C,M,C,C,C,A,I,C,Q,E,E,G,C,A,C,S,E,E,G,C,A,C,S,E,E,G,C,A,C,Q,C,E,I,C,C,C,I,C,E,I,A,C,A,S,C,E,I,C,E,C,M,C,E,I,C,E,C,G,C,E,C,E,C,C,A,O,A,E,G,C,C,C,C,E,C,A,C,C,G,A,C,C,A,C,K,A,K,C,yC,C,C,A,I,C,K,C,I,U,C,G,C,C,A,I,C,O,C,G,E,G,A,E,I,C,K,C,A,C,A,A,K,E,C,O,I,C,U,E,A,C,A,A,M,E,C,C,E,E,U,A,E,I,C,O,C,C,A,E,I,C,A,O,C,I,C,M,C,C,A,C,E,E,U,A,E,I,C,O,C,C,A,I,C,M,C,C,C,A,I,C,G,C,C,A,C,A,A,M,C,C,C,C,C,E,E,O,A,E,I,C,C,A,E,C,C,C,E,O,A,E,G,C,A,C,C,A,E,M,A,E,G,C,C,C,A,U,C,C,O,C,C,I,C,A,E,C,C,E,I,C,A,I,I,E,C,A,C,E,C,E,A,C,A,I,E,E,E,C,G,C,E,I,C,C,E,C,E,C,E,A,C,C,E,I,C,C,C,C,C,C,E,C,C,C,C,C,C,I,C,G,E,C,E,C,C,G,C,C,A,A,I,C,G,G,G,I,C,A,M,E,A,C,A,A,O,I,A,C,A,A,M,E,C,G,I,C,Q,C,O,A,I,C,Q,E,E,E,C,A,O,C,Q,C,K,C,U,C,C,C,I,C,A,C,C,E,C,C,E,C,G,C,A,C,C,C,C,C,C,C,G,C,E,C,E,G,C,C,M,E,C,A,C,C,E,C,C,E,E,E,A,C,G,C,M,E,A,C,A,A,S,C,C,C,C,C,E,E,O,A,E,I,E,G,E,C,A,C,C,M,A,E,G,A,C,C,E,C,M,E,C,A,I,E,I,C,E,G,C,A,U,C,C,C,I,C,A,I,I,E,C,A,C,E,C,C,C,K,C,E,C,E,A,C,A,I,C,M,E,G,I,C,A,M,E,C,A,I,E,E,E,C,G,C,E,I,C,C,K,C,E,C,E,A,C,C,A,C,E,C,E,O,C,C,I,C,M,C,I,C,M,C,G,C,C,C,A,C,C,E,C,M,E,E,E,C,A,A,C,C,A,E,C,I,C,C,A,C,C,K,C,C,C,C,G,C,I,C,S,C,M,A,K,C,uC,C,C,A,O,I,C,S,C,E,C,A,A,C,C,C,C,C,C,C,M,C,E,E,O,A,E,G,E,C,C,A,C,O,C,I,U,C,G,C,A,C,C,C,C,M,C,C,C,C,G,C,E,E,O,A,E,E,C,G,C,C,A,I,C,Q,C,M,A,K,C,6B,C,C,A,O,I,C,S,C,G,A,C,C,E,C,O,E,C,A,C,C,A,C,C,I,E,C,O,I,C,U,C,I,U,C,I,C,S,C,C,A,C,A,A,O,E,C,I,C,S,E,E,C,C,C,A,E,K,A,E,I,C,K,C,A,C,A,A,U,C,C,C,C,G,U,C,Q,C,W,C,Q,C,W,C,C,C,I,C,A,O,E,E,E,A,I,E,E,E,A,E,E,A,A,E,C,C,C,A,C,A,C,M,C,G,C,I,C,O,C,C,A,E,A,G,C,I,C,G,C,A,E,A,M,C,I,C,M,C,A,E,A,Q,C,I,C,Q,C,A,E,A,M,C,E,E,A,E,C,G,C,E,E,A,E,C,M,C,E,E,A,K,C,G,C,E,E,A,K,C,G,C,I,C,S,C,A,C,C,A,C,A,A,E,M,C,E,I,C,C,C,A,E,E,E,E,E,C,E,A,E,U,A,E,G,C,C,G,E,E,E,A,I,A,A,E,G,C,C,C,E,C,C,C,A,C,A,C,E,A,C,C,G,C,E,A,C,C,C,E,C,E,C,C,C,A,C,A,C,E,A,C,C,G,C,E,A,C,C,C,E,C,E,C,C,C,A,C,A,C,E,A,C,C,G,C,E,A,C,C,C,E,C,E,C,C,C,A,C,A,C,E,A,A,C,G,C,E,A,C,C,C,E,C,I,C,C,C,A,C,A,C,E,A,C,C,G,C,E,A,C,C,C,E,C,I,C,C,C,A,C,A,C,E,A,C,C,G,C,E,A,C,C,C,E,C,I,C,C,C,A,C,A,C,E,A,C,C,G,C,E,A,C,C,C,E,C,I,C,C,C,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,E,A,A,E,O,A,A,C,C,C,C,C,E,E,E,E,E,C,C,G,C,G,C,C,G,C,A,C,C,C,C,C,I,E,C,C,A,I,I,C,C,C,C,C,C,E,G,G,C,C,E,C,A,O,G,C,E,C,K,C,M,C,I,Q,C,A,I,S,C,A,I,Q,C,A,I,Q,C,G,O,I,C,C,A,E,E,G,A,A,I,E,A,G,E,C,C,uB,E,E,C,C,A,A,C,M,E,G,C,C,kB,C,A,E,G,K,C,C,M,E,E,C,C,A,A,E,G,E,C,E,C,C,C,A,C,C,A,C,C,C,C,C,A,C,C,I,C,c,C,E,E,C,A,C,S,E,E,E,G,G,Q,E,C,C,C,C,A,A,C,A,gC,O,c,C,E,a,6I,I,E,E,C,C,E,M,E,E,C,C,G,K,S,E,C,C,C,E,E,C,I,E,A,E,G,G,M,C,A,G,I,E,A,G,C,E,C,G,G,C,C,A,Q,E,O,E,C,E,C,A,E,E,C,C,G,E,C,E,C,Y,C,A,E,E,C,C,G,A,E,C,A,C,I,C,O,C,G,E,C,E,C,I,C,E,G,A,C,A,C,E,A,C,C,C,C,I,A,C,A,C,E,C,I,C,C,I,C,A,G,K,Q,U,C,C,I,E,C,iB,C,A,E,I,A,C,A,I,I,C,C,C,C,C,C,E,G,G,C,C,E,C,A,G,C,C,C,A,C,C,C,E,C,C,C,A,G,C,C,C,E,A,C,C,C,C,C,C,A,O,E,A,G,A,C,C,M,S,G,E,C,O,E,A,O,E,G,G,C,A,O,E,E,G,E,C,E,C,G,C,C,C,I,O,G,E,C,C,C,Q,C,A,I,Q,C,A,I,Q,C,O,E,G,K,E,A,C,I,Q,C,O,M,C,G,E,C,K,E,A,C,I,Q,C,O,I,C,S,C,E,G,C,C,A,Q,C,A,C,I,E,E,I,C,I,C,G,E,C,C,G,E,E,E,E,C,A,I,C,E,E,C,C,A,C,E,A,C,E,E,C,C,G,C,C,A,E,E,C,C,C,C,C,E,C,C,A,C,A,C,I,C,I,C,C,I,C,A,C,A,M,C,uB,C,A,C,A,A,S,E,C,C,C,E,A,O,G,E,A,G,C,G,C,C,A,E,C,C,K,E,C,C,C,C,C,E,A,I,E,E,C,A,C,C,I,A,C,C,C,C,C,A,E,C,E,C,C,E,S,G,G,C,K,G,G,C,K,G,E,E,E,E,A,K,C,C,uC,E,E,G,C,A,C,A,C,A,C,G,I,G,E,E,C,C,E,A,G,W,E,G,S,A,I,E,C,C,C,C,C,A,A,C,C,I,C,A,E,C,E,C,E,I,C,A,A,C,C,A,A,C,G,C,A,C,K,E,E,C,C,A,C,A,E,I,C,A,C,Q,E,E,O,C,C,C,C,A,E,K,C,E,C,G,I,A,C,E,I,C,A,I,C,C,G,C,C,A,A,O,G,C,E,C,kB,C,E,A,G,M,C,G,I,C,A,C,A,I,e,C,A,I,gB,C,E,A,G,O,C,G,I,C,A,C,A,Q,E,A,G,E,C,G,A,I,C,C,A,G,E,gB,A,E,E,G,G,C,C,C,C,A,A,G,C,E,G,C,M,C,E,G,A,A,C,C,C,C,C,C,E,Y,E,C,E,E,gB,A,E,E,G,W,C,C,C,C,A,C,C,A,G,C,E,G,E,C,C,C,C,A,C,C,C,E,G,C,E,G,E,C,E,E,E,E,A,C,A,A,A,C,C,A,C,M,C,E,E,I,W,C,E,O,A,C,E,M,C,E,E,C,E,A,a,C,A,C,A,C,E,S,C,E,E,M,A,C,E,E,G,W,C,E,O,A,C,C,C,C,C,C,C,C,C,E,E,C,C,A,C,I,a,C,C,Q,C,E,E,G,C,C,C,C,A,C,A,C,A,E,mB,C,E,O,A,C,C,C,C,C,E,I,E,A,A,I,E,A,C,C,C,C,A,C,G,E,C,E,C,C,A,C,C,C,A,E,G,C,C,A,W,O,C,E,K,a,C,C,K,C,E,G,U,C,E,C,C,A,E,G,C,C,A,E,S,S,C,E,K,gB,C,C,K,C,E,G,U,C,E,C,A,C,A,C,I,E,C,C,I,C,K,C,A,M,C,M,C,C,M,C,C,E,G,C,C,C,E,A,C,G,M,E,C,M,C,S,C,G,C,C,I,A,K,C,K,C,C,A,G,A,I,C,K,C,I,E,G,G,C,Y,C,I,C,A,S,C,K,C,C,A,E,M,A,C,Y,C,I,A,K,C,C,C,A,I,C,C,M,A,A,E,G,C,Q,C,A,C,A,A,E,G,C,C,G,A,C,C,C,G,E,C,C,A,C,M,C,C,C,E,A,C,A,A,C,E,e,C,E,O,A,C,E,E,E,E,A,K,C,A,I,A,C,A,A,C,6C,C,uB,C,C,S,C,4B,C,I,C,M,C,C,C,C,A,A,C,A,C,E,a,C,E,O,A,C,C,C,C,C,E,A,G,A,G,C,E,G,C,E,E,C,C,A,G,C,E,C,E,C,C,E,E,E,A,K,A,C,A,C,G,G,E,C,A,C,A,A,G,G,C,E,C,G,E,C,A,A,C,C,uB,E,E,I,S,C,C,uB,C,W,E,C,C,A,A,C,I,qO,I,E,E,C,C,Q,S,E,C,C,C,C,C,E,A,G,K,Q,U,E,M,A,E,E,E,A,U,C,G,E,A,C,C,C,A,C,O,E,O,G,E,A,C,E,E,C,4B,C,C,C,I,E,I,A,U,C,C,E,G,G,E,C,C,A,C,C,C,A,E,C,C,A,E,E,I,C,C,C,C,C,C,E,I,E,C,C,E,C,A,C,C,C,C,C,Q,C,E,G,M,C,E,E,C,C,A,C,C,C,C,C,A,G,C,C,A,C,M,E,A,C,E,C,C,A,c,A,G,E,G,sB,C,G,C,M,C,E,C,A,E,C,C,K,E,C,C,C,E,C,M,E,E,G,A,C,C,A,C,A,E,C,C,K,E,C,C,C,M,E,Q,E,O,I,C,A,C,C,G,E,C,kB,C,E,A,C,Q,S,G,E,C,C,C,G,G,C,C,C,C,C,C,E,E,I,A,G,E,C,E,G,C,C,C,E,C,A,C,A,C,C,Q,C,E,E,K,O,C,E,O,A,C,C,C,E,C,M,A,E,E,G,A,C,C,A,C,C,A,C,C,A,W,C,E,E,Q,G,C,E,O,A,C,E,E,K,C,C,G,E,E,A,C,C,G,Q,U,A,C,A,C,A,C,G,E,W,O,C,A,S,E,C,E,E,E,E,E,C,E,C,C,A,C,A,G,A,C,A,I,I,C,C,C,C,C,C,E,G,G,C,C,E,C,C,I,C,C,C,C,C,C,C,A,G,C,C,C,A,I,C,A,C,C,C,C,C,C,C,C,G,C,A,C,C,A,A,O,C,C,A,I,C,I,E,C,C,C,C,C,A,E,I,E,E,C,E,C,C,C,A,A,E,M,A,E,G,E,C,E,G,C,6B,C,gB,C,C,M,C,I,U,C,G,E,C,G,C,E,I,E,C,E,C,C,C,C,A,A,I,E,I,A,U,C,G,G,C,C,E,E,I,A,C,C,C,C,A,E,E,A,E,C,C,A,E,E,C,C,E,C,G,C,C,A,E,G,C,A,E,C,C,C,A,A,E,E,C,A,E,A,C,C,C,I,C,E,E,I,E,C,E,O,A,A,C,E,G,G,I,C,E,G,A,C,A,C,E,A,C,C,C,C,C,E,O,C,C,C,C,C,I,C,E,C,A,C,A,C,E,U,C,E,O,A,C,G,M,A,A,E,G,C,E,C,A,C,C,A,C,C,I,E,C,C,A,C,C,A,E,G,C,C,C,G,A,C,A,C,E,S,C,E,O,A,C,C,C,A,C,C,E,E,E,E,E,C,E,C,C,C,A,I,I,E,G,A,E,C,C,G,G,E,A,C,E,E,M,A,G,E,G,8B,C,gB,C,C,M,C,E,G,G,C,E,G,G,C,M,C,E,C,A,C,A,E,E,G,A,E,C,I,C,C,A,E,C,C,A,C,A,C,G,C,C,C,A,E,C,C,G,G,C,A,C,E,A,C,A,C,A,C,C,c,C,E,O,A,C,E,I,C,C,E,C,E,A,C,C,A,O,C,C,C,C,A,K,E,G,O,C,I,C,C,C,E,E,C,E,M,C,C,C,C,A,M,I,C,C,C,C,E,A,C,W,C,E,O,A,C,C,C,E,C,M,A,E,E,E,C,A,E,C,A,C,A,C,C,A,Y,C,E,O,A,C,C,C,E,C,M,A,E,E,E,C,A,E,C,A,E,C,C,0M,I,E,E,C,C,Q,E,E,C,C,G,K,E,E,I,C,C,C,C,A,E,E,I,C,C,C,C,A,S,E,C,C,C,E,E,K,O,G,E,C,C,C,O,C,A,O,C,I,C,A,Q,C,M,C,E,E,c,A,E,M,C,S,C,G,E,C,Q,C,G,C,M,C,G,C,C,C,A,C,C,c,A,E,G,C,C,O,U,K,I,Q,G,U,C,G,C,M,C,G,E,C,C,E,C,E,G,C,C,A,Q,C,G,C,G,E,E,C,E,G,G,A,K,C,c,C,C,A,G,G,G,C,C,C,C,E,A,G,E,E,C,C,C,C,M,C,M,C,E,G,M,C,C,C,C,C,A,O,M,C,G,A,E,C,C,E,C,C,C,C,E,E,c,A,G,E,C,E,2B,E,C,C,O,C,C,C,G,C,M,C,G,C,A,C,A,C,C,A,E,c,A,G,E,G,yB,C,G,C,M,C,E,C,A,E,C,C,K,E,C,C,C,E,A,I,E,E,E,A,G,A,C,C,A,C,G,C,E,E,M,A,E,G,E,C,C,iC,C,e,C,C,K,C,U,C,S,C,S,O,E,C,C,A,C,A,C,A,E,E,C,K,C,E,O,A,C,C,A,C,E,G,C,E,E,C,C,G,C,G,C,C,A,E,G,G,C,E,E,I,C,E,C,C,C,M,C,C,E,E,M,A,E,G,E,E,C,C,A,E,Q,C,e,C,C,S,C,U,C,K,C,U,C,K,C,E,C,C,A,E,C,E,A,G,A,C,A,C,A,C,A,C,E,C,E,C,A,C,A,C,A,C,A,C,C,C,A,C,A,C,A,C,A,C,A,C,C,E,A,C,K,C,E,O,A,A,C,C,C,E,C,G,E,E,C,C,I,C,E,C,C,A,E,G,G,C,E,E,I,C,E,C,C,C,A,E,G,A,C,C,G,C,C,C,C,E,A,E,G,A,C,C,C,A,E,A,C,E,A,C,C,M,A,E,G,E,A,G,M,C,e,C,C,S,C,Q,C,K,C,U,C,K,C,E,C,C,A,C,C,A,E,C,E,C,A,C,A,C,A,C,A,C,C,C,A,C,C,E,A,C,A,E,E,M,A,E,E,E,C,E,O,C,e,C,C,S,C,Q,C,K,C,U,C,K,C,E,C,C,A,E,A,C,C,C,C,A,I,C,E,K,E,A,C,C,C,C,C,O,A,E,E,C,E,C,G,C,C,A,C,G,C,I,C,C,E,E,G,E,C,C,C,A,C,A,C,A,C,C,C,C,C,A,C,Q,C,E,E,M,C,C,E,I,E,A,K,a,C,A,S,E,C,E,G,A,K,Q,U,C,C,I,E,I,C,C,A,I,I,C,I,E,G,A,C,A,C,C,A,E,C,C,C,A,G,C,C,C,E,C,A,C,C,A,O,M,C,G,A,G,C,C,E,E,E,C,A,E,C,C,A,K,E,C,C,C,E,E,K,O,G,E,C,C,C,O,C,M,C,E,E,c,A,E,G,C,C,O,U,K,I,Q,G,U,C,G,C,M,C,G,E,C,C,E,C,E,G,C,C,A,Q,C,M,C,E,E,c,A,E,M,C,S,C,G,E,C,Q,C,G,C,M,C,G,C,C,C,A,C,C,c,A,E,G,C,C,O,U,G,E,I,Q,E,C,A,U,C,G,C,M,C,G,C,C,C,C,C,C,A,Q,C,G,C,G,E,E,C,E,G,G,A,K,C,c,C,C,A,O,E,M,C,A,G,E,C,A,A,C,C,C,G,C,C,C,C,E,E,c,A,G,E,C,E,sB,E,C,C,O,C,C,C,G,C,M,C,G,C,A,C,A,C,C,A,E,c,A,G,E,G,oB,C,G,C,M,C,E,C,A,E,C,C,K,E,C,E,I,A,E,E,C,C,G,C,G,C,C,A,G,I,C,C,E,E,G,I,U,C,E,C,C,A,I,E,C,C,G,K,C,E,C,C,A,E,C,K,C,C,E,A,G,A,G,C,C,C,C,A,I,E,I,A,U,C,E,C,K,C,C,C,C,A,I,I,C,C,C,C,C,C,E,I,E,C,C,E,C,C,I,E,C,C,A,C,C,A,C,C,C,C,C,Q,C,E,C,Q,C,E,E,C,C,A,C,C,C,C,C,A,A,O,C,C,A,E,E,C,K,C,E,E,K,I,C,E,E,M,E,C,E,O,A,C,C,C,K,E,E,E,G,C,C,A,A,C,A,C,A,C,M,C,E,O,A,C,A,C,C,E,E,E,E,A,E,E,A,C,E,C,G,C,C,A,Q,C,E,C,C,A,G,I,E,A,E,E,E,E,E,C,C,E,C,E,G,C,A,C,C,C,I,C,I,E,E,C,C,I,C,E,C,C,A,I,C,E,E,M,A,E,C,C,G,E,A,I,E,C,C,qB,E,E,G,I,C,C,e,C,C,S,C,S,C,K,C,U,C,K,C,E,C,C,A,E,A,I,E,C,C,C,A,A,G,E,A,G,C,A,E,A,I,C,C,I,C,C,C,C,E,C,C,O,C,E,E,M,I,C,E,O,A,C,E,C,G,E,C,A,E,C,C,O,A,E,G,E,W,A,E,G,E,A,C,C,A,C,A,C,C,C,C,C,C,A,M,C,C,C,C,A,K,E,I,M,C,G,C,C,C,E,E,E,E,K,C,C,C,C,A,M,E,E,C,I,E,A,G,C,A,C,A,I,C,C,C,I,C,2B,O,c,C,E,a,iD,I,E,E,C,C,Q,E,E,C,C,G,K,E,E,C,C,Q,E,M,sD,C,A,E,I,A,C,A,E,E,I,C,C,C,C,A,E,G,G,C,E,C,C,A,E,Y,C,E,O,A,C,E,G,C,E,C,E,A,A,E,Q,A,E,G,E,C,A,C,C,A,A,E,Q,A,E,G,E,A,C,C,A,C,A,C,I,G,E,A,C,A,C,E,I,C,E,G,A,C,C,C,A,G,C,C,A,A,G,C,A,I,C,C,C,C,A,C,C,E,G,G,G,C,C,C,C,C,C,A,E,C,A,E,C,C,C,C,A,C,E,I,C,E,C,C,C,E,C,C,U,C,E,O,A,C,E,G,C,E,E,C,C,A,C,C,I,C,C,C,C,C,C,E,G,G,C,C,E,C,A,G,E,C,E,A,A,C,E,K,C,A,C,E,G,E,E,E,E,C,E,C,A,C,C,A,C,G,I,C,C,C,C,C,C,E,M,A,C,C,E,C,A,C,C,C,C,C,C,C,C,M,C,C,C,C,A,A,I,E,C,C,E,A,C,A,G,G,C,E,E,c,A,E,A,I,E,E,C,oB,C,C,Q,C,G,C,C,C,A,C,A,C,A,C,A,C,A,C,C,A,O,C,C,I,C,iH,I,E,E,C,C,Q,E,O,K,C,E,O,A,C,E,G,G,C,E,A,E,Y,A,E,M,C,I,C,E,G,K,C,C,A,C,A,C,E,Y,C,E,O,A,C,E,G,I,E,I,C,I,C,C,E,E,Q,A,E,I,A,C,C,M,C,Q,C,A,C,A,sG,I,E,E,C,C,G,K,E,Y,C,E,I,A,M,A,A,G,G,C,C,G,A,A,A,a,C,C,C,C,C,C,C,I,C,C,C,A,C,E,G,E,C,C,c,A,E,I,C,S,O,E,C,C,C,A,C,A,A,E,G,C,c,E,C,I,E,A,I,C,C,C,A,E,M,I,C,O,C,G,C,I,C,M,C,I,C,C,C,A,C,A,C,A,C,yJ,I,E,E,C,C,Q,E,E,C,C,G,K,S,E,C,C,C,C,C,C,C,C,A,C,E,G,Y,G,G,G,kB,G,E,C,G,C,C,C,C,C,A,I,I,C,C,E,C,C,A,C,C,A,E,G,G,E,C,C,C,C,E,C,E,E,C,C,C,C,A,A,C,E,C,A,O,C,C,A,M,A,S,E,C,E,E,E,C,G,C,E,C,C,A,C,A,C,A,A,A,S,E,C,C,C,E,A,I,E,C,G,A,E,E,G,W,C,K,A,C,C,I,E,C,E,A,E,Q,A,E,E,I,G,C,C,A,E,E,C,A,C,A,C,C,C,A,K,C,C,E,G,G,E,C,I,C,C,C,C,C,E,C,C,A,G,C,E,C,E,C,C,C,E,I,A,C,C,C,C,A,S,A,A,I,E,I,C,A,E,E,E,C,A,G,C,C,G,C,A,C,C,C,I,A,E,A,C,C,A,E,I,C,A,I,C,E,C,I,C,A,C,C,C,I,A,E,A,C,C,A,E,K,A,C,I,A,G,C,I,C,A,C,C,C,I,A,E,A,C,C,A,E,K,C,C,G,A,C,C,I,C,A,C,C,C,I,A,C,C,C,E,K,gB,C,C,C,C,C,E,G,A,C,E,A,C,C,A,K,O,C,C,C,C,C,E,G,A,G,C,C,I,A,A,G,C,C,C,C,G,E,G,G,A,C,C,C,E,E,K,I,C,C,C,C,C,E,G,A,G,C,C,I,A,A,I,E,C,A,C,C,C,E,C,C,G,C,A,C,A,C,C,A,C,G,A,I,C,C,C,C,C,C,E,C,E,C,C,I,A,E,C,C,C,C,C,A,C,E,C,I,C,C,C,C,I,A,A,C,C,E,E,K,a,C,C,C,E,G,A,E,C,A,C,C,C,C,A,M,A,A,E,C,E,A,C,C,A,A,C,G,C,A,C,A,E,A,C,A,A,G,I,E,C,G,A,G,E,C,O,A,C,C,E,E,K,S,C,C,C,C,C,E,E,E,C,E,A,C,A,C,A,O,A,A,G,G,A,M,C,G,A,M,A,C,C,E,E,K,Y,C,C,C,C,C,E,E,E,C,E,A,C,A,C,A,O,A,A,G,G,A,E,C,C,E,E,I,C,K,C,C,C,C,C,E,E,E,C,E,A,C,A,C,A,O,A,A,E,I,A,C,G,C,A,A,C,M,C,C,A,I,C,I,E,C,C,C,E,C,E,C,C,c,A,E,Q,E,O,E,C,C,oB,C,K,C,G,A,C,C,E,E,A,I,A,C,E,E,e,A,E,G,C,C,A,C,A,C,C,Q,C,I,A,C,C,E,E,E,C,A,C,G,I,C,C,C,C,C,C,E,C,K,C,C,E,C,C,I,C,C,E,C,S,C,C,C,C,A,G,C,C,I,A,E,A,I,A,C,C,C,C,K,G,C,C,K,A,E,A,I,A,C,C,E,C,C,A,I,C,A,C,C,I,A,C,G,C,A,C,A,I,C,C,I,G,C,M,C,A,C,C,C,M,A,C,C,E,C,A,I,E,A,E,C,S,C,C,C,C,A,C,E,E,c,A,E,C,C,E,C,K,E,C,M,C,C,A,C,C,M,A,C,uB,C,K,C,G,A,C,C,E,E,E,K,A,C,E,G,C,A,C,C,C,E,C,C,C,E,G,C,C,A,C,A,C,C,I,A,C,G,C,C,C,A,I,C,A,C,C,I,A,C,C,E,C,C,C,A,G,C,C,E,C,A,C,C,I,A,C,C,E,C,A,C,A,G,C,C,E,C,A,C,C,I,A,C,G,C,C,A,E,E,C,A,C,I,C,C,I,A,C,C,E,E,C,A,I,C,A,C,C,I,A,C,C,A,E,C,C,A,G,C,C,E,C,A,C,C,I,A,C,G,C,A,C,A,I,C,A,A,C,M,I,U,C,E,C,A,E,C,C,C,W,C,M,C,M,C,C,K,C,C,Q,A,C,A,C,C,C,C,C,C,C,C,A,E,C,E,E,c,A,G,E,C,E,0B,E,E,E,E,A,E,C,C,E,K,C,E,C,C,C,C,C,G,C,E,O,C,A,C,Q,A,C,C,C,A,C,C,C,C,C,C,E,M,A,U,E,C,G,C,E,A,E,c,A,E,Q,E,O,E,U,C,6B,C,c,C,G,E,I,A,C,E,C,A,C,A,C,E,E,G,C,A,A,C,A,M,C,A,C,C,E,E,E,A,E,A,A,C,E,C,A,C,C,C,A,E,G,C,C,M,C,E,E,Q,I,C,E,O,A,C,C,C,E,C,M,A,A,A,E,E,G,A,G,A,C,A,A,C,C,A,C,A,A,G,A,G,E,C,A,A,C,C,I,C,Y,C,G,M,A,C,A,C,W,C,C,C,G,K,A,C,A,C,C,E,C,A,I,C,C,A,M,A,C,A,K,C,C,C,A,M,A,C,C,A,C,G,C,E,C,A,C,A,C,E,gB,C,E,O,A,C,C,C,E,K,E,E,E,A,E,C,E,C,A,C,C,C,A,I,2H,E,E,e,C,E,C,C,S,E,E,A,e,C,E,C,C,S,E,E,C,A,C,Q,E,E,A,C,C,Q,E,E,C,C,Q,S,A,E,C,E,O,A,A,K,C,C,Q,A,C,C,C,E,C,A,E,E,M,A,E,I,E,G,C,E,A,I,K,C,kC,C,W,C,C,A,I,E,E,C,E,C,A,K,C,G,C,C,C,C,C,W,E,C,A,C,E,E,M,A,E,M,G,G,K,E,G,E,C,K,gB,E,E,C,C,I,mB,C,C,I,C,U,C,C,C,K,I,C,S,C,C,C,A,C,E,E,M,A,E,O,G,G,C,E,C,C,S,E,E,C,0B,C,6C,C,uB,C,C,S,C,S,C,C,C,A,I,E,A,C,K,C,C,A,E,C,K,C,A,O,C,M,C,M,C,C,C,C,E,C,M,C,A,C,A,C,A,G,E,E,E,C,A,E,C,E,K,C,E,A,K,A,A,C,C,I,E,G,C,C,A,G,C,E,K,C,C,C,C,E,C,C,e,C,C,A,M,C,A,A,M,C,C,C,O,C,G,C,C,C,C,A,A,I,E,C,I,E,C,C,C,E,E,I,G,C,A,C,C,O,A,C,C,O,C,E,C,E,C,G,E,K,A,C,C,G,C,E,C,M,C,C,A,I,E,E,A,C,G,C,A,O,G,C,C,C,I,A,C,M,C,I,C,I,A,C,C,A,C,E,E,A,C,A,I,O,C,C,E,K,A,C,E,A,E,A,C,E,C,O,C,G,E,A,G,E,A,E,C,E,E,C,A,E,C,E,C,C,S,A,E,mB,C,W,C,C,A,C,A,C,C,A,E,E,C,E,O,C,G,E,A,E,C,E,C,C,S,A,E,iB,C,S,C,C,A,C,A,C,C,A,E,I,C,A,U,C,A,I,A,E,E,A,E,E,E,I,I,E,C,C,A,E,E,E,O,I,E,E,C,A,E,K,C,C,I,C,E,E,K,E,C,C,C,C,M,C,C,E,G,C,C,C,E,C,E,E,C,C,K,C,E,E,A,E,C,A,O,K,C,O,C,K,A,C,C,C,C,C,E,C,C,K,C,C,A,C,C,E,C,C,C,C,C,C,A,C,A,C,A,C,A,C,A,E,E,E,C,A,E,E,A,C,M,C,A,I,C,E,A,E,A,G,C,A,E,A,I,O,E,C,A,A,M,E,C,E,K,E,G,A,C,C,C,A,A,C,G,A,E,E,E,E,G,C,A,C,I,E,I,C,S,C,E,E,I,C,E,G,G,C,C,A,E,G,C,C,C,C,C,A,C,A,E,G,C,C,C,E,C,C,I,C,C,A,E,E,A,A,C,C,C,A,E,A,C,C,A,C,K,C,G,E,A,G,C,M,G,C,C,kB,C,E,G,C,E,A,C,A,E,E,Q,A,E,C,E,E,U,A,E,G,C,A,C,A,E,K,O,U,M,U,G,I,A,C,C,C,C,A,A,A,M,E,C,E,A,C,E,C,C,S,A,E,mB,C,c,C,C,O,C,E,C,G,C,C,Q,C,I,I,C,C,C,C,C,A,C,A,A,C,C,C,A,E,E,A,C,O,C,A,I,C,C,C,E,A,K,C,C,U,iB,U,G,I,A,C,C,C,A,C,C,E,C,C,A,A,C,A,A,C,A,C,A,A,E,E,C,E,K,C,A,I,C,C,C,C,C,A,C,A,A,C,A,A,C,A,A,C,A,A,A,C,A,E,Y,C,E,I,E,E,C,C,C,A,C,A,E,G,C,E,C,E,G,I,M,A,C,C,C,E,C,M,E,E,C,C,C,G,C,C,C,qI,I,E,E,C,C,Q,E,E,C,C,Q,E,E,C,C,G,K,E,E,C,C,G,K,E,E,C,C,Q,E,E,C,C,G,K,E,G,E,U,E,A,G,C,A,E,A,I,E,C,iC,C,G,C,C,A,E,A,I,E,C,wB,A,G,C,C,A,G,E,C,E,C,C,U,E,C,C,C,E,G,K,E,I,E,E,C,A,I,C,G,G,A,C,A,C,C,G,E,C,A,K,C,c,C,C,A,O,I,E,G,C,I,C,C,C,a,C,C,C,C,C,E,Y,C,A,C,C,C,C,C,C,A,A,C,E,E,Y,A,E,C,C,C,C,C,C,C,A,C,C,C,C,C,A,C,C,A,C,C,C,A,A,E,W,A,E,E,G,I,C,uB,C,C,E,C,G,A,E,E,E,C,Y,C,Q,C,E,E,A,C,C,C,I,A,M,E,C,E,K,I,E,G,C,O,0B,C,C,C,C,I,C,I,E,G,C,A,A,C,A,A,C,I,I,E,C,E,O,A,K,C,K,C,G,A,C,C,C,E,G,C,E,E,E,E,C,A,I,C,G,G,A,C,A,C,C,G,E,C,A,K,C,c,C,C,A,O,I,E,C,E,E,E,C,C,C,A,A,C,C,C,C,C,A,A,M,E,C,E,K,I,E,G,C,O,yB,C,C,C,C,I,C,I,E,G,C,A,A,C,A,A,C,A,A,I,A,E,C,K,A,C,C,K,C,C,M,U,gB,C,A,C,A,E,I,M,C,A,E,C,I,I,A,A,G,A,A,A,U,G,C,C,C,I,C,C,A,C,C,E,C,A,I,C,C,C,A,E,E,E,C,C,C,C,E,G,C,C,A,A,I,I,C,C,C,A,E,A,I,I,K,G,C,C,C,C,A,E,E,E,C,C,C,C,C,A,C,C,U,C,G,E,A,G,C,C,C,C,C,A,A,E,C,C,C,C,C,A,C,E,C,A,C,C,A,C,A,A,W,C,C,C,C,C,E,E,M,A,E,C,I,C,C,C,A,C,0B,C,uB,C,C,S,C,qC,C,C,C,A,I,C,C,A,C,C,I,C,E,C,A,I,C,C,C,M,E,C,O,I,C,C,C,A,A,C,A,A,W,E,C,C,E,E,M,A,E,C,I,C,S,C,W,C,W,C,C,C,C,A,C,A,C,A,S,E,C,E,G,G,C,E,A,E,I,E,A,K,C,mC,C,C,A,O,E,I,O,E,C,A,C,C,A,E,E,C,c,C,C,O,I,A,A,G,A,A,G,A,A,A,E,C,A,A,G,A,A,G,A,A,C,E,A,G,A,A,G,A,A,G,A,A,G,A,A,G,A,A,G,A,A,G,A,A,G,A,A,A,K,G,E,C,O,I,C,C,C,A,A,C,A,A,I,G,C,C,C,C,I,C,C,C,A,C,M,C,E,C,A,A,C,C,E,I,E,Q,A,A,I,E,I,C,C,C,A,C,I,C,A,I,U,C,I,C,C,C,A,C,A,C,A,A,I,I,C,C,C,C,G,I,E,A,E,E,E,C,C,A,C,M,E,I,C,C,C,A,A,C,K,O,E,C,A,Q,E,A,O,E,E,C,C,C,C,C,A,C,C,E,E,W,A,E,G,C,C,C,C,C,C,C,A,C,Y,C,K,G,I,S,U,C,C,G,C,C,C,A,C,E,E,C,C,C,C,C,A,C,0B,C,K,G,Q,E,A,O,E,E,C,C,C,C,A,C,C,C,E,E,W,A,E,I,C,S,C,I,A,C,C,C,C,C,C,C,A,C,kB,C,K,M,A,K,C,c,C,A,C,A,A,O,E,C,O,I,C,C,A,I,C,C,C,A,A,C,A,I,M,E,Q,A,I,C,C,C,A,C,C,G,C,C,A,C,C,A,I,C,O,E,C,C,K,C,A,K,A,C,A,A,I,M,C,C,C,C,I,E,A,I,E,A,E,C,C,A,A,I,C,C,C,A,C,M,C,G,G,C,O,E,A,C,A,A,I,O,E,C,I,E,K,C,C,M,C,C,C,C,I,C,C,C,A,C,C,A,O,I,C,C,C,A,E,C,E,K,Q,C,C,A,M,E,C,E,E,Y,A,E,C,E,E,W,A,E,I,C,C,C,A,C,C,C,C,A,C,C,I,C,S,E,C,C,C,iB,C,C,M,C,C,A,I,E,C,C,c,C,E,I,C,C,C,A,E,C,C,C,c,C,C,I,C,C,C,A,C,C,I,C,I,E,C,C,C,gB,C,C,M,C,I,C,I,C,O,C,C,A,C,C,A,K,C,G,C,C,C,C,O,I,C,O,C,E,C,U,E,C,A,C,A,A,S,C,C,C,C,C,C,I,C,C,A,C,C,M,C,G,A,C,U,E,C,C,M,C,E,C,A,E,C,C,Q,E,C,I,C,C,C,A,C,C,C,A,C,A,A,C,M,C,Q,C,E,C,I,E,I,C,A,O,C,A,E,E,I,C,I,C,G,E,C,C,A,A,C,A,C,I,C,I,C,G,E,A,G,E,E,C,C,I,C,C,I,E,C,A,C,I,C,A,A,E,I,C,K,C,C,E,C,A,C,E,C,A,C,I,E,E,C,A,A,E,I,C,K,M,E,I,E,C,A,C,A,C,A,C,A,A,C,A,A,I,W,E,C,O,I,C,C,C,A,E,I,A,C,A,A,c,C,C,C,C,C,C,C,E,E,c,A,E,C,E,K,C,A,G,C,C,uC,C,U,C,Y,C,C,A,I,C,C,C,A,C,C,E,E,C,E,E,C,A,A,C,A,A,I,A,S,E,C,O,I,C,C,C,A,A,C,A,A,I,S,C,C,C,C,I,C,C,A,C,C,C,C,C,C,A,G,C,A,2B,E,C,M,C,C,I,C,C,C,A,A,C,A,A,I,2B,C,C,C,C,I,C,C,C,A,C,C,C,C,C,A,G,C,A,O,E,C,O,I,C,C,C,A,A,C,A,A,I,O,C,C,C,C,C,E,E,c,A,E,G,C,C,E,wB,C,S,C,G,I,A,C,A,C,A,A,C,C,C,C,A,I,C,C,W,E,C,O,I,C,C,C,A,E,I,A,C,A,A,I,a,C,C,C,C,I,C,C,C,A,C,C,C,A,I,G,C,O,E,C,O,I,C,C,C,A,E,I,A,C,A,A,I,W,C,C,C,C,I,C,C,C,A,C,C,C,A,I,C,C,O,E,C,O,I,C,C,C,A,E,I,A,C,A,A,I,S,C,C,C,C,I,C,C,C,A,C,C,C,A,G,C,A,U,E,C,O,I,C,C,C,A,E,C,C,A,I,U,C,A,C,A,C,C,I,C,C,C,A,C,C,C,A,G,C,Q,C,C,C,I,C,C,A,C,C,M,C,G,A,C,C,E,C,C,C,A,E,E,G,C,A,C,C,C,A,E,E,E,C,C,C,C,C,A,C,C,C,C,A,I,C,C,C,A,C,E,C,A,I,C,C,A,C,C,I,E,C,C,C,C,C,A,C,C,Y,C,C,E,C,A,U,C,C,C,C,C,A,C,A,I,C,C,C,A,C,C,G,A,C,A,A,Q,E,C,M,C,qB,E,I,C,S,C,I,C,M,C,C,K,E,I,C,S,C,I,C,G,C,C,S,E,I,C,S,C,I,C,O,C,C,M,E,I,C,C,C,A,C,A,C,A,E,E,O,A,E,I,C,C,C,A,C,C,A,C,K,C,C,C,A,C,A,A,iB,C,C,C,C,I,E,A,E,I,Q,G,I,C,C,C,A,C,Y,C,E,I,Q,A,C,C,I,E,A,E,I,O,G,I,C,C,C,A,C,W,C,E,I,O,A,C,A,C,A,K,C,C,C,A,C,C,C,C,C,C,C,C,C,C,Q,G,G,I,A,C,C,A,C,C,W,C,C,M,E,O,Q,C,8B,C,C,A,C,E,E,M,A,E,K,E,A,E,G,I,C,S,C,C,S,C,c,C,M,C,S,C,O,C,E,C,C,A,E,C,C,C,A,A,M,C,E,C,C,C,E,C,A,C,M,C,A,G,C,G,E,I,C,E,K,A,A,C,C,C,C,E,C,G,C,K,E,C,A,E,C,E,C,A,E,C,K,C,G,C,C,C,C,E,E,C,C,A,W,E,C,A,G,K,C,C,C,I,C,C,I,E,C,C,E,C,E,C,A,E,C,E,E,C,C,A,C,C,C,A,C,C,C,M,O,E,C,I,E,E,E,C,C,A,C,E,C,W,C,C,E,E,C,A,C,C,C,A,E,C,A,C,E,M,A,I,C,W,C,E,C,E,A,K,C,A,C,C,E,C,G,E,E,G,K,E,U,O,E,G,E,A,C,A,E,A,E,M,S,C,mC,C,G,E,C,K,E,C,A,C,A,O,E,A,E,C,C,A,E,C,C,A,C,A,a,E,A,G,A,M,I,C,a,C,E,C,C,A,I,E,E,I,I,C,U,C,E,C,C,E,C,C,A,C,C,C,A,C,C,A,I,E,A,E,E,O,C,C,E,E,W,C,E,E,K,C,E,E,E,C,G,G,E,C,A,C,E,E,M,I,E,G,G,E,M,I,C,C,G,C,I,E,E,I,E,C,C,Q,E,E,C,A,O,E,C,O,C,G,C,C,A,C,E,A,C,A,C,E,C,A,C,E,C,E,A,G,E,C,A,C,C,C,C,A,C,M,E,A,G,G,A,C,C,C,E,M,I,G,I,E,I,C,S,E,M,I,C,S,C,E,C,C,E,C,C,A,C,C,G,E,E,M,A,C,C,a,C,C,A,E,G,C,C,C,C,A,C,Y,C,I,C,K,C,I,C,M,E,C,I,C,G,C,C,C,I,G,C,C,C,A,Q,E,O,G,E,K,A,C,A,E,a,C,E,C,E,G,K,C,E,C,C,A,E,C,I,E,C,C,C,A,C,E,C,C,E,C,C,E,C,A,E,A,G,A,E,C,C,A,C,W,C,C,E,E,C,C,A,C,C,A,E,C,A,C,E,M,A,I,C,W,C,E,C,E,A,K,C,A,C,C,E,C,G,E,E,G,K,E,U,O,E,G,E,A,C,A,E,A,E,M,S,C,mC,C,G,E,C,K,E,C,A,I,E,G,C,C,C,C,A,C,Y,C,I,C,K,C,I,C,M,E,C,I,C,G,C,C,C,I,G,C,C,C,C,E,G,E,E,C,E,C,E,E,C,E,E,A,C,C,E,C,I,E,C,C,C,A,C,E,C,C,E,C,C,E,C,A,E,C,A,E,E,C,C,C,C,C,A,I,E,A,C,A,M,C,E,E,M,A,E,I,E,I,C,C,C,A,C,sB,C,uB,C,C,S,C,mB,C,C,C,A,I,C,C,C,A,C,I,E,I,C,C,A,I,C,C,C,A,C,C,A,C,I,G,C,C,A,O,C,C,C,I,C,I,E,C,C,E,C,C,C,C,G,C,C,I,C,C,A,C,A,A,M,E,C,C,E,E,M,A,E,I,E,I,C,C,C,A,C,2B,C,uB,C,C,S,C,qB,C,C,C,A,I,E,E,E,C,C,I,C,C,A,A,G,C,E,I,E,A,A,K,C,mC,C,C,A,G,C,A,E,E,C,G,C,C,C,C,I,E,I,C,A,G,C,K,C,G,C,C,C,C,C,W,E,C,A,E,E,E,G,C,A,G,C,C,C,C,C,W,E,C,A,C,E,E,M,A,E,K,G,C,G,C,M,G,O,G,G,I,K,C,C,C,C,E,A,K,C,A,U,C,C,C,oB,C,C,uB,C,C,S,C,C,S,E,I,C,M,C,C,E,I,C,S,C,I,C,G,C,C,I,E,I,C,S,C,G,C,C,C,C,C,A,A,C,G,E,C,G,E,G,K,C,C,A,A,E,C,K,C,K,C,A,E,C,Q,C,I,C,S,C,A,E,C,M,C,I,C,O,C,A,E,C,C,A,C,M,C,M,C,C,C,C,I,C,C,A,C,C,C,A,I,C,C,C,A,E,C,E,C,C,A,C,I,U,C,I,C,C,C,C,C,C,A,E,C,C,A,C,I,C,C,C,A,C,A,C,C,A,C,C,G,E,C,I,E,G,C,E,I,C,G,C,C,A,A,O,E,C,C,A,C,A,I,C,C,A,C,C,A,I,C,C,C,A,E,C,E,C,C,A,C,A,I,C,C,A,C,A,C,C,E,C,C,A,C,A,I,C,C,C,A,C,A,E,C,C,A,C,A,M,C,M,C,C,C,C,I,C,C,A,C,C,C,A,E,C,C,A,C,A,I,C,C,C,A,C,A,I,C,S,E,C,E,G,M,C,E,C,C,A,E,G,I,C,I,C,O,C,A,I,C,2B,E,C,E,G,wB,E,C,C,C,A,E,C,C,A,C,A,I,C,C,C,A,C,A,E,C,C,A,C,A,I,C,C,C,A,C,A,E,C,C,A,C,A,I,C,C,C,A,C,A,E,C,C,A,C,A,M,C,M,C,C,C,C,I,C,C,C,A,C,C,A,E,C,C,A,C,A,I,C,C,C,A,C,A,C,C,A,G,C,E,C,U,E,C,G,C,C,A,C,C,C,G,C,U,C,C,C,C,O,C,C,E,I,O,E,C,E,I,A,C,A,A,M,C,e,C,C,C,C,C,C,G,A,M,A,I,E,E,E,E,O,E,C,C,C,O,E,C,E,I,E,A,K,C,C,iB,E,E,I,gB,C,C,C,A,G,E,I,E,A,A,K,C,iB,C,A,C,C,C,E,C,C,C,A,C,C,C,G,C,c,C,C,C,C,G,E,I,E,A,A,K,C,iB,C,C,A,E,C,C,A,I,C,C,C,M,U,C,C,C,C,M,C,E,E,Y,A,E,E,C,A,I,C,C,A,C,iB,E,C,O,C,C,A,M,C,M,C,c,C,C,C,C,O,E,E,C,C,A,E,C,C,C,O,E,C,C,O,I,A,A,C,E,A,A,G,A,A,G,A,A,A,G,A,A,G,A,A,C,Q,E,C,M,C,sB,E,I,C,U,C,M,E,I,C,C,C,A,C,A,C,A,E,E,O,A,E,I,C,C,A,C,C,C,A,C,K,C,C,C,A,C,A,A,I,U,E,C,O,I,C,C,C,A,A,C,A,A,I,a,E,C,O,I,C,C,C,A,A,C,A,A,I,O,E,C,O,M,C,M,C,C,C,C,I,C,C,C,A,C,A,C,A,A,I,I,E,C,O,I,C,C,A,I,C,C,C,A,C,I,C,A,C,G,U,C,I,C,C,C,A,C,A,C,A,A,I,Q,E,C,G,C,O,I,C,C,A,I,C,C,C,A,C,E,C,A,C,A,E,E,Y,A,E,I,C,C,C,A,C,C,A,A,M,E,C,E,C,E,M,A,G,E,G,oC,C,uB,C,C,S,C,U,C,I,C,C,Q,C,I,C,C,C,C,A,A,C,A,I,Q,E,C,G,C,O,I,C,K,C,I,C,Q,C,C,A,A,M,E,C,C,C,C,E,M,A,G,E,G,8B,C,uB,C,C,S,C,U,C,I,C,C,Q,C,I,C,C,C,C,A,A,C,A,C,M,C,Q,C,E,C,I,E,I,C,A,O,C,A,E,E,I,C,I,C,G,E,C,C,A,A,C,A,C,I,C,I,C,G,E,A,G,E,E,C,C,I,C,C,I,E,C,A,C,I,C,A,A,E,I,C,K,C,C,E,C,A,C,E,C,A,C,I,E,E,C,A,A,E,I,C,K,M,E,I,E,C,A,C,A,C,A,C,A,A,C,A,A,Y,C,C,C,C,C,C,C,C,C,C,C,I,C,C,C,A,C,E,I,C,C,C,A,C,A,C,C,I,C,C,C,A,C,G,C,E,C,I,C,G,I,C,C,C,C,E,C,E,A,E,A,C,C,C,C,W,E,C,C,M,C,C,C,C,C,C,C,A,G,C,C,A,C,A,C,A,I,C,C,C,A,C,I,C,C,A,E,E,E,C,A,C,G,U,C,G,C,C,C,C,A,C,C,A,C,C,G,I,A,C,A,C,G,C,C,C,A,C,C,O,C,E,C,A,C,A,A,e,C,C,C,C,C,K,E,E,E,C,E,E,E,C,G,qB,E,I,C,U,C,C,E,I,C,a,C,E,E,E,C,C,C,C,C,C,C,E,E,E,C,U,C,C,E,I,C,a,C,C,C,A,E,C,U,qB,E,E,C,C,C,C,C,G,E,I,E,A,G,C,E,I,C,A,M,C,C,I,C,I,C,I,C,C,C,A,O,G,M,C,A,C,C,C,C,A,C,G,M,O,C,C,C,C,A,C,C,A,A,M,C,W,C,C,C,C,C,C,I,E,A,E,E,C,A,C,C,A,A,C,E,E,c,A,E,M,C,S,C,I,C,C,C,C,C,A,uB,C,O,C,G,E,C,C,A,E,A,G,E,C,G,I,iB,C,A,C,K,C,E,E,gB,A,E,E,G,I,E,G,K,E,C,C,C,C,A,A,C,C,A,G,C,K,C,C,C,C,O,I,C,O,C,E,C,U,E,C,A,C,A,A,O,E,C,O,I,C,C,A,I,C,C,C,A,A,C,A,I,O,E,C,O,I,C,C,C,A,A,C,A,A,E,E,C,M,E,G,I,C,C,C,A,C,O,E,I,C,U,E,G,E,I,C,U,C,G,A,C,A,A,C,O,E,C,G,I,C,E,E,C,C,M,A,G,S,C,O,C,C,C,I,C,C,C,A,C,A,E,E,C,I,E,C,A,I,Y,E,I,C,U,C,C,E,I,C,a,C,C,A,C,C,I,E,I,C,A,G,C,C,O,E,C,E,I,C,G,I,C,G,A,C,C,I,E,I,C,A,G,C,C,G,C,C,C,A,E,C,E,C,E,E,K,O,A,E,I,C,C,C,C,C,C,A,A,M,C,C,C,C,A,C,E,E,M,A,G,E,E,C,I,S,C,C,O,C,I,C,O,E,iB,C,A,Q,C,I,O,E,G,C,C,Y,U,K,E,U,I,C,C,E,I,C,U,C,C,E,I,C,a,C,C,C,C,C,A,C,A,C,A,S,I,G,I,I,I,E,C,O,E,A,C,A,A,E,a,C,c,yF,I,E,E,C,C,Q,E,E,C,C,G,K,E,E,C,C,Q,E,E,C,C,G,K,E,G,G,C,C,C,C,C,A,E,E,I,C,C,C,C,A,E,E,I,C,C,C,C,A,E,E,I,C,C,C,C,A,E,C,C,C,A,C,C,G,G,C,A,K,E,G,G,C,E,C,C,G,E,A,G,C,K,E,C,E,E,E,E,E,E,C,C,C,E,I,E,C,G,G,E,A,C,A,G,C,E,M,C,G,C,E,I,K,C,C,C,G,C,A,I,C,C,C,E,E,C,C,C,C,C,E,C,G,E,G,G,C,E,I,C,C,C,A,G,E,I,E,C,C,I,E,G,A,C,C,E,C,A,C,C,A,C,C,A,M,A,E,I,E,G,G,A,A,C,G,E,A,C,C,G,C,M,C,e,C,C,S,C,E,I,C,C,U,C,K,C,E,C,A,C,A,E,C,C,C,C,C,C,C,C,C,Q,A,E,C,E,E,I,A,E,E,C,E,E,C,A,C,C,A,C,C,A,E,Q,A,E,C,E,E,I,A,E,C,E,C,E,E,C,A,E,C,C,A,C,I,E,G,A,C,C,C,E,A,C,C,A,M,A,E,A,I,E,G,G,A,C,E,E,C,C,G,C,M,C,e,C,C,S,C,E,I,C,C,U,C,K,C,E,C,A,C,A,E,C,A,E,C,C,C,C,C,A,A,C,C,C,C,C,C,A,A,C,C,C,C,G,C,C,A,C,C,O,E,C,E,A,I,I,E,O,I,C,C,A,C,E,O,E,E,C,A,C,C,A,I,G,E,C,C,A,C,E,A,C,A,E,E,C,A,G,A,A,Q,E,O,E,G,A,C,M,E,C,K,G,G,Q,E,C,E,G,A,G,E,C,A,C,I,E,E,C,E,E,C,8B,C,C,A,A,G,E,c,A,E,E,G,mB,C,Q,C,G,E,A,C,C,C,C,A,C,C,C,C,C,C,C,E,G,K,C,C,C,C,C,C,C,A,E,M,E,C,C,C,C,C,C,C,A,K,G,E,C,E,E,C,C,E,E,C,A,C,C,A,C,C,E,E,A,I,E,A,C,C,A,E,A,C,A,C,E,G,E,I,C,S,A,E,O,C,C,E,C,A,E,E,E,sB,C,E,C,M,C,E,E,C,C,S,C,E,C,A,C,E,C,A,C,A,C,C,E,C,A,C,E,E,E,C,K,C,S,C,G,E,C,C,A,C,A,E,I,C,Q,C,G,E,A,C,C,A,G,C,M,C,Q,C,G,A,C,E,E,A,C,C,Y,A,E,E,C,C,C,A,C,C,8C,C,c,C,G,C,C,C,A,C,C,c,A,E,G,E,C,E,wC,C,iB,C,G,I,C,C,A,C,A,C,C,E,C,A,C,A,C,C,A,C,C,A,O,C,M,C,G,E,C,A,C,M,C,G,K,C,A,C,O,M,E,K,M,O,C,A,C,A,C,A,A,C,K,E,M,A,G,A,A,A,G,A,A,G,A,A,C,M,A,A,a,C,C,C,C,C,C,C,C,E,E,a,A,E,E,E,C,G,S,C,C,A,I,C,C,C,A,C,E,G,C,A,C,C,C,A,C,E,I,A,C,C,A,I,I,C,A,C,C,C,E,G,C,E,E,C,A,E,C,A,G,A,E,A,G,C,A,E,C,A,G,E,C,C,E,C,C,C,O,E,C,A,G,C,E,C,E,M,C,E,E,C,C,C,C,C,E,C,K,E,G,E,C,C,C,C,A,C,A,C,E,E,E,C,A,K,C,E,I,E,A,C,A,C,C,Q,C,C,C,G,E,C,A,C,E,C,Q,C,G,E,C,A,C,E,C,C,C,C,E,G,C,E,C,C,C,C,E,E,C,C,C,Q,C,C,C,C,A,K,G,G,C,C,E,C,K,C,C,C,E,G,C,E,C,C,E,C,K,C,C,C,E,E,C,C,C,Q,C,C,C,E,C,K,C,C,C,C,A,O,E,C,C,C,A,C,C,A,C,C,C,G,I,C,C,A,G,E,gB,A,E,I,C,C,M,C,E,I,A,Q,C,C,C,C,A,E,E,C,C,C,A,C,E,E,G,C,I,C,A,C,A,A,I,M,E,C,O,I,C,C,C,A,C,M,A,C,A,A,I,K,E,C,O,I,C,C,A,C,C,K,A,C,A,A,I,Q,E,C,O,I,C,C,C,A,C,Q,A,C,A,A,I,K,E,C,O,I,C,C,C,A,A,C,A,E,A,C,C,E,G,E,c,A,E,I,C,M,G,E,G,G,C,+C,C,O,C,E,C,E,A,A,C,A,C,A,C,C,E,O,I,E,E,E,C,C,A,E,A,C,A,E,C,C,C,A,C,A,C,G,G,C,A,C,A,C,C,A,C,A,C,A,E,A,C,C,C,C,E,O,I,C,C,C,A,C,C,C,C,A,I,C,C,C,A,C,I,C,C,C,A,C,C,C,C,C,A,C,E,C,A,G,C,C,I,C,C,C,C,O,I,C,C,C,A,C,E,C,A,E,C,A,C,A,C,C,C,O,I,C,C,C,A,C,E,G,E,C,A,C,A,E,A,C,C,C,C,E,O,I,C,C,C,A,C,C,C,C,A,I,C,C,C,A,C,I,C,C,C,A,C,C,C,C,C,A,C,E,C,A,G,C,C,I,C,C,C,C,O,I,C,C,C,A,C,E,C,A,E,C,A,C,A,C,C,C,O,I,C,C,C,A,C,E,G,E,C,A,C,A,E,A,C,C,C,C,E,O,I,C,C,A,C,C,C,C,C,A,I,C,C,C,A,C,I,C,C,C,A,C,C,C,C,C,A,C,A,I,C,C,C,A,C,E,C,A,G,C,C,I,C,C,C,C,O,I,C,C,C,A,C,E,C,A,E,C,A,C,A,C,C,C,O,I,C,C,C,A,C,E,G,E,C,A,C,A,A,S,C,C,C,C,I,C,C,C,A,C,G,E,C,C,A,E,G,C,C,C,C,A,C,E,C,C,A,C,A,A,M,C,E,E,M,A,E,E,G,C,C,C,C,A,C,E,E,E,oC,C,e,C,C,S,C,W,C,K,C,W,C,K,C,I,C,C,C,A,I,C,C,C,A,C,E,G,C,C,C,C,A,C,W,C,A,C,A,E,A,C,C,C,C,E,M,C,E,E,M,A,E,C,C,C,C,A,G,E,E,gB,C,e,C,C,S,C,K,C,K,C,gB,C,K,C,I,C,C,C,A,I,C,C,C,A,C,C,C,C,A,I,C,C,C,A,C,I,C,C,C,A,C,I,C,C,C,A,C,A,C,C,C,C,A,C,E,C,A,G,C,C,I,C,C,C,C,O,I,C,C,C,A,C,E,C,A,E,C,A,C,A,C,C,C,O,I,C,C,A,C,C,E,G,E,C,A,C,A,A,S,C,C,C,C,C,E,E,M,A,E,E,C,C,A,C,E,E,E,gB,C,e,C,C,S,C,K,C,K,C,gB,C,K,C,I,C,C,C,A,I,C,C,C,A,C,G,E,C,C,A,E,G,C,C,C,C,A,C,I,C,C,C,A,C,A,C,K,G,E,M,A,E,E,E,C,A,A,C,C,A,E,E,E,oC,C,e,C,C,S,C,W,C,K,C,W,C,K,C,I,C,C,C,A,I,C,C,C,A,C,E,E,C,A,C,A,C,A,W,C,A,C,A,A,G,C,C,C,C,I,C,C,I,C,K,C,C,C,E,G,E,C,A,E,G,C,C,Q,C,E,G,K,C,M,C,E,C,C,C,A,A,E,E,G,E,A,A,C,A,C,C,A,C,C,E,E,C,E,C,C,A,A,C,C,C,E,A,C,C,C,E,C,E,C,A,C,A,C,C,C,C,C,C,O,C,C,E,I,C,G,C,E,C,A,E,A,C,A,C,C,C,O,C,C,A,I,C,G,C,E,C,A,E,C,A,C,C,C,C,O,A,C,C,K,C,G,C,E,C,A,E,A,C,A,C,C,C,O,I,C,G,C,G,C,A,C,A,A,A,C,E,C,C,C,C,O,I,C,G,C,I,C,A,A,C,A,A,A,K,E,C,I,E,C,G,C,C,C,A,C,A,O,I,C,C,C,A,C,I,A,E,C,A,I,C,C,C,A,C,C,C,C,A,E,C,G,C,C,A,C,C,I,C,C,C,A,C,A,I,C,C,C,A,C,A,I,C,C,C,A,C,E,C,M,C,A,C,A,A,O,E,C,I,E,C,G,C,C,C,A,C,A,O,I,C,C,C,A,C,I,A,E,C,A,I,C,C,C,A,C,C,C,C,A,E,C,G,C,C,C,A,C,I,C,C,A,C,C,A,I,C,C,C,A,C,A,I,C,C,C,A,C,E,C,Q,C,A,C,A,A,K,C,C,C,C,G,I,E,A,I,G,C,A,C,A,G,A,I,C,A,Q,C,C,M,I,C,A,I,E,G,C,C,Q,C,E,E,E,A,E,A,A,C,C,C,C,C,A,A,A,E,G,C,C,K,C,E,E,A,C,C,A,G,E,A,C,C,G,E,E,E,C,C,C,C,A,A,C,A,C,C,C,C,C,A,C,A,C,O,C,C,A,I,E,E,E,E,C,C,C,A,C,C,A,C,A,C,A,A,M,E,C,O,I,C,C,C,A,G,C,C,A,E,C,C,M,E,C,O,I,C,C,C,A,C,C,C,A,E,C,C,I,E,C,O,I,C,M,A,C,A,A,a,E,C,O,U,C,I,C,Q,E,C,A,C,A,A,Q,C,C,C,C,O,E,S,C,C,I,C,Q,E,C,E,C,A,G,C,C,C,C,S,C,C,C,C,C,C,C,C,I,E,I,C,C,A,A,E,C,C,A,C,A,E,E,A,S,A,E,G,E,E,E,A,C,A,C,C,C,C,A,C,A,A,C,C,S,A,E,E,I,G,C,C,A,E,E,C,C,I,A,I,C,A,G,E,C,C,C,A,I,E,E,A,G,E,A,C,A,C,C,M,A,E,E,G,C,A,C,C,E,gC,C,e,C,C,S,C,W,C,K,C,W,C,K,C,E,C,C,A,E,C,E,A,E,C,E,C,C,C,E,A,C,G,E,A,C,E,C,C,A,A,O,E,E,E,C,G,A,O,C,C,A,I,E,E,E,E,A,C,A,A,E,C,C,C,C,C,U,C,C,C,C,C,C,I,E,E,C,G,C,C,2B,C,C,A,G,E,c,A,E,G,C,C,A,C,C,C,M,C,C,C,C,C,C,M,C,A,C,C,kC,C,O,C,G,G,C,A,C,C,E,E,C,E,C,C,A,A,C,A,A,C,A,E,G,C,A,E,C,C,C,C,C,C,E,C,A,C,I,E,K,C,C,E,I,I,C,C,G,E,C,C,C,A,C,C,M,A,E,E,K,I,C,E,I,I,C,C,K,C,M,C,C,8B,C,e,C,C,S,C,Y,C,K,C,W,C,K,C,E,C,C,A,E,A,E,G,E,I,C,C,C,E,I,I,C,C,A,I,E,G,G,C,C,C,C,C,C,E,G,A,I,C,C,C,E,E,E,C,G,A,Q,C,C,A,I,E,E,E,E,A,C,A,A,E,C,C,C,C,C,S,C,C,C,C,C,C,I,E,C,E,A,E,Q,A,E,G,E,Q,A,E,E,I,G,C,C,C,A,E,E,E,C,I,A,C,C,C,E,I,E,E,C,E,C,E,A,E,Q,A,E,E,E,C,G,E,C,C,A,E,E,E,C,G,A,O,C,C,A,I,E,E,E,E,A,C,A,C,A,C,C,A,C,C,S,C,Y,C,0D,8B,I,E,E,C,C,Q,E,E,C,C,G,K,E,E,C,C,Q,S,A,E,C,C,C,C,C,E,I,E,C,C,A,A,E,E,I,C,C,C,C,C,C,E,C,E,C,A,A,E,G,C,A,A,E,C,C,E,A,C,C,C,A,C,M,C,C,A,I,C,I,E,C,C,C,C,C,C,C,E,I,A,E,E,C,A,C,I,E,E,C,C,E,C,C,C,C,E,E,E,E,C,C,C,A,E,I,A,C,C,C,A,C,I,C,C,C,A,G,E,K,C,E,C,A,C,E,E,M,A,E,G,E,C,C,E,A,E,E,kB,C,gB,C,C,M,C,I,K,M,G,E,C,C,A,A,E,I,C,Q,C,C,C,E,I,C,C,C,C,C,A,C,A,A,G,M,E,C,C,C,E,A,C,E,E,M,A,E,C,G,E,E,I,C,gB,C,gB,C,C,M,C,E,E,I,C,C,C,M,C,C,C,C,C,A,I,E,A,I,C,C,C,C,C,A,C,K,A,E,G,E,C,C,I,C,8B,C,gB,C,C,M,C,E,E,I,C,E,E,I,C,M,G,C,A,C,A,C,A,G,C,C,E,E,E,E,A,C,I,E,C,C,E,C,G,C,A,C,A,C,E,C,C,E,C,E,E,E,E,C,C,A,A,C,C,A,C,C,E,C,M,C,E,A,C,C,A,C,C,E,A,G,A,E,C,C,A,C,C,A,C,C,C,C,A,E,A,E,C,E,A,G,A,C,A,C,A,A,E,A,E,E,E,A,C,I,E,C,C,E,A,C,G,C,A,C,M,E,E,C,C,E,C,E,A,C,C,A,C,C,A,E,C,C,A,E,C,A,E,C,A,C,A,C,A,E,E,E,E,A,C,I,E,C,C,E,C,G,C,A,C,A,C,E,C,C,E,C,E,E,E,E,C,C,A,A,C,C,A,C,C,E,C,E,E,C,C,A,E,A,C,C,C,A,A,G,C,A,C,C,C,A,E,C,C,O,A,E,E,E,G,C,E,C,C,E,A,E,C,C,E,A,I,A,E,C,C,C,C,A,C,Q,C,C,C,E,E,I,C,C,C,C,A,C,C,A,A,G,A,C,C,E,E,E,E,A,C,I,E,C,C,E,A,C,G,C,A,C,C,E,C,C,E,C,E,C,C,A,C,C,C,E,C,C,O,A,E,E,E,G,C,E,C,C,E,A,C,C,E,E,E,C,C,C,C,C,Q,C,C,C,E,I,C,C,C,C,C,C,A,A,G,G,C,Q,C,C,C,M,C,A,S,A,C,C,C,I,E,E,A,E,C,K,C,E,C,C,A,K,E,I,E,C,C,C,C,E,G,C,A,E,I,C,C,I,C,C,C,C,C,C,C,C,A,C,C,A,C,A,A,C,C,S,C,E,O,A,C,E,A,I,E,A,C,C,C,E,Q,A,E,E,G,G,C,C,A,E,E,E,C,A,C,A,C,A,A,M,C,E,E,c,A,E,E,K,G,G,E,E,I,C,mC,C,M,C,G,E,A,C,C,G,C,A,C,A,oG,I,E,E,C,C,Q,S,A,E,C,E,I,E,E,C,A,C,A,I,G,E,A,C,G,G,C,I,A,C,C,C,E,E,C,A,C,A,O,C,C,A,I,A,C,C,K,a,A,C,E,S,C,E,O,A,C,E,A,I,E,A,I,A,C,A,I,I,C,I,A,O,E,E,C,E,E,C,K,C,O,C,G,C,E,C,C,E,E,C,A,E,C,E,I,G,C,S,C,E,E,E,G,E,C,C,E,G,C,C,A,A,C,A,A,C,C,A,K,C,E,E,C,C,M,E,K,E,C,I,A,E,K,C,C,C,A,E,I,C,C,A,E,E,A,K,C,C,C,A,G,I,E,I,G,C,I,A,E,I,E,C,C,A,E,I,E,C,G,A,I,A,C,C,A,E,G,C,S,C,K,C,I,C,C,E,E,Q,A,E,E,I,I,C,C,C,A,G,C,G,E,E,I,E,C,C,C,C,E,I,A,E,K,E,E,C,A,E,E,I,E,E,C,C,M,E,E,K,C,I,A,E,E,I,C,C,A,E,E,C,C,E,E,E,A,E,I,C,C,A,G,I,E,I,G,C,I,A,E,I,E,C,C,A,E,I,E,C,E,C,C,A,C,C,C,G,A,C,A,C,A,C,A,E,C,C,C,A,G,C,C,C,E,A,C,C,C,A,O,C,C,I,C,yI,I,E,E,C,C,Q,E,E,C,C,I,I,E,E,C,C,Q,E,C,E,G,C,M,C,M,C,M,C,O,C,Q,C,O,C,C,A,S,E,C,C,C,E,I,A,E,E,C,A,G,A,Q,E,O,E,C,C,C,E,E,E,C,E,I,C,G,C,A,C,C,A,E,c,A,E,G,C,C,A,c,C,M,C,G,C,C,A,C,A,C,E,E,C,C,C,C,G,E,A,G,C,E,C,E,E,A,S,A,E,E,E,K,C,C,A,O,E,W,C,S,C,E,E,C,K,I,E,K,C,A,G,C,C,C,Q,E,A,C,A,A,S,E,C,C,C,E,C,E,A,E,c,A,E,Q,E,O,E,G,C,oB,C,O,C,G,E,C,C,A,E,E,C,A,G,A,Q,E,O,E,C,C,C,E,E,E,C,E,I,C,G,C,A,C,C,A,E,c,A,E,G,C,C,A,c,C,M,C,G,C,C,A,C,A,C,E,E,C,C,C,C,G,E,A,I,A,E,C,E,E,C,Q,A,E,E,E,K,C,C,A,O,E,W,C,U,C,E,G,O,E,K,C,A,G,C,C,C,K,A,C,A,A,E,W,C,E,E,Q,E,C,E,E,O,I,C,E,O,A,C,E,E,K,C,C,E,C,C,C,A,C,A,C,E,A,U,C,E,O,A,C,E,C,M,A,E,E,E,C,A,A,C,A,E,8F,I,E,E,C,C,Q,E,M,C,A,E,O,A,A,C,E,G,C,E,C,E,A,E,Q,A,E,E,S,I,C,C,A,C,C,C,C,C,A,I,A,C,A,C,C,C,G,C,A,C,A,C,C,C,G,C,A,C,A,C,C,C,I,A,C,G,E,G,A,E,O,A,E,G,E,C,C,E,C,E,G,M,C,C,C,E,C,C,E,G,M,C,E,C,E,C,C,E,G,M,C,E,C,E,C,C,E,G,M,C,E,C,E,C,C,E,G,M,C,E,C,E,C,C,C,I,C,G,C,A,C,A,+B,O,c,C,E,a,suB,I,E,E,C,C,Q,O,c,C,E,e,C,W,G,I,W,O,E,Y,C,G,A,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,I,E,E,C,C,Q,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,I,E,E,C,C,Q,O,E,Y,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,U,C,Y,E,I,W,O,E,O,C,G,A,O,c,C,E,S,C,Y,E,I,W,O,E,M,C,G,A,O,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,I,E,E,C,C,Q,O,c,C,E,kB,C,W,G,I,W,O,E,e,C,G,A,O,c,C,E,U,C,Y,E,I,W,O,E,O,C,G,A,O,c,C,E,S,C,Y,E,I,W,O,E,M,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,sB,C,Y,E,I,W,O,E,mB,C,G,A,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,O,c,C,E,kB,C,Y,E,I,W,O,E,e,C,G,A,O,c,C,E,Y,C,W,G,I,W,O,E,S,C,G,A,I,E,E,C,C,O,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,I,E,E,C,C,Q,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,O,c,C,E,oB,C,Y,E,I,W,O,E,iB,C,G,A,I,E,E,C,C,I,I,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,I,E,E,C,C,Q,O,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,O,c,C,E,S,C,Y,E,I,W,O,E,M,C,G,A,O,c,C,E,O,C,Y,E,I,W,O,E,I,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,O,c,C,E,Y,C,W,G,I,W,O,E,S,C,G,A,O,c,C,E,U,C,Y,E,I,W,O,E,O,C,G,A,O,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,O,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,O,c,C,E,U,C,Y,E,I,W,O,E,O,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,O,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,I,E,E,C,C,G,K,O,c,C,E,oB,C,Y,E,I,W,O,E,iB,C,G,A,O,c,C,E,mB,C,W,G,I,W,O,E,gB,C,G,A,I,E,E,C,C,G,K,O,c,C,E,Y,C,W,G,I,W,O,E,S,C,G,A,I,E,E,C,C,G,K,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,I,E,E,C,C,Q,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,I,E,E,C,C,Q,O,E,Y,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,mB,C,W,G,I,W,O,E,gB,C,G,A,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,I,E,E,C,C,O,O,G,W,C,E,S,C,Y,E,I,W,O,E,M,C,G,yJ,I,E,E,C,C,O,C,C,Q,C,E,C,A,I,E,I,C,S,C,E,Q,C,C,A,E,C,M,C,C,A,E,C,A,C,C,A,C,C,I,K,E,C,C,C,O,E,C,E,G,I,E,G,C,E,C,A,E,C,C,C,I,E,C,C,C,E,G,C,E,A,K,A,C,C,uD,E,E,C,C,A,A,C,M,E,K,A,C,E,C,C,A,C,C,G,C,A,M,I,K,G,A,A,A,a,G,C,C,S,I,E,C,C,C,A,C,C,A,E,C,C,C,A,C,C,A,E,C,C,C,A,C,C,E,E,A,C,C,K,E,C,A,G,C,C,E,C,C,C,G,E,A,E,A,C,C,A,C,C,C,A,A,G,C,E,E,C,E,C,E,G,G,C,C,A,E,G,I,C,C,E,E,G,A,E,E,A,C,E,C,C,C,A,C,C,A,A,C,G,E,E,G,G,A,C,C,E,G,C,C,A,C,E,K,E,O,G,C,C,A,G,A,C,E,C,C,C,G,A,C,I,C,A,C,C,A,C,C,C,A,G,E,C,C,G,E,A,C,C,C,A,E,G,G,C,M,C,E,G,A,C,C,E,E,G,A,E,E,A,E,C,C,A,E,C,E,K,A,I,E,G,C,A,E,C,E,G,C,G,C,A,C,A,E,C,C,A,C,A,C,C,C,A,C,C,I,I,C,G,I,C,C,C,A,C,E,C,A,I,E,A,I,C,C,C,A,E,I,C,C,C,A,C,A,C,A,E,E,E,G,A,M,C,M,C,I,C,C,A,I,E,G,C,K,C,I,C,C,G,C,C,E,E,E,A,G,G,A,A,E,E,I,S,E,C,C,C,C,E,E,G,C,U,C,C,C,I,E,C,E,A,E,S,A,E,E,E,M,C,C,A,G,E,C,E,A,G,E,E,C,M,C,C,K,A,U,C,qB,C,C,A,I,E,C,C,A,E,C,A,E,K,I,S,K,E,A,E,C,M,C,C,E,C,C,C,E,C,C,A,A,C,C,C,A,E,O,C,I,A,A,C,A,C,C,M,O,C,G,C,E,E,E,A,C,I,C,C,A,C,A,C,C,C,C,A,C,E,K,Q,Q,C,C,M,S,G,C,E,O,E,G,E,C,I,G,E,E,I,A,A,C,A,A,C,A,C,C,C,A,A,C,C,C,C,C,I,C,C,C,C,A,E,K,E,I,I,C,K,C,I,G,E,E,I,A,A,C,A,A,C,A,A,E,C,C,A,A,A,O,O,C,G,C,E,E,E,A,A,C,C,C,C,A,E,C,C,K,E,I,C,C,A,C,I,C,A,E,G,A,C,A,C,A,A,C,C,C,C,G,C,C,C,C,I,E,E,C,A,C,M,I,C,O,C,C,E,E,G,A,E,E,A,S,K,E,A,E,C,M,C,C,E,C,C,C,E,C,C,C,A,C,G,S,I,E,A,E,A,A,E,K,C,E,C,C,A,E,I,A,C,E,C,C,A,C,A,A,C,A,C,A,I,C,G,C,C,C,C,I,E,E,C,G,C,C,A,A,O,E,G,G,C,C,E,E,C,C,G,A,C,C,C,C,C,M,A,E,A,I,A,I,C,e,E,E,G,K,C,C,uB,C,C,S,C,Y,C,C,C,A,A,Q,C,E,C,C,C,C,C,C,Q,A,E,G,I,C,I,C,E,C,C,C,C,G,A,C,C,E,E,E,A,C,E,C,C,Q,E,E,E,A,E,C,C,A,C,A,C,C,C,C,C,C,A,C,C,A,G,G,C,C,E,E,C,C,G,A,E,E,A,E,E,A,G,K,C,G,C,C,C,I,I,C,I,C,C,C,C,A,G,S,I,E,A,E,A,A,E,G,C,A,C,A,C,C,A,C,C,A,C,C,E,C,C,E,C,A,C,A,C,C,C,A,C,A,A,C,A,C,E,G,C,C,I,A,C,A,C,A,C,A,C,A,A,K,C,C,C,C,C,C,I,E,A,I,C,E,C,C,A,A,E,C,E,A,A,C,G,C,C,E,C,M,A,C,C,C,E,C,G,C,C,A,A,I,E,A,G,C,E,C,G,C,M,A,C,C,E,C,A,E,A,C,E,C,A,I,C,M,A,C,C,C,E,A,G,C,C,C,A,E,C,G,C,M,E,C,E,C,G,C,M,A,C,C,I,E,E,E,E,C,C,A,A,E,E,C,C,C,E,C,A,A,I,I,C,C,E,C,C,C,C,C,A,E,C,A,E,I,A,C,I,C,C,C,C,C,A,E,G,C,C,C,C,C,C,C,C,A,O,I,E,E,E,A,E,A,C,A,C,C,C,C,E,C,C,C,C,C,C,I,E,E,E,E,C,C,A,A,E,E,C,C,C,E,C,A,A,I,I,C,C,C,C,C,C,I,C,M,C,C,E,C,C,I,E,E,E,C,C,C,C,A,I,S,K,E,A,E,C,M,C,C,C,C,C,C,G,C,C,A,C,G,C,C,C,E,C,C,A,C,G,C,E,C,E,I,A,C,G,C,C,A,C,E,C,C,C,C,C,C,C,C,C,A,O,I,E,E,E,A,E,A,C,A,C,C,C,A,C,A,C,C,C,C,C,I,E,E,C,A,C,G,I,C,C,C,C,C,C,I,C,M,C,C,E,C,C,I,E,E,E,C,C,C,C,A,I,S,K,E,A,E,C,M,C,C,C,C,C,C,G,C,C,A,C,G,A,C,E,I,C,C,C,E,C,C,A,C,G,C,C,C,A,A,O,C,C,A,I,C,G,C,C,C,C,I,E,E,C,G,C,C,A,O,C,G,C,C,C,A,A,C,C,E,C,E,O,A,I,E,G,A,C,A,C,E,C,A,E,K,K,Q,K,E,A,E,C,O,E,E,I,C,S,C,G,C,A,C,A,E,G,E,C,C,A,C,C,A,G,C,E,C,S,C,C,C,C,C,C,O,I,E,E,E,A,E,A,C,A,C,A,A,C,C,O,E,C,E,G,C,E,G,A,E,S,A,E,G,E,C,C,E,C,E,E,M,A,E,E,G,G,E,E,Q,C,qB,C,gB,C,C,M,C,E,G,G,C,E,Q,C,M,C,E,G,G,C,C,C,A,E,G,G,G,E,Q,E,C,E,C,E,A,E,Y,A,E,C,E,E,M,A,E,C,E,K,A,C,E,G,G,C,E,Q,C,C,E,E,C,A,C,A,C,C,A,E,C,C,I,C,E,E,G,c,C,E,O,A,C,E,I,E,E,A,C,A,C,C,G,M,A,C,C,C,E,G,C,I,C,O,C,G,G,C,A,E,E,G,E,E,C,G,C,E,E,E,G,A,E,C,A,E,I,C,E,C,A,C,C,C,C,E,E,C,C,E,C,A,C,A,A,C,A,K,E,C,E,A,I,A,C,C,I,C,E,K,C,C,A,C,C,C,A,C,A,A,C,C,A,O,E,E,C,G,C,C,C,A,A,C,C,A,C,C,G,C,E,I,A,E,E,A,A,C,G,C,C,S,A,C,O,A,A,a,C,C,C,C,C,C,C,C,C,C,E,E,gB,A,E,I,C,M,I,G,I,Q,S,C,C,C,C,C,G,C,C,Q,C,I,C,Q,C,S,C,Q,C,O,C,S,C,C,A,C,A,A,W,C,C,C,C,C,C,C,E,E,c,A,G,E,E,C,G,C,A,S,C,E,C,C,C,A,C,C,A,M,C,E,I,E,A,A,C,E,A,A,A,C,a,C,I,C,C,C,A,C,E,C,A,I,C,C,A,C,C,C,A,C,A,A,I,I,E,C,M,C,E,E,M,A,E,I,C,C,A,C,C,A,C,A,A,I,M,E,C,O,I,C,C,C,A,A,C,A,E,A,C,C,E,O,I,C,C,C,A,C,I,C,G,C,C,C,C,C,C,A,C,E,E,E,I,C,A,E,E,I,A,C,A,A,Y,C,C,C,C,O,I,C,C,C,A,C,C,E,E,Y,A,E,E,I,A,C,C,A,C,A,A,U,C,C,C,C,I,E,G,A,E,Y,A,E,G,E,A,C,C,A,G,G,C,E,A,Q,C,A,O,I,E,C,E,A,E,E,E,Q,A,E,C,E,E,M,A,E,C,E,E,C,I,A,C,G,E,C,C,A,I,C,C,A,C,A,A,C,E,C,A,E,C,C,M,C,C,C,C,O,I,C,C,C,A,C,E,G,C,A,C,C,A,C,C,e,E,C,I,E,I,A,C,C,C,A,C,M,C,A,O,I,C,C,C,A,C,I,C,G,I,A,C,A,C,A,C,A,E,E,Q,C,A,A,I,C,E,C,C,A,C,C,A,C,E,C,E,C,C,C,A,C,A,C,A,A,C,A,C,K,E,I,M,A,G,A,A,G,A,A,G,A,A,G,A,A,C,E,A,A,a,C,C,C,C,C,C,C,C,E,E,gB,A,E,I,C,C,U,C,C,C,C,C,C,C,A,I,C,C,A,C,A,C,C,E,E,Y,A,E,G,C,C,C,C,C,C,C,A,C,C,C,A,I,C,C,C,A,C,I,C,A,I,C,C,C,A,C,A,I,C,C,E,E,E,E,C,A,I,C,A,C,A,C,A,A,C,C,A,C,A,A,I,I,E,C,M,C,E,E,O,A,E,I,C,C,A,C,C,A,C,A,A,I,U,E,C,O,I,C,C,C,A,C,M,A,C,A,A,I,Q,E,C,O,I,C,C,A,C,A,C,A,A,I,K,E,C,O,I,U,C,I,C,C,C,A,C,A,C,A,E,A,C,C,E,G,I,C,C,C,A,C,C,M,I,C,C,C,A,C,C,C,A,C,G,E,C,C,A,C,C,C,A,E,E,C,E,A,C,C,M,A,E,I,C,C,C,A,C,C,E,I,C,C,C,A,E,I,C,C,A,C,C,I,C,U,C,C,+C,E,I,C,C,C,A,C,4D,C,C,gB,C,C,M,C,C,E,E,Y,A,E,I,C,C,C,A,C,C,M,C,I,C,C,C,A,C,M,C,E,G,C,C,C,S,C,I,C,C,C,A,C,U,C,I,C,U,C,C,C,A,C,A,E,A,C,C,C,C,C,C,E,I,E,I,C,I,C,C,C,E,E,M,C,C,E,Q,C,A,O,I,C,C,C,A,C,E,I,C,C,C,A,C,G,G,E,C,I,C,U,E,G,E,E,C,C,C,A,C,G,G,C,C,C,C,A,C,M,C,C,C,E,C,E,C,C,A,I,E,A,G,E,G,iB,C,gB,C,C,M,C,C,E,E,Y,A,E,I,C,C,C,A,C,C,M,C,I,C,C,C,A,C,M,C,M,C,I,C,C,C,A,C,E,C,C,C,I,C,C,C,A,C,A,K,C,I,C,C,C,A,C,I,C,C,C,A,C,E,C,A,S,C,A,C,A,C,A,C,I,E,I,A,E,I,A,C,C,C,A,C,K,C,I,C,C,C,A,C,G,G,C,A,C,U,C,I,C,C,C,A,C,C,A,O,E,C,C,A,C,C,G,C,A,C,C,A,I,C,I,C,C,C,C,C,C,I,E,G,C,C,C,C,A,C,C,C,E,C,C,E,C,E,C,C,G,I,C,C,C,A,C,G,G,C,A,C,A,C,C,A,E,E,G,G,C,A,E,G,E,C,C,C,E,C,A,G,C,C,I,E,C,M,G,E,Q,A,E,I,C,S,C,E,Q,C,C,A,C,A,A,S,E,C,M,G,E,Q,A,E,I,C,S,C,E,Q,C,C,A,C,A,C,A,E,M,C,O,uI,I,E,E,C,C,Q,M,C,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,O,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,O,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,qG,I,E,E,C,C,Q,E,E,C,C,K,E,E,G,C,C,A,C,Q,C,A,C,C,C,C,E,M,C,E,E,U,A,E,E,G,A,C,G,E,C,G,C,C,I,E,A,C,A,C,A,E,E,S,A,C,C,A,C,C,C,C,C,E,E,E,E,C,A,E,E,Q,A,E,E,E,G,C,C,A,E,C,C,C,E,Q,A,E,E,G,G,C,C,A,M,G,E,O,A,E,E,E,E,C,E,C,A,A,C,A,C,A,C,A,U,C,E,E,C,C,E,E,E,C,C,C,G,C,A,O,G,C,C,C,A,A,C,C,A,Q,C,A,S,C,E,G,E,I,E,A,A,K,C,uB,C,C,A,E,C,C,C,A,C,C,I,C,C,K,C,W,C,C,qB,S,E,C,E,C,E,C,M,C,a,C,C,C,E,C,C,C,C,M,A,K,C,C,wB,E,C,C,C,C,A,C,A,A,S,E,C,C,C,G,S,E,O,C,C,M,A,K,C,C,sB,E,C,C,C,C,A,C,A,A,S,E,C,C,C,E,C,E,G,C,C,C,Y,U,C,C,A,M,A,K,C,qB,C,C,A,G,E,K,C,C,C,E,C,E,K,G,C,C,C,M,C,C,M,A,K,C,C,8B,E,E,K,W,E,C,C,M,C,C,C,A,C,A,A,S,E,C,C,C,G,U,E,O,G,C,S,E,O,E,E,I,C,M,A,K,C,iD,C,C,A,E,E,E,A,O,C,C,A,E,E,E,A,M,C,A,C,A,A,S,E,C,C,E,C,C,E,G,E,E,I,G,C,M,A,K,C,kC,C,C,A,G,G,E,M,E,A,C,M,A,K,C,uC,C,A,C,A,A,S,E,C,C,C,C,C,E,G,A,A,C,C,E,E,C,C,M,G,C,A,G,E,C,K,C,E,C,E,G,A,K,C,C,sD,E,E,C,A,C,A,C,A,yG,E,M,C,E,E,G,C,C,E,E,C,I,C,E,E,E,E,C,E,E,C,K,C,E,E,G,G,C,E,E,G,I,C,E,M,A,C,K,C,I,I,K,E,I,K,M,G,C,C,C,G,gR,I,E,M,C,C,A,G,C,E,K,C,C,C,A,E,A,E,A,G,C,C,E,C,C,A,O,E,A,E,C,C,E,C,A,C,S,A,E,A,C,C,A,C,M,C,C,C,G,C,C,K,C,A,C,C,E,E,E,A,C,A,C,A,C,C,C,C,C,C,C,I,C,C,E,E,E,C,A,C,C,C,C,G,C,E,C,C,C,E,C,A,C,A,A,M,C,E,E,C,C,C,C,C,C,E,I,E,A,I,W,C,E,C,K,C,C,A,E,A,I,W,C,E,C,K,C,C,A,I,I,C,C,C,C,C,C,E,C,K,C,C,E,C,C,G,G,C,G,C,C,C,E,C,C,C,C,C,A,E,A,C,C,A,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,A,A,M,C,E,A,E,A,A,C,A,A,E,O,C,E,E,I,C,C,E,I,A,E,C,C,C,A,C,E,C,C,K,C,C,G,C,C,E,E,E,C,G,C,C,G,C,C,A,C,E,K,C,E,I,A,E,C,C,C,A,E,A,C,E,C,C,A,G,C,C,A,E,K,C,E,I,A,E,C,C,C,A,C,C,C,E,C,C,A,E,E,C,C,C,A,C,A,C,E,C,A,C,C,C,K,C,E,I,A,E,C,C,C,C,A,C,C,E,C,C,A,G,C,C,A,C,A,E,E,C,C,C,A,C,C,A,M,C,E,I,C,C,C,C,C,C,A,C,C,E,C,C,A,E,E,C,C,C,A,C,A,C,E,C,A,C,C,C,M,C,E,I,C,C,C,C,C,C,A,C,C,E,C,C,A,E,E,C,C,C,A,C,A,C,E,C,C,E,C,A,C,C,A,M,C,E,I,C,C,C,C,C,C,A,C,C,E,C,C,A,G,C,C,E,C,A,C,A,C,C,E,C,C,C,A,C,C,A,M,C,E,I,C,C,C,E,A,C,C,C,C,C,A,C,A,E,O,C,E,I,E,A,C,C,C,E,A,E,A,C,A,A,C,E,O,C,E,I,E,A,C,C,C,C,A,C,C,E,C,C,A,E,C,C,A,C,A,G,E,C,C,C,A,C,C,A,M,C,E,I,C,C,C,C,C,C,A,C,C,E,C,C,A,E,C,C,A,C,A,G,E,C,C,A,C,C,C,A,M,C,E,I,C,C,C,C,C,C,A,C,C,E,C,C,A,E,C,C,E,C,A,C,A,C,E,E,C,C,C,A,C,C,A,M,C,E,I,C,C,C,C,C,C,A,C,C,E,C,C,A,E,C,C,E,C,A,C,A,C,E,E,C,C,C,A,C,C,O,E,C,A,C,C,C,C,C,C,E,I,C,C,C,E,G,C,C,A,E,C,G,C,C,A,C,K,C,C,C,E,A,E,C,C,C,A,C,I,E,C,K,C,C,A,C,A,C,C,C,C,C,C,A,C,A,C,A,A,E,M,C,E,E,G,A,C,E,E,E,E,C,E,A,A,E,A,E,E,A,C,E,G,C,C,C,E,A,G,C,C,C,E,A,G,C,C,A,C,C,K,C,E,I,A,E,C,E,A,C,C,A,E,A,E,E,A,C,C,A,E,A,E,C,E,A,C,A,I,E,C,I,C,C,C,A,C,C,A,E,K,C,E,I,A,E,C,E,A,A,E,A,E,A,E,E,A,C,E,G,C,C,C,E,A,G,C,C,C,E,A,G,C,C,C,E,A,G,C,A,C,C,C,K,C,E,I,A,E,C,E,A,C,C,A,E,A,E,A,E,E,A,C,C,A,E,A,E,A,E,C,E,A,C,A,I,E,C,I,C,C,C,A,C,A,C,E,K,C,E,I,A,E,C,E,A,A,E,A,E,A,E,A,E,E,A,C,E,G,C,C,C,E,A,G,C,C,C,E,A,G,C,C,C,E,A,G,C,C,C,E,A,G,C,C,A,C,C,K,C,E,I,A,E,C,E,A,C,C,A,E,A,E,A,E,A,E,E,A,C,C,A,E,A,E,A,E,A,E,C,E,A,C,A,I,E,C,K,C,C,A,C,A,A,C,E,K,C,E,E,E,K,C,E,G,C,G,O,C,K,G,K,G,K,G,K,I,M,G,M,G,M,G,M,I,O,G,O,E,M,G,M,G,M,G,M,A,G,K,K,G,K,G,K,G,K,G,K,G,E,C,E,8F,I,E,E,C,C,Q,E,M,C,E,C,Q,E,O,E,C,W,G,E,A,C,C,A,A,S,C,C,I,S,C,uB,O,c,C,E,a,0P,I,E,E,C,C,Q,A,G,E,E,C,A,E,C,A,C,C,A,E,U,C,E,C,K,C,E,C,S,C,E,C,S,C,C,A,E,G,C,A,E,C,A,C,C,C,C,W,C,E,C,K,C,E,C,S,C,I,C,K,C,E,C,S,C,C,C,C,C,A,E,U,C,A,E,C,A,C,C,E,M,E,C,E,C,K,C,E,C,S,C,E,C,S,C,C,A,E,I,C,C,C,C,E,E,A,C,A,E,A,C,C,C,E,E,C,C,A,A,C,C,E,C,C,C,C,C,I,C,A,I,U,C,I,W,C,C,U,C,C,C,M,C,C,C,C,C,C,E,I,C,M,A,K,C,6C,C,C,A,I,E,G,E,C,A,I,C,C,M,C,A,E,C,C,C,C,C,C,C,E,C,C,A,C,Q,C,E,C,C,Q,C,C,C,G,C,C,C,A,K,U,E,C,C,C,C,C,E,A,I,E,A,I,C,G,E,C,A,I,I,C,C,C,C,C,C,E,C,E,A,C,C,E,A,C,C,C,A,I,E,E,E,C,G,E,C,E,A,C,E,C,A,E,E,E,E,A,E,I,C,E,E,A,Q,A,G,C,A,E,C,G,A,C,A,A,C,Q,E,C,E,G,G,K,E,O,E,C,K,A,K,C,C,iC,E,O,E,C,A,C,C,A,O,I,U,C,I,W,E,C,M,C,G,A,C,A,A,C,C,C,M,E,C,E,E,C,Q,E,I,G,I,A,E,E,A,E,C,C,A,C,C,E,C,C,C,kB,E,M,A,K,C,C,yB,E,O,E,C,C,A,C,A,O,C,C,A,E,A,C,S,C,E,O,A,C,E,C,E,C,C,E,A,G,C,iB,C,C,A,M,A,K,C,qB,C,C,A,I,E,C,C,C,A,I,I,C,C,C,C,C,C,E,G,G,C,C,E,C,A,G,A,C,C,C,C,C,C,C,C,A,O,C,C,C,A,C,C,U,C,E,O,A,C,E,C,E,I,I,E,O,E,C,K,A,K,C,2B,C,O,G,A,C,C,E,E,C,C,C,K,C,A,G,E,C,A,C,M,A,K,C,yD,C,G,A,C,C,E,E,G,C,U,C,E,C,A,C,C,A,I,I,C,C,C,C,C,C,E,G,G,C,C,E,C,C,I,C,C,C,C,A,C,C,E,E,I,C,Q,C,A,E,C,I,A,C,C,C,C,C,C,C,C,A,E,C,C,A,G,M,C,K,C,I,A,C,C,C,C,A,M,A,K,C,uB,C,C,A,C,C,C,C,C,E,A,E,C,I,C,C,C,E,A,C,O,C,E,G,I,C,C,A,C,A,E,S,C,E,E,M,K,C,E,E,O,C,A,E,E,I,O,C,E,O,A,G,C,C,C,I,C,A,C,I,U,C,E,I,E,C,C,E,C,A,E,C,C,C,C,A,C,M,C,C,C,C,C,A,E,C,A,C,A,C,M,E,I,G,C,A,C,E,C,C,E,C,C,A,C,A,A,C,A,W,U,E,K,C,A,K,C,qB,C,C,A,C,C,G,C,C,C,G,A,C,C,C,A,C,C,M,A,C,A,C,C,A,C,A,C,A,C,E,I,C,E,I,A,C,G,C,E,C,O,I,C,U,E,A,C,A,C,C,I,E,C,C,C,A,Q,C,A,E,S,C,E,O,A,C,C,C,A,E,I,I,I,G,C,C,e,G,E,G,C,C,G,C,C,I,A,K,C,uC,C,C,A,O,A,M,A,C,A,M,C,E,E,C,C,A,C,C,A,A,e,C,E,O,A,C,E,I,E,A,A,G,A,A,C,C,C,C,I,E,A,C,E,G,C,A,C,A,K,E,C,A,E,C,G,I,E,C,A,E,G,M,C,E,C,Q,C,A,E,G,K,C,E,C,O,C,A,E,G,G,C,G,C,C,G,C,C,C,C,C,A,C,A,C,qB,C,E,O,A,C,E,I,E,C,E,A,C,G,A,C,A,C,A,G,C,C,A,C,G,C,E,G,C,A,C,A,K,E,C,A,E,C,C,C,C,C,C,A,E,K,E,G,M,C,E,C,Q,C,A,E,G,K,C,E,C,O,C,A,E,G,G,C,A,G,C,A,C,C,E,C,A,C,A,C,A,A,E,A,C,yB,C,E,O,A,C,E,I,E,C,E,A,C,G,A,C,C,A,E,C,C,C,C,E,C,C,E,G,C,A,C,A,K,E,C,A,E,C,C,C,C,C,C,A,E,K,E,G,M,C,E,C,Q,C,A,E,G,K,C,E,C,O,C,A,E,G,G,C,A,G,C,A,C,C,E,C,A,C,A,C,A,A,E,A,C,U,C,E,O,A,E,E,C,C,G,E,A,A,M,E,U,E,A,O,E,M,C,e,C,O,E,M,C,e,C,I,U,C,G,O,A,C,C,C,C,C,C,wC,C,A,C,A,iO,I,E,E,C,C,Q,E,E,C,C,Q,E,E,C,C,G,K,C,E,E,E,C,A,C,E,C,A,E,C,A,E,C,C,A,E,C,G,E,C,C,C,C,A,E,C,G,C,C,C,A,C,C,C,A,E,C,G,C,C,C,A,C,C,C,A,E,C,G,C,C,C,A,C,C,C,A,E,G,E,C,A,C,A,G,C,C,A,E,I,C,C,C,A,A,I,C,A,C,G,I,A,E,A,C,C,C,A,C,E,C,A,C,C,C,C,C,C,C,E,E,C,A,I,C,A,C,C,A,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,A,E,I,C,A,C,E,C,A,C,C,E,C,C,C,A,C,C,I,C,C,C,E,C,C,A,C,E,A,C,C,C,A,A,C,C,A,E,C,C,A,I,C,C,E,C,C,E,I,C,C,C,C,C,C,C,C,C,E,C,A,A,C,A,E,C,C,E,E,C,A,C,A,E,C,C,C,A,C,C,A,C,A,C,C,C,A,G,C,C,E,G,A,C,G,A,I,E,C,E,C,C,A,C,C,C,A,C,C,C,E,C,C,C,C,C,A,A,A,G,C,E,E,C,C,C,C,E,C,E,E,A,E,G,A,E,C,C,C,A,C,A,C,A,C,A,C,C,C,E,C,C,A,C,A,E,C,A,C,A,E,E,M,A,E,C,C,C,C,C,C,C,A,C,A,E,E,M,A,E,C,C,C,C,C,C,C,A,C,C,C,C,C,A,C,C,C,E,C,C,A,C,A,E,C,A,C,A,E,E,M,A,E,C,C,C,C,C,C,C,A,C,E,E,M,A,E,C,C,C,C,C,C,C,A,C,Q,E,C,C,E,C,C,E,I,C,C,I,W,C,C,G,A,C,C,C,C,I,E,E,C,A,E,E,E,A,C,A,I,C,A,E,E,I,C,C,C,C,C,C,E,C,C,E,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,E,C,C,C,C,C,C,E,C,C,C,C,C,C,E,C,C,C,C,C,C,E,C,C,A,I,I,C,C,C,C,C,C,E,C,C,E,C,C,C,I,E,A,C,C,E,C,C,A,E,C,A,E,C,C,A,E,C,C,A,E,C,A,E,A,C,C,E,C,A,C,C,A,C,C,E,C,C,A,C,A,E,A,E,E,A,C,C,A,C,C,C,C,C,E,C,A,C,C,A,E,E,A,C,C,A,C,C,C,C,C,E,C,C,A,C,A,I,I,C,C,C,C,C,C,E,C,C,E,E,C,A,C,C,C,C,C,C,E,E,A,C,A,C,C,C,C,C,C,C,E,E,A,A,C,G,E,C,C,A,C,C,C,A,E,C,C,A,C,C,C,A,I,I,C,C,C,C,C,C,E,C,C,E,C,C,I,E,C,C,C,A,C,C,A,E,A,E,E,C,C,A,E,C,E,A,A,C,C,A,E,C,C,A,E,C,E,A,A,C,A,C,A,C,C,C,A,E,C,C,A,E,A,C,A,E,C,C,A,E,A,C,C,C,A,C,C,E,A,C,E,A,C,A,C,E,A,C,C,C,E,A,A,C,G,I,C,C,C,C,C,C,E,C,C,E,E,C,C,I,I,C,C,C,C,C,C,E,C,C,E,C,C,C,C,C,C,C,C,C,C,C,C,C,A,I,I,C,C,C,C,C,C,E,C,C,E,C,C,C,C,C,C,C,E,C,C,C,C,C,E,C,C,A,E,C,C,C,C,C,C,E,C,C,A,E,C,C,A,A,C,C,C,C,E,C,C,E,C,A,C,C,A,C,C,E,C,C,E,C,A,A,C,C,A,I,C,C,C,A,C,A,A,E,O,C,C,O,A,M,I,E,I,C,Y,C,C,C,C,C,C,G,C,C,E,E,C,C,G,K,E,C,A,I,C,Q,C,E,I,C,C,C,I,C,E,I,A,C,A,S,C,E,I,C,E,C,M,C,E,I,C,E,C,G,C,E,I,A,C,A,G,C,C,C,A,I,C,M,C,C,C,A,I,C,Q,E,E,G,C,A,C,S,C,G,C,C,C,A,E,M,A,E,G,C,E,G,C,A,C,A,Q,E,I,C,Q,E,G,C,M,A,K,C,0C,C,C,A,I,C,K,C,I,U,C,G,C,C,A,I,C,O,C,C,E,E,G,A,E,I,C,K,C,A,C,A,A,M,E,C,E,I,C,A,O,C,I,C,M,C,C,A,I,C,M,C,C,C,A,I,C,G,C,C,A,C,A,A,M,C,C,C,C,C,E,E,M,A,E,I,C,C,A,G,U,C,O,C,C,C,I,C,A,E,C,A,E,C,A,C,C,E,O,A,E,E,C,C,A,M,C,A,I,I,E,C,A,C,E,C,E,A,C,I,E,E,E,C,G,C,E,I,C,C,E,C,E,C,E,A,C,C,E,I,C,C,C,C,C,C,E,C,C,C,C,C,C,I,C,G,E,C,E,C,C,G,C,C,A,A,I,C,G,G,G,I,C,A,M,E,C,A,A,O,I,A,C,A,A,M,E,C,G,I,C,Q,C,O,A,I,C,Q,E,E,E,C,A,C,O,Q,C,K,C,U,C,C,C,I,A,C,C,C,E,C,C,E,C,G,C,A,C,C,C,C,C,C,C,G,C,E,C,E,G,C,C,M,E,C,A,C,C,E,C,C,E,E,E,A,C,G,C,M,E,A,C,A,A,S,C,C,C,C,C,E,E,M,A,E,I,E,G,C,C,C,A,C,C,K,A,E,G,A,C,C,E,C,M,E,C,A,I,E,I,C,E,G,C,A,U,C,C,C,I,C,A,I,I,E,C,A,C,E,C,C,C,K,C,E,C,E,A,C,I,C,M,E,G,I,C,A,M,E,C,A,I,E,E,E,C,G,C,E,I,C,C,K,C,E,C,E,A,C,C,A,C,E,C,E,O,C,C,I,C,M,C,I,C,M,C,G,C,C,C,A,C,C,E,C,M,E,E,E,C,A,A,E,A,E,C,I,C,C,A,C,C,K,C,C,C,C,G,C,I,C,S,C,M,A,K,C,uC,C,C,A,O,I,C,S,C,E,C,A,A,C,C,C,C,C,C,C,M,C,E,E,M,A,E,G,E,C,C,A,C,O,C,I,U,C,G,C,A,C,C,C,C,M,C,C,C,C,G,G,E,M,A,E,E,C,G,C,C,A,I,C,Q,C,M,A,K,C,6B,C,C,A,O,I,C,S,C,G,A,C,C,E,C,O,E,C,A,C,C,A,C,C,I,E,C,O,I,C,U,C,I,U,C,I,C,S,C,C,A,C,A,A,O,E,C,I,C,S,E,E,E,C,C,C,K,C,I,C,C,C,A,C,A,A,U,C,C,C,C,G,U,C,Q,C,C,W,Q,C,W,C,C,C,I,C,A,O,E,E,E,A,I,E,E,E,A,E,E,A,A,E,C,C,C,A,C,A,C,M,C,G,C,I,C,O,C,C,A,E,A,G,C,I,C,G,C,A,E,A,M,C,I,C,M,C,A,E,A,Q,C,I,C,Q,C,A,E,A,M,C,E,E,A,E,C,G,C,E,E,A,E,C,M,C,E,E,A,K,C,G,C,E,E,A,K,C,G,C,I,C,S,C,A,C,C,A,C,A,A,E,M,C,E,I,C,C,C,A,E,E,E,E,E,C,E,A,E,a,A,E,G,C,C,G,E,E,E,A,I,A,A,E,G,C,C,C,E,C,E,C,C,E,C,C,G,C,E,A,C,C,C,K,C,E,C,C,E,C,C,G,C,E,A,C,C,C,K,C,E,C,C,E,C,C,G,C,E,A,C,C,C,K,C,E,C,C,E,A,C,G,C,E,A,C,C,C,O,C,E,C,C,E,C,C,G,C,E,A,C,C,C,O,C,E,C,C,E,C,C,G,C,E,A,C,C,C,O,C,E,C,C,E,C,C,G,C,E,A,C,C,C,O,C,E,C,C,E,A,C,G,C,E,C,C,A,C,C,C,E,E,C,C,E,C,C,C,E,A,E,wB,A,E,C,E,C,C,E,C,C,G,E,E,E,A,A,I,A,A,K,C,C,A,K,C,E,E,E,G,A,C,C,A,I,A,C,C,A,C,O,C,E,G,C,E,A,C,G,C,E,A,C,C,C,K,C,E,G,C,E,A,C,G,G,C,C,C,0B,O,c,C,E,a,+B,I,E,E,C,C,M,E,E,E,C,C,K,E,E,G,C,C,A,C,O,C,C,E,M,C,E,E,U,A,E,E,C,C,A,A,C,C,A,E,O,C,C,A,E,C,E,I,A,E,C,C,C,E,Q,A,E,E,G,G,C,C,A,M,C,E,E,O,A,E,E,G,C,A,A,C,C,A,C,E,M,C,E,E,C,C,E,E,A,C,G,C,C,C,A,S,G,C,C,C,A,A,C,C,A,O,C,C,S,C,E,G,E,I,E,A,A,S,C,qB,C,C,A,E,C,C,C,A,C,C,I,A,C,M,C,S,C,C,sF,I,E,E,C,C,Q,E,E,C,C,O,O,I,M,E,I,C,Y,C,C,C,C,C,C,C,C,C,K,E,C,A,I,C,Q,C,E,I,C,C,C,O,C,E,I,C,E,C,M,C,E,I,C,E,C,C,C,E,E,C,C,C,Q,C,G,E,C,C,C,M,C,C,C,A,I,C,G,C,C,C,A,I,C,S,C,G,E,C,C,C,M,C,I,U,C,G,I,C,A,C,C,E,C,C,E,E,U,A,E,I,C,M,C,A,C,A,A,M,C,C,C,C,C,E,E,M,A,E,I,C,C,A,G,C,M,Q,C,U,C,C,C,I,C,A,E,A,C,E,C,A,A,E,E,O,A,E,E,C,C,A,M,C,A,I,I,E,C,A,C,E,C,E,A,C,I,E,E,E,C,G,C,E,I,C,C,E,C,E,C,E,A,C,C,C,I,A,E,C,I,C,C,C,E,E,C,S,A,E,G,C,C,C,E,G,E,C,C,C,A,E,A,E,I,C,C,M,C,E,G,A,C,C,C,M,A,A,E,G,C,A,E,E,M,C,E,C,C,C,E,C,C,E,C,G,C,C,A,I,C,G,E,E,E,C,A,A,E,E,C,C,C,G,G,I,I,A,C,C,M,C,E,C,C,A,C,A,I,C,G,C,C,C,C,A,O,I,C,M,E,E,E,I,C,A,I,C,U,E,C,A,I,A,C,A,A,U,C,C,C,C,C,E,E,M,A,E,I,C,C,A,C,E,E,M,A,E,E,C,G,C,C,A,I,C,Q,E,E,E,C,A,Q,C,M,C,U,C,C,M,C,C,I,C,A,K,C,C,C,I,A,C,C,C,G,C,C,A,I,I,C,C,C,I,C,Q,C,G,A,C,G,C,C,C,C,A,I,C,S,C,E,G,C,C,C,E,C,O,C,E,C,C,A,C,A,E,C,A,C,C,I,I,C,C,E,C,A,C,E,C,E,C,C,C,A,C,C,C,C,C,C,A,S,A,C,C,C,A,C,C,C,C,E,G,A,U,E,O,E,E,U,C,O,E,E,U,C,E,E,G,A,C,C,C,A,C,E,E,I,C,E,C,C,A,E,M,A,C,U,C,C,A,E,A,M,C,G,E,A,E,C,A,E,A,G,C,C,C,C,E,G,A,C,C,C,C,C,A,C,A,A,C,A,C,A,C,C,A,C,A,C,A,C,E,E,A,C,C,A,C,C,C,C,G,C,E,C,C,E,A,G,C,A,C,A,C,C,O,C,E,C,C,E,A,E,C,C,A,A,C,C,A,E,A,C,C,I,E,C,C,C,A,I,C,M,E,G,C,C,C,C,C,O,C,E,C,C,A,C,A,I,E,C,E,A,E,U,A,E,G,A,C,C,A,C,G,C,S,C,A,G,E,C,A,C,M,A,K,C,6C,C,C,A,I,E,E,C,A,C,A,A,E,G,C,C,G,E,C,A,G,E,E,E,C,G,C,M,A,K,C,oC,C,C,A,I,I,C,C,C,C,C,C,E,C,E,C,A,E,G,M,C,C,C,C,C,C,C,C,C,C,E,C,A,C,C,C,G,E,C,G,Q,C,W,C,C,C,I,C,A,I,C,U,C,G,G,C,A,C,C,C,C,I,C,C,C,C,G,M,C,A,C,G,C,O,E,C,A,C,C,A,C,C,Q,C,C,C,C,E,E,E,A,I,I,C,W,C,C,C,C,A,G,C,G,I,C,G,E,C,C,A,G,U,C,Q,C,C,Q,C,U,C,W,C,K,C,C,I,C,A,O,E,A,M,C,E,E,A,E,C,A,C,E,C,C,A,A,Q,C,E,E,A,I,C,I,C,E,E,G,C,C,A,A,C,E,G,C,G,C,G,C,C,A,C,A,A,A,C,C,A,I,C,K,4G,I,E,E,C,C,Q,E,E,C,C,Q,E,C,G,A,U,C,C,C,A,C,C,A,C,E,C,C,C,E,C,C,C,E,C,C,C,E,C,C,C,C,C,C,C,C,C,E,C,E,C,C,C,C,C,A,E,A,G,O,C,I,C,A,C,C,K,C,E,C,C,C,C,C,C,E,C,C,A,C,C,A,E,A,E,A,C,E,C,A,C,E,A,C,C,C,C,E,C,A,C,A,C,C,C,C,A,E,C,C,C,A,C,A,E,C,C,C,A,C,A,I,I,C,C,C,C,C,C,C,C,C,E,C,I,I,C,G,C,E,E,A,C,C,A,C,I,C,C,C,C,C,C,G,C,A,C,E,A,C,A,C,C,C,C,C,C,A,I,E,C,C,E,A,C,E,A,C,E,C,E,C,C,C,C,C,C,C,A,C,C,A,E,C,E,C,E,C,E,C,C,C,C,C,C,C,C,C,C,C,E,C,E,C,E,C,E,C,C,C,C,C,C,C,C,C,E,C,E,C,E,C,E,C,C,C,C,C,C,C,C,C,C,C,E,C,E,C,E,C,E,C,C,C,C,C,C,C,C,C,E,C,E,C,E,C,E,C,C,C,C,C,C,C,C,C,C,C,E,C,E,C,E,C,E,C,C,C,C,C,C,C,C,C,E,C,E,C,E,C,E,C,C,C,C,C,C,C,C,C,C,C,E,C,E,C,E,C,E,C,C,C,C,C,C,C,C,C,E,C,E,C,E,C,E,C,C,C,C,C,C,C,C,C,C,C,G,C,A,C,E,A,C,G,U,C,C,C,C,C,A,E,E,E,C,A,C,C,C,C,C,A,E,C,C,C,C,E,C,A,C,C,C,A,C,A,A,C,C,C,C,C,C,C,C,C,A,E,E,E,C,A,C,C,C,C,C,A,E,C,C,C,C,E,C,A,C,C,C,A,C,A,A,C,C,C,C,C,C,C,C,C,A,E,A,G,C,W,C,A,C,C,C,Q,E,C,U,C,U,C,U,C,C,C,A,E,A,G,C,W,C,A,C,C,S,C,U,C,U,C,U,C,E,C,C,A,E,C,C,C,C,C,E,C,A,E,A,C,C,C,E,C,A,A,E,C,E,G,C,C,C,G,C,C,C,C,C,C,C,C,C,S,A,C,E,C,E,C,C,C,A,C,C,C,A,C,E,C,E,C,C,C,A,C,A,C,C,C,C,C,A,A,C,A,E,E,C,C,C,C,E,C,C,A,C,C,A,C,E,C,E,C,C,C,A,C,A,C,A,C,C,C,C,A,C,A,E,C,A,C,E,C,A,C,A,A,C,G,E,C,G,A,W,C,C,C,C,A,A,C,M,S,C,E,I,C,a,C,K,C,E,C,E,C,C,E,G,C,C,C,C,C,E,C,U,C,E,C,C,A,C,E,C,U,E,C,C,C,C,C,E,C,U,E,C,C,C,C,C,E,C,U,C,E,C,C,A,C,E,C,U,C,C,A,C,C,C,A,E,C,G,I,C,I,C,I,C,C,I,I,C,C,C,I,C,A,M,C,E,A,E,A,E,A,E,A,E,A,A,C,A,A,G,C,C,C,C,C,C,C,C,C,C,C,C,I,C,E,C,C,C,A,E,A,I,C,E,C,C,C,A,E,A,I,C,E,C,C,C,A,E,A,I,C,E,C,C,C,A,E,A,I,C,E,C,C,C,A,C,C,A,A,O,C,C,C,C,C,C,I,I,C,C,C,C,C,C,E,C,C,E,C,G,C,C,C,A,C,C,C,C,E,E,O,C,G,G,A,C,C,C,C,E,A,C,C,I,C,E,C,E,A,E,A,E,A,C,C,I,C,E,C,E,A,E,A,E,A,C,C,I,C,E,C,E,A,E,A,E,A,C,C,I,C,E,C,E,A,E,A,E,A,C,C,I,C,E,C,E,A,E,A,C,G,I,E,C,C,C,C,C,C,C,G,C,A,E,E,E,C,C,E,A,E,C,A,A,C,A,E,C,E,A,C,A,C,E,C,A,C,C,A,A,C,C,E,C,E,A,A,C,C,E,C,A,C,C,A,A,C,C,C,C,C,E,A,A,C,C,E,C,A,C,C,E,C,G,C,C,C,C,C,C,E,C,C,C,C,C,C,I,E,A,E,E,A,A,C,C,E,E,A,C,C,A,E,C,A,C,C,C,C,C,C,C,C,E,C,A,C,C,C,C,C,E,A,C,A,C,A,E,A,E,A,E,A,E,A,E,A,C,C,E,E,A,A,E,C,C,E,A,E,A,E,A,E,A,A,C,C,E,I,C,C,C,C,C,C,E,C,C,E,A,C,C,I,E,A,E,E,A,A,C,C,E,E,A,E,A,A,E,C,A,C,C,C,C,C,C,C,C,E,C,A,C,C,C,C,C,E,A,C,A,C,A,E,A,E,A,E,A,E,A,E,A,C,C,E,E,A,A,E,C,C,E,A,E,A,E,A,E,A,C,A,A,C,G,C,G,C,I,C,E,C,E,A,A,E,A,C,A,C,I,C,E,C,E,A,E,A,C,A,C,I,C,E,C,E,A,E,A,C,A,C,I,C,E,C,E,A,E,A,C,A,C,I,C,E,C,E,A,E,A,C,A,C,A,C,A,A,U,E,C,E,C,G,C,C,C,A,C,A,A,O,E,C,I,C,S,E,E,E,C,C,C,M,C,I,C,C,C,C,A,I,C,G,C,C,C,C,C,C,C,C,C,C,C,A,C,A,C,A,E,S,C,E,E,M,G,C,C,E,E,e,A,E,G,C,C,G,S,E,C,C,yF,I,E,E,C,C,Q,E,C,C,C,C,K,E,G,E,C,C,C,C,M,C,C,E,M,C,E,E,S,A,E,E,C,C,A,A,C,C,A,E,O,C,C,A,E,C,E,I,A,E,C,C,C,E,Q,A,E,E,G,G,C,C,A,M,C,E,E,O,A,E,E,G,C,A,A,C,C,A,C,E,M,C,E,E,C,C,E,E,A,C,G,C,C,C,A,S,G,C,C,C,A,A,C,C,A,O,C,C,S,C,E,G,E,I,E,A,A,S,C,qB,C,C,A,E,C,C,C,A,C,C,I,A,C,M,C,S,C,C,uB,O,c,C,E,a,4B,I,E,E,C,C,Q,E,E,C,C,K,E,G,E,C,C,C,C,G,I,C,C,C,C,C,C,C,C,C,E,M,C,E,E,U,A,E,E,E,E,A,E,A,E,C,C,A,A,A,C,C,A,A,E,I,C,C,G,E,C,C,C,C,A,C,C,C,C,C,E,I,E,C,E,E,C,O,A,E,E,O,G,C,C,A,E,C,C,C,E,Q,A,E,E,G,G,C,C,A,M,C,E,E,O,A,E,E,E,E,E,A,A,E,A,G,C,A,A,A,C,C,A,A,C,K,C,E,E,C,C,C,C,A,E,G,C,A,A,C,W,G,C,C,C,A,A,C,C,A,I,I,C,S,C,E,G,E,I,E,A,A,K,C,kB,C,C,A,E,C,C,C,A,C,C,C,G,C,M,C,M,C,C,gG,I,E,E,C,C,Q,G,E,C,C,C,C,O,C,A,E,O,I,U,C,C,E,E,W,A,E,G,C,C,A,C,C,A,C,C,A,S,A,C,C,A,C,E,M,C,E,E,C,A,E,C,C,C,G,K,C,E,E,C,C,E,E,E,C,C,C,G,C,A,O,G,C,C,C,A,A,C,C,A,Q,C,A,S,C,E,G,E,I,E,A,A,K,C,uB,C,C,A,E,C,C,C,A,C,C,I,C,C,K,C,W,C,C,+F,I,E,E,C,C,Q,E,E,C,C,Q,E,C,A,C,C,C,C,C,E,C,C,A,C,C,C,A,C,C,C,C,C,A,C,C,C,A,C,C,C,C,C,E,C,C,A,C,C,C,A,C,A,C,C,C,A,C,A,C,C,C,A,C,C,I,E,G,M,C,C,K,E,G,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,C,C,A,E,A,G,C,W,C,A,C,C,S,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,C,C,A,E,I,E,G,M,C,E,C,A,C,E,E,E,M,I,E,I,C,a,C,K,C,E,C,E,C,C,E,G,E,C,C,A,C,C,C,C,C,A,C,C,C,C,C,I,C,C,C,C,C,A,C,C,C,C,C,I,C,C,C,C,C,A,C,C,C,C,C,I,C,C,C,C,C,A,C,C,C,C,C,I,C,C,C,A,C,C,C,C,C,C,C,I,C,C,C,C,C,A,C,C,C,C,C,I,C,C,C,C,C,A,C,C,C,C,C,I,C,C,C,A,C,C,C,C,C,C,A,C,A,G,E,C,G,G,C,G,C,G,C,C,G,G,C,G,C,G,C,G,C,C,C,I,C,A,M,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,A,C,A,A,G,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,I,C,C,C,C,C,A,C,C,I,C,C,C,C,C,A,C,C,I,C,C,C,A,C,A,C,E,I,C,C,C,C,C,A,C,C,I,C,C,C,A,C,A,C,E,I,C,C,C,C,C,A,C,C,I,C,C,C,C,C,A,C,C,I,C,C,C,C,C,A,C,A,C,A,O,C,C,C,C,C,C,I,I,C,C,C,C,C,C,E,C,C,E,C,G,C,C,C,A,C,C,C,C,E,E,O,C,G,G,A,E,C,C,A,I,C,C,E,C,C,C,E,C,C,E,C,C,I,E,C,A,C,C,C,E,C,C,A,E,A,C,C,C,C,C,C,C,A,E,A,C,E,E,I,A,E,E,C,A,C,C,C,E,E,I,A,E,E,C,C,C,C,G,C,C,C,A,C,C,A,C,E,E,I,A,E,E,A,E,C,C,C,E,E,I,A,E,E,A,E,C,C,E,E,E,C,A,C,A,C,C,C,C,E,A,C,C,C,C,C,C,C,E,A,C,C,C,C,E,C,C,A,C,C,A,A,G,G,C,G,C,G,C,G,C,C,G,G,C,G,C,G,C,C,C,I,C,A,I,I,C,C,C,C,C,C,E,C,C,E,C,C,I,E,A,C,E,C,A,E,E,E,E,A,E,C,C,C,C,C,C,E,E,I,A,E,C,C,E,C,C,C,E,E,I,A,E,C,C,G,C,C,A,E,C,A,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,A,C,C,A,E,A,C,C,E,E,A,I,A,E,C,C,C,C,C,C,E,E,I,A,E,C,C,E,C,C,G,E,I,A,E,C,C,G,C,C,A,E,C,A,C,C,C,C,C,C,A,C,C,A,C,C,C,C,A,C,C,C,C,A,C,C,C,C,A,C,C,C,C,E,A,C,A,C,A,C,C,C,C,A,C,C,C,C,A,C,C,C,C,A,C,C,E,A,E,A,C,A,C,A,A,C,C,C,C,I,C,C,C,A,C,C,A,C,C,C,C,I,C,C,C,A,C,C,A,C,C,C,C,I,C,C,C,A,C,C,A,C,C,C,C,I,C,C,C,A,C,C,A,C,C,C,C,I,C,C,C,A,C,C,A,C,C,C,C,I,C,C,C,A,C,C,A,C,C,C,C,I,C,C,C,A,C,C,A,C,C,C,C,I,C,C,C,A,C,C,A,I,C,G,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,A,C,A,A,U,E,C,E,I,C,C,A,C,A,C,A,A,O,E,C,I,C,G,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,A,I,C,M,C,I,C,C,C,A,C,A,C,A,M,M,I,E,I,S,C,K,E,C,A,I,C,C,C,U,E,C,C,C,C,C,C,C,U,C,E,C,C,A,C,C,C,U,C,E,C,C,A,C,C,C,U,C,E,C,C,A,C,C,C,S,C,G,A,C,A,C,A,C,U,C,E,C,C,A,C,C,C,U,C,E,C,C,A,C,C,C,U,E,C,C,C,C,C,S,C,E,A,C,A,C,A,E,M,C,C,E,E,e,A,E,G,C,C,G,G,E,C,E,C,C,C,C,C,E,E,e,A,E,G,C,C,G,M,E,C,C,8F,I,E,E,C,C,Q,E,E,C,C,O,O,I,M,E,I,C,Y,C,C,C,C,C,K,E,C,A,I,C,Q,E,E,G,C,A,C,S,E,E,C,E,A,C,C,I,A,E,G,C,C,C,C,E,C,E,E,O,A,E,G,C,C,C,A,I,C,K,C,E,E,I,E,C,A,U,E,O,I,C,K,C,M,C,M,A,K,C,qD,C,A,C,I,C,Q,C,I,C,K,C,Q,C,A,I,C,S,C,I,C,K,C,S,C,A,I,E,I,C,C,O,C,A,E,C,G,U,C,G,E,C,E,A,C,A,C,C,C,K,C,E,E,E,E,C,C,A,E,C,M,C,G,A,C,K,E,C,A,C,E,A,C,C,E,I,C,C,C,C,C,C,E,C,K,C,C,E,C,C,C,C,C,E,G,C,C,E,C,K,C,M,C,G,A,C,C,E,C,K,C,E,E,I,E,C,A,I,I,C,C,C,C,C,C,E,C,K,C,C,E,C,C,C,C,C,E,I,A,G,C,C,E,C,E,C,M,C,G,A,C,C,A,C,G,C,C,C,A,C,A,A,M,C,C,C,C,M,G,E,M,A,E,I,C,C,A,I,C,K,C,M,C,G,A,C,C,E,A,C,A,A,U,C,C,C,C,C,E,E,M,A,E,I,C,C,A,C,E,E,K,A,E,E,C,G,C,S,C,C,A,I,C,Q,E,E,E,C,C,C,K,C,U,C,G,A,C,C,E,C,K,C,M,C,G,A,C,C,E,C,K,C,U,C,G,A,C,C,E,C,O,E,A,C,A,A,M,E,C,I,E,C,G,U,C,I,C,K,C,S,C,C,A,O,I,C,U,C,G,A,C,A,C,A,A,C,C,Q,C,C,C,C,E,E,E,A,M,C,M,C,M,C,c,C,I,C,C,C,E,C,C,C,E,O,C,O,C,C,U,W,C,C,U,W,C,C,C,I,C,A,O,E,A,Q,C,E,E,A,I,C,I,C,E,E,A,K,C,E,C,E,E,A,I,C,I,C,E,E,A,K,A,C,A,E,G,O,C,E,A,K,C,C,A,E,A,K,C,E,G,O,C,E,A,K,C,C,A,C,C,A,A,C,M,E,C,I,C,S,E,E,E,C,C,C,K,C,O,E,C,A,I,C,K,C,O,E,A,C,A,C,A,E,I,C,E,E,C,G,C,C,C,C,E,A,C,C,E,C,E,C,C,C,E,A,E,C,A,C,K,C,G,I,C,C,E,C,A,E,I,C,M,C,C,E,E,C,C,C,A,G,E,E,A,E,C,C,C,2G,I,E,E,C,C,Q,E,E,C,C,Q,E,E,C,C,G,K,S,E,C,C,C,C,C,C,C,C,C,C,E,E,I,A,E,G,C,C,C,A,G,C,O,C,W,C,C,C,C,C,C,E,C,C,O,A,E,C,K,C,E,C,S,C,E,C,C,G,E,C,A,C,E,E,M,A,E,C,C,C,A,C,E,E,M,A,E,G,C,C,C,A,C,C,M,A,E,G,C,C,C,C,E,C,C,E,A,K,C,uC,C,C,A,I,E,C,E,E,C,M,A,E,G,E,E,C,C,C,A,C,M,A,E,G,E,A,A,C,C,E,U,C,G,E,A,C,A,C,A,I,C,M,C,E,E,C,E,E,C,A,C,C,A,O,E,C,M,C,G,C,C,C,G,G,C,O,E,G,M,M,E,I,G,O,C,C,A,C,A,A,I,K,E,C,C,C,C,C,C,C,C,C,C,C,O,E,C,M,E,C,A,E,K,E,E,C,A,G,C,C,E,K,E,C,A,C,C,I,C,C,C,C,A,C,C,A,A,C,C,M,C,E,O,A,A,C,C,C,C,C,C,A,C,E,I,E,C,C,C,C,A,O,C,I,C,C,C,I,S,C,C,C,E,E,E,A,E,E,A,C,C,A,C,A,C,A,G,U,C,C,C,C,A,E,C,C,C,E,U,A,E,G,A,C,A,C,A,I,U,C,E,C,Q,C,C,A,I,I,E,A,C,C,E,C,A,C,E,C,C,E,C,C,A,G,A,E,C,Q,C,C,I,E,A,E,A,Q,C,E,C,C,C,C,C,Q,C,C,A,E,E,M,C,C,C,E,C,G,A,E,C,A,C,A,C,K,K,C,E,C,C,A,M,C,G,A,C,S,C,C,C,C,A,E,A,G,C,C,C,Q,C,C,C,E,A,M,C,C,C,A,I,I,E,A,C,C,E,A,C,C,E,E,A,C,E,C,S,C,G,C,C,I,C,C,C,C,U,C,C,C,C,A,I,I,C,C,C,C,C,C,E,A,M,C,C,E,C,C,C,C,C,E,C,C,C,C,C,A,C,A,O,E,E,C,C,E,A,E,C,A,C,A,A,A,C,A,C,E,W,C,E,G,S,C,A,C,C,C,C,C,C,C,E,E,E,E,C,C,C,C,A,O,C,O,I,C,I,C,K,C,S,C,C,C,E,E,E,A,E,E,A,C,C,A,C,A,C,A,G,U,C,C,C,C,A,E,C,C,C,E,U,A,E,G,A,C,A,C,A,I,U,C,E,C,Q,C,C,A,I,I,E,A,C,C,E,C,A,C,E,C,C,E,C,C,A,G,A,E,C,Q,C,C,I,E,A,E,A,Q,C,E,C,C,C,C,C,Q,C,C,A,E,E,M,C,C,C,E,C,G,C,C,C,A,C,C,A,K,K,C,E,C,C,A,M,C,G,A,C,S,C,C,C,C,A,E,A,G,C,C,C,Q,C,C,C,E,A,M,C,C,C,A,M,G,E,S,A,E,C,C,C,C,E,G,E,A,E,A,C,S,C,G,C,C,I,C,C,C,C,U,C,C,C,C,A,I,I,C,C,C,C,C,C,E,A,M,C,C,E,C,C,C,C,C,E,C,C,C,C,A,C,A,C,C,A,A,O,E,E,C,C,E,A,E,C,A,C,A,A,A,C,A,+G,I,E,E,C,C,Q,E,E,C,C,Q,E,E,C,C,O,E,E,C,C,Q,E,C,C,A,C,C,E,C,C,A,E,C,C,A,C,A,G,E,C,C,C,A,C,C,O,E,C,C,C,C,C,C,C,C,C,A,C,C,E,I,E,C,A,C,E,E,A,C,C,C,E,E,A,C,E,C,A,C,E,E,A,C,C,C,E,E,A,C,A,E,C,A,C,E,E,A,C,C,C,E,E,A,C,E,C,A,C,E,E,A,C,C,C,E,E,A,C,A,E,C,A,C,E,E,A,C,C,C,E,E,A,C,E,C,A,C,E,E,A,C,C,C,E,E,A,C,A,E,C,A,C,E,E,A,C,C,C,E,E,A,C,E,C,A,C,E,E,A,C,C,C,E,E,A,C,A,E,C,A,C,E,E,A,C,C,C,E,E,A,C,E,C,A,C,E,E,A,C,C,C,E,E,A,C,A,E,C,A,C,E,E,A,C,C,C,E,E,A,C,E,C,A,C,E,E,A,C,C,C,E,E,A,C,A,E,C,A,C,E,E,A,C,C,C,E,E,A,C,E,C,A,C,E,E,A,C,C,C,E,E,A,C,A,E,C,A,C,E,E,A,C,C,C,E,E,A,C,E,C,A,C,E,E,A,C,C,C,E,E,A,C,A,E,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,E,I,C,C,C,C,C,C,C,C,C,E,C,C,A,G,A,E,E,A,C,C,C,A,C,C,C,C,A,G,A,E,E,A,C,C,C,A,C,C,C,C,A,G,A,E,E,A,C,C,C,A,C,E,C,C,A,G,A,E,E,A,C,C,C,A,C,E,C,C,A,G,A,E,E,A,C,C,C,A,C,C,C,C,A,G,A,E,E,A,C,C,C,A,C,C,C,C,A,G,A,E,E,A,C,C,C,A,C,E,C,C,A,G,A,E,E,A,C,C,C,A,C,E,C,C,A,G,A,E,E,A,C,C,C,A,C,C,C,C,A,G,A,E,E,A,C,C,C,A,C,C,C,C,A,G,A,E,E,A,C,C,C,A,C,E,C,C,A,G,A,E,E,A,C,C,C,A,C,E,C,C,A,G,A,E,E,A,C,C,C,A,C,C,C,C,A,G,A,E,E,A,C,C,C,A,C,C,C,C,A,G,A,E,E,A,C,C,C,A,C,E,C,C,A,G,A,E,E,A,C,C,C,A,C,E,C,C,A,G,A,E,E,A,C,C,C,A,C,C,C,C,A,G,A,E,E,A,C,C,C,A,C,C,C,C,A,G,A,E,E,A,C,C,C,A,C,E,C,C,A,G,A,E,E,A,C,C,C,A,C,E,C,C,A,G,A,E,E,A,C,C,C,A,C,C,C,C,A,G,A,E,E,A,C,C,C,A,C,C,C,C,A,G,A,E,E,A,C,C,C,A,C,E,C,C,A,G,A,E,E,A,C,C,C,A,C,E,C,C,A,G,A,E,E,A,C,C,C,A,C,C,C,C,A,G,A,E,E,A,C,C,C,A,C,C,C,C,A,G,A,E,E,A,C,C,C,A,C,E,C,C,A,G,A,E,E,A,C,C,C,A,C,E,C,C,A,G,A,E,E,A,C,C,C,A,C,C,C,C,A,G,A,E,E,A,C,C,C,A,C,C,C,C,A,G,A,E,E,A,C,C,C,A,C,E,C,C,A,G,A,E,E,A,C,C,C,A,C,E,C,C,A,C,C,E,E,A,C,E,C,C,C,A,C,A,A,C,C,E,E,A,C,E,C,C,C,A,C,A,A,C,C,E,E,A,C,E,C,C,C,A,C,A,A,C,C,E,E,A,C,E,C,C,C,A,C,A,A,C,C,E,E,A,C,E,C,C,C,A,C,A,A,C,C,E,E,A,C,E,C,C,C,A,C,A,A,C,C,E,E,A,C,E,C,C,C,A,C,A,A,C,C,E,E,A,C,E,C,C,C,A,C,A,A,C,C,E,E,A,C,E,C,C,C,A,C,A,A,C,C,E,E,A,C,E,C,C,C,A,C,A,A,C,C,E,E,A,C,E,C,C,C,A,C,A,A,C,C,E,E,A,C,E,C,C,C,A,C,A,A,C,C,E,E,A,C,E,C,C,C,A,C,A,A,C,C,E,E,A,C,E,C,C,C,A,C,A,A,C,C,E,E,A,C,E,C,C,C,A,C,A,A,C,C,E,E,A,C,E,C,C,C,A,A,C,A,A,A,S,E,C,C,C,C,C,C,A,C,C,C,E,I,E,E,A,A,C,C,A,E,E,A,A,E,C,C,C,A,I,I,C,C,C,C,C,C,E,C,C,E,C,C,C,E,C,C,A,C,C,C,E,A,C,C,C,C,E,C,C,A,E,C,C,C,C,A,C,G,I,C,C,C,C,C,C,C,A,C,C,E,C,G,C,C,C,E,C,E,C,A,E,E,C,C,E,A,E,A,C,A,C,C,E,C,A,C,A,C,A,C,E,G,C,C,C,C,A,C,C,E,C,C,E,A,E,C,A,A,E,C,A,E,C,C,C,A,C,C,C,C,K,E,C,C,C,C,C,A,E,C,E,G,C,C,G,A,G,C,O,C,O,I,C,Q,C,Y,C,C,C,C,C,C,E,C,C,O,A,E,C,K,C,E,C,S,C,E,C,M,C,I,I,C,E,C,A,G,C,C,C,A,C,A,E,E,M,A,E,C,C,C,A,C,E,E,M,A,E,C,C,C,A,C,E,E,M,A,E,C,C,C,A,C,E,E,M,A,E,G,C,C,C,A,C,C,M,A,E,G,C,E,E,C,C,C,G,A,E,M,C,C,A,I,G,E,K,G,E,O,E,M,A,E,G,C,+B,C,C,A,I,E,G,C,C,C,A,C,C,E,C,C,A,G,C,C,A,C,C,E,C,C,C,C,E,C,A,C,C,C,E,C,E,C,G,C,E,C,C,C,C,C,C,A,I,E,E,G,M,A,K,C,6F,C,C,A,G,C,C,C,E,C,C,C,C,I,E,M,C,C,A,E,C,A,E,M,A,C,E,E,C,0F,C,C,A,G,E,C,E,A,E,C,C,C,G,E,M,C,C,A,E,C,C,K,A,K,C,gF,C,C,A,I,E,G,C,C,C,C,C,A,C,A,E,C,C,E,G,C,E,A,A,K,C,C,8B,E,E,K,kB,E,E,I,K,C,C,C,A,I,C,C,C,E,E,M,A,E,E,M,C,E,E,C,C,A,C,C,A,C,K,C,E,C,C,C,C,A,E,C,A,A,E,E,G,A,E,C,C,C,A,C,C,C,E,E,G,A,E,I,U,C,E,C,C,C,C,A,E,C,A,A,E,E,G,A,E,I,U,C,I,E,G,A,C,C,A,C,A,C,A,C,E,E,C,I,E,C,A,C,C,C,C,C,A,E,G,C,C,G,C,A,I,C,K,C,E,K,A,C,A,C,C,A,E,C,A,C,A,E,G,E,A,A,G,C,I,C,C,C,C,C,A,C,A,A,C,C,E,E,C,A,C,C,C,E,C,C,E,C,C,A,A,E,G,C,G,A,C,A,C,A,C,K,C,O,E,G,Q,G,C,O,G,C,C,K,G,U,U,E,C,C,A,C,A,A,M,G,E,C,C,C,C,C,C,C,C,C,C,C,I,E,C,A,E,E,M,A,E,E,M,C,E,C,C,C,C,C,C,A,O,C,C,C,C,A,C,M,C,C,I,C,C,C,C,A,C,C,I,C,C,C,C,A,E,C,G,C,C,C,C,A,C,C,A,C,C,A,M,C,E,O,A,A,C,C,C,C,C,C,C,G,G,C,G,C,C,G,C,O,a,C,G,C,K,C,G,C,K,C,Y,C,C,C,E,E,E,E,C,C,A,A,C,C,C,I,E,A,C,C,E,A,C,C,E,E,A,C,I,E,A,E,E,A,C,G,G,C,C,C,C,C,C,C,E,C,E,C,C,C,C,C,C,A,C,C,E,A,C,C,C,A,C,G,I,C,C,C,C,E,C,A,A,C,C,C,C,C,C,C,C,E,C,A,E,C,C,E,C,A,C,A,G,A,E,C,C,C,A,C,G,E,A,C,A,C,C,C,A,E,A,A,C,A,C,A,E,E,C,C,A,C,C,C,A,C,C,E,C,G,E,E,A,C,A,C,C,C,C,C,C,C,C,E,C,A,C,I,C,C,C,C,E,A,E,E,C,C,C,C,A,C,E,C,I,C,C,C,C,C,C,E,C,E,C,C,C,C,C,C,A,C,C,E,A,C,C,C,C,A,C,C,C,E,C,C,C,A,C,C,E,C,A,C,A,E,A,C,C,A,C,C,C,A,C,G,C,A,A,K,E,A,C,C,E,E,C,C,C,A,C,A,E,A,C,A,C,A,A,C,C,W,C,E,G,S,C,A,C,C,C,C,C,E,G,C,A,G,C,G,G,C,O,C,a,C,C,G,K,C,G,C,K,C,Y,C,W,C,C,C,E,E,E,E,C,C,A,A,C,C,C,I,E,A,C,C,E,A,C,C,E,E,A,C,I,E,A,E,E,A,C,G,G,C,C,C,C,C,C,C,E,C,E,C,C,C,C,C,C,A,C,C,E,A,C,C,C,A,C,G,E,C,A,A,C,M,C,A,E,E,S,A,E,C,C,C,C,E,G,E,A,E,A,C,C,E,C,A,C,A,G,A,E,C,C,C,A,C,E,C,C,C,A,A,C,C,C,C,A,C,C,A,C,C,A,C,C,A,E,E,C,C,A,C,C,C,A,C,C,C,C,M,A,C,C,C,A,E,S,A,A,E,C,C,E,G,E,A,E,E,C,C,C,C,E,A,E,E,C,C,C,C,A,C,E,C,I,C,C,C,C,C,C,E,C,E,C,C,C,C,C,C,A,C,C,E,A,C,C,C,C,A,C,C,C,E,C,C,C,A,C,C,E,C,A,C,A,E,A,C,C,A,C,C,C,A,C,E,C,C,A,C,A,A,I,E,C,A,E,E,E,C,C,C,A,C,A,E,A,C,A,A,C,C,2G,I,E,E,C,C,Q,A,E,E,C,C,K,E,G,E,G,A,E,A,E,C,C,E,C,K,K,C,C,C,C,C,C,C,C,C,C,C,C,C,E,O,M,C,E,E,W,A,E,E,E,E,A,C,C,G,C,G,C,O,K,Q,C,C,C,A,C,A,C,A,E,G,M,A,C,C,C,C,C,C,C,C,C,C,C,E,M,C,E,E,M,A,E,E,E,C,C,A,A,K,C,G,C,C,K,E,C,C,A,C,A,C,A,E,E,E,E,K,A,C,C,C,C,C,K,E,C,C,C,C,A,C,C,C,C,C,C,C,C,C,E,I,E,C,E,C,C,Q,A,E,E,K,G,C,C,A,E,C,C,C,E,Q,A,E,E,G,G,C,C,A,M,C,E,E,O,A,E,M,E,E,E,C,C,A,A,C,C,C,C,C,C,G,A,C,A,I,C,C,C,E,E,C,C,C,C,C,C,C,C,A,C,C,C,E,I,E,C,E,C,C,Q,A,E,E,K,G,C,C,A,E,C,C,C,E,Q,A,E,E,G,G,C,C,A,M,C,E,E,O,A,E,E,E,E,C,C,A,A,C,C,C,C,A,G,C,A,C,C,A,C,C,I,C,E,E,C,C,C,C,A,E,I,A,C,G,C,O,G,C,C,C,A,C,C,A,G,C,I,C,S,C,E,G,E,M,A,G,E,A,C,kB,C,C,A,E,C,C,C,A,C,C,I,C,C,K,C,G,E,C,C,C,O,C,E,E,C,C,E,E,C,C,E,C,E,C,A,Q,G,C,C,C,A,C,C,A,E,M,A,C,S,C,E,G,E,M,A,E,E,C,C,sB,C,C,A,E,C,C,C,A,C,C,I,C,A,M,C,U,C,C,gG,I,E,E,C,C,Q,E,E,C,C,K,E,E,K,I,C,E,M,C,E,E,U,A,E,Q,C,C,M,C,G,C,C,I,E,A,C,A,C,A,E,K,I,C,E,M,C,E,E,U,A,E,Q,C,C,M,C,G,C,C,I,E,A,C,A,C,A,E,E,E,E,A,C,C,C,C,C,A,C,E,A,C,C,G,C,A,K,E,C,E,C,G,E,C,C,C,E,Q,A,E,E,G,G,C,C,A,M,C,E,E,O,A,E,E,G,C,A,A,C,C,A,C,M,E,C,E,C,G,E,C,C,C,E,Q,A,E,E,G,G,C,C,A,M,G,E,O,A,E,E,G,C,A,A,C,C,A,A,C,K,C,E,E,C,C,C,C,A,E,G,C,A,A,C,W,G,C,C,C,A,C,C,A,C,G,I,C,S,C,E,G,E,M,A,C,E,E,C,kB,C,C,A,E,C,C,C,A,C,C,C,G,C,M,C,G,E,C,C,C,G,C,E,E,C,C,C,C,A,E,G,C,A,A,C,W,G,C,C,C,A,C,C,A,C,G,I,C,S,C,E,G,E,M,A,C,E,E,C,kB,C,C,A,E,C,C,C,A,C,C,C,G,C,M,C,M,C,C,0W,I,E,C,K,C,C,C,C,A,E,C,K,C,C,C,C,A,E,C,K,C,C,C,C,A,E,G,E,C,A,I,C,C,M,C,A,E,C,C,C,C,C,C,C,E,C,C,A,C,Q,C,E,C,C,Q,C,C,C,G,C,C,C,A,S,E,C,E,G,C,C,A,E,G,C,iB,E,M,A,K,C,qB,C,C,A,I,E,C,C,C,A,I,I,C,C,C,C,C,C,E,G,G,C,C,E,C,A,G,A,C,C,C,C,C,C,C,C,A,O,C,C,A,C,C,O,E,C,E,I,E,C,C,C,K,E,C,E,C,C,A,O,C,C,A,C,C,C,K,C,C,C,E,E,C,A,C,A,C,A,C,A,C,C,O,E,C,E,G,G,K,E,O,E,C,K,A,K,C,2B,C,O,G,A,C,C,K,M,C,E,C,C,C,E,C,E,C,A,C,A,E,E,E,C,A,C,A,C,A,A,S,E,C,E,G,E,M,E,O,E,C,K,A,K,C,2B,C,O,G,A,C,C,E,E,C,C,C,K,C,A,G,E,C,A,C,M,A,K,C,yD,C,G,A,C,C,E,E,G,C,U,C,E,C,A,C,C,A,I,I,C,C,C,C,C,C,E,G,G,C,C,E,C,C,I,C,C,C,C,A,C,C,E,E,I,C,Q,C,A,E,C,I,A,C,C,C,C,C,C,C,C,A,E,C,C,A,G,M,C,K,C,I,A,C,C,C,C,A,M,A,K,C,uB,C,A,C,C,C,C,C,C,E,A,E,C,I,C,C,A,G,C,K,E,C,C,C,E,O,C,C,C,C,M,E,C,E,C,C,Q,C,C,C,E,C,E,C,C,A,C,A,A,S,E,G,C,E,G,C,C,C,I,U,C,E,I,E,C,C,E,C,A,E,C,C,C,C,A,C,M,C,C,C,C,C,A,E,C,A,C,A,C,M,E,I,G,C,A,C,E,C,C,E,C,C,C,C,A,qB,E,K,C,A,K,C,qB,C,C,A,C,C,G,C,C,C,G,A,C,C,C,A,C,C,M,A,C,A,C,C,A,C,A,C,A,A,E,U,C,E,E,O,Y,C,E,E,W,C,E,E,A,Q,E,C,E,E,O,Q,C,E,O,A,C,E,M,C,E,E,C,E,C,C,A,C,C,A,A,C,A,c,C,E,O,A,C,E,G,C,C,C,C,G,C,C,gB,C,C,A,M,A,K,C,qB,C,C,A,O,E,E,O,C,E,C,I,C,G,E,C,I,E,C,C,A,C,A,C,E,e,C,E,E,Y,G,C,E,O,A,C,C,C,E,I,G,E,C,A,C,G,A,C,M,C,C,A,C,A,C,E,kB,C,E,O,A,C,E,O,E,A,E,C,C,C,A,C,A,A,C,C,C,U,C,C,E,O,A,C,C,C,C,C,A,M,A,E,C,C,C,Q,E,A,O,E,C,E,C,E,C,C,G,A,A,C,C,G,C,C,C,C,M,A,K,C,C,E,E,G,6B,E,E,C,S,E,C,C,C,C,C,A,K,G,A,C,A,A,E,C,A,E,O,W,E,C,S,C,I,C,G,C,C,G,M,A,K,C,C,E,E,G,8B,C,C,C,A,I,E,C,C,C,K,C,A,G,A,Q,S,G,G,C,E,K,C,A,K,C,A,C,E,E,G,O,E,E,Y,E,E,C,A,C,C,A,O,C,C,C,A,C,C,W,C,E,E,Q,E,C,E,O,A,C,C,C,C,C,G,E,A,A,M,G,E,A,M,C,M,G,E,C,C,I,C,C,C,C,C,C,E,A,M,C,C,E,C,G,C,C,C,C,G,C,C,C,C,C,O,E,G,C,G,C,C,C,C,C,A,W,C,E,O,A,C,E,E,C,K,G,E,O,E,C,K,A,K,C,C,iC,E,O,E,C,A,C,C,A,O,I,U,C,I,W,E,C,M,C,G,A,C,A,C,A,C,C,A,M,C,E,O,A,A,C,E,G,C,E,C,C,C,C,E,C,A,C,C,C,E,C,A,G,E,C,E,A,C,E,O,C,C,C,A,C,C,M,C,E,O,A,A,C,C,C,E,C,M,C,E,M,C,G,A,C,A,C,A,C,A,C,C,M,C,C,C,A,C,E,C,G,A,C,A,C,C,A,E,A,E,C,A,A,C,A,A,C,A,A,C,M,C,G,A,C,C,A,C,M,C,A,C,C,C,A,C,G,A,G,G,C,C,C,E,C,C,A,E,C,C,E,E,A,C,E,C,A,E,C,U,C,G,C,C,A,A,C,C,A,C,A,C,C,Q,C,I,C,G,A,C,A,C,A,C,a,C,E,G,I,A,C,C,C,C,C,E,C,E,I,I,E,O,G,E,C,C,A,G,G,A,K,C,0B,C,C,A,G,Q,E,O,G,E,C,C,C,G,E,A,K,C,2B,C,C,A,G,U,E,O,E,I,E,A,K,C,2B,C,C,A,I,C,C,E,C,E,C,C,E,A,C,A,C,C,A,C,C,C,C,A,A,C,A,C,A,C,E,A,E,A,C,C,I,C,C,C,C,A,C,C,I,C,C,C,C,A,C,C,C,A,C,A,C,A,C,C,C,G,C,E,C,C,C,C,C,C,C,C,A,E,C,C,C,A,C,C,C,E,C,C,C,A,E,C,C,A,C,C,C,C,E,A,C,C,C,C,C,A,E,C,C,A,C,A,C,A,C,C,C,A,C,A,E,C,E,E,E,E,G,C,C,C,C,C,C,C,C,C,C,C,A,G,C,A,C,A,C,A,C,A,C,C,A,C,A,C,A,E,C,E,E,A,G,C,E,E,G,C,A,M,A,K,C,A,yB,C,C,A,I,E,C,A,C,A,E,C,C,C,A,K,E,C,E,C,I,A,E,A,C,A,C,C,C,E,C,C,A,K,E,C,A,E,C,G,C,E,C,A,C,E,A,C,C,M,C,A,A,O,K,E,C,A,C,A,A,C,C,C,G,C,A,E,E,E,E,A,C,C,C,E,C,G,A,I,C,C,C,C,C,A,C,A,A,A,C,A,A,C,C,A,C,C,E,C,C,C,C,C,G,C,E,E,C,E,I,C,A,C,A,C,A,A,A,C,A,A,I,E,C,E,I,C,A,E,C,A,E,M,E,C,M,E,C,O,C,A,G,A,E,Q,E,C,M,E,C,M,C,A,G,A,E,O,E,C,M,E,C,K,C,A,G,A,E,M,E,C,M,E,C,iB,C,A,G,A,E,M,E,C,M,G,A,G,U,U,C,a,C,A,G,A,C,C,I,C,a,C,G,A,C,I,C,A,G,A,C,C,G,C,O,C,G,A,C,I,C,C,E,C,G,C,C,A,E,A,C,C,M,C,G,A,C,G,C,A,G,A,E,Q,E,C,M,G,A,M,C,a,C,E,C,Q,C,C,C,A,E,c,C,E,O,A,C,C,C,C,E,C,C,A,C,C,I,A,E,C,E,E,E,C,E,A,I,C,A,C,C,A,C,C,C,C,A,C,A,E,U,E,O,E,M,A,A,K,C,C,mB,E,E,E,kB,C,C,C,A,I,E,C,A,C,E,C,A,K,C,O,E,E,C,C,C,C,A,C,E,E,C,C,C,C,E,C,E,A,A,K,C,C,c,E,M,C,G,C,E,E,C,A,C,A,E,O,E,C,W,E,E,C,C,A,A,C,A,C,A,I,G,C,E,E,E,C,E,I,C,O,C,G,E,E,G,A,C,A,E,A,C,C,C,C,A,G,C,E,E,E,C,E,I,C,O,C,G,E,E,G,C,E,A,A,C,A,A,C,C,I,C,C,I,C,+U,I,E,E,C,C,O,E,C,K,C,C,C,C,E,C,K,C,C,C,C,E,C,K,C,C,C,C,E,C,K,C,C,C,C,A,E,C,K,C,C,C,C,E,C,K,C,C,C,C,E,C,K,C,C,C,C,A,S,E,C,A,C,C,E,I,E,C,C,C,C,A,A,O,G,E,C,A,C,A,C,A,C,C,C,A,A,C,C,E,C,I,E,C,A,C,C,C,C,E,G,G,G,A,A,E,E,C,A,K,A,K,C,2B,C,C,A,G,I,E,A,C,M,E,C,C,E,E,C,C,C,C,G,E,G,A,A,C,C,G,A,C,E,C,C,C,C,C,A,C,A,C,A,E,C,C,C,C,C,C,A,I,A,C,A,C,C,C,K,C,C,A,C,C,O,E,C,C,C,C,C,G,I,E,C,A,G,E,C,A,E,G,A,K,C,C,0C,E,E,I,C,E,E,C,C,C,A,C,G,C,C,E,C,C,G,C,A,C,C,C,A,C,A,C,E,A,C,A,A,C,E,C,A,C,E,C,A,C,E,C,C,G,C,G,G,A,C,I,C,C,C,C,C,C,A,C,C,C,C,C,C,A,C,C,C,C,C,C,C,C,A,C,C,C,C,C,C,C,C,A,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,A,A,G,A,C,C,C,C,E,C,K,A,K,C,wB,C,C,A,O,E,C,A,C,E,C,A,G,C,C,I,E,C,E,I,C,C,C,C,A,C,C,A,E,C,C,C,C,C,C,A,C,C,C,C,E,C,C,C,C,E,C,A,C,C,C,C,C,G,C,E,C,A,E,E,C,A,E,E,I,C,C,E,C,A,C,C,E,E,C,A,C,E,C,C,G,C,C,A,E,C,A,E,E,G,C,G,C,C,C,I,E,A,C,E,C,A,C,C,A,E,C,C,K,S,A,C,C,C,E,I,E,A,E,A,A,G,C,C,C,G,G,A,C,A,C,C,A,G,C,E,A,G,C,G,C,A,C,A,C,M,A,K,C,yB,C,C,A,O,C,C,C,A,A,C,C,E,E,C,C,C,C,A,C,C,A,E,C,C,K,S,A,C,C,C,E,G,E,A,C,E,C,C,C,K,E,A,E,C,A,C,E,A,G,C,C,M,A,K,C,yB,C,C,A,I,C,C,C,C,A,C,C,E,A,G,C,E,A,G,C,E,A,G,C,C,C,C,C,C,C,A,C,A,C,E,A,G,C,C,C,G,C,C,C,C,A,A,C,C,C,C,C,C,C,C,C,A,C,C,G,C,E,A,G,C,C,C,E,A,G,C,E,C,G,A,E,A,G,C,C,C,C,C,A,I,C,C,O,E,A,I,C,A,C,G,C,C,C,C,A,I,I,E,A,E,A,G,C,C,C,C,A,C,C,C,G,E,A,G,C,E,A,E,A,G,C,C,C,A,E,C,A,E,A,C,C,A,G,C,E,C,A,C,C,E,E,A,E,A,G,C,C,A,C,G,A,M,C,C,C,C,C,C,C,C,A,C,A,C,A,C,E,A,G,C,E,C,A,C,A,C,A,E,A,G,A,C,C,C,E,C,A,C,A,C,A,C,C,A,G,C,C,C,C,C,A,C,A,C,A,C,C,C,A,A,M,C,C,A,C,A,A,C,A,A,S,E,C,E,C,E,C,C,G,C,E,C,A,I,E,C,C,C,C,A,C,C,A,E,C,C,K,S,A,C,C,C,E,I,A,E,E,A,A,G,C,C,C,G,G,A,C,A,C,C,A,G,C,E,A,G,C,G,C,A,C,A,C,M,A,K,C,yB,C,C,A,O,C,C,C,A,A,C,C,C,C,C,G,C,E,C,A,I,E,A,C,C,C,C,C,C,A,E,C,C,K,S,A,C,C,C,E,I,A,E,A,E,A,G,C,C,C,G,A,C,A,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,C,C,C,C,C,A,C,C,E,A,G,C,E,A,G,C,E,A,G,A,C,A,C,C,A,E,E,A,A,G,C,E,A,E,A,G,C,C,C,E,A,G,C,C,C,A,G,C,E,A,G,C,E,A,G,C,G,C,A,C,A,C,M,A,K,C,yB,C,C,A,O,C,C,C,A,A,C,C,K,E,C,C,A,C,A,A,M,C,C,A,C,C,C,I,C,C,E,C,C,A,E,G,C,E,E,A,G,C,E,E,A,I,C,E,K,E,A,C,C,C,C,A,C,E,I,E,C,A,C,A,K,K,A,E,C,A,C,E,A,E,C,C,C,A,E,I,C,E,C,C,C,A,C,C,M,C,E,E,G,U,C,E,E,M,C,E,C,C,G,S,C,C,C,C,C,G,C,C,C,C,A,C,C,E,A,C,C,C,A,C,C,E,C,C,E,E,C,Q,C,A,S,C,K,C,K,C,K,C,M,C,K,C,K,C,K,C,K,C,K,C,K,C,K,C,M,C,M,C,M,C,M,C,C,A,S,E,C,C,C,A,C,C,E,G,E,E,C,A,K,A,K,C,oB,C,C,A,G,I,C,C,C,M,C,C,G,C,A,G,I,C,C,C,M,E,C,C,E,C,C,C,C,G,C,A,C,C,E,C,C,G,E,G,A,A,C,C,G,A,C,C,C,C,C,G,C,C,C,E,C,C,A,C,C,C,C,G,C,C,C,C,A,I,C,C,C,C,K,C,A,C,A,A,S,E,C,C,C,E,I,E,A,A,C,I,C,E,E,I,C,C,A,E,E,E,I,C,C,E,A,C,C,C,A,E,C,A,C,A,C,G,C,G,A,C,E,A,A,C,A,C,C,C,C,E,C,A,C,A,G,C,E,C,E,C,A,C,A,C,G,C,C,A,E,C,C,G,C,A,G,O,E,E,A,C,C,O,C,C,E,C,C,C,A,E,C,A,C,A,C,G,C,G,A,C,E,A,A,C,A,C,C,C,C,C,C,G,C,E,C,A,C,C,C,C,C,A,C,C,G,C,E,C,E,C,A,C,E,C,C,A,C,C,C,C,C,I,E,C,C,C,E,A,I,E,K,I,C,C,E,C,A,C,A,C,K,C,C,A,C,C,C,C,M,C,A,E,I,C,I,A,C,E,C,C,C,A,M,A,C,U,C,W,G,C,C,A,C,A,A,Q,C,E,C,E,G,Q,E,C,M,E,M,A,E,G,C,4B,C,C,A,O,I,C,I,C,A,E,O,C,A,C,C,C,C,M,C,A,C,C,A,C,A,A,S,E,C,E,I,E,E,E,C,A,O,A,C,C,A,I,A,C,A,I,C,E,C,C,A,C,A,A,C,C,a,C,E,O,A,C,E,I,A,E,E,A,E,I,C,C,E,A,C,E,E,A,C,C,A,E,C,A,U,C,A,G,A,C,A,K,C,Q,C,I,C,Q,C,K,C,e,C,I,C,e,C,C,C,M,C,E,E,c,A,E,E,E,C,A,C,A,C,C,A,K,C,E,E,E,W,C,E,E,K,C,E,E,I,C,A,C,C,C,C,C,A,E,O,C,C,G,C,E,C,O,C,C,A,O,E,C,C,E,C,A,C,A,K,C,C,A,C,A,C,G,C,G,A,C,A,C,A,C,C,U,C,E,O,A,C,E,C,G,E,A,C,A,E,K,C,C,C,A,C,A,E,C,C,C,I,A,C,E,C,C,G,C,C,C,C,G,C,C,A,C,G,O,C,C,C,C,C,A,C,C,C,C,C,I,C,E,C,C,G,C,C,C,C,C,G,C,A,C,A,A,C,A,C,E,O,C,E,E,I,C,C,E,M,C,A,C,C,C,C,C,E,C,A,C,E,C,C,E,G,G,E,A,C,K,A,K,C,C,8B,E,E,C,C,C,A,A,G,C,U,C,C,C,W,C,C,C,C,E,E,G,A,A,G,A,C,C,A,G,C,C,M,A,K,C,iD,C,C,A,I,E,E,C,E,C,A,C,A,C,C,I,C,M,C,O,K,E,I,I,E,G,C,C,C,E,E,O,A,E,G,C,C,E,C,E,C,E,C,E,C,K,C,A,G,A,C,C,A,C,C,C,E,E,C,I,C,A,G,C,C,E,A,Q,E,O,E,C,K,A,K,C,C,4C,E,O,E,C,A,C,C,A,O,G,A,G,A,E,C,A,C,C,E,C,A,C,A,A,G,A,C,C,C,C,E,C,I,C,A,G,A,C,C,C,C,A,C,C,E,E,C,E,C,A,G,A,C,C,A,C,A,E,C,E,E,C,A,A,C,C,E,C,E,C,C,A,E,C,E,C,E,C,A,G,A,C,C,A,C,C,C,C,C,E,E,C,A,C,C,E,C,E,C,C,A,C,C,C,C,C,C,E,E,C,A,C,C,E,C,E,C,C,A,C,C,C,C,C,C,E,E,C,A,C,C,E,C,E,C,C,A,C,C,C,C,C,C,E,E,C,A,C,C,E,C,G,C,A,C,C,A,C,C,C,C,E,E,C,A,C,C,E,C,E,C,C,A,C,C,C,C,C,E,C,C,C,E,C,A,E,C,C,C,A,G,A,C,C,A,C,C,C,G,C,C,E,C,E,C,C,A,C,C,C,C,G,C,C,E,C,E,C,C,A,C,C,C,C,G,C,C,E,C,E,C,C,A,C,C,C,C,E,C,A,G,A,C,C,A,E,C,C,C,E,C,C,C,E,G,C,G,A,C,A,E,A,C,C,C,C,C,C,C,C,A,W,C,A,G,A,C,C,A,C,C,G,A,C,G,C,C,A,C,C,C,C,C,E,C,C,A,C,A,A,C,A,C,A,C,A,C,A,O,C,A,G,A,C,C,A,A,C,C,C,A,C,C,e,A,E,E,C,E,C,C,C,A,C,C,A,e,A,E,E,C,E,E,C,C,K,C,A,I,C,E,A,E,A,G,G,G,E,G,G,A,K,C,C,uB,E,E,G,G,E,E,G,G,C,C,C,C,A,O,E,C,C,C,A,C,C,e,A,E,G,C,C,C,A,C,C,A,e,A,E,E,C,C,C,A,C,A,A,C,M,M,C,M,C,C,C,A,C,A,C,E,S,C,E,O,A,C,C,C,A,E,G,C,A,E,A,K,C,M,A,K,C,C,wB,C,C,C,A,I,E,E,A,A,I,C,G,A,C,C,K,E,A,K,C,G,C,C,A,C,C,A,A,A,C,C,C,C,E,C,C,A,C,C,A,U,C,E,O,A,C,C,C,C,C,G,C,C,C,A,K,C,M,A,K,C,C,wB,C,C,C,A,I,E,E,A,A,I,C,G,A,C,C,K,E,A,K,C,G,C,C,A,A,C,C,C,C,G,C,A,C,A,C,A,C,A,C,A,mB,C,E,O,A,C,C,C,C,G,C,A,E,G,C,E,C,E,A,C,A,C,A,C,E,W,A,E,a,C,E,C,C,A,M,C,A,E,E,E,C,E,K,C,G,C,C,C,A,G,E,E,E,A,E,G,E,A,C,G,C,A,M,A,K,C,C,8B,E,E,I,sB,E,E,C,C,C,A,E,K,E,C,C,A,C,C,C,A,A,C,C,e,A,E,G,C,A,C,C,A,C,C,e,A,E,G,C,C,A,C,E,A,C,A,C,C,A,C,C,A,mB,C,E,E,gB,A,C,E,E,a,C,C,E,O,A,C,C,C,C,G,C,A,A,E,I,A,E,C,C,C,K,C,A,E,E,G,C,C,E,E,C,A,C,C,C,E,C,C,A,A,C,C,A,E,A,C,E,E,C,A,G,C,M,A,K,C,C,S,E,E,I,sB,E,E,C,A,C,C,A,I,E,E,C,C,A,C,A,C,C,A,A,C,C,e,A,E,G,A,C,A,C,C,A,E,e,A,E,G,A,C,C,A,G,A,C,C,C,C,C,I,E,C,C,C,A,C,C,e,A,E,E,G,C,C,C,E,A,C,C,C,Y,A,E,E,E,C,E,G,C,C,wG,I,E,E,C,C,Q,E,E,C,C,O,E,C,K,C,C,C,C,A,E,C,K,C,C,C,C,A,E,I,C,E,K,E,A,C,C,C,C,C,I,E,C,E,I,C,C,C,C,C,C,C,C,C,E,I,E,C,A,O,E,E,C,A,C,A,C,A,A,C,C,A,A,A,C,A,C,A,C,C,C,A,O,C,I,C,I,C,E,C,C,A,C,C,C,A,C,S,C,C,G,A,C,A,E,C,C,A,C,A,C,A,A,M,iB,E,C,W,C,A,C,C,C,E,I,C,C,C,C,I,C,A,C,C,E,C,C,G,C,C,G,A,C,A,C,G,C,C,C,C,C,G,C,E,C,C,A,C,C,C,C,M,E,C,A,C,G,E,C,C,K,C,A,C,A,C,gB,C,C,C,C,E,G,S,C,Y,C,C,C,E,C,C,A,C,A,E,E,C,A,C,A,C,E,C,C,A,C,C,A,A,I,I,E,C,C,E,A,E,E,E,C,A,C,C,C,A,C,A,A,E,I,A,C,G,C,C,C,C,I,C,C,C,C,C,C,E,C,E,C,A,E,E,A,A,E,C,C,C,C,C,A,E,I,A,C,G,C,A,C,A,C,C,E,I,E,C,A,A,O,C,C,C,G,C,A,C,C,C,C,C,C,E,G,S,C,Y,C,C,C,E,C,C,A,C,A,C,C,C,C,I,C,A,C,C,C,C,I,C,A,E,E,I,C,C,E,C,C,C,C,C,A,C,C,C,E,C,C,A,E,A,K,C,C,C,C,C,A,I,I,E,C,C,E,A,E,E,E,C,A,C,E,C,E,E,A,E,A,E,A,G,G,A,C,A,C,C,G,C,A,C,C,C,E,E,G,A,C,A,G,E,A,C,A,E,A,G,A,C,A,C,E,E,E,G,C,A,C,G,C,G,C,C,A,A,C,A,C,E,C,A,E,C,A,C,A,E,E,C,A,C,A,C,A,E,C,E,C,C,C,A,C,E,C,C,E,E,C,C,A,C,C,C,C,C,A,C,A,C,A,A,C,C,A,G,C,E,E,C,C,C,C,C,C,C,A,A,E,E,E,G,C,G,C,C,A,C,A,C,U,C,C,C,C,C,C,C,C,E,I,C,C,C,C,Y,E,C,C,A,E,E,A,G,C,C,C,C,A,K,E,I,A,E,A,E,E,C,gB,C,C,C,C,C,C,A,A,C,A,E,I,E,G,C,C,C,E,I,A,C,A,C,C,A,E,C,I,C,C,C,E,C,C,A,A,C,A,C,A,C,A,C,E,a,C,E,O,A,C,E,I,E,C,E,C,C,a,A,E,E,E,C,A,C,A,A,G,E,c,A,E,E,C,C,C,A,Q,C,C,C,Q,C,E,C,O,C,E,C,O,C,C,C,U,C,e,C,W,C,e,C,C,C,A,M,C,M,C,C,G,C,E,E,O,A,E,E,C,C,C,C,G,O,C,C,G,C,C,G,C,C,C,E,E,C,A,K,C,C,C,A,C,A,uK,I,E,E,C,C,Q,E,E,C,C,O,E,E,C,C,O,E,E,C,C,Q,C,e,C,C,C,U,C,C,C,C,E,A,C,C,G,C,C,G,C,M,M,E,K,C,Y,C,C,E,C,C,K,C,C,C,A,C,A,C,C,S,C,C,E,G,C,G,C,C,C,C,E,G,C,A,G,E,E,I,C,C,E,I,A,C,C,C,C,C,M,I,C,C,+B,C,C,A,I,E,C,A,C,C,C,C,A,E,C,C,E,M,C,C,C,E,C,A,C,C,A,G,C,G,A,E,C,K,G,E,C,K,I,C,C,yC,C,C,A,G,I,C,C,C,C,C,C,K,I,C,C,qC,C,C,A,G,I,A,C,C,C,C,E,C,A,C,K,C,C,C,A,C,C,A,M,I,C,C,qD,C,C,A,M,C,C,C,E,C,E,A,C,A,C,E,E,M,C,E,C,A,C,C,A,C,A,C,A,K,C,C,E,G,C,G,C,C,C,C,E,C,E,C,A,E,E,M,C,C,A,O,E,C,C,C,E,A,C,C,A,C,A,C,C,C,C,I,S,U,C,C,A,M,A,K,C,e,C,C,A,I,C,C,E,E,I,C,A,G,C,C,C,E,A,I,C,C,C,C,C,M,I,C,C,uB,C,C,A,G,C,C,C,C,G,C,C,C,C,M,I,C,C,qC,C,C,A,G,C,C,C,C,C,C,C,C,C,C,E,G,C,S,C,E,E,M,C,C,C,C,C,A,C,C,C,C,C,C,C,C,C,C,E,G,C,S,C,G,G,A,C,C,A,M,C,C,K,I,C,C,6C,C,C,A,M,G,C,G,C,C,A,C,A,C,U,C,C,E,I,E,A,C,E,A,A,E,C,C,E,C,C,A,C,Q,C,C,C,C,C,C,E,C,C,I,C,C,C,A,C,A,C,A,C,A,C,A,G,C,C,E,C,E,C,C,C,O,C,E,C,C,A,O,C,C,A,C,C,C,K,C,C,C,E,E,C,A,C,A,C,A,C,C,A,A,C,A,C,E,C,C,C,C,C,A,C,C,C,A,C,C,E,C,C,C,C,C,A,C,C,C,A,E,C,A,C,M,C,C,C,A,E,C,A,C,M,C,C,C,A,E,A,C,C,G,A,C,C,A,A,C,C,G,A,C,C,I,C,E,E,C,C,E,C,C,C,A,C,C,E,E,E,E,C,C,E,E,E,E,C,C,C,A,C,A,C,C,A,I,E,C,K,C,C,C,C,E,C,K,C,C,C,C,E,C,K,C,C,C,C,E,C,K,C,C,C,C,E,C,K,C,C,C,C,A,S,E,C,E,I,E,A,G,G,G,A,C,E,I,C,C,C,C,C,E,G,U,A,E,G,E,A,A,C,C,Y,C,E,C,C,A,C,O,C,C,C,O,C,C,C,wB,C,O,C,c,C,S,C,a,C,U,C,a,C,U,C,kB,C,S,C,S,C,U,C,O,C,U,C,C,C,A,G,M,C,I,C,G,C,C,C,E,E,C,A,E,C,C,E,C,E,A,G,C,C,C,E,A,I,C,C,C,K,A,K,C,mE,C,C,A,G,Q,E,O,G,C,O,E,O,E,E,E,E,A,U,E,O,E,E,S,C,M,A,K,C,mE,C,C,A,A,O,M,C,M,C,C,G,C,C,C,A,C,A,C,G,C,C,C,C,C,C,C,E,E,C,C,A,C,E,A,I,G,C,A,E,A,E,G,E,I,C,C,E,A,E,C,C,I,E,C,A,O,E,A,W,C,U,C,I,C,A,C,E,C,C,A,E,A,O,C,C,C,C,C,C,E,A,O,C,C,C,C,C,C,C,A,C,C,A,C,C,E,G,E,I,G,A,C,G,C,E,C,C,C,E,A,G,K,C,C,C,C,A,M,C,C,C,E,A,S,C,E,E,M,C,C,C,E,A,K,C,C,C,A,C,C,E,A,S,C,E,E,M,C,E,A,K,C,C,C,E,A,K,C,C,A,C,A,C,A,C,C,A,C,Q,E,C,E,G,G,C,G,C,C,C,C,C,E,A,C,C,A,A,G,C,C,C,C,A,C,C,A,E,A,G,C,C,C,A,C,C,C,A,C,M,E,A,C,E,C,E,A,G,C,E,A,E,A,G,C,C,C,C,C,C,C,C,C,A,C,A,A,C,E,C,E,A,G,C,E,A,G,C,E,A,E,C,A,C,E,E,E,C,A,C,C,M,A,I,C,C,6C,C,C,A,S,E,C,E,M,O,C,E,O,G,A,E,C,E,A,E,C,C,C,A,C,A,A,C,Q,E,C,E,G,A,C,E,G,A,C,K,A,K,C,C,4C,C,A,C,A,A,S,E,C,E,I,E,C,A,C,S,c,C,C,a,C,gB,C,G,C,C,C,E,G,A,C,E,I,I,E,O,E,C,A,G,G,U,U,G,E,C,C,A,U,C,E,C,C,A,Q,E,O,G,A,C,E,K,G,C,E,C,K,C,C,M,A,K,C,a,C,C,A,E,C,C,C,O,C,C,C,E,G,C,C,A,A,G,C,A,E,C,O,E,O,E,C,C,C,C,A,e,C,C,E,E,W,A,E,a,C,E,C,G,A,M,C,C,A,C,A,C,C,I,A,K,C,C,oB,E,E,S,kB,E,O,E,C,A,C,C,A,A,O,I,E,C,C,C,E,C,E,A,C,C,C,C,A,C,C,G,A,C,A,C,A,A,C,A,A,C,E,E,I,G,C,C,C,I,G,E,A,C,E,G,C,C,A,I,C,Q,C,C,C,A,M,A,K,C,0B,C,A,C,A,A,M,E,G,S,C,C,C,C,C,C,C,G,I,C,E,C,E,A,C,G,C,E,C,E,A,C,G,C,E,C,E,A,C,G,E,E,C,C,E,A,O,C,E,C,A,M,A,K,C,Y,C,C,A,G,A,E,E,K,C,E,A,O,C,E,C,A,M,A,K,C,Y,C,C,A,G,I,E,E,C,C,E,A,O,C,E,C,A,M,A,K,C,Y,C,A,C,A,A,M,C,U,C,C,C,C,G,G,C,G,C,C,C,C,E,C,C,C,A,G,C,C,E,C,E,A,O,C,C,C,E,C,E,A,O,C,C,C,C,M,A,K,C,sB,C,C,A,G,C,Y,E,G,G,A,K,C,8B,C,C,A,I,E,A,C,A,E,A,C,C,A,G,C,C,C,E,A,I,C,C,O,A,E,C,A,C,E,E,C,A,C,C,C,C,G,C,C,A,I,E,C,C,C,A,C,E,A,G,C,A,C,A,A,I,C,E,C,O,I,C,Q,E,C,C,A,C,A,A,I,C,E,C,O,I,C,Q,E,C,C,A,C,A,A,M,C,U,C,C,C,C,I,E,E,A,C,U,C,E,G,C,A,A,C,E,A,C,A,C,E,C,C,C,A,O,E,G,C,A,C,C,C,C,E,C,C,A,C,Q,C,C,C,C,C,C,C,C,G,C,E,G,O,C,A,C,A,A,M,C,O,C,C,C,C,I,C,C,E,G,O,C,E,C,E,E,E,S,A,E,U,C,G,C,C,A,C,C,K,C,C,c,E,C,A,C,A,C,A,A,M,C,c,C,C,C,C,O,E,G,C,C,Q,C,E,G,C,A,M,C,C,C,K,C,C,A,C,C,I,C,Y,C,E,E,M,A,C,A,I,C,A,C,A,A,C,a,E,C,G,I,C,G,E,C,C,G,E,G,e,E,C,E,A,G,C,I,C,E,C,C,M,C,M,A,K,C,iB,C,C,A,A,G,G,C,G,C,C,C,I,C,Q,E,C,A,G,C,E,A,O,C,C,C,E,C,E,A,O,C,C,C,C,M,A,K,C,0B,C,C,A,I,E,E,A,A,G,C,C,C,C,A,C,C,E,C,A,C,A,C,A,C,E,C,E,A,G,C,E,E,A,C,A,E,C,G,A,K,C,mC,C,C,A,G,C,I,C,a,E,C,M,A,K,C,wC,C,A,C,A,A,Q,E,C,G,G,C,C,C,I,C,Q,E,C,A,G,E,A,K,C,M,C,E,A,K,C,C,C,A,C,M,A,K,C,6B,C,A,C,A,A,M,C,C,C,C,E,G,E,C,A,C,A,E,C,C,C,A,E,C,C,C,E,C,C,C,C,I,C,A,C,E,C,C,C,E,C,C,C,E,C,C,C,C,E,E,A,C,C,A,A,G,C,E,A,G,C,E,A,E,C,A,E,A,G,C,E,A,E,C,C,A,C,C,A,E,A,G,C,E,A,G,C,E,A,E,C,A,E,A,G,C,E,A,E,C,C,A,C,M,E,C,C,C,A,A,C,K,E,C,O,I,E,G,C,C,E,C,E,A,G,C,I,C,E,C,C,I,C,E,C,A,C,A,A,M,E,C,G,C,C,C,G,C,C,E,E,A,C,C,A,A,G,C,C,C,G,A,C,A,C,C,C,C,C,E,C,C,C,E,C,C,C,C,I,C,A,E,A,E,A,I,C,E,A,E,A,I,C,E,A,E,A,I,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,A,E,A,E,C,C,E,A,C,C,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,M,E,A,E,A,G,C,E,A,E,C,A,C,C,A,A,E,A,G,C,E,A,C,C,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,C,C,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,A,E,A,G,C,E,A,E,A,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,A,E,A,G,C,C,C,E,A,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,C,C,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,A,E,A,G,C,E,A,E,A,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,A,E,A,G,C,E,A,E,A,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,E,E,E,A,C,C,A,E,A,A,A,E,A,A,C,C,C,C,E,A,E,C,A,C,A,A,G,C,C,C,C,E,G,E,C,A,C,A,E,C,C,C,A,E,C,C,C,E,C,C,C,C,I,C,A,C,E,C,C,C,E,C,C,C,E,C,C,C,C,E,E,A,C,C,A,A,I,C,E,A,E,A,I,C,E,A,E,A,I,C,A,C,A,C,E,C,C,A,C,C,A,E,A,G,C,E,C,C,C,A,E,A,C,C,A,A,E,A,G,C,E,A,E,C,A,C,C,A,A,E,A,G,C,E,A,C,C,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,A,E,A,G,C,E,A,C,C,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,G,E,A,E,A,G,C,E,A,E,C,A,C,C,K,E,A,E,A,C,E,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,A,E,A,G,C,E,A,E,A,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,C,C,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,A,E,A,G,C,E,A,E,A,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,A,E,A,G,C,E,A,E,A,C,A,C,C,A,E,A,G,C,C,C,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,A,E,A,G,C,C,C,E,A,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,A,E,A,G,C,E,A,E,A,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,C,A,E,A,G,C,E,A,E,C,A,C,G,E,E,A,C,C,A,E,A,A,E,A,A,C,C,C,C,E,A,E,C,A,C,A,A,C,O,C,C,C,A,C,O,I,C,G,C,E,G,G,E,C,A,C,A,A,G,E,C,O,I,C,M,C,E,G,C,C,A,C,A,A,I,C,C,C,C,O,E,E,Q,C,I,C,E,C,C,A,I,A,E,E,A,E,E,A,A,C,U,C,E,E,C,C,A,C,E,A,C,A,C,E,C,C,C,A,O,E,E,C,C,C,C,C,C,E,C,C,A,C,Q,C,C,C,C,C,C,C,C,G,C,E,G,O,C,A,C,A,C,A,C,A,A,c,C,C,C,C,I,C,C,E,G,C,C,A,G,C,G,E,C,M,C,C,A,G,E,C,C,C,A,C,A,E,C,E,C,M,I,C,A,C,E,M,C,C,C,E,G,A,C,A,E,E,K,E,E,U,C,I,C,C,C,C,A,G,O,C,I,C,O,C,C,I,C,C,E,E,S,C,C,C,C,A,E,C,A,C,A,E,C,A,C,A,C,C,I,C,A,K,E,A,G,A,E,A,G,A,C,C,A,G,C,E,C,C,C,E,C,E,C,C,A,E,A,G,C,E,C,C,C,E,C,E,C,C,A,C,C,C,C,M,E,C,A,E,E,E,C,C,A,E,E,C,C,K,I,C,C,C,C,C,K,E,C,C,A,I,C,C,C,C,C,K,E,C,C,A,E,C,G,E,E,A,C,E,C,E,C,C,C,E,E,E,C,C,E,C,C,C,E,C,C,C,C,A,E,C,E,C,E,C,A,A,C,C,M,C,C,C,K,E,E,C,C,A,C,C,C,G,A,A,C,C,I,C,C,C,E,G,A,C,C,C,C,E,O,C,I,C,G,I,C,I,C,C,C,E,E,S,C,C,C,C,A,C,C,C,C,C,C,C,C,C,C,I,C,I,C,E,C,A,C,A,C,C,C,C,C,C,C,C,C,I,C,I,C,E,C,A,C,C,C,C,E,a,C,E,G,A,A,C,C,A,C,C,E,a,C,E,G,A,A,C,C,A,C,G,E,E,A,C,E,C,E,C,C,C,E,E,E,C,C,E,C,C,C,E,C,C,C,C,A,E,E,C,A,E,C,G,A,C,C,A,E,A,C,E,C,G,A,C,C,E,C,G,G,C,C,G,C,C,I,C,I,C,A,C,C,C,A,E,C,A,C,A,A,C,C,C,C,A,A,A,O,E,G,O,C,C,E,E,C,A,C,A,C,C,A,C,A,A,oB,C,C,C,C,C,C,C,C,I,C,C,E,G,C,C,A,C,C,C,A,C,C,C,C,E,C,G,G,A,C,G,G,A,C,C,E,I,C,C,C,C,A,C,A,C,I,I,C,C,C,C,A,C,A,C,U,I,C,C,C,C,A,C,C,C,C,C,G,C,C,C,C,G,C,E,C,A,C,C,C,C,C,A,O,E,C,E,E,C,C,I,E,C,C,A,C,C,G,C,C,C,C,C,C,C,G,C,E,C,C,C,E,C,C,C,E,C,C,C,C,I,C,A,E,C,G,C,G,E,A,C,G,G,E,E,E,A,E,C,C,A,A,C,E,C,A,C,C,A,G,C,E,C,C,A,I,E,A,E,A,G,C,C,C,E,C,A,C,C,A,E,A,G,C,C,C,E,C,A,C,C,A,E,A,G,C,C,C,E,C,A,C,E,E,C,K,C,C,C,E,A,I,C,C,C,E,A,I,C,C,A,G,C,E,A,G,C,E,A,E,A,G,C,C,M,A,K,C,kB,C,C,A,M,C,C,C,E,A,C,C,C,C,A,A,C,A,A,a,E,C,G,C,C,C,C,e,C,C,C,E,G,A,C,G,E,C,C,K,E,E,C,A,C,C,O,E,E,A,G,C,C,A,C,G,G,A,K,C,M,wD,C,A,C,A,A,a,E,C,G,C,C,C,C,e,C,C,C,K,C,G,A,I,E,C,C,C,C,C,A,C,C,E,E,G,C,C,C,A,C,A,E,A,C,C,c,C,E,C,C,A,C,A,A,A,U,C,G,C,C,C,M,C,I,C,c,E,C,A,E,E,G,A,C,C,E,C,A,K,C,G,A,C,A,C,A,C,M,C,E,A,U,C,I,C,U,C,G,C,C,E,I,C,A,C,C,C,C,E,E,C,C,C,A,E,E,C,A,E,A,G,C,C,A,E,I,C,I,E,E,A,C,G,C,E,A,G,C,E,A,I,C,C,A,I,E,E,C,E,O,C,A,E,C,C,C,E,I,A,E,E,E,C,E,C,C,A,C,G,C,I,C,E,C,C,C,A,A,C,E,E,C,C,E,O,E,G,Y,C,K,oB,sB,A,mB,E,E,A,C,A,A,S,E,C,C,C,C,C,I,C,C,C,C,A,K,C,A,C,C,E,C,C,E,I,C,C,C,C,E,C,A,C,G,C,E,C,A,E,E,C,A,E,E,C,C,E,E,A,C,C,A,C,C,G,A,E,A,E,C,C,C,A,C,A,C,C,E,C,C,A,A,C,C,A,C,C,C,C,A,A,E,E,A,C,E,A,C,C,C,A,A,C,C,A,C,C,A,A,C,C,E,C,C,A,A,C,C,A,E,C,C,C,C,E,C,A,C,C,A,A,E,A,A,G,C,C,C,C,E,A,C,C,C,A,C,E,A,C,C,A,C,A,C,C,C,E,C,C,A,C,G,E,C,C,A,C,C,A,A,C,C,A,G,C,A,C,C,E,A,C,A,C,C,A,C,A,C,A,G,C,G,A,C,C,A,C,A,C,A,G,A,C,E,C,A,C,C,A,C,G,E,C,A,C,A,G,C,C,C,G,A,C,C,A,C,A,A,C,A,G,C,E,C,C,C,A,C,C,A,C,C,A,G,C,C,C,C,E,A,C,C,A,C,A,C,A,G,A,C,E,C,A,C,C,A,C,C,C,C,A,G,C,E,C,A,A,C,C,A,C,G,E,C,A,C,A,G,C,E,C,E,A,C,C,A,C,A,A,C,A,G,C,E,C,E,A,E,C,C,A,C,C,E,A,A,C,C,C,A,C,A,E,C,C,A,G,C,C,A,C,C,C,A,C,A,G,C,E,C,C,C,A,C,C,A,C,C,A,G,C,E,A,C,E,A,C,C,A,C,A,C,A,I,C,C,C,C,C,C,E,C,C,A,C,A,C,A,A,G,C,C,A,E,C,C,C,E,C,C,C,C,A,I,C,C,E,A,C,C,E,C,A,E,C,C,A,I,E,C,A,C,E,C,C,A,C,A,E,A,C,C,C,C,C,C,C,A,C,E,E,A,A,G,C,E,C,A,E,A,C,C,A,A,C,C,A,G,A,C,E,E,A,A,G,C,C,A,C,C,C,C,A,G,C,C,C,C,E,A,C,C,A,C,A,C,A,G,C,E,C,A,E,A,C,C,A,C,C,A,A,G,C,E,C,E,A,C,C,A,A,C,A,C,A,I,C,E,C,C,C,C,A,C,A,C,C,A,C,C,A,I,C,E,C,C,A,C,C,C,A,A,C,C,I,C,O,C,E,E,C,E,C,C,C,A,C,A,A,C,A,G,E,A,I,C,C,G,C,E,C,A,I,E,A,A,E,C,K,C,C,C,C,A,E,C,C,A,A,C,C,A,I,C,E,A,G,C,C,C,C,C,A,C,C,C,C,C,C,E,C,C,A,I,E,C,C,A,E,C,C,C,C,C,A,C,C,C,C,A,E,C,C,C,C,C,C,C,A,C,C,C,A,C,A,G,C,E,C,E,A,C,C,C,C,C,C,A,E,A,G,C,E,C,C,C,A,C,C,A,A,E,A,G,A,C,E,A,G,A,C,C,C,C,E,A,A,E,A,G,C,E,A,E,C,A,C,C,A,C,C,A,C,E,C,E,A,G,C,E,C,A,C,C,C,A,A,C,C,E,A,A,G,C,E,C,A,C,C,A,C,A,C,E,A,I,C,E,A,E,A,G,C,C,C,C,E,A,A,C,O,C,E,E,G,C,C,C,A,C,A,C,A,A,A,M,C,C,C,A,E,K,C,W,C,E,E,M,K,C,E,A,O,A,C,E,E,E,E,A,E,C,M,A,C,E,A,I,E,C,C,C,A,E,a,A,E,G,E,C,C,G,E,A,c,C,E,C,C,G,C,M,C,I,C,U,C,W,C,U,C,C,C,Q,C,U,C,a,C,U,C,I,C,S,C,C,C,A,M,C,M,C,C,I,E,E,E,C,C,C,C,A,C,A,C,G,I,C,A,C,A,C,A,C,C,C,C,E,E,C,C,A,A,K,C,C,C,A,C,A,C,C,C,E,A,K,C,C,C,A,C,A,G,K,E,C,C,C,I,G,E,C,E,C,C,C,E,C,A,Q,C,A,C,C,C,C,C,O,E,C,K,C,C,C,E,C,A,G,C,I,C,C,S,C,C,wB,C,qB,C,C,oB,C,C,E,C,G,C,C,O,C,C,A,C,C,C,C,E,I,C,C,E,G,K,E,C,A,C,C,E,A,O,C,C,C,C,C,C,A,E,C,C,A,W,C,O,A,E,E,C,O,E,A,C,I,C,C,E,G,K,E,C,A,C,C,E,A,C,A,C,A,A,C,C,C,A,E,C,S,C,I,C,C,E,C,C,A,C,C,E,A,O,C,C,C,C,C,C,A,C,A,C,S,C,C,E,I,E,C,C,G,G,C,A,E,C,C,A,C,C,C,A,E,E,A,G,K,C,C,C,C,A,G,G,C,G,C,G,C,G,E,E,C,C,A,C,A,C,A,I,C,C,E,A,e,C,G,C,C,C,A,C,C,G,E,A,C,A,C,A,C,C,A,A,K,A,C,C,A,E,I,A,K,C,uB,C,C,A,I,E,A,A,E,C,C,C,A,C,A,C,E,A,I,C,E,C,A,C,C,A,I,E,C,C,C,C,C,A,C,C,A,E,C,C,C,A,C,A,C,C,E,C,A,C,C,E,C,C,E,A,G,C,E,C,C,A,G,C,G,C,C,C,A,A,G,G,C,G,I,A,E,A,E,I,A,C,C,C,E,A,S,C,E,E,M,C,C,C,E,A,K,C,C,C,A,C,C,E,A,S,C,E,E,M,C,E,A,K,C,C,C,E,A,K,C,C,A,C,A,A,C,M,A,K,C,C,gB,E,E,C,sB,E,E,W,U,E,E,a,M,C,C,A,C,A,C,C,C,A,E,A,G,A,C,C,A,A,M,I,C,E,A,e,C,E,C,C,G,Q,C,C,C,A,E,C,C,C,C,C,E,A,E,A,C,C,A,e,C,C,C,K,C,E,E,A,C,A,C,C,K,E,O,K,C,C,C,C,C,C,C,I,C,C,C,C,C,A,I,C,C,C,C,C,A,I,C,Q,C,E,I,C,C,C,Y,E,A,C,A,A,M,C,W,C,C,C,C,I,C,C,E,G,Q,C,A,O,I,E,E,E,C,A,C,C,A,A,E,C,U,A,E,kB,C,E,C,A,C,A,C,A,E,C,C,C,C,C,E,E,C,A,C,A,C,C,C,C,C,A,C,A,A,M,C,O,C,C,C,C,G,G,C,G,C,C,C,E,G,C,K,C,C,E,E,W,A,E,K,C,G,C,A,C,C,K,I,E,C,C,C,C,A,C,A,A,E,Y,E,C,G,C,E,I,C,C,C,C,M,A,E,G,C,2B,C,C,A,G,C,E,I,C,C,C,C,M,A,E,G,C,2B,C,A,C,A,A,c,C,C,C,C,O,I,E,I,C,C,C,A,I,C,C,C,E,C,A,K,C,C,S,C,C,C,C,G,G,C,G,C,C,Q,C,C,C,C,I,C,A,C,C,E,C,E,E,M,K,A,E,S,C,I,G,A,C,C,C,C,A,E,G,A,C,C,C,C,C,C,C,C,C,C,C,A,Q,C,G,A,C,K,A,K,C,qB,C,C,A,I,E,A,C,C,C,I,C,C,C,C,E,C,A,C,E,C,C,A,C,A,A,C,A,G,G,C,C,A,K,C,M,A,K,C,4B,C,C,A,I,E,C,G,A,A,C,C,C,C,C,A,C,G,C,A,C,G,C,A,C,C,E,G,I,C,E,E,E,E,A,C,C,A,A,C,C,E,C,A,C,C,A,A,C,C,A,C,C,A,C,E,C,A,C,A,C,A,A,E,C,C,A,E,C,A,C,A,C,A,A,E,G,C,C,C,mB,C,C,C,E,A,E,C,A,C,C,C,C,C,C,M,A,K,C,mB,C,C,A,C,I,E,C,C,c,E,C,A,C,A,C,A,A,Q,E,C,A,O,A,I,C,C,C,C,G,C,A,S,C,E,C,O,I,C,Q,E,C,A,C,G,E,I,C,C,C,A,E,C,C,G,C,C,C,C,I,C,Q,C,C,A,C,G,A,C,A,A,a,E,C,O,E,A,U,C,I,C,Q,E,C,A,C,A,A,Q,E,C,O,E,G,C,U,C,C,C,C,I,C,C,C,C,C,I,C,C,C,C,A,C,A,A,iB,E,C,O,E,A,U,C,I,C,Y,E,C,A,C,A,A,Y,E,C,O,E,I,C,C,C,C,E,C,G,C,C,C,A,C,A,C,A,E,O,E,C,E,I,A,E,C,G,S,U,C,A,E,C,O,C,C,O,E,E,A,C,A,G,A,C,C,C,C,E,E,I,C,O,A,E,C,E,A,C,G,G,C,E,E,C,C,C,A,C,C,C,G,E,C,A,C,C,C,E,E,E,S,A,C,A,C,A,G,C,C,C,E,G,C,A,I,A,C,C,S,C,E,I,E,C,C,A,e,C,G,E,A,A,C,A,C,C,A,C,C,K,C,E,G,O,C,A,C,M,A,E,C,C,A,C,A,E,A,M,C,G,C,C,A,C,A,A,A,C,A,C,A,E,G,M,A,I,E,S,C,E,O,E,E,A,G,C,C,A,A,C,A,C,A,C,C,A,A,M,C,C,E,G,O,C,C,A,S,E,A,C,E,G,E,M,E,O,E,C,K,A,K,C,iB,C,C,A,G,C,C,G,A,G,A,E,C,A,C,C,A,M,A,K,C,C,oB,E,E,G,O,C,C,C,C,A,O,E,A,e,C,E,C,C,G,Q,C,A,C,A,A,I,E,C,I,C,E,G,C,A,C,O,E,C,C,C,A,E,A,C,I,C,E,G,C,A,C,O,E,C,C,C,E,K,E,G,C,C,c,C,C,C,C,A,O,E,G,S,C,S,A,C,C,G,C,E,I,E,C,E,G,W,C,G,O,C,E,C,E,C,C,Q,C,C,K,C,S,A,C,C,C,C,G,C,E,G,E,A,C,E,I,C,C,A,A,K,C,+B,C,C,A,G,C,E,G,I,A,C,C,A,K,C,+B,C,C,A,O,A,C,C,G,I,C,G,I,C,C,C,C,C,E,I,I,C,C,I,C,E,C,C,C,G,A,C,G,C,C,I,A,C,C,C,C,A,E,C,C,C,G,C,M,O,C,C,C,A,O,E,A,C,C,C,C,E,C,A,C,C,G,C,W,C,W,C,C,I,C,A,C,E,A,C,A,I,G,C,C,I,A,K,C,qC,C,C,A,G,M,C,a,C,C,C,E,G,C,E,C,S,C,C,Y,C,C,C,C,C,G,C,A,C,E,I,A,G,C,A,C,C,A,C,C,C,E,E,A,W,A,E,E,O,C,G,I,A,C,C,A,A,C,E,E,A,W,A,E,O,Y,C,E,E,C,C,C,A,E,E,E,E,C,E,C,C,E,A,C,C,C,C,C,C,E,C,C,A,C,A,A,C,C,A,G,A,C,A,C,C,C,A,A,C,E,C,I,C,I,C,E,I,A,C,C,A,C,C,E,A,K,C,C,A,A,C,C,A,C,C,A,C,G,C,C,A,E,E,W,A,E,c,C,C,A,C,C,C,A,A,C,K,C,I,C,E,A,W,A,C,G,G,K,A,C,A,C,C,O,A,C,I,I,I,C,C,E,A,G,G,A,A,C,A,C,C,A,C,C,C,O,A,C,G,E,A,A,E,C,C,A,C,A,C,A,C,E,G,C,C,K,G,C,C,C,C,Q,E,C,A,C,A,C,A,E,C,C,A,C,C,C,A,C,A,E,A,C,G,E,C,M,A,C,G,C,C,E,E,A,A,E,A,C,C,A,C,C,C,A,C,A,C,A,C,A,C,E,C,G,E,C,M,A,I,E,A,C,C,C,C,C,A,C,A,I,C,C,A,C,C,C,C,C,C,C,C,C,C,C,G,A,C,C,A,C,A,C,A,C,M,G,C,A,C,E,C,I,E,A,C,C,C,A,C,A,C,C,A,A,A,C,E,A,E,C,C,A,A,C,A,C,A,A,C,A,A,C,A,A,C,A,C,A,E,C,A,C,A,C,A,C,A,A,C,C,E,E,C,C,E,E,C,A,A,A,C,A,C,A,C,E,A,C,C,A,C,E,A,A,C,C,A,C,C,E,C,A,E,A,E,M,M,C,C,C,I,C,E,O,C,C,C,W,C,A,C,C,G,C,A,C,C,A,E,E,A,C,C,C,C,C,C,E,C,S,A,C,C,C,C,C,C,A,E,C,C,G,E,C,C,A,E,E,C,E,A,C,E,E,A,I,C,M,A,E,S,C,G,E,C,C,C,A,C,C,E,S,A,E,W,C,G,M,C,C,A,G,E,E,I,A,K,C,oC,C,C,A,G,M,C,S,C,C,C,E,E,C,A,C,G,Q,E,O,E,C,E,W,U,C,C,E,C,E,E,A,O,A,C,E,C,A,A,C,K,E,C,G,C,C,A,Q,K,E,G,C,G,A,C,C,M,E,E,E,A,E,C,I,I,C,E,C,A,C,I,G,Q,E,O,E,C,Q,E,O,E,A,C,E,Q,E,O,E,A,C,C,C,G,G,C,G,C,C,C,E,A,E,A,C,C,E,C,C,A,C,C,C,C,C,A,E,G,C,K,A,K,C,O,C,C,A,C,C,E,G,I,C,G,A,M,A,C,C,A,C,E,C,O,G,E,G,I,C,M,A,K,C,C,8D,C,C,C,A,M,G,A,E,C,A,G,C,C,E,M,E,C,O,E,G,C,A,E,C,C,G,A,C,C,E,C,C,A,G,G,C,G,C,C,C,E,C,C,A,C,C,G,E,A,E,A,C,A,C,A,A,C,A,A,C,A,C,A,E,C,C,A,E,A,C,A,C,C,A,A,E,C,C,A,E,C,A,C,A,C,A,E,G,C,C,G,S,Q,C,C,C,E,A,E,C,A,C,Q,E,C,C,K,C,C,C,E,A,A,C,C,C,C,A,C,C,C,A,C,C,C,A,C,A,C,A,C,c,C,K,O,E,K,C,C,A,iB,C,C,E,G,C,O,E,I,E,A,E,C,C,C,C,A,E,C,E,G,E,E,A,C,C,C,C,oB,C,E,gB,C,G,A,E,A,I,E,E,C,C,c,C,E,C,C,C,A,A,O,E,C,a,C,E,G,Q,C,G,E,C,A,C,A,A,C,A,A,Y,C,E,C,C,E,E,C,A,C,C,C,I,E,G,W,C,G,E,G,E,C,C,C,C,M,C,C,C,C,C,A,C,E,C,A,A,C,A,A,C,A,E,c,C,E,E,W,O,C,C,E,O,A,C,C,C,E,G,E,C,E,M,I,C,E,C,A,C,A,E,A,O,C,E,C,C,A,E,C,E,A,O,C,E,C,C,A,E,C,E,A,O,C,E,C,C,A,C,M,A,K,C,mC,C,C,A,I,E,E,E,A,E,C,A,C,A,C,A,G,C,C,C,A,K,C,M,A,K,C,8B,C,C,A,O,A,C,E,E,G,E,C,C,C,C,C,C,C,C,C,C,C,A,C,C,C,A,E,C,C,A,G,C,C,C,C,A,C,C,C,C,A,G,C,E,C,C,C,C,A,C,A,C,C,A,C,C,A,G,C,G,A,C,C,A,C,A,C,A,G,C,E,A,C,E,A,C,C,A,C,A,C,A,G,C,A,E,C,C,A,G,C,C,A,C,C,C,C,A,G,C,A,E,C,C,C,C,A,C,A,C,C,C,C,A,E,E,C,E,C,C,A,E,A,G,C,E,C,A,C,A,E,A,G,C,E,C,C,A,I,C,C,C,A,C,C,C,C,A,G,C,E,C,C,C,C,A,C,A,C,C,C,C,A,G,C,G,A,C,C,A,C,A,C,A,G,C,E,C,A,A,C,C,A,C,A,C,A,G,C,E,A,C,C,C,C,A,C,A,C,C,C,C,A,E,C,C,E,C,E,A,C,C,A,C,A,C,A,G,C,A,E,C,E,A,C,C,A,C,A,C,A,G,C,E,C,C,C,A,C,C,A,C,A,C,A,G,C,E,C,C,A,C,C,A,C,A,C,C,C,C,A,G,C,E,A,C,E,A,C,A,C,A,C,C,A,G,C,A,E,C,E,A,C,C,C,A,S,A,C,O,C,C,C,E,A,E,C,E,A,C,A,C,A,A,C,C,A,G,C,E,C,A,C,C,A,C,A,C,E,A,G,C,C,C,G,C,C,A,C,C,A,A,C,G,C,C,C,E,C,E,C,C,E,A,A,C,C,C,C,A,C,A,C,A,C,E,G,A,I,A,C,C,A,A,C,C,A,K,C,C,C,G,E,A,K,C,C,C,C,A,C,A,M,C,C,E,A,I,C,A,E,A,G,C,C,C,C,C,C,E,C,A,C,A,C,A,A,C,C,C,E,A,G,C,C,C,G,C,C,A,C,A,C,A,C,A,A,C,A,Q,S,6J,I,E,E,C,C,Q,E,E,C,C,O,E,E,C,c,C,A,S,E,C,C,C,A,E,G,E,C,E,A,G,C,C,C,C,C,E,I,C,C,A,A,K,C,C,sB,E,E,G,K,E,E,C,C,C,A,C,G,E,C,I,C,I,C,Q,C,C,C,C,E,E,C,C,C,C,A,I,I,C,C,E,C,C,C,C,C,C,C,C,E,C,A,C,C,C,C,C,A,I,C,A,C,K,A,C,C,A,O,I,U,C,E,C,A,A,C,C,O,E,C,E,E,C,C,C,I,S,U,C,C,A,M,A,K,C,qB,C,A,C,A,A,S,E,C,E,A,G,C,M,C,a,C,G,C,C,I,A,K,C,iB,C,A,C,A,A,S,E,C,C,C,C,C,C,C,E,E,G,A,C,C,A,A,A,G,A,C,C,A,A,G,A,E,C,I,C,A,C,A,G,G,E,C,A,C,C,E,E,W,A,E,C,E,E,W,A,E,mB,C,C,G,A,C,C,A,G,C,S,C,C,C,Q,C,C,C,C,C,C,A,E,C,G,C,I,C,E,G,G,E,A,C,C,C,A,C,A,M,A,K,C,oB,C,C,A,I,E,C,E,E,E,S,A,E,E,C,C,E,C,A,K,C,C,C,C,C,A,E,E,C,A,C,C,E,E,E,E,C,A,A,C,A,C,A,A,A,C,A,C,A,G,E,C,G,A,C,C,A,C,A,C,C,E,E,A,W,A,E,E,E,C,A,C,E,C,C,C,A,C,C,A,G,E,C,C,C,C,A,C,A,C,A,C,A,E,E,W,A,E,E,C,C,C,C,C,A,C,C,I,I,C,C,C,C,A,C,C,C,C,C,E,E,C,A,E,C,C,I,E,C,A,C,K,G,A,C,C,C,E,C,G,E,C,G,U,C,C,C,M,C,C,A,I,I,C,C,C,C,C,C,C,C,M,C,C,E,C,A,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,A,O,C,C,C,A,C,C,C,A,C,C,C,C,C,C,C,E,C,C,C,A,C,C,C,C,E,C,A,C,C,C,C,C,C,A,C,C,E,E,W,A,E,G,I,A,A,C,C,C,G,A,C,E,E,W,A,E,C,E,C,C,C,A,K,C,C,C,E,C,A,O,C,C,A,E,C,C,C,C,C,C,C,C,C,E,G,E,A,G,A,C,C,A,A,G,A,C,C,A,A,G,A,E,C,I,C,A,C,A,G,C,C,I,E,G,C,C,I,C,C,C,C,C,A,C,C,C,A,E,C,A,C,M,C,C,K,E,C,C,C,M,C,C,E,E,W,A,E,mB,C,C,C,M,C,G,A,C,K,E,C,A,A,G,E,K,E,C,C,C,K,C,G,C,M,A,K,C,wC,C,C,A,O,C,C,M,C,C,K,C,C,C,C,C,M,A,C,G,A,C,K,C,E,E,C,A,C,C,A,C,I,E,C,G,A,C,K,C,E,E,C,A,K,C,C,C,C,C,M,E,A,C,A,A,C,A,Q,E,C,C,C,C,C,M,A,E,C,A,C,C,A,E,c,A,E,E,C,C,E,C,A,oB,C,C,C,Q,C,C,C,e,C,C,C,e,C,I,C,M,C,C,C,A,G,G,C,G,C,G,C,M,C,C,Q,C,G,C,C,C,C,E,E,G,A,A,C,A,C,A,A,G,A,E,C,C,A,E,A,C,Q,A,C,C,C,G,G,E,Q,U,C,O,E,C,C,C,Q,E,O,E,C,K,C,E,E,W,A,E,E,C,C,C,I,A,K,C,kC,C,A,C,A,C,G,C,A,C,A,C,G,C,I,C,C,A,C,C,G,K,C,C,C,C,M,C,C,C,C,A,C,C,C,A,C,C,E,C,C,C,A,C,A,G,A,C,I,C,C,G,E,C,C,E,C,C,C,C,I,C,C,E,C,C,A,C,K,E,C,E,E,C,C,A,E,C,C,C,C,C,C,I,C,C,E,A,A,G,gB,E,C,E,E,C,C,C,C,G,M,A,K,C,+B,C,C,A,I,C,C,A,K,C,G,E,C,C,A,I,C,C,C,C,C,C,E,C,E,A,C,C,I,C,C,A,K,C,C,C,C,A,I,I,C,C,C,C,C,C,C,C,C,E,C,C,I,E,C,E,C,A,C,C,E,A,C,C,A,C,C,A,E,C,O,C,E,E,C,C,C,A,C,C,C,A,C,C,A,C,E,E,G,A,E,E,E,C,A,A,C,C,C,A,A,C,C,C,C,C,C,C,A,A,O,C,A,C,A,A,E,kB,C,E,E,e,G,C,E,E,a,C,C,C,E,U,A,C,E,O,A,C,C,C,C,C,I,C,C,E,C,A,E,C,A,C,E,A,C,I,C,I,C,C,C,C,O,E,C,C,A,M,C,C,C,C,E,E,A,G,C,E,E,A,E,A,E,A,C,C,C,G,A,C,A,G,A,C,C,A,C,K,C,C,E,C,A,E,C,C,C,G,A,C,E,G,A,C,E,C,A,C,C,C,C,C,C,C,A,O,C,C,E,G,A,C,E,E,C,C,A,C,A,C,C,A,G,A,C,C,C,E,G,A,C,E,A,E,E,A,C,C,C,A,C,A,G,C,C,A,C,A,A,C,A,C,E,U,E,C,E,O,A,C,C,C,C,C,C,C,G,E,Q,E,O,E,M,A,E,G,C,8B,C,C,A,M,C,W,C,C,C,C,E,I,C,C,E,E,C,A,C,C,G,C,C,C,E,C,E,C,E,C,G,C,C,C,C,A,E,A,E,G,O,C,E,C,C,C,C,C,C,C,A,C,C,A,E,G,O,C,E,C,C,C,C,C,C,C,A,C,A,C,E,A,G,C,E,C,A,a,E,C,A,O,C,C,c,E,C,A,C,A,C,A,C,a,C,C,C,C,E,I,C,C,E,E,C,A,C,C,G,C,C,C,E,C,E,C,Q,C,G,C,C,C,C,A,C,C,E,G,O,C,E,C,C,C,C,C,C,C,C,Y,E,C,A,O,C,C,c,E,C,A,C,A,C,A,C,A,C,A,gH,I,E,E,C,C,M,E,E,E,C,C,O,C,E,E,C,C,Q,K,I,E,C,E,E,I,M,E,E,E,C,C,E,C,E,I,A,C,C,C,E,I,A,E,E,E,A,C,A,E,E,W,A,E,G,I,A,C,C,S,C,E,W,C,A,C,A,A,E,O,C,E,E,I,O,C,E,O,A,C,C,C,E,A,I,E,A,A,G,C,A,A,E,A,E,W,A,E,C,G,C,C,G,E,E,C,C,A,C,A,A,O,M,C,M,C,C,G,E,E,E,G,G,C,C,C,A,C,A,E,0I,I,E,E,C,C,Q,A,E,E,C,C,O,C,E,E,C,C,Q,C,C,E,C,C,Q,E,E,C,A,C,O,A,E,E,C,C,Q,E,E,C,C,C,K,E,E,M,C,C,mE,C,C,A,E,M,C,C,mE,C,C,A,E,C,K,C,C,C,C,A,E,C,K,C,C,C,C,A,E,C,C,C,C,E,C,C,A,C,C,C,C,C,C,C,A,C,C,A,S,E,C,E,E,E,E,C,K,C,C,C,C,E,C,K,C,C,C,C,E,E,I,C,E,C,C,E,E,I,C,E,C,C,A,E,E,I,C,E,C,C,E,E,I,C,E,C,C,E,E,I,C,E,C,C,A,E,A,C,C,C,C,C,C,E,A,C,C,A,A,C,C,A,E,A,C,C,E,A,C,C,A,A,C,A,A,E,E,E,E,A,E,E,A,G,E,A,C,C,A,C,C,C,C,A,A,C,A,E,E,I,A,E,E,A,G,E,A,C,C,A,C,C,C,C,A,C,A,A,E,E,I,A,E,E,A,G,E,A,C,C,A,C,C,C,C,A,C,A,A,E,E,I,A,E,E,C,G,C,C,C,C,A,C,A,E,A,C,A,C,C,E,I,A,E,E,C,G,C,C,C,A,C,A,C,A,E,A,C,A,A,C,C,E,C,C,E,A,E,E,C,G,C,C,C,C,A,C,A,E,A,C,A,C,A,C,E,I,A,E,E,C,G,C,C,C,C,A,C,A,E,A,C,A,C,A,C,E,I,A,E,E,E,E,C,C,C,C,A,C,A,E,A,C,A,C,A,C,E,I,A,E,E,E,C,E,A,C,C,A,C,C,C,C,A,A,C,A,E,E,I,A,E,E,E,E,C,C,C,C,A,C,A,E,A,A,C,C,C,E,I,A,E,E,A,G,E,A,C,C,A,C,C,C,C,A,C,A,C,C,E,I,A,E,E,A,G,E,A,C,C,C,A,C,E,A,G,C,E,A,G,C,G,C,A,C,A,C,M,A,K,C,yB,C,C,A,O,C,C,A,E,C,C,E,A,G,E,K,A,E,O,G,I,E,A,C,I,C,C,A,C,C,C,A,E,C,Q,C,C,E,E,W,A,E,C,C,C,M,C,C,C,C,C,C,M,C,C,C,I,E,A,C,C,E,E,C,K,C,C,+E,C,C,E,C,M,C,+E,C,C,C,C,M,C,C,C,C,I,E,E,E,E,C,C,I,C,M,C,oE,C,C,W,C,A,C,E,C,C,G,E,A,M,C,oC,C,C,A,E,A,C,E,C,K,C,oC,C,C,A,E,A,M,C,qC,C,C,A,E,M,C,A,qC,C,C,A,C,C,A,E,E,A,C,E,C,C,A,C,A,C,A,E,C,E,A,C,E,C,C,A,A,C,C,A,C,C,C,E,G,A,E,C,C,E,A,E,A,E,A,E,E,C,A,C,C,A,A,C,E,E,G,A,E,C,E,A,E,A,E,A,E,C,A,E,A,E,A,C,C,A,A,C,A,C,E,E,A,C,C,C,C,C,I,A,C,A,C,A,C,C,C,C,C,A,I,C,C,A,A,C,C,C,C,C,A,E,A,G,A,C,C,A,E,E,I,A,C,E,E,C,sC,C,C,C,C,A,M,O,K,A,E,M,K,A,C,C,A,A,C,A,C,C,C,E,M,C,C,A,I,E,C,K,C,C,C,C,A,E,A,A,C,E,A,Q,E,C,M,C,E,E,C,A,E,C,C,E,E,C,C,C,A,G,C,K,E,C,C,E,C,C,E,A,I,E,C,C,A,E,C,A,A,Q,I,E,C,C,C,E,E,C,C,C,E,M,A,E,U,C,I,C,E,A,C,A,E,A,C,A,C,U,C,C,C,C,C,C,A,E,C,C,C,E,W,A,E,E,E,C,C,A,C,A,C,C,C,A,E,A,E,C,G,C,E,E,M,A,E,C,E,E,W,A,E,I,C,C,E,C,A,I,A,C,C,A,A,C,E,C,C,A,E,C,E,K,E,G,C,C,G,C,C,C,C,A,E,A,C,E,A,C,E,A,E,e,A,E,C,C,E,C,C,A,E,A,C,C,C,A,C,E,E,G,A,E,C,C,G,E,A,C,C,C,A,C,C,C,A,C,C,G,A,E,C,C,G,E,E,C,E,C,C,I,C,e,C,A,S,E,C,E,I,E,A,E,M,G,C,K,C,sB,C,G,C,A,C,A,C,C,A,G,W,C,E,C,A,C,C,I,C,M,C,C,A,C,K,E,C,E,C,A,C,C,A,C,C,A,C,C,C,C,A,C,I,C,E,C,C,C,A,A,C,A,A,M,G,E,C,E,C,E,C,E,A,C,C,C,M,A,K,C,uB,C,C,A,C,G,E,A,E,C,C,A,C,C,C,A,C,C,E,C,C,E,A,A,C,A,C,A,C,C,C,C,E,C,C,C,C,C,C,A,C,C,G,C,G,C,C,C,E,C,C,C,C,C,A,A,C,G,C,A,C,I,E,C,C,C,A,C,G,A,C,C,C,I,C,C,c,E,C,A,C,A,C,A,A,K,I,E,G,C,E,C,M,E,A,C,C,C,E,e,A,E,E,Q,W,E,E,I,A,C,A,A,C,C,C,M,E,C,C,C,C,C,E,I,A,E,C,A,E,E,W,A,E,W,C,E,E,C,C,A,C,C,C,A,E,E,W,A,E,S,C,G,E,C,A,C,C,A,C,C,W,A,E,W,C,E,E,C,C,A,G,A,C,I,C,C,C,A,C,E,C,E,C,C,e,A,E,G,C,A,C,A,C,A,C,A,E,E,e,A,E,E,C,O,C,C,C,E,C,C,C,A,C,E,A,C,E,A,C,C,C,O,E,G,C,A,C,C,C,E,E,a,E,A,E,E,C,O,C,E,C,E,C,C,C,A,C,E,C,C,E,I,E,C,M,A,C,A,C,E,G,C,C,I,C,C,C,C,C,A,K,C,G,E,C,C,C,C,E,E,C,C,C,E,A,C,A,C,C,C,C,C,A,C,A,G,A,C,E,C,C,A,C,C,A,A,C,A,C,A,G,C,C,W,S,C,A,C,A,C,C,A,C,A,A,C,C,C,C,G,C,C,E,C,C,C,Q,E,E,C,C,Q,E,C,C,G,C,C,O,E,G,C,C,E,E,A,E,C,C,E,E,C,E,C,I,E,A,C,A,E,A,C,M,C,C,C,C,G,C,M,C,C,Q,A,C,E,M,C,C,C,G,I,C,A,C,A,C,A,A,C,G,C,C,C,O,A,C,C,C,A,C,E,C,E,E,A,W,A,E,E,C,E,I,C,C,C,E,A,E,W,A,E,S,C,G,C,G,C,C,A,C,C,C,M,C,C,C,C,E,G,C,C,C,E,E,A,C,C,C,I,I,A,E,S,C,E,E,C,C,A,C,A,A,C,E,C,C,A,C,E,C,C,e,A,E,E,Q,K,C,A,C,C,C,C,C,A,C,C,E,A,Q,O,C,C,C,E,A,C,C,C,A,C,C,A,E,C,C,C,E,e,A,E,I,A,C,A,C,C,A,C,C,E,E,C,K,A,A,K,C,U,c,C,C,A,C,E,C,K,C,C,C,M,C,A,C,C,C,E,E,C,A,C,A,C,A,E,E,A,E,A,C,C,C,A,A,C,C,C,A,G,C,S,C,E,C,C,A,C,E,E,C,E,C,E,A,C,C,C,A,E,C,E,C,E,E,C,C,A,C,C,A,C,C,C,C,E,C,C,A,C,E,E,C,A,C,C,C,C,A,E,E,E,A,K,C,kC,C,C,A,O,C,C,C,A,C,K,C,E,K,C,C,I,Y,C,E,S,C,K,C,gB,Q,M,S,E,U,K,C,E,e,C,e,C,E,e,Y,E,G,C,E,E,C,C,C,C,A,C,E,C,A,E,C,E,C,C,E,Q,A,E,E,A,C,A,C,C,C,C,G,8D,C,mE,C,oE,C,oE,C,C,C,oE,C,oE,C,oE,C,C,A,C,Q,4D,C,oE,C,oE,C,oE,C,C,C,oE,C,oE,C,oE,C,oE,C,C,A,C,G,C,A,C,E,A,C,A,A,C,G,C,A,C,E,A,C,K,C,C,C,C,C,C,C,A,E,A,C,A,E,C,C,E,a,E,C,C,A,A,E,C,C,A,C,C,C,M,C,oE,C,C,C,C,M,C,M,C,C,C,C,E,A,M,C,M,C,K,C,C,C,C,C,A,E,A,C,A,E,C,C,Y,A,A,E,A,C,C,A,G,M,C,e,C,A,I,G,A,E,C,C,A,G,C,C,C,E,E,A,E,I,C,C,C,C,C,C,C,C,A,O,E,C,C,C,C,A,A,C,A,C,C,G,C,gC,C,S,C,gC,C,C,C,E,A,K,C,C,C,C,C,C,C,G,C,M,C,K,C,I,C,E,M,C,C,C,A,E,A,C,U,C,C,C,A,C,A,G,O,C,A,E,A,C,Y,C,C,C,A,C,A,G,S,C,E,C,kG,E,W,C,4C,C,kG,E,Q,C,oE,C,8I,E,C,C,M,C,oE,C,C,A,E,W,C,M,C,qB,C,C,A,E,U,C,M,C,oE,C,C,A,E,S,C,M,C,oE,C,C,M,C,C,C,C,C,A,E,S,C,M,C,oE,C,C,qH,E,W,C,I,E,E,C,C,S,C,Q,wB,C,+B,O,c,C,E,a,iI,I,E,E,C,C,E,M,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,I,E,E,C,C,Q,O,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,I,E,E,C,C,Q,O,c,C,E,I,C,Y,E,I,W,O,E,C,C,G,A,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,I,E,E,C,C,Q,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,mG,I,E,E,C,C,Q,C,C,E,C,C,K,E,E,E,I,C,C,C,C,A,E,E,I,C,C,C,C,A,E,E,I,C,C,C,C,A,E,G,G,C,E,C,C,A,E,G,G,C,E,C,C,A,E,G,G,C,E,C,C,A,E,C,C,C,A,C,Q,E,C,E,I,E,C,E,E,Y,A,E,C,E,E,S,A,E,G,E,A,C,A,A,C,A,A,M,G,E,A,G,C,A,A,C,G,A,G,C,A,A,K,C,E,C,O,I,C,C,C,C,A,C,A,A,I,C,C,C,C,C,C,E,E,c,A,E,E,G,C,E,E,U,A,E,G,E,C,Q,C,O,C,G,E,C,C,A,C,C,C,C,C,C,E,E,O,A,E,E,C,A,E,C,C,A,C,E,C,M,C,E,E,c,A,E,C,C,Q,C,I,C,C,C,C,C,S,C,C,C,C,C,C,C,0B,C,G,C,I,C,C,C,C,C,C,A,I,C,C,C,C,A,C,A,A,I,C,C,C,C,C,C,E,E,c,A,E,E,G,C,E,E,U,A,E,G,G,C,O,C,O,C,G,G,C,A,C,A,C,C,C,C,C,E,E,O,A,E,E,C,A,G,C,A,C,C,E,C,O,I,C,C,C,C,A,C,A,A,O,E,C,O,C,C,A,C,O,C,I,C,C,C,C,C,S,C,C,C,C,C,C,A,C,A,I,C,E,C,O,I,C,C,C,C,A,C,A,A,I,C,C,C,C,C,I,C,C,C,E,E,S,A,E,E,G,I,C,C,A,C,E,E,c,A,E,E,G,C,E,E,G,C,C,W,C,G,C,G,E,C,C,A,C,C,A,E,C,C,A,C,A,A,I,Q,E,C,O,I,C,C,C,C,A,C,A,A,I,a,E,C,I,C,C,I,C,Q,C,O,A,I,E,A,C,C,I,C,A,E,O,G,C,C,C,A,C,A,A,I,O,E,C,Q,K,I,C,C,A,C,A,C,A,A,C,C,A,C,C,A,C,C,C,C,O,E,C,I,E,G,E,I,I,A,E,I,C,C,C,C,A,O,I,C,O,E,C,C,C,C,C,E,G,C,C,A,C,E,E,O,A,E,E,C,A,I,I,C,C,W,E,C,M,C,E,E,M,A,E,C,I,C,C,C,I,C,W,C,C,A,C,A,A,I,U,E,C,M,C,E,E,M,A,E,C,I,C,C,C,I,C,C,C,C,G,C,O,C,A,C,K,C,A,C,K,C,A,C,A,C,A,A,Y,C,C,C,C,C,C,C,C,C,C,E,E,a,A,E,E,E,C,G,O,C,C,A,I,C,C,C,C,C,C,C,A,I,C,C,C,C,C,C,C,A,I,C,C,C,C,C,C,C,A,I,C,C,A,E,C,I,A,C,A,A,C,M,C,G,C,4B,C,C,E,C,M,C,gB,E,I,C,C,C,O,E,I,C,E,C,C,E,I,C,O,E,C,A,C,C,C,A,C,iB,C,W,E,I,C,O,C,Y,E,I,C,Q,C,E,C,A,C,A,A,K,E,C,I,E,G,C,E,E,I,A,C,A,C,C,I,C,E,C,I,C,C,C,C,A,O,I,C,Q,E,C,E,C,C,C,A,C,I,C,Q,A,C,C,C,C,A,G,C,E,E,C,I,E,I,C,C,O,C,A,M,C,K,C,W,C,Q,C,I,C,C,A,E,E,I,E,E,E,C,A,C,G,C,A,C,C,I,C,C,C,C,C,I,C,E,C,C,C,I,C,C,C,A,C,A,A,M,C,U,C,C,C,C,I,E,A,C,E,E,S,A,E,C,C,G,C,C,O,A,E,C,G,C,C,A,C,A,E,G,A,C,A,A,C,A,C,E,c,A,E,E,C,E,G,gB,C,G,C,C,C,C,A,C,E,A,C,C,C,A,E,C,A,C,C,I,C,W,C,C,C,C,C,C,M,C,E,E,S,A,E,G,E,E,A,C,A,G,C,E,C,C,C,E,C,A,C,A,A,M,C,c,C,C,C,C,I,E,A,C,E,E,S,A,E,C,C,C,O,A,E,E,G,C,C,E,E,E,C,A,A,E,A,E,G,C,C,E,E,E,C,A,C,C,A,E,E,c,A,E,E,C,E,G,Q,C,G,C,C,C,C,A,E,A,E,E,A,C,A,A,C,A,C,C,A,C,A,M,C,I,C,C,C,C,S,E,C,C,C,E,C,E,C,C,c,A,E,E,E,C,I,M,C,E,C,A,A,C,C,C,A,G,C,E,E,O,I,E,E,E,E,C,K,C,E,Q,C,E,C,C,A,G,Q,E,O,E,C,A,C,G,E,C,E,A,E,Q,A,E,E,C,U,C,C,A,G,E,G,E,G,G,C,C,I,C,C,G,E,O,A,E,E,G,E,C,C,C,E,C,C,C,A,C,C,E,G,E,C,E,C,E,C,C,A,C,C,I,A,C,A,C,A,C,C,C,E,C,A,C,C,C,A,O,C,C,C,C,E,I,A,C,G,E,E,C,C,C,C,C,A,E,O,A,E,C,C,C,C,C,C,A,A,G,E,G,E,G,G,C,C,I,C,C,C,E,E,O,A,E,E,G,E,C,C,C,E,C,C,C,A,C,C,G,E,O,A,E,E,G,E,C,E,C,E,C,C,C,A,C,C,E,O,O,C,C,C,E,C,C,C,A,O,I,E,E,C,C,C,C,A,C,A,C,C,A,A,G,E,G,G,wB,C,C,A,A,G,G,U,E,O,A,E,A,C,I,E,C,A,I,E,A,E,C,A,C,A,E,A,E,E,I,C,U,C,C,A,I,C,C,E,E,C,A,C,A,C,E,O,C,C,C,E,G,I,E,A,C,C,O,E,C,C,C,A,G,C,G,E,E,C,E,C,E,E,C,G,O,A,E,E,E,C,C,K,gB,C,C,A,I,E,C,E,A,E,Q,A,E,G,O,C,A,C,A,C,A,C,E,I,A,A,C,E,E,O,A,E,G,A,E,C,A,C,C,G,G,K,C,A,C,A,C,E,C,A,C,E,C,U,C,C,A,U,C,G,C,C,C,S,C,C,C,C,C,E,G,I,E,E,A,C,I,C,C,C,E,E,S,A,E,E,C,A,C,K,C,Q,C,C,E,E,C,C,C,A,C,C,E,E,C,C,E,G,C,G,O,C,C,C,C,C,A,A,G,I,E,A,E,O,E,A,C,E,E,I,O,A,E,E,E,C,C,K,gB,C,C,A,C,C,C,I,A,C,A,C,C,E,Q,A,E,E,C,C,C,C,E,C,A,C,C,A,A,C,A,C,A,G,I,E,E,C,I,G,C,E,E,S,A,E,E,K,Q,C,E,A,K,C,C,A,M,C,C,C,E,C,A,C,K,C,C,A,M,C,C,C,E,C,C,A,A,G,E,G,G,W,C,C,A,A,G,E,G,G,K,C,A,C,A,C,E,C,A,C,E,C,U,C,E,C,M,C,C,A,E,I,A,E,E,C,C,C,C,A,C,A,C,C,A,O,I,E,C,C,A,C,C,A,A,C,C,C,A,E,I,E,E,C,A,M,E,C,E,E,S,A,E,E,C,M,C,a,C,G,E,I,G,C,kB,C,C,A,E,I,E,E,C,A,U,E,E,C,U,G,E,I,O,C,sB,C,C,A,C,C,C,A,E,C,C,O,C,U,uB,O,c,C,E,a,gC,I,E,E,C,C,Q,E,C,C,C,C,K,E,E,E,C,C,E,K,O,I,C,A,A,K,Q,C,C,C,C,E,E,c,A,E,A,E,I,E,E,U,A,E,G,O,C,a,C,Y,C,Y,C,C,A,I,C,C,C,C,C,G,E,O,A,E,E,C,A,I,G,C,C,K,E,C,O,I,C,C,A,E,A,C,A,A,I,S,E,C,O,E,Q,Q,C,I,C,C,A,E,C,A,C,A,A,I,mB,E,C,O,E,Q,Q,C,I,C,C,C,C,E,E,C,A,C,C,C,C,C,C,C,C,C,E,E,c,A,E,E,G,C,E,E,U,A,E,G,G,C,mB,C,Q,C,G,G,C,A,C,C,C,C,S,C,I,C,C,E,E,Y,A,E,G,C,E,A,C,C,Y,A,E,I,C,C,C,C,C,C,C,I,E,E,C,C,A,A,O,E,S,C,I,C,C,C,C,C,E,E,O,A,E,E,C,A,C,E,C,C,C,C,C,E,E,O,A,E,E,C,A,C,E,C,C,C,C,E,C,O,C,A,C,E,C,C,C,A,C,A,A,C,A,A,A,mB,C,C,C,C,I,E,E,E,M,Q,C,G,E,C,C,E,C,E,E,O,A,E,E,S,C,e,C,C,E,E,Y,A,E,I,C,C,C,C,C,C,C,E,E,Q,A,E,I,E,C,A,C,A,C,C,C,C,E,C,gB,C,C,C,C,C,C,I,E,C,E,A,E,Q,A,E,E,C,I,C,C,A,G,A,E,G,E,M,C,C,I,E,E,E,O,C,Y,C,E,C,C,C,E,M,C,A,C,C,A,E,O,A,E,G,A,G,A,C,C,A,G,E,G,G,C,C,I,E,C,G,U,C,E,C,C,A,C,C,C,C,C,E,E,A,C,A,E,C,E,C,C,C,A,A,E,E,A,C,A,C,E,E,E,C,Q,C,e,C,O,C,G,E,C,C,E,G,E,O,A,E,E,G,O,C,G,C,A,M,A,C,A,C,C,c,C,C,C,C,C,C,C,E,E,c,A,E,E,G,C,E,E,U,A,E,G,G,C,mB,C,Q,C,G,G,C,A,C,C,C,C,S,C,I,C,G,E,E,E,C,A,C,K,C,S,C,W,C,C,E,E,Y,A,E,C,E,E,M,A,E,C,E,C,A,C,E,C,A,C,C,C,C,C,A,E,C,E,C,C,E,C,E,S,C,E,C,O,C,C,A,gB,C,C,E,E,Y,A,E,I,E,C,C,C,C,C,E,E,c,A,E,I,E,E,I,0B,C,W,C,G,I,C,C,C,A,C,G,C,E,E,C,A,E,C,C,E,C,S,C,C,C,C,C,C,C,C,I,E,E,A,S,C,e,C,O,C,E,Q,Q,C,E,C,A,S,C,C,C,C,C,A,E,E,A,S,C,e,C,O,C,E,Q,Q,C,E,C,A,S,C,C,C,C,C,A,M,I,C,E,E,C,C,G,C,C,G,C,C,C,E,C,C,A,E,I,C,C,I,C,W,sB,O,c,C,E,a,wJ,I,E,E,C,C,Q,O,E,Y,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,I,E,E,C,C,Q,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,I,E,E,C,C,E,M,O,c,C,E,Y,C,W,G,I,W,O,E,S,C,G,A,I,E,E,C,C,Q,O,c,C,E,S,C,W,G,I,W,O,E,M,C,G,A,I,E,E,C,C,Q,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,I,E,E,C,C,O,O,c,C,E,S,C,Y,E,I,W,O,E,M,C,G,A,O,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,I,E,E,C,C,Q,O,E,Y,C,E,S,C,Y,E,I,W,O,E,M,C,G,A,O,c,C,E,S,C,Y,E,I,W,O,E,M,C,G,A,I,E,E,C,C,I,I,O,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,I,E,E,C,C,E,M,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,E,I,C,E,K,E,E,E,A,W,C,I,E,C,A,E,S,C,I,E,C,A,E,M,C,I,E,C,A,E,W,C,I,E,C,A,E,S,C,I,E,C,A,E,M,C,I,E,C,A,E,U,C,I,E,C,A,E,M,C,I,E,C,A,E,M,C,I,E,C,A,E,W,C,I,E,A,C,A,sH,I,E,E,C,C,M,E,E,E,C,C,K,E,E,E,I,C,C,C,C,A,E,G,G,C,E,C,C,A,S,E,C,E,I,E,C,E,A,E,E,A,C,E,M,E,C,C,A,S,C,C,C,C,K,C,E,C,C,A,E,I,E,Q,C,E,C,C,A,I,I,C,C,C,C,C,C,E,C,C,E,C,A,C,C,C,C,C,C,C,C,C,C,U,C,C,C,C,A,I,E,C,E,C,C,Q,A,E,C,E,E,S,A,E,I,I,A,C,C,C,C,C,C,C,C,C,C,E,C,C,E,C,C,A,C,C,C,E,C,C,E,C,C,C,C,E,C,C,C,C,C,C,C,C,C,C,C,W,E,C,C,A,A,C,I,C,C,E,C,C,A,C,C,C,C,E,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,W,E,C,C,A,M,I,C,E,G,C,C,E,C,A,C,A,A,I,E,C,C,C,A,I,C,G,C,C,C,C,C,C,E,C,C,E,C,A,C,C,M,C,C,C,C,C,M,C,C,C,C,A,I,I,C,C,C,C,C,C,E,C,C,E,C,A,C,C,M,C,Y,C,E,C,C,C,C,C,M,C,E,C,C,C,C,A,S,E,C,E,I,E,C,A,E,C,E,A,C,C,A,E,C,E,M,E,C,C,A,S,C,C,C,C,E,K,I,C,C,C,C,C,C,I,C,C,A,K,C,E,C,C,G,C,A,C,E,A,C,C,A,C,C,C,C,I,C,E,C,C,A,K,E,M,A,I,E,C,I,E,C,C,C,K,G,C,C,C,C,C,C,C,E,K,C,A,C,C,C,E,E,C,A,C,E,C,E,M,G,C,E,G,G,C,C,A,A,I,E,M,A,C,E,C,Q,C,E,E,C,C,E,A,C,C,A,C,I,E,M,A,C,C,C,C,E,G,C,E,A,M,C,A,C,C,A,I,E,A,C,G,O,I,E,C,C,C,A,C,G,I,C,C,C,C,C,C,E,C,C,E,C,A,C,C,A,G,mC,C,C,C,C,A,C,M,C,C,C,C,A,O,C,C,C,E,A,C,A,C,O,E,C,E,G,C,C,C,E,c,A,E,Q,E,O,E,K,C,W,C,S,C,G,E,E,C,C,C,A,C,wB,C,C,C,A,E,K,K,C,I,C,E,C,E,I,C,A,C,C,C,A,I,E,E,E,C,I,C,C,A,C,E,E,E,Y,A,E,C,E,K,A,C,+B,C,E,I,E,A,K,iB,C,S,C,G,E,A,E,C,A,C,A,C,A,K,A,C,gC,C,C,C,G,E,c,A,E,E,K,I,C,C,C,C,C,G,E,G,I,C,E,Y,C,S,C,G,I,A,C,C,A,C,G,M,A,A,C,E,E,E,C,E,A,Q,E,C,A,I,E,E,E,A,C,C,I,C,C,C,C,C,C,E,G,G,C,C,E,C,A,E,E,E,A,C,C,A,C,A,C,C,C,C,C,A,O,E,C,C,E,A,C,I,I,C,C,C,C,C,Q,C,E,C,C,A,K,E,I,E,C,E,C,C,E,G,C,A,E,I,C,E,E,I,C,G,A,C,E,A,C,C,A,G,W,A,G,E,G,c,C,S,C,E,C,A,E,E,C,C,M,C,E,E,O,O,C,E,O,A,C,E,I,C,C,I,C,C,C,E,I,G,C,A,C,G,C,E,C,C,W,E,C,A,K,E,I,E,C,E,C,C,E,G,C,A,E,I,C,C,I,C,E,M,C,G,A,C,C,C,C,E,C,0H,I,E,E,C,C,M,E,E,E,C,C,K,E,E,E,C,C,Q,E,gB,C,E,O,A,C,E,I,E,C,A,C,C,E,E,Q,A,E,E,A,I,C,C,A,E,A,C,E,E,A,C,Q,A,E,E,A,K,C,U,C,C,A,Q,C,E,C,C,A,O,E,G,E,C,A,E,I,C,A,C,C,M,A,C,C,C,C,I,C,E,I,C,C,C,A,C,E,E,C,C,Q,A,E,C,E,E,S,A,E,C,E,E,S,A,E,G,E,S,A,E,C,E,E,A,C,C,C,E,C,A,C,A,C,A,C,E,iB,C,E,O,A,C,C,C,C,C,E,I,A,E,C,C,C,C,C,U,A,E,G,E,A,C,A,C,A,C,E,Q,A,E,E,G,G,C,C,A,E,C,E,E,K,G,A,E,E,W,G,C,C,A,M,C,E,E,c,A,E,E,G,E,E,I,C,uB,C,M,C,G,C,C,C,A,C,C,c,A,E,E,G,E,M,C,G,4B,C,c,C,G,C,E,E,K,C,C,G,A,E,C,E,E,S,A,E,C,E,E,S,A,E,G,E,M,A,E,C,M,C,E,E,A,E,A,C,C,C,E,C,C,A,C,A,E,mI,I,E,E,C,C,K,E,E,E,C,C,Q,S,E,C,E,O,C,E,A,E,Q,C,C,O,E,G,O,A,C,A,A,K,U,E,C,C,C,E,I,C,C,I,E,E,K,C,C,I,E,G,G,4C,C,C,E,C,C,A,E,E,M,A,E,Q,E,O,E,I,C,c,C,mB,C,C,K,C,C,C,C,C,A,C,C,C,E,c,A,G,E,G,4D,C,Q,C,I,C,C,C,A,C,C,U,A,E,E,C,A,E,C,C,C,U,C,E,E,S,C,A,E,O,A,C,E,A,G,C,E,I,G,E,U,A,E,I,C,C,A,A,C,C,C,G,E,C,C,A,C,M,C,C,C,E,A,C,a,C,E,O,A,C,C,C,K,G,A,G,K,E,A,O,E,A,E,E,C,C,C,C,mB,C,C,C,A,E,E,U,A,E,I,C,C,C,A,C,C,M,A,E,A,I,I,A,oC,C,uB,C,C,S,C,a,C,C,C,A,E,E,E,E,I,A,K,C,K,C,C,A,C,C,C,E,C,C,A,E,A,E,A,E,E,I,E,C,C,A,G,G,O,E,A,O,E,I,A,C,A,E,E,I,E,C,A,C,A,A,E,E,c,A,E,G,E,6B,C,Q,C,E,C,G,C,C,2B,O,c,C,E,a,qI,I,E,E,C,C,Q,O,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,I,E,E,C,C,Q,C,M,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,O,c,C,E,oB,C,W,G,I,W,O,E,iB,C,G,A,I,E,E,C,C,Q,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,+B,O,c,C,E,a,2B,I,E,E,C,C,K,E,E,C,C,C,A,C,Q,C,C,C,C,C,E,I,G,E,C,E,C,G,E,C,E,A,C,G,E,C,C,C,A,C,C,A,C,C,I,E,E,C,A,E,C,C,E,C,A,C,A,C,C,A,C,G,E,E,C,C,C,C,G,K,M,E,C,C,C,A,C,A,A,C,Q,C,C,C,C,C,E,O,I,E,E,C,A,G,E,E,G,C,C,A,C,A,C,A,A,C,E,C,C,C,A,G,C,C,C,A,C,A,A,A,I,E,M,C,G,A,C,e,C,A,C,M,E,G,C,A,C,K,A,G,C,A,A,Y,C,A,a,C,C,C,C,C,C,C,C,C,I,E,A,I,E,C,G,C,A,C,A,C,E,E,a,A,E,E,E,E,C,I,C,C,A,C,E,E,gB,A,E,I,C,c,O,I,C,G,C,C,C,C,A,C,G,C,C,C,C,C,E,I,C,A,C,K,E,A,C,A,A,M,E,C,G,O,E,C,I,C,I,E,A,c,E,K,C,I,C,M,A,K,C,E,C,C,M,A,O,E,C,I,C,I,C,C,M,E,I,C,K,C,G,C,A,C,E,A,C,A,C,M,E,C,C,I,C,G,C,C,C,C,C,A,I,C,I,A,C,A,A,Y,E,C,O,C,A,C,A,A,Q,E,C,O,C,A,C,A,A,Q,E,C,O,C,A,C,A,A,Q,E,C,M,C,C,I,C,I,C,K,C,e,C,A,C,A,A,C,K,E,C,O,I,C,I,C,U,C,O,C,A,C,A,A,Q,E,C,M,Q,C,C,C,I,C,I,A,C,A,I,S,E,C,G,O,E,C,I,C,I,C,M,S,C,a,C,C,A,O,I,C,C,C,C,A,C,A,A,I,W,E,C,G,A,O,E,K,C,I,C,M,S,C,c,C,C,M,A,C,I,E,E,C,C,C,C,C,C,C,C,A,A,K,E,E,C,C,C,C,C,I,C,K,C,M,C,A,I,A,C,A,A,M,C,I,C,C,C,C,C,C,O,I,E,E,C,C,E,A,A,C,A,E,C,C,E,C,K,C,C,C,C,O,C,C,C,C,C,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,G,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,G,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,G,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,G,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,G,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,G,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,G,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,G,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,G,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,G,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,G,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,G,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,G,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,G,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,G,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,G,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,G,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,G,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,G,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,G,C,A,C,A,A,M,C,I,C,C,C,C,O,C,C,C,C,G,C,A,C,A,A,M,C,I,C,C,C,C,O,C,C,C,C,C,C,C,A,C,A,A,M,C,K,C,C,C,C,O,C,C,C,C,C,E,C,A,C,A,A,M,C,K,C,C,C,C,O,C,C,C,C,C,E,C,A,C,A,A,M,C,K,C,C,C,C,O,C,C,C,C,C,E,C,A,C,A,A,M,C,K,C,C,C,C,O,C,C,C,C,C,E,C,A,C,A,A,M,C,K,C,C,C,C,O,C,C,C,C,C,E,C,A,C,A,A,M,C,K,C,C,C,C,O,C,C,C,C,C,E,C,A,C,A,A,M,C,K,C,C,C,C,O,C,C,C,C,C,E,C,A,C,A,A,M,C,K,C,C,C,C,O,C,C,C,C,C,E,C,A,C,A,A,M,C,K,C,C,C,C,O,C,C,C,C,C,E,C,A,C,A,A,M,C,K,C,C,C,C,O,C,C,C,C,C,E,C,A,C,A,A,M,C,K,C,C,C,C,O,C,C,C,C,C,E,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,G,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,G,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,G,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,G,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,G,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,G,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,G,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,G,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,G,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,G,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,G,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,G,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,G,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,G,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,G,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,G,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,G,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,G,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,G,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,G,C,A,C,A,A,M,C,G,C,C,C,C,O,C,C,C,C,C,G,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,C,A,C,A,A,M,C,M,C,C,C,C,O,C,C,C,C,C,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,C,C,C,C,E,C,A,C,A,A,M,C,O,C,C,C,C,O,I,E,E,C,G,K,C,C,C,A,C,A,A,M,C,I,C,C,C,C,O,I,E,E,C,G,E,C,C,C,C,C,A,C,A,A,M,C,K,C,C,C,C,O,I,E,E,C,G,G,C,C,C,A,C,A,A,M,C,M,C,C,C,C,O,I,E,E,C,G,I,C,C,C,A,C,A,A,M,C,K,C,C,C,C,C,C,M,A,K,C,qB,C,A,C,A,A,M,C,K,C,C,C,C,C,C,M,A,K,C,qB,C,A,C,A,A,M,C,S,C,C,C,C,O,I,E,E,C,G,O,C,M,C,M,C,C,C,C,C,C,C,A,C,A,A,M,C,O,C,C,C,C,O,G,A,E,M,S,G,E,C,W,G,G,E,A,G,S,G,C,C,A,M,C,G,C,C,M,C,C,C,C,C,C,G,E,G,I,C,G,C,C,C,C,E,G,C,G,E,E,E,E,A,K,C,C,uB,E,E,E,I,E,E,G,C,C,C,C,C,A,O,E,G,E,C,A,A,O,C,C,C,A,E,A,C,I,C,M,kG,I,E,E,C,C,Q,E,A,E,C,C,Q,A,E,E,C,C,Q,E,E,C,C,O,A,O,U,E,A,K,C,Y,C,C,C,K,C,S,C,S,C,G,E,C,A,E,C,A,C,Q,E,C,M,4C,A,C,A,A,M,C,C,C,C,C,C,I,E,E,C,I,C,W,C,E,I,I,C,C,A,G,C,E,C,E,A,E,U,A,E,G,A,E,C,C,E,E,C,E,K,I,C,W,C,E,G,I,C,G,A,G,C,C,E,E,I,M,C,E,C,A,E,C,C,E,C,C,C,C,M,C,E,E,U,A,E,C,E,E,O,A,E,E,I,K,E,C,E,C,C,A,C,A,C,A,E,Y,C,a,6F,I,E,E,C,C,O,A,O,U,E,E,G,C,K,A,A,a,C,C,C,K,C,E,G,C,C,E,G,C,C,G,C,E,G,I,C,C,A,I,C,K,C,C,C,A,G,C,Q,E,C,O,I,C,K,C,Y,E,A,C,A,A,M,C,C,C,C,C,C,O,I,C,K,C,M,C,E,E,C,A,C,C,C,C,E,C,C,C,C,O,I,C,K,C,M,C,E,C,C,A,E,A,C,C,Y,C,e,uG,I,E,E,C,C,O,C,C,E,C,C,Q,E,E,C,C,O,C,E,E,C,C,E,M,S,E,C,C,A,C,C,C,E,I,E,E,C,A,G,G,E,C,O,C,G,E,C,C,E,E,C,A,E,C,G,G,K,E,O,E,C,G,C,A,E,C,C,C,A,C,C,E,G,C,A,A,G,C,C,E,C,C,C,E,A,G,M,C,A,M,C,E,E,M,A,E,E,E,qD,C,kB,C,C,Q,C,Q,C,I,C,O,C,C,C,E,G,C,C,C,C,C,A,C,C,C,E,M,A,E,C,C,C,E,C,C,wD,C,kB,C,C,Q,C,Q,C,I,C,C,K,E,C,C,K,C,C,C,C,C,A,C,C,A,E,E,A,E,C,C,A,C,C,A,C,A,C,A,C,A,I,C,C,C,E,c,A,E,G,E,mB,C,O,C,G,G,A,C,C,A,c,A,E,E,I,E,G,E,M,C,E,2B,C,O,C,G,G,C,A,C,C,I,E,I,E,C,C,C,A,I,E,K,C,C,C,C,A,E,C,A,E,I,A,G,C,C,E,G,E,A,E,E,A,E,C,C,C,C,C,A,E,C,E,G,I,C,C,I,E,E,M,C,A,E,A,E,C,G,C,E,G,E,C,C,A,E,E,A,M,I,S,E,C,A,E,I,C,A,I,A,E,E,E,A,C,C,A,C,A,C,A,E,E,C,C,C,C,C,A,G,C,E,E,C,C,C,A,A,C,C,A,G,I,C,A,C,G,A,E,A,E,A,A,M,C,A,C,A,C,C,A,A,I,E,E,E,E,Q,C,G,O,A,E,A,C,C,A,E,A,C,C,Q,C,E,C,A,S,C,C,A,C,A,C,C,C,C,I,E,E,C,A,C,C,E,A,C,A,E,E,I,E,G,C,C,C,C,A,O,E,I,G,C,A,I,C,E,C,C,C,G,C,C,A,G,E,G,I,C,C,I,E,E,E,E,K,E,C,A,E,E,Q,A,C,C,G,G,A,C,A,C,C,E,C,E,G,C,G,A,M,E,C,A,C,C,A,C,C,E,E,O,A,E,E,G,a,C,C,C,K,C,C,G,A,C,A,A,C,A,C,A,Q,C,E,G,C,C,A,E,G,C,C,E,G,M,C,A,E,G,C,C,E,G,C,C,A,C,K,C,E,C,E,E,C,E,G,C,G,A,G,C,C,C,E,C,E,C,C,E,E,O,A,E,E,G,a,C,C,C,K,C,E,E,A,C,A,A,C,C,A,A,Q,C,E,G,C,C,A,E,G,C,C,E,G,M,C,A,E,G,C,C,E,G,C,C,A,A,Q,G,E,G,C,E,A,A,K,C,a,C,C,A,E,I,A,C,G,E,A,C,C,A,E,C,E,G,M,E,I,C,A,C,A,C,C,A,E,M,C,S,C,E,E,C,A,C,A,C,A,C,G,C,E,E,C,K,C,C,M,C,U,A,E,K,C,K,A,A,M,C,A,a,C,C,C,C,C,C,C,K,C,O,C,C,C,G,A,C,C,G,E,C,E,C,C,A,C,A,C,E,C,C,A,A,C,C,C,C,A,C,C,C,C,G,E,C,C,C,C,E,G,C,A,C,A,C,A,C,E,E,gB,A,E,I,C,O,K,I,C,C,C,A,C,A,A,E,U,E,C,I,E,I,C,K,A,C,Y,E,C,A,E,E,C,A,C,G,I,C,C,C,C,C,C,I,C,M,C,C,E,C,A,E,I,A,C,G,O,C,C,A,A,C,C,E,C,C,C,C,C,C,C,C,I,E,E,C,I,C,W,C,E,I,G,C,A,C,A,K,C,O,C,I,C,C,E,A,C,W,C,sB,C,G,E,C,C,A,E,G,C,C,M,C,A,C,C,E,C,I,C,C,E,C,E,G,C,A,E,I,M,C,E,G,G,C,C,C,C,E,E,mB,A,E,E,G,G,C,E,G,U,E,C,G,C,S,C,A,C,E,C,I,C,S,C,A,C,C,C,C,C,A,C,G,E,E,C,A,C,G,I,C,C,C,C,C,C,E,G,G,C,C,E,C,A,E,I,A,C,I,C,K,C,C,A,O,E,E,A,E,E,A,C,A,C,C,C,C,E,C,C,C,C,I,E,G,C,C,M,C,A,C,C,E,C,I,C,C,E,C,G,K,E,C,A,C,E,E,M,A,E,E,E,C,O,E,E,I,M,C,0B,C,gB,C,C,M,C,E,I,C,C,M,C,E,E,C,O,C,M,C,E,I,M,C,C,C,C,I,E,E,C,A,C,G,I,C,C,C,C,C,C,E,C,E,A,C,A,E,I,A,C,I,E,c,C,I,C,K,C,C,C,A,O,E,E,E,A,C,C,A,A,E,A,C,C,Q,C,W,4F,I,E,E,C,C,Q,E,E,C,C,O,A,O,U,E,A,K,C,Y,C,C,C,K,C,M,C,M,C,E,G,C,A,C,C,C,A,S,E,C,O,C,C,A,G,C,E,C,C,C,C,C,C,I,E,E,C,I,C,W,C,E,I,E,C,C,A,O,E,I,M,I,E,C,A,E,C,C,C,C,A,C,A,C,A,C,A,C,A,C,C,I,C,C,E,I,K,E,A,C,A,C,A,E,Y,C,a,6G,I,E,E,C,C,O,C,C,E,C,C,O,A,O,U,E,K,A,C,Y,C,C,C,C,C,K,C,E,E,A,E,C,E,C,A,C,C,C,A,S,E,C,M,I,A,C,A,A,M,C,C,C,C,C,C,E,C,E,A,E,Y,A,E,G,E,C,C,A,E,E,E,E,M,C,E,G,G,C,C,A,O,A,E,E,E,A,C,C,M,C,E,C,A,E,C,C,E,C,C,C,C,O,E,I,K,C,E,I,K,E,E,E,C,C,A,A,C,C,A,iB,C,E,E,U,C,E,C,G,O,C,E,A,Y,C,C,C,A,K,C,O,C,E,C,A,M,A,C,A,C,A,C,C,M,C,E,E,O,A,E,K,C,M,C,G,C,C,C,C,C,C,sG,I,E,E,C,C,O,C,C,E,C,C,Q,E,E,C,C,O,A,O,U,E,G,E,C,I,A,A,a,C,C,C,C,C,I,E,E,K,C,M,C,G,C,C,C,E,C,E,E,A,E,C,G,C,C,C,A,A,C,C,gB,A,E,I,C,M,C,C,C,C,A,I,C,Q,C,C,A,C,A,A,Y,E,C,M,oE,C,S,C,C,C,C,C,C,C,A,C,G,C,I,C,C,A,M,C,C,C,C,C,C,I,E,C,C,C,E,Y,A,E,E,K,C,W,C,E,I,A,C,I,C,C,C,A,O,E,E,I,G,I,C,I,E,A,I,C,W,C,uB,C,G,E,C,C,C,C,M,C,E,C,A,C,C,C,G,C,C,C,C,M,C,E,E,O,A,E,E,I,K,C,I,C,I,C,C,A,C,A,C,A,E,e,C,gB,qF,I,E,E,C,C,O,C,E,G,C,U,C,E,C,A,C,M,S,C,E,K,C,Y,C,C,C,K,C,M,C,E,C,G,E,C,A,E,C,A,C,Q,E,C,O,I,A,C,A,A,M,C,C,C,C,C,C,O,I,E,A,G,E,E,C,W,C,U,C,G,E,A,C,C,E,M,C,E,C,A,E,C,C,E,C,C,C,C,O,E,I,K,C,C,C,C,A,I,A,C,A,C,A,E,S,C,U,6F,I,E,E,C,C,O,C,C,E,C,C,Q,E,E,C,C,O,C,E,E,I,C,C,C,C,A,E,E,I,C,C,C,C,A,E,M,C,K,+D,C,A,C,M,U,C,C,K,C,I,A,C,M,A,A,a,C,C,C,C,C,C,C,I,E,C,C,C,I,C,A,C,A,A,C,K,C,C,A,C,C,A,C,C,A,E,G,C,E,E,A,E,C,G,C,C,C,A,A,C,C,gB,A,E,I,C,M,I,K,C,C,C,C,E,E,C,Q,C,M,C,S,C,C,A,C,A,A,Y,E,C,O,C,A,C,A,A,M,C,C,C,C,C,C,I,E,C,E,A,E,S,A,E,E,K,C,W,C,E,I,A,C,I,C,C,C,A,E,G,E,I,A,C,C,E,C,C,A,C,C,Q,A,E,G,I,C,M,C,C,I,E,C,E,C,C,I,A,E,E,C,C,A,I,C,G,C,C,C,C,C,C,E,G,A,E,C,A,C,C,C,C,C,C,C,C,A,I,C,W,C,qB,C,G,E,C,C,C,A,A,E,M,A,E,E,C,C,C,C,Q,C,C,A,K,C,C,G,A,C,C,C,E,A,E,I,A,E,E,A,M,C,G,C,C,C,E,A,I,C,W,C,qB,C,G,G,C,C,E,E,I,M,C,E,C,A,E,C,C,E,C,C,C,C,I,E,C,E,A,E,I,A,E,E,I,K,E,C,C,C,A,C,G,C,I,E,O,I,C,M,E,A,G,C,C,C,E,Q,A,E,E,E,C,G,C,I,C,C,C,A,C,C,C,A,E,A,C,U,C,Y,2F,I,E,E,C,C,O,C,E,E,C,C,Q,E,E,C,C,O,O,U,C,C,iB,C,Y,C,C,C,K,C,Q,C,E,C,A,M,C,C,I,E,C,M,E,A,C,A,A,M,C,C,C,C,C,C,O,K,C,M,C,E,C,E,C,C,W,A,E,E,K,C,W,C,E,I,I,C,C,C,A,C,A,A,M,C,C,C,C,M,C,E,E,Y,A,E,K,C,M,C,G,C,C,A,C,C,A,C,C,S,C,Y,0F,I,E,E,C,C,Q,E,E,C,A,C,Q,E,E,C,C,O,C,E,E,C,C,O,O,U,A,E,K,C,M,A,A,a,C,C,C,C,C,I,G,E,E,A,C,C,A,C,A,A,E,I,G,C,A,I,C,C,C,E,A,I,E,C,G,C,C,C,A,C,C,G,C,C,E,G,C,C,A,C,A,C,C,A,K,C,O,C,C,I,G,C,E,G,C,C,G,C,C,G,C,A,C,C,G,C,E,C,A,C,A,C,e,A,E,I,C,C,M,C,M,C,M,C,E,I,C,E,C,C,C,A,C,A,A,Y,E,C,I,E,E,C,A,C,G,C,M,C,O,C,A,I,C,C,C,E,C,A,C,E,G,S,E,C,A,C,A,C,C,A,I,E,I,C,I,E,C,M,C,C,E,G,E,A,E,E,A,E,E,A,G,M,C,A,O,I,A,A,C,C,A,E,E,A,C,C,C,E,E,A,C,C,A,C,C,E,E,A,C,C,C,C,C,C,C,A,C,A,C,A,O,I,C,M,C,O,C,C,E,G,E,A,E,E,A,E,E,A,G,M,C,A,G,A,C,A,E,E,C,E,E,C,Q,E,C,I,A,E,E,O,C,C,A,I,E,A,C,C,E,E,C,C,C,E,C,C,A,C,E,A,C,C,C,C,C,A,M,C,M,C,E,C,A,G,C,C,C,C,C,C,C,C,C,I,E,E,C,I,C,W,C,E,I,G,C,C,A,M,C,E,E,I,A,E,E,I,A,C,M,C,E,C,A,E,C,C,E,C,C,C,C,M,C,E,E,M,A,E,E,I,A,C,M,C,A,C,A,C,A,E,U,C,W,8F,I,E,E,C,C,O,C,E,E,C,C,K,E,S,E,C,C,C,E,K,C,C,O,C,C,E,E,U,A,E,G,C,C,S,C,E,G,C,C,E,E,G,A,C,C,C,A,C,C,c,A,E,C,E,E,W,A,E,E,E,C,C,I,U,C,C,Y,E,E,C,C,C,A,G,E,K,C,C,C,G,E,C,E,A,C,A,A,E,a,C,E,O,A,C,E,G,C,I,C,C,M,C,G,E,C,E,E,E,G,A,C,C,E,C,G,A,C,E,E,A,C,O,C,G,C,A,E,C,E,c,A,E,C,G,E,C,K,C,kB,C,C,M,E,E,C,C,C,A,G,A,C,C,A,C,C,C,C,C,C,C,C,C,C,A,C,E,C,E,E,c,A,E,I,E,G,A,Q,E,O,E,C,C,wB,C,O,C,G,E,A,C,C,A,C,M,C,A,E,C,U,C,C,E,G,E,c,A,E,I,E,G,E,M,E,O,E,G,C,iB,C,O,C,G,E,C,C,A,E,I,E,C,I,C,G,E,C,A,C,A,I,A,E,E,A,E,C,C,E,C,C,G,E,C,C,E,G,E,C,C,E,C,C,C,C,C,C,C,A,C,A,C,A,C,A,C,A,O,E,E,E,I,C,C,G,C,G,I,E,C,A,C,A,A,C,A,C,A,O,E,I,A,C,C,C,C,C,E,C,C,A,C,O,C,a,C,C,C,O,C,C,C,A,C,A,C,I,C,sG,I,E,E,C,C,O,C,E,E,C,C,M,E,E,E,C,C,K,C,G,gB,C,E,O,A,C,E,M,C,A,M,C,C,C,E,E,U,A,E,E,E,K,C,C,K,C,C,E,E,S,A,E,I,C,C,A,E,E,G,C,E,E,G,C,A,C,A,C,C,O,C,C,E,E,S,A,E,I,C,C,A,E,E,K,C,E,E,K,C,A,C,A,C,C,S,C,E,S,C,I,C,E,E,O,C,C,A,C,A,0H,I,E,E,C,C,O,C,E,E,C,C,M,E,S,E,C,E,I,E,G,C,C,E,E,I,I,E,A,O,E,C,C,A,U,C,gB,C,G,A,G,E,A,C,A,C,O,C,A,C,E,E,U,A,E,G,E,S,A,E,I,C,E,I,K,C,C,C,C,C,S,C,E,C,C,A,C,A,A,E,c,C,E,E,W,G,C,E,O,A,C,C,C,E,G,I,E,A,E,U,A,C,gB,C,E,G,C,A,K,C,C,C,8F,I,E,E,C,C,O,C,E,E,C,C,Q,E,E,C,A,C,M,E,E,E,C,C,K,E,E,E,C,C,G,K,E,E,C,C,M,E,E,E,C,C,Q,E,E,I,C,C,C,C,A,E,E,I,C,C,C,C,A,E,G,G,C,E,C,C,A,E,G,G,C,E,C,C,A,E,G,G,C,E,C,C,A,E,M,C,E,kE,C,C,A,S,E,C,C,C,E,I,E,E,C,I,A,G,C,E,C,C,A,K,E,M,C,A,C,C,C,E,G,C,E,C,K,C,C,E,E,C,E,C,E,E,C,C,C,G,A,E,G,C,C,O,C,E,C,A,C,A,A,S,E,C,Q,A,A,E,E,C,C,G,I,C,A,G,E,U,A,E,E,C,A,E,C,C,K,E,C,C,C,E,G,C,K,C,C,E,E,a,A,E,G,A,E,C,C,E,E,C,C,C,C,E,c,A,G,E,E,C,E,I,C,E,G,A,A,C,A,C,C,C,M,E,C,C,C,O,C,A,I,E,C,E,C,C,A,C,C,C,E,S,A,E,E,E,C,A,C,C,C,C,K,E,C,C,C,E,G,A,I,E,C,E,I,G,E,E,C,C,E,G,A,E,S,A,E,E,G,C,C,C,C,E,C,E,E,c,A,E,G,E,A,S,gB,C,E,G,A,C,C,A,A,C,C,C,C,K,E,C,C,C,E,I,C,C,C,E,A,E,S,A,E,E,I,G,C,C,A,E,C,E,C,C,S,A,E,G,E,C,C,E,G,E,c,A,E,E,I,E,E,E,C,C,e,C,C,C,G,E,E,C,C,A,G,C,C,A,A,C,C,E,C,I,E,C,E,M,C,E,E,A,a,A,E,G,E,C,A,C,A,G,A,C,A,C,C,C,M,C,E,C,U,C,C,A,C,A,A,S,E,C,C,C,M,E,G,C,C,A,C,C,E,E,C,C,C,A,C,C,K,I,C,C,A,C,G,G,C,E,C,A,E,K,C,A,K,C,a,C,C,A,A,M,E,C,C,C,C,E,c,A,G,E,G,c,C,S,C,C,C,C,C,C,C,A,A,I,C,C,C,E,E,Y,A,E,C,C,C,C,C,E,C,C,A,C,C,C,E,E,Y,A,E,C,C,C,C,C,E,C,A,C,C,C,S,C,E,A,S,A,C,A,I,C,G,C,G,C,S,C,C,C,A,C,A,A,G,G,G,E,A,C,G,A,E,C,A,A,G,C,A,G,C,A,G,C,A,G,C,A,G,C,A,G,C,A,G,C,A,G,C,A,G,C,A,G,C,A,G,C,A,G,C,A,G,C,A,G,C,A,A,K,I,E,C,O,I,C,C,C,C,A,C,A,A,I,I,C,C,C,C,O,G,E,E,C,I,C,I,C,C,C,C,C,I,C,A,K,C,K,C,C,A,I,Q,C,I,C,C,A,E,C,C,C,A,K,C,K,C,C,A,I,Q,C,A,I,U,C,I,C,C,C,C,C,C,C,A,K,C,K,C,C,A,I,Q,C,A,I,U,C,I,C,C,C,C,C,C,C,A,K,C,K,C,C,A,I,Q,C,A,I,U,C,I,C,C,C,C,C,C,C,A,K,C,K,C,C,A,I,Q,C,A,I,U,C,I,C,C,C,C,C,C,C,A,K,C,Q,C,E,E,c,A,G,E,G,2B,C,M,C,G,A,C,A,C,C,C,C,Q,E,C,O,I,C,I,E,A,K,C,C,A,M,Q,A,C,K,C,C,A,M,U,A,C,K,C,C,A,M,U,A,C,K,C,C,A,M,U,A,C,K,C,C,A,M,U,C,A,A,O,I,A,C,A,A,I,E,E,C,I,E,G,C,C,C,C,C,C,O,A,I,E,G,C,C,C,C,I,C,I,C,E,W,C,A,C,C,A,G,C,A,E,C,C,C,C,I,C,C,C,C,C,I,C,C,A,E,G,C,C,A,C,E,E,U,A,E,E,C,A,E,C,C,A,K,E,C,O,I,C,C,A,E,A,C,A,A,I,K,C,C,C,C,I,C,C,C,C,C,C,E,E,S,A,E,E,G,I,C,A,C,A,A,I,Q,E,C,O,I,C,C,C,C,A,C,A,A,I,Q,C,C,C,C,I,C,C,C,C,C,C,E,E,S,A,E,E,C,A,E,C,C,A,Q,E,C,I,E,G,C,C,C,C,C,C,O,A,A,I,C,G,E,C,G,I,C,I,M,I,C,I,A,C,C,A,E,A,C,C,A,A,C,E,C,A,Q,C,C,C,C,I,C,C,C,C,C,A,I,C,A,C,E,I,C,A,C,A,E,E,S,A,E,E,G,O,C,A,C,A,A,I,oB,E,C,I,E,G,C,C,C,C,C,C,O,A,I,E,A,E,A,C,E,C,I,C,I,E,C,E,C,I,C,I,C,E,E,C,C,C,A,C,C,A,G,C,A,oB,C,C,C,C,I,C,C,C,C,C,I,C,C,A,E,G,C,C,A,C,A,E,E,S,A,E,E,G,mB,C,A,C,A,A,I,Y,E,C,I,E,G,C,C,C,C,C,C,O,A,A,I,C,C,E,A,C,G,I,C,I,E,C,E,C,I,C,I,C,E,E,C,C,C,A,C,C,A,G,C,A,Y,C,C,C,C,I,C,C,C,C,C,I,C,C,A,E,G,C,C,A,C,A,E,E,S,A,E,E,G,W,C,A,C,A,A,I,I,E,C,O,I,C,C,C,A,A,C,A,A,I,I,C,C,C,C,I,C,C,C,A,C,C,E,E,O,A,E,E,C,A,E,C,C,A,K,E,C,O,I,C,C,C,C,A,C,A,A,I,K,C,C,C,C,I,C,C,A,E,C,C,E,E,S,A,E,E,G,I,C,A,C,A,A,I,O,E,C,O,I,C,C,A,E,A,C,A,A,I,O,C,C,C,C,I,C,C,C,C,C,C,E,E,S,A,E,E,C,A,E,C,C,A,S,E,C,O,I,C,C,C,C,E,I,A,C,A,A,I,S,C,C,C,C,I,C,C,C,C,C,I,C,C,A,E,G,C,C,A,C,C,S,C,I,C,E,C,A,E,C,C,A,U,E,C,I,E,G,C,C,C,A,E,E,I,C,O,A,I,E,A,E,A,A,C,E,K,C,I,E,C,G,I,C,I,E,C,E,C,I,C,I,C,E,C,A,I,C,A,C,C,A,G,C,A,U,C,C,C,C,I,C,C,C,C,C,I,C,C,A,E,G,C,C,A,C,A,E,E,a,A,E,E,C,A,E,C,C,A,iB,E,C,I,E,G,C,C,C,C,C,E,I,C,O,A,I,E,A,G,C,C,C,C,I,C,I,C,E,C,A,C,C,A,G,C,A,iB,C,C,C,C,I,C,C,C,C,C,I,C,C,A,E,G,C,C,A,C,C,G,A,C,A,C,E,A,C,E,E,gB,A,E,C,C,C,A,C,A,A,I,gB,E,C,I,E,G,C,C,C,C,C,C,O,A,I,E,G,C,C,C,C,I,C,I,C,E,C,C,A,A,C,E,C,A,gB,C,C,C,C,I,C,C,C,C,C,I,C,C,A,E,G,C,C,A,C,A,E,E,S,A,E,E,G,e,C,A,C,A,A,I,mB,E,C,I,E,G,C,C,C,C,C,C,O,A,A,I,C,I,A,C,E,K,C,I,C,E,C,A,C,C,A,G,C,A,mB,C,C,C,C,G,I,E,E,C,E,C,E,c,A,E,K,C,O,C,G,E,C,mC,C,O,C,G,E,A,C,C,A,C,E,E,E,C,A,I,I,C,C,C,C,C,C,E,G,G,C,C,E,C,A,C,E,E,c,A,E,C,E,E,W,A,E,C,C,C,C,C,E,C,C,2B,C,C,M,E,C,C,C,C,C,C,C,C,C,C,C,A,A,I,C,C,C,C,C,C,C,A,G,C,A,K,E,Q,A,I,E,A,I,C,C,C,C,C,I,C,A,I,C,C,A,E,C,G,C,A,C,E,A,C,K,C,M,C,C,C,C,C,C,C,A,C,A,A,I,K,C,C,C,C,G,I,E,E,C,G,C,C,C,C,C,C,I,C,A,O,A,A,I,E,E,C,A,A,E,E,C,A,I,I,C,C,A,C,C,C,C,E,I,E,C,C,E,C,C,I,E,C,C,A,C,C,C,A,G,G,E,W,A,E,G,C,A,C,A,E,E,M,A,E,I,C,C,C,C,C,0C,C,uB,C,C,S,C,a,C,C,C,A,I,E,C,C,C,E,Q,A,E,G,C,C,C,A,C,E,E,c,A,E,E,E,I,I,K,I,e,C,C,M,E,C,C,C,C,C,I,C,C,M,E,E,I,C,C,G,C,E,I,A,E,Q,C,A,I,G,C,C,A,C,A,A,C,E,C,A,G,C,C,A,C,C,A,A,I,A,C,C,I,A,C,C,C,C,C,mB,C,G,C,C,A,C,A,E,A,E,O,A,E,I,C,C,C,C,C,mB,C,E,E,E,E,A,C,C,C,A,C,C,C,I,C,C,E,E,O,A,E,G,C,C,Q,C,C,E,E,O,A,E,M,C,E,E,C,C,A,C,C,I,C,E,C,C,I,A,E,C,C,A,C,A,G,C,E,C,E,C,C,O,A,E,E,E,Q,C,C,A,E,G,C,C,C,I,C,C,E,E,O,A,E,E,E,E,C,C,U,C,E,I,C,C,C,E,E,O,A,E,E,E,G,C,C,C,C,A,E,I,C,E,C,C,I,A,C,A,C,C,C,C,A,C,C,C,A,C,C,E,G,C,A,C,C,C,C,C,C,C,A,I,G,E,C,G,C,G,I,C,C,C,C,A,C,A,A,I,G,C,C,C,C,G,A,G,C,E,E,I,C,C,C,C,C,I,C,K,I,C,C,C,C,C,C,C,a,K,C,A,I,A,E,C,C,iB,I,E,C,E,A,qB,I,E,A,C,S,E,O,E,C,kB,C,A,M,C,E,E,Q,A,E,A,E,C,A,C,C,gB,C,G,E,O,A,E,I,C,A,C,C,C,E,G,qB,I,E,C,S,E,A,O,E,C,kB,C,A,M,C,E,E,Q,A,E,E,C,kB,C,I,A,C,C,C,A,qB,I,E,C,S,E,A,O,E,C,kB,C,A,M,C,E,E,Q,A,E,E,C,kB,C,C,E,E,O,A,E,I,C,A,C,A,C,C,A,E,c,A,E,G,E,uB,C,K,E,C,C,C,A,A,C,C,iB,C,C,E,E,E,A,M,E,E,Q,I,E,C,S,E,A,O,E,C,e,C,A,C,E,E,Q,A,E,E,C,e,C,C,E,E,O,A,E,G,C,A,C,C,E,O,A,E,K,K,C,C,C,C,Y,I,E,C,S,E,A,O,E,C,kB,C,A,E,C,kB,C,E,E,C,O,C,C,Y,I,E,C,S,E,A,O,E,C,kB,C,A,C,E,E,Q,A,E,E,C,kB,C,C,E,E,O,A,E,G,C,A,C,C,E,O,A,E,S,C,A,C,C,A,C,C,A,c,A,G,E,G,sB,C,K,E,C,C,A,C,A,A,A,C,C,W,C,I,C,C,C,C,C,I,C,A,I,C,C,C,C,C,I,C,A,I,C,C,C,C,C,C,C,A,I,C,C,C,C,C,E,E,C,C,C,C,C,C,C,I,C,A,I,C,C,C,C,C,I,C,A,I,C,C,C,C,C,I,C,A,I,C,C,C,A,C,I,C,A,I,C,C,C,C,C,E,E,C,C,C,C,C,C,C,E,E,C,C,C,C,C,C,C,I,C,A,I,C,C,C,C,C,I,C,A,I,C,C,C,C,C,I,C,A,I,C,C,C,C,C,I,C,A,I,C,C,C,C,C,I,C,A,I,C,C,C,C,C,I,C,A,I,C,C,C,C,C,I,A,C,A,A,I,I,E,Q,A,I,E,A,I,C,S,C,I,C,A,C,E,E,S,A,E,I,C,C,C,C,C,I,A,G,C,A,C,C,C,C,A,Y,E,C,M,C,E,E,S,A,E,I,C,kB,C,A,C,A,A,I,I,E,Q,A,I,E,A,I,C,S,C,I,C,A,C,E,E,c,A,E,I,C,Y,C,I,C,S,C,A,C,A,A,I,a,E,Q,A,I,E,A,I,C,S,C,I,C,A,E,U,C,gB,C,I,C,Y,C,I,C,S,C,A,C,A,A,Q,E,C,O,I,C,C,I,C,S,A,C,E,C,C,C,C,C,E,C,E,E,M,A,E,C,G,G,C,E,I,C,S,C,4E,C,uB,C,C,S,C,a,C,C,C,A,I,E,C,C,I,A,C,A,C,Q,C,A,C,G,C,A,O,I,C,S,E,E,A,K,C,C,O,A,S,A,C,C,C,E,E,E,E,C,E,C,C,A,A,K,C,E,K,C,C,E,E,A,Q,A,E,C,C,U,C,C,E,E,A,Q,A,C,U,C,C,E,A,E,E,I,C,A,E,E,A,K,C,E,K,C,C,E,A,I,C,C,A,E,E,E,C,A,A,E,A,O,E,E,E,A,C,C,C,E,A,S,A,E,E,A,O,C,Y,C,C,A,C,E,E,c,A,E,C,G,A,I,E,E,C,O,E,E,C,Y,G,E,K,sB,C,K,C,G,C,C,G,G,E,A,S,C,C,I,E,E,A,E,O,C,a,A,C,G,E,C,I,E,A,C,C,C,A,A,E,C,C,E,C,E,I,I,G,C,A,E,A,I,A,C,C,E,E,S,A,E,I,E,C,C,C,C,A,A,C,I,C,C,A,E,I,A,C,I,C,C,C,G,E,S,A,E,G,G,C,A,C,A,C,M,C,E,C,E,C,M,C,C,A,O,I,E,C,A,C,A,E,A,S,C,W,C,E,E,C,A,C,C,A,A,M,C,E,C,A,C,G,C,E,A,C,E,E,c,A,G,E,G,wB,C,K,C,G,A,C,C,A,I,A,C,C,E,E,S,A,E,C,C,C,C,A,E,I,A,C,C,E,E,S,A,E,E,C,A,C,C,C,A,E,I,A,C,C,E,E,S,A,E,E,C,A,C,C,C,A,C,E,E,S,A,E,E,C,C,E,C,C,A,C,E,C,C,C,G,C,C,I,E,C,E,C,C,G,K,E,C,S,C,C,E,E,G,K,A,C,O,C,C,E,E,G,K,G,E,C,C,U,C,C,E,E,G,K,G,C,U,C,C,E,G,E,E,I,C,A,E,E,G,K,A,C,O,C,C,E,G,I,C,E,A,E,E,C,S,C,E,E,C,C,C,A,O,G,C,A,C,C,I,A,C,E,E,C,M,C,A,e,C,C,C,A,E,I,A,C,G,E,S,A,E,E,C,A,C,C,C,A,E,I,A,C,G,E,S,A,E,E,C,A,C,C,C,C,C,E,E,M,A,E,C,M,C,C,E,E,S,A,E,G,C,A,C,C,C,G,C,C,I,E,C,E,C,C,G,K,E,C,S,C,C,E,E,G,K,A,C,O,C,C,E,E,G,K,e,E,C,C,sB,C,C,E,E,G,K,O,E,C,C,c,C,C,E,E,G,K,G,C,U,C,C,E,G,E,E,I,C,A,E,A,E,E,C,K,A,C,O,C,C,E,G,I,C,E,E,G,S,C,E,E,C,C,C,A,W,E,I,A,C,E,E,C,M,C,A,S,C,C,C,A,E,I,A,C,C,E,E,S,A,E,E,C,A,C,C,C,A,E,I,A,C,C,E,E,S,A,E,A,E,C,A,A,C,A,C,A,C,C,C,E,E,M,A,E,C,M,C,C,E,E,S,A,E,G,C,A,C,C,C,G,C,C,O,A,S,A,C,C,C,C,C,E,C,G,E,C,E,C,A,C,A,O,C,A,S,C,C,E,E,A,K,C,E,K,C,C,E,E,A,Q,Y,E,C,C,sB,C,C,E,E,A,Q,I,E,C,C,c,C,C,E,E,A,Q,A,C,U,C,C,E,A,E,E,E,W,C,A,E,E,A,K,C,E,K,C,C,E,A,I,C,E,E,A,U,E,A,E,C,C,E,E,A,Q,Q,E,C,C,kB,C,C,A,S,A,C,C,C,A,E,C,E,E,E,Y,A,E,K,C,O,C,G,C,C,C,M,E,E,C,C,C,M,C,G,E,C,C,A,I,C,C,C,C,C,C,E,G,G,C,C,E,C,A,C,E,E,c,A,E,C,E,E,W,A,E,C,C,C,C,C,E,C,C,yB,C,C,M,E,C,C,C,C,C,C,C,C,C,C,C,A,O,C,C,C,E,A,A,C,kB,E,E,C,qB,C,C,C,O,A,G,C,C,C,I,A,C,E,E,C,M,C,A,S,C,C,C,A,E,I,A,C,C,E,E,S,A,E,E,C,A,C,C,C,A,E,I,A,C,C,E,E,S,A,E,E,C,A,C,C,C,A,G,E,C,C,C,M,A,E,C,M,C,C,E,E,S,A,E,C,E,E,E,C,A,C,A,C,E,A,C,A,C,I,C,C,E,G,A,C,A,C,E,A,C,A,C,U,C,C,E,G,A,C,A,C,E,A,C,A,C,K,C,C,C,C,C,C,A,C,E,E,M,A,E,C,M,C,C,E,E,S,A,E,G,C,A,C,A,C,A,C,G,C,E,C,C,I,C,A,C,C,G,C,A,C,G,C,A,C,K,C,C,I,E,C,E,C,C,G,K,E,C,S,C,C,E,E,E,C,K,A,C,O,C,C,E,E,G,K,e,E,C,C,sB,C,C,E,E,G,K,O,E,C,C,c,C,C,E,E,G,K,G,C,U,C,C,E,G,E,E,I,C,A,E,E,G,K,A,C,O,C,C,E,G,I,C,E,A,E,G,S,C,E,E,C,C,C,E,E,C,iB,E,E,A,C,C,G,C,A,C,E,A,C,C,C,C,C,O,C,A,S,C,C,C,C,O,C,E,C,C,K,C,E,K,C,C,E,C,C,Q,C,C,O,C,S,C,C,C,E,E,S,A,E,C,C,S,C,C,C,C,C,E,E,S,A,E,C,C,S,C,C,C,C,C,C,C,A,W,E,I,A,C,E,E,C,M,C,A,S,C,C,C,A,E,I,A,C,G,E,S,A,E,A,E,C,A,A,C,A,C,A,C,A,E,I,A,C,C,E,E,S,A,E,E,C,A,C,C,C,C,C,E,E,M,A,E,C,M,C,C,E,E,S,A,E,G,C,C,A,A,C,A,C,C,E,M,A,G,E,G,2B,C,uB,C,C,S,C,a,C,C,A,C,A,A,I,U,E,C,O,I,C,C,C,C,E,E,E,C,C,A,A,C,C,E,kB,E,C,O,I,C,C,C,C,E,G,E,A,C,A,E,C,C,K,E,C,I,E,G,C,C,U,E,C,O,A,E,G,I,C,C,C,E,C,C,C,A,C,A,E,G,A,E,A,C,A,A,C,S,E,C,I,E,I,C,C,G,C,C,Q,C,E,I,A,E,I,C,Y,E,A,I,C,C,I,C,oB,C,E,I,C,C,A,I,C,A,U,C,E,I,C,C,I,C,C,A,E,E,I,C,C,C,C,A,C,C,E,G,I,C,Y,E,A,I,E,I,C,oB,E,C,E,E,M,A,E,I,C,Y,E,I,C,oB,C,wC,C,U,C,C,K,C,I,C,C,C,A,A,G,E,M,A,E,C,G,C,E,C,I,C,I,E,A,C,C,M,C,I,C,mE,C,U,C,C,K,C,I,C,C,C,A,G,E,M,A,E,A,C,O,C,I,E,C,E,W,gC,C,U,C,C,K,C,I,C,C,C,A,I,E,E,C,A,A,O,I,E,A,I,C,I,C,E,G,C,C,I,C,I,C,C,A,I,C,iB,E,I,C,iB,C,M,C,C,C,G,C,C,C,C,C,A,E,E,E,C,C,A,C,C,C,C,A,G,E,G,C,C,C,A,C,C,A,A,A,G,E,G,C,C,C,C,C,A,C,C,E,E,G,C,C,C,C,C,A,A,E,A,G,C,C,C,C,C,E,G,I,A,C,E,E,C,E,G,C,C,C,C,C,A,E,G,C,C,C,C,C,A,E,G,C,C,C,C,C,C,E,G,C,C,C,C,C,C,E,G,C,E,C,A,C,C,A,G,C,I,E,C,O,C,C,C,C,I,C,I,A,C,A,Q,E,C,O,C,C,C,C,I,C,I,A,C,A,Q,E,C,O,C,C,C,C,I,C,I,A,C,A,Q,E,C,O,A,C,C,C,K,C,I,A,C,A,K,E,C,O,E,I,C,I,A,C,A,C,A,A,M,E,C,I,C,C,A,C,E,A,A,E,E,E,A,C,C,I,C,A,C,C,Q,E,C,A,M,C,I,C,I,C,I,C,E,C,I,C,E,C,I,C,I,C,I,C,K,C,I,C,K,C,Q,C,C,C,I,C,Q,C,C,Q,C,C,C,I,C,Q,C,C,oB,C,C,C,I,C,oB,C,C,Y,C,C,C,I,C,Y,C,C,K,C,C,C,I,C,K,C,C,O,C,C,C,I,C,O,C,C,G,C,I,C,S,C,A,C,G,C,S,C,M,E,C,A,C,G,C,U,C,I,C,U,C,A,C,A,A,M,C,I,C,C,C,C,G,A,E,E,E,E,O,I,E,G,M,E,A,C,C,O,E,A,C,A,I,E,C,E,E,A,Q,A,E,E,C,A,C,E,C,C,C,C,E,I,A,E,E,G,E,I,C,A,I,K,A,C,A,E,A,I,E,C,E,A,C,C,S,A,E,G,C,C,C,A,E,c,A,E,K,C,O,C,K,C,A,C,E,E,A,I,E,M,E,I,E,A,C,C,A,4C,C,M,C,G,C,C,C,C,E,A,C,I,C,C,C,K,C,E,C,C,C,C,C,K,E,C,C,Q,C,E,C,C,C,C,C,G,O,C,C,Q,C,E,C,C,C,C,C,G,O,C,C,E,C,E,C,C,C,C,C,C,K,A,C,E,C,C,C,C,C,G,I,C,C,I,C,C,E,E,O,A,E,C,C,C,C,C,C,O,C,E,C,A,C,E,C,E,C,E,I,E,C,O,E,A,C,G,C,C,E,C,C,C,C,C,G,A,C,C,A,C,C,E,C,C,C,C,C,G,A,C,C,A,C,C,E,C,C,C,C,C,G,A,C,C,A,G,C,G,G,C,A,G,E,E,A,A,E,K,C,C,C,I,C,I,E,C,C,C,C,C,A,C,A,E,E,A,C,G,A,C,C,A,C,C,C,A,E,A,A,O,C,E,C,E,E,A,C,a,A,E,I,G,A,C,A,G,G,C,C,E,E,G,C,oB,C,G,C,C,C,C,C,C,C,A,E,A,S,C,E,S,C,I,C,C,C,C,C,E,E,Y,A,E,C,C,C,C,C,E,C,C,C,C,C,E,E,Y,A,E,C,C,C,C,C,E,C,C,C,G,C,C,A,A,O,C,C,A,C,A,I,G,C,C,C,C,C,C,C,C,E,A,K,C,C,A,O,E,I,C,A,I,K,A,C,E,C,G,E,C,E,C,A,C,S,A,E,C,E,E,Q,A,E,G,C,C,G,C,C,C,C,C,A,C,E,E,c,A,E,K,C,O,C,K,C,A,C,E,E,A,I,E,E,K,E,I,E,A,C,C,A,6C,C,M,C,C,E,E,O,A,E,I,A,C,C,C,C,E,A,C,I,C,C,C,O,C,E,C,C,C,C,C,G,M,C,C,K,C,E,C,C,C,C,C,K,E,C,C,Q,C,E,C,C,C,C,C,G,O,C,C,Q,C,E,C,C,C,C,C,G,O,C,C,E,C,E,C,C,C,C,C,C,K,A,C,E,C,C,C,C,C,G,I,C,C,I,C,C,E,E,O,A,E,C,C,C,C,C,C,U,C,E,C,C,C,C,C,S,G,C,C,C,O,C,E,C,E,I,E,E,E,E,A,E,I,C,C,C,C,C,C,A,C,C,A,A,C,A,G,I,C,C,A,C,A,C,A,O,E,I,C,A,I,K,A,C,E,C,G,E,C,E,C,A,C,S,A,E,C,E,E,Q,A,E,G,C,C,G,C,C,C,C,C,A,C,E,E,c,A,E,K,C,O,C,K,C,A,C,E,E,A,I,E,E,K,E,I,E,A,C,C,A,6C,C,M,C,C,E,E,O,A,E,I,A,C,C,C,C,E,A,C,I,C,C,C,O,C,E,C,C,C,C,C,G,M,C,C,K,C,E,C,C,C,C,C,K,E,C,C,oB,C,E,C,C,C,C,C,G,mB,C,C,Y,C,E,C,C,C,C,C,G,W,C,C,Q,C,I,C,Q,C,E,C,C,C,C,C,G,O,C,C,E,C,E,C,C,C,C,C,C,K,A,C,E,C,C,C,C,C,G,I,C,C,I,C,C,E,E,O,A,E,C,C,C,C,C,C,U,C,E,C,C,C,C,C,S,G,C,C,C,O,C,E,C,E,I,E,E,E,E,A,E,I,C,C,C,C,C,C,A,C,C,A,A,C,A,G,I,C,C,A,C,A,C,A,O,E,I,C,A,I,K,A,C,E,C,G,E,C,E,C,A,C,S,A,E,C,E,E,Q,A,E,G,C,C,G,C,C,C,C,C,A,E,G,C,A,E,A,G,C,C,A,G,C,G,E,I,E,E,K,C,O,C,C,C,C,C,C,C,C,E,M,c,C,A,I,E,C,C,C,C,A,C,E,C,C,C,C,C,C,C,C,C,C,C,C,A,A,G,E,c,A,E,K,C,O,C,G,G,C,wC,C,W,C,G,C,E,A,C,C,A,c,A,E,K,C,O,C,G,K,C,4C,C,W,C,G,C,E,E,A,C,C,Y,A,E,K,C,O,C,G,I,C,wC,C,W,C,G,C,E,C,C,A,C,a,A,E,E,I,E,G,E,M,A,C,2D,C,Q,C,G,C,E,A,C,C,A,c,A,E,E,I,E,G,E,K,C,C,sD,C,Q,C,G,E,C,C,A,C,A,A,A,I,I,C,C,C,C,C,C,C,C,C,C,C,M,C,C,E,C,A,E,G,C,C,C,I,C,C,C,C,C,C,U,C,C,C,C,C,C,K,C,C,C,C,C,C,C,C,A,E,C,C,C,C,A,C,A,A,G,E,c,A,E,K,C,O,C,K,C,C,A,G,C,C,I,E,E,K,E,I,E,A,C,C,A,C,0C,E,E,C,C,I,E,C,C,E,E,O,A,E,I,A,C,C,C,C,E,A,C,I,C,C,C,O,C,E,C,C,C,C,C,G,M,C,C,K,C,E,C,C,C,C,C,K,E,C,C,oB,C,E,C,C,C,C,C,G,mB,C,C,Y,C,E,C,C,C,C,C,G,W,C,C,Q,C,I,C,Q,C,E,C,C,C,C,C,G,O,C,C,E,C,E,C,C,C,C,C,C,K,A,C,E,C,C,C,C,C,G,I,C,C,I,C,C,E,E,O,A,E,C,C,C,C,C,C,U,C,E,C,C,C,C,C,S,G,C,C,gB,C,E,C,C,C,C,C,G,e,C,C,mB,C,C,C,E,C,C,A,C,I,A,E,A,A,K,C,C,C,C,A,C,E,E,c,A,E,I,E,E,A,E,C,C,sC,E,E,C,C,I,E,C,G,C,A,C,C,A,E,c,A,E,K,C,O,C,E,A,mB,C,C,+C,C,M,C,G,C,C,C,C,I,C,C,C,C,C,C,E,A,mB,C,M,C,C,E,C,A,C,E,E,c,A,E,G,E,W,A,E,E,A,mB,C,C,C,C,E,C,C,C,mC,E,C,C,mB,C,C,M,C,I,C,C,I,E,E,C,E,I,E,E,E,E,A,E,I,C,C,E,C,C,C,A,C,A,C,A,C,A,G,I,C,C,A,C,A,C,A,O,E,I,C,A,I,K,A,C,E,C,G,E,C,E,C,A,C,S,A,E,G,E,Q,A,E,G,C,C,G,C,C,C,C,C,A,C,E,E,c,A,E,K,C,O,C,I,C,C,C,A,G,C,C,M,E,K,E,I,E,A,C,C,A,6C,C,M,C,C,E,E,O,A,E,I,A,C,C,C,C,E,A,C,I,C,C,C,O,C,E,C,C,C,C,C,G,M,C,C,K,C,E,C,C,C,C,C,K,E,C,C,oB,C,E,C,C,C,C,C,G,mB,C,C,Y,C,E,C,C,C,C,C,G,W,C,C,Q,C,I,C,Q,C,E,C,C,C,C,C,G,O,C,C,E,C,E,C,C,C,C,C,C,K,A,C,E,C,C,C,C,C,G,I,C,C,I,C,C,E,E,O,A,E,C,C,C,C,C,C,U,C,E,C,C,C,C,C,S,G,C,C,iB,C,A,S,A,C,C,C,E,G,C,G,C,C,I,C,I,G,C,G,E,C,E,C,A,K,C,kC,C,C,A,I,E,E,C,A,C,G,I,C,C,C,C,C,C,E,G,G,C,C,E,C,C,I,E,C,C,A,C,C,C,A,G,C,K,C,O,C,G,C,C,E,E,A,K,C,C,c,E,C,C,gB,C,C,C,A,G,C,E,C,E,E,I,C,M,A,K,C,C,c,E,C,C,e,C,C,C,A,G,C,C,C,C,C,C,C,K,A,K,C,C,c,E,C,C,e,C,C,C,A,E,I,A,C,C,O,C,E,C,C,C,C,C,C,K,A,C,E,C,C,C,C,C,G,I,C,C,O,C,E,C,C,C,C,C,G,M,C,C,S,C,E,S,C,I,C,C,O,C,E,C,C,C,C,C,K,I,C,C,C,C,C,E,E,Y,A,E,C,C,C,C,C,E,C,C,C,C,C,E,E,Y,A,E,C,C,C,C,C,E,C,C,C,C,C,C,A,A,O,E,A,I,C,C,E,C,C,C,C,E,c,A,G,E,E,C,E,I,C,E,G,A,A,C,C,A,C,A,C,A,C,C,C,mB,C,C,C,O,E,E,C,E,I,E,E,E,E,A,E,I,C,C,E,C,C,C,A,C,A,C,A,C,A,I,A,C,E,A,C,C,A,C,K,A,G,E,G,2B,C,uB,C,C,S,C,M,C,C,C,A,A,I,E,I,A,E,O,E,E,A,C,C,A,E,A,I,G,E,I,A,C,E,A,I,A,C,C,I,E,A,E,A,E,G,E,E,C,C,C,A,E,A,C,C,I,E,A,E,A,K,G,E,I,C,C,E,A,K,A,C,C,A,E,E,E,E,Q,G,E,I,I,C,E,A,Q,A,C,C,I,E,A,E,A,Q,E,G,G,K,C,E,A,Q,A,C,C,I,E,A,E,A,oB,G,E,I,gB,C,E,A,oB,A,C,C,I,E,A,E,A,Y,G,E,I,Q,C,E,A,Y,A,C,C,I,E,A,E,A,gB,E,G,G,a,C,E,A,gB,A,C,C,I,E,A,E,A,I,G,E,I,A,C,E,A,I,A,C,C,A,E,E,E,E,K,G,E,I,C,C,E,A,K,A,C,C,I,E,A,E,A,O,G,E,I,G,C,E,A,O,A,C,C,I,E,A,E,A,S,G,E,I,K,C,E,S,C,I,C,E,A,U,C,C,A,A,E,E,E,E,U,G,E,I,M,C,E,A,U,A,C,C,I,E,A,E,A,iB,E,G,G,c,C,E,A,iB,A,C,C,I,E,A,E,A,mB,G,E,I,e,C,E,A,mB,A,C,C,I,E,A,E,A,G,G,E,G,C,A,E,A,G,A,C,C,A,E,E,E,E,K,G,E,I,C,C,E,A,K,A,C,C,I,E,A,E,A,I,G,C,E,E,c,A,E,E,I,I,E,C,4C,C,I,C,E,C,A,C,A,E,E,c,A,E,E,I,A,G,E,A,I,C,e,C,I,C,E,C,C,A,I,E,A,E,A,I,G,C,E,E,c,A,E,E,I,I,E,C,4C,C,I,C,E,C,A,C,A,E,E,c,A,E,E,I,A,C,W,E,G,C,E,A,I,E,E,C,C,A,W,E,C,e,C,I,C,E,C,C,A,C,C,C,A,E,C,C,S,C,Y,qB,O,c,C,E,a,sG,I,E,E,C,C,G,K,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,I,E,E,C,C,M,E,O,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,I,E,E,C,C,Q,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,I,E,E,C,C,I,I,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,iI,I,E,E,C,C,O,C,E,E,C,C,M,E,E,E,C,C,Q,E,C,C,C,C,K,E,S,E,C,E,M,G,E,C,a,A,E,Q,E,O,E,E,K,C,A,uC,C,c,C,G,C,A,C,C,A,E,S,A,E,C,E,E,M,A,E,C,M,C,G,E,S,A,E,C,A,I,A,C,C,E,O,C,C,E,E,S,A,E,E,E,K,C,C,A,C,G,C,C,E,E,U,A,E,E,E,K,C,C,I,C,C,A,E,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AC,CACV,EADa,IAEZ,CADM,CACE,EAFY,CAET,IAEF,EAAM,GANsB,CAMlB,GAAK,GAFG,CAG5B,GAAQ,EAAC,CAEX,CAED,CALwC,AACzB,MAIR,EAJgB,CAIM,EAC9B,EA2BA,EAAQ,iBAAiB,CAAG,EAC5B,EAAQ,GAAG,CAAG,EACd,EAAQ,GAAG,CAAG,EACd,EAAQ,iBAAiB,CAAG,EAC5B,EAAQ,aAAa,CAAG,6I,I,E,E,C,C,M,E,E,E,C,C,K,E,E,E,C,C,Q,E,A,G,C,U,C,E,C,C,A,S,E,C,E,M,C,E,A,E,c,A,E,A,C,G,E,M,C,mC,C,M,C,G,C,A,C,A,A,C,C,C,M,E,C,E,I,E,C,E,A,E,W,A,E,E,I,A,C,C,A,C,C,C,A,A,C,E,C,E,C,E,E,I,C,O,E,G,C,A,E,C,C,A,A,I,I,C,C,C,C,C,C,E,G,G,C,C,E,C,A,I,C,C,A,C,C,C,C,E,E,G,C,C,E,E,G,E,C,E,C,C,A,A,C,C,C,A,E,C,C,A,C,C,C,M,G,E,c,A,E,E,E,A,G,G,C,mC,C,M,C,G,C,C,A,C,E,C,C,E,E,G,E,C,I,A,C,A,C,A,C,A,A,C,E,C,K,E,C,E,G,C,G,A,C,E,C,E,E,I,C,M,A,K,C,a,C,C,A,M,C,E,E,a,A,E,G,A,C,C,C,G,E,C,C,C,C,E,c,A,G,E,C,E,gB,E,E,G,I,C,C,C,C,M,C,G,A,C,A,A,C,C,A,G,C,C,C,C,C,A,E,Y,C,E,E,S,E,C,E,O,A,C,E,E,C,C,I,G,C,C,C,C,E,G,C,C,I,C,A,A,M,E,C,C,A,C,M,C,C,C,E,A,C,O,C,E,O,A,C,C,C,C,E,E,A,c,A,E,Q,E,O,E,E,C,6B,C,M,C,G,C,A,C,C,A,E,c,A,E,E,E,I,C,C,8B,C,C,M,C,G,C,C,C,C,E,E,E,A,C,C,A,C,E,C,C,C,E,E,A,G,G,C,C,E,C,E,C,C,S,A,E,C,E,E,M,A,E,C,E,C,E,C,C,S,A,E,E,G,A,E,C,C,A,C,C,C,A,M,C,E,E,O,A,E,E,C,C,E,A,C,C,O,C,E,O,A,C,C,C,A,E,I,A,E,I,A,C,C,A,E,E,E,C,A,G,E,C,A,C,E,E,c,A,E,G,G,A,C,qC,C,Q,C,G,C,E,A,C,C,A,O,A,E,C,E,E,M,A,E,E,G,C,C,C,C,A,G,C,A,C,C,C,C,C,c,A,E,E,E,I,E,E,C,G,G,E,I,C,S,C,G,C,C,O,E,E,I,E,C,C,M,C,G,C,C,C,C,E,G,C,U,C,E,E,I,C,C,C,C,A,O,E,G,A,C,E,C,C,A,C,A,C,C,C,C,C,E,G,G,C,C,C,A,C,C,C,C,C,A,C,A,I,A,C,A,sH,I,E,E,C,C,M,E,E,E,C,C,Q,C,C,E,C,C,Q,E,C,C,C,C,K,E,S,E,C,E,M,A,Q,E,A,O,I,E,C,A,C,C,E,A,W,A,E,E,C,C,A,A,G,E,S,A,E,C,E,E,M,A,E,C,G,E,W,A,E,E,a,C,C,C,E,E,W,A,E,M,C,E,K,C,C,C,C,E,C,C,A,C,A,A,E,A,W,C,E,E,Q,K,C,E,O,A,C,C,C,E,E,E,E,E,A,E,C,I,C,C,A,A,C,E,E,c,A,E,E,E,C,A,C,A,C,wJ,I,E,E,C,C,O,C,E,E,C,C,M,E,E,E,C,C,K,E,E,A,M,C,C,gB,C,C,A,E,A,M,C,E,iB,C,C,A,E,A,M,C,C,qB,C,C,A,S,E,C,C,C,E,C,E,E,E,Y,A,E,E,G,G,G,E,I,E,C,oD,C,Q,C,G,G,C,A,C,C,E,C,A,A,O,E,G,I,C,S,C,C,C,E,E,G,C,C,A,K,I,E,C,C,C,A,C,C,E,O,G,C,E,C,S,C,G,E,K,C,C,A,E,E,Q,A,E,C,E,E,Y,A,E,E,E,C,A,C,C,A,M,C,E,E,Q,A,E,C,E,E,U,A,E,G,E,C,C,C,A,Q,C,M,C,E,E,W,A,E,E,G,C,C,A,O,C,M,C,E,E,Q,A,E,E,G,C,C,A,M,C,G,E,A,C,C,C,E,C,C,C,C,A,C,K,C,A,C,C,K,C,C,A,E,E,Q,A,E,C,E,E,Y,A,E,E,E,C,A,C,C,A,M,C,E,E,Q,A,E,G,A,E,C,C,A,E,E,C,C,G,C,G,G,E,C,E,A,C,C,A,E,I,C,C,C,C,C,C,C,C,C,E,E,M,C,C,C,C,C,E,K,C,C,A,M,G,E,c,A,E,C,C,C,C,C,C,E,C,C,C,C,G,M,C,E,C,C,C,E,C,C,C,C,C,C,C,G,G,C,E,C,E,C,qB,C,M,C,G,C,C,C,C,E,C,C,C,A,C,C,A,I,E,A,E,C,A,E,M,A,E,E,E,C,A,C,A,C,E,E,Q,A,E,C,E,E,Y,A,E,C,E,E,S,A,E,G,E,A,C,A,C,A,C,C,A,A,G,C,C,E,C,C,A,G,C,G,C,I,E,A,C,C,A,M,C,C,C,C,C,C,C,M,C,C,E,E,c,A,E,M,C,I,C,A,C,C,C,C,E,C,G,G,C,E,C,C,C,oB,C,M,C,G,C,A,C,C,A,E,c,A,E,C,E,E,U,A,E,K,A,C,C,C,C,iB,E,E,C,C,A,O,C,G,E,C,A,C,A,E,C,C,C,O,A,E,C,E,E,Y,A,E,E,E,C,A,C,C,A,E,A,G,A,C,A,E,E,A,C,C,G,C,E,C,C,C,K,C,O,C,G,C,C,C,E,E,C,C,C,C,C,A,C,C,G,K,C,C,C,C,C,E,M,C,E,G,G,C,C,C,A,C,E,E,c,A,E,I,C,C,G,G,C,C,yB,E,E,C,C,A,O,C,G,E,C,C,A,E,E,C,A,C,M,E,G,I,C,S,C,E,E,I,A,C,E,E,C,E,E,C,A,C,A,C,A,C,A,A,C,A,E,E,Q,A,E,C,E,E,M,A,E,I,A,C,C,C,A,C,C,A,c,A,G,E,G,W,C,M,C,E,C,C,A,C,C,A,C,C,A,E,C,C,A,C,A,A,C,C,A,C,E,E,O,A,E,C,E,E,M,A,E,G,C,A,C,C,A,C,C,Y,C,E,E,W,Y,C,E,O,A,C,C,C,E,M,C,E,E,C,M,E,A,E,E,E,G,A,C,C,C,C,A,C,C,C,iB,C,E,O,A,C,C,C,E,M,C,E,A,E,I,E,A,E,E,E,G,A,C,E,C,C,C,C,uH,I,E,E,C,C,O,C,E,E,C,C,M,E,E,E,C,C,Q,E,C,C,C,C,K,E,E,E,C,C,Q,E,I,C,A,S,C,E,C,C,A,E,I,C,A,C,C,C,A,I,E,G,G,C,C,C,C,C,A,E,E,I,C,C,C,C,A,E,E,I,C,C,C,C,A,E,M,C,K,+D,C,C,A,E,C,E,E,A,O,A,E,E,E,A,C,C,A,E,C,E,E,C,M,A,E,E,E,A,C,C,A,E,C,I,C,Q,A,C,O,C,Q,C,O,C,S,C,iB,C,S,C,I,C,S,C,C,A,E,C,M,C,M,G,C,S,C,mB,C,M,C,C,A,S,E,C,E,M,C,S,C,E,M,C,E,E,c,A,E,Q,E,O,E,C,E,C,sB,E,I,C,S,C,G,A,C,A,C,C,O,E,E,C,A,C,G,C,C,A,A,C,A,A,A,C,C,C,C,E,C,I,C,E,E,I,C,C,C,M,C,E,S,A,C,C,O,C,S,C,E,I,E,C,E,A,E,S,A,E,E,I,Y,C,C,M,C,C,E,E,c,A,E,G,C,C,A,kB,C,gB,C,G,G,C,C,C,C,a,C,I,C,C,E,E,C,G,C,C,C,A,C,C,U,A,E,E,C,C,C,C,C,c,C,S,C,E,G,C,M,C,E,E,U,A,E,G,E,C,Q,E,C,A,A,M,E,C,C,A,C,A,E,E,c,A,G,E,C,E,sC,C,C,0B,C,E,C,C,C,C,C,C,C,S,C,E,I,E,C,E,A,E,Q,A,E,E,G,U,C,C,A,M,C,E,E,c,A,E,A,E,G,E,M,C,C,2B,C,C,a,C,G,C,C,C,A,C,C,O,A,E,E,C,C,C,A,A,C,C,O,E,C,E,C,I,E,E,A,C,C,G,C,gB,C,C,A,G,E,C,E,E,E,E,C,C,A,C,C,C,C,C,C,E,G,K,C,C,C,C,C,C,C,A,C,E,E,c,A,E,E,C,E,A,C,E,C,G,G,E,C,E,C,E,C,C,C,C,G,M,C,G,E,C,oB,C,M,C,G,C,C,C,C,E,C,E,E,I,A,A,E,E,E,E,C,C,A,A,C,A,A,C,C,E,A,C,A,C,A,C,E,C,A,C,A,C,A,A,C,C,E,C,C,A,A,C,A,I,S,C,E,I,E,C,E,A,E,S,A,E,E,I,G,C,C,A,M,G,E,c,A,E,G,E,C,G,E,A,C,E,M,gB,E,E,C,C,A,O,C,G,C,C,C,A,C,C,O,A,E,E,C,E,C,C,A,C,K,A,E,E,G,A,C,C,A,C,C,E,C,A,A,C,A,C,A,C,A,C,I,E,E,C,C,G,C,c,C,C,A,G,E,C,E,E,E,G,K,C,C,C,C,C,C,C,A,M,G,E,c,A,E,C,G,G,E,C,E,A,E,C,C,C,C,G,M,C,G,E,C,kB,C,M,C,G,C,C,C,M,C,E,I,E,C,E,A,E,Q,A,E,G,C,C,C,A,C,C,c,A,E,E,G,G,G,E,C,E,iB,E,E,C,C,A,O,C,G,E,C,C,A,E,C,E,A,E,Q,A,E,A,G,E,A,A,C,A,C,A,A,G,E,C,C,E,C,O,A,E,C,E,E,E,E,E,A,E,C,E,E,C,I,A,C,G,C,C,A,C,E,C,C,A,O,A,E,E,C,C,A,C,A,A,C,C,K,G,C,E,C,S,C,A,O,S,C,E,M,G,E,Y,A,E,C,E,E,U,A,E,G,E,A,C,A,A,C,A,A,C,I,M,C,A,O,S,C,E,O,A,E,E,C,A,C,A,A,C,A,E,C,C,A,C,C,C,I,C,A,O,S,C,E,M,C,E,E,S,A,E,E,C,A,C,C,C,C,C,Q,C,A,O,S,C,E,M,C,E,E,E,A,E,E,C,C,A,A,C,C,C,I,I,A,C,A,A,S,E,C,C,C,E,G,G,C,E,E,C,C,C,E,G,C,A,C,M,C,M,C,C,E,C,C,C,A,E,C,C,G,C,C,E,C,G,C,C,C,C,A,C,A,A,S,E,C,E,I,C,C,E,C,C,G,C,6C,C,C,O,A,E,C,E,E,A,C,C,C,C,C,C,K,C,C,C,C,C,C,C,C,C,C,C,A,K,C,C,I,C,C,C,C,C,C,M,C,C,C,C,C,C,C,C,C,C,C,A,K,C,C,C,C,C,C,A,C,O,C,C,C,C,C,C,C,A,C,A,C,C,A,C,C,A,C,I,C,C,C,A,C,A,A,C,K,E,W,A,G,A,C,A,A,K,K,E,C,O,I,C,K,C,I,C,C,C,C,C,A,C,A,E,C,A,G,C,A,A,a,C,C,C,I,C,C,C,C,C,I,G,C,C,C,E,C,C,C,C,C,I,G,C,C,C,E,E,G,C,G,C,C,C,A,I,C,E,C,C,C,A,I,E,C,C,C,C,A,C,C,C,A,A,I,I,I,C,M,C,I,C,G,G,C,G,C,A,I,A,C,C,A,E,A,C,C,A,C,E,C,C,E,C,C,M,C,M,C,C,E,E,A,G,M,C,O,C,C,C,E,G,C,C,C,E,C,K,G,C,E,C,C,G,C,C,A,A,G,C,O,C,C,A,M,G,C,E,C,C,I,A,E,A,C,E,E,O,C,C,A,M,E,E,E,C,G,C,E,C,C,A,C,A,C,A,A,C,A,A,C,C,A,E,G,A,C,E,E,E,G,E,A,C,C,A,G,C,C,C,E,A,C,C,A,E,G,C,E,A,E,E,G,C,C,A,C,A,C,A,A,I,C,C,C,C,C,I,C,S,C,G,E,A,C,A,C,C,E,E,I,G,C,C,A,C,E,I,K,A,C,C,E,C,C,A,C,E,E,c,A,E,C,E,G,C,E,G,A,C,C,C,C,wB,E,I,C,S,C,E,G,C,C,C,I,E,I,C,S,C,G,C,A,C,A,O,C,G,E,C,C,C,A,C,E,G,A,C,C,C,A,I,E,E,E,E,C,C,C,C,A,I,C,A,C,E,E,c,A,E,I,E,C,C,A,0B,E,I,C,S,C,G,C,C,G,C,G,C,G,E,C,C,C,E,C,E,A,C,C,A,E,Y,A,E,E,G,C,C,E,C,I,C,Q,E,I,C,S,C,G,C,C,G,C,G,C,G,E,C,C,C,A,C,C,E,I,C,A,C,E,C,C,A,C,E,A,C,G,C,C,C,C,I,C,A,G,C,A,C,C,K,C,I,A,C,E,I,C,C,C,C,M,C,A,C,E,A,C,C,C,C,A,C,C,A,G,C,C,A,C,C,M,E,I,G,C,E,E,A,C,E,G,E,c,A,E,C,G,E,M,C,G,mB,C,O,C,G,G,A,C,C,A,c,A,E,C,G,E,M,C,C,E,uC,E,E,G,C,A,C,E,A,C,C,C,C,C,S,C,C,C,C,C,I,C,I,C,C,C,C,O,C,G,C,E,A,C,C,A,gB,A,E,I,C,C,W,C,C,C,C,C,C,C,C,C,A,S,E,C,C,A,C,E,I,E,E,K,A,C,E,E,c,A,E,C,E,G,A,C,G,C,A,C,0B,E,I,C,S,C,G,C,A,C,A,O,C,G,E,C,C,C,A,A,C,G,C,C,A,C,E,A,C,I,A,C,C,C,C,C,G,C,C,E,E,C,C,C,G,K,E,A,E,G,A,E,C,A,C,C,A,C,A,E,C,E,C,G,C,A,C,E,E,A,C,C,C,G,C,E,C,C,A,C,C,E,C,W,C,I,G,E,A,C,C,C,C,I,A,E,A,K,C,I,C,G,A,C,C,A,A,I,E,C,A,I,C,C,C,C,C,G,C,E,E,A,E,C,C,A,E,C,C,A,A,E,A,G,C,A,C,E,A,C,C,C,C,C,C,C,C,C,C,A,C,I,C,E,C,C,C,A,A,C,A,U,C,C,C,C,I,E,I,C,A,C,C,C,C,G,C,G,C,C,C,I,I,E,C,E,C,C,A,C,C,C,C,G,C,C,C,C,C,C,C,C,C,G,C,E,E,E,C,C,C,C,A,C,A,C,C,A,C,C,C,I,E,E,G,A,C,C,C,A,E,I,C,E,A,E,A,I,C,C,A,E,C,E,C,C,G,A,C,A,G,E,C,E,E,E,E,G,A,G,C,A,E,I,C,G,O,C,G,I,C,C,C,A,I,C,A,E,A,E,A,c,A,E,C,C,G,E,G,E,E,E,G,E,G,E,G,G,C,C,uC,E,E,G,E,C,C,C,O,C,G,E,C,C,A,E,E,E,C,A,C,G,O,A,C,C,E,C,C,C,C,C,G,C,I,G,A,C,C,C,A,E,C,A,E,U,C,C,A,C,E,E,S,A,E,C,E,E,M,A,E,G,C,C,A,A,C,C,C,C,A,E,I,A,C,K,C,E,C,A,C,E,E,C,G,C,E,C,E,E,E,A,E,A,I,C,C,C,C,C,G,C,I,A,C,C,C,I,A,I,C,E,C,C,C,E,E,C,C,A,C,M,C,M,C,C,E,E,A,I,E,I,A,C,U,C,G,C,A,C,A,E,C,C,A,O,A,I,C,C,C,C,C,G,C,G,C,C,C,C,C,S,A,E,G,C,C,C,A,C,A,A,C,C,C,I,E,I,G,C,G,C,E,E,G,C,C,C,A,E,E,C,C,A,A,C,C,C,A,C,C,c,A,G,E,C,E,Y,E,E,C,C,A,M,C,E,C,A,C,C,C,O,C,C,C,C,I,E,I,A,C,C,C,C,C,G,C,G,C,C,C,G,C,E,E,c,A,E,E,C,G,W,E,I,C,S,C,G,C,A,C,A,M,C,G,C,A,C,A,A,C,G,C,K,C,C,C,C,C,C,O,I,C,U,C,G,C,C,A,C,A,E,C,C,M,C,C,C,C,C,C,M,G,E,S,A,E,I,C,U,C,E,E,C,C,A,C,C,C,C,E,C,C,C,C,O,I,C,U,C,I,C,W,C,E,C,A,E,C,C,A,C,C,C,C,O,I,C,U,C,I,C,W,C,E,C,A,E,C,C,E,C,C,C,C,C,C,C,C,G,C,C,G,C,C,C,A,E,E,E,A,E,E,C,C,C,C,C,A,E,E,C,E,C,C,G,A,C,A,G,E,G,E,C,C,E,E,c,A,E,A,C,C,G,E,K,E,E,G,E,G,E,G,G,C,C,uC,E,E,G,E,C,C,C,O,C,G,E,A,C,C,C,A,C,A,C,E,A,C,G,C,M,C,E,G,G,C,C,C,I,I,A,C,C,A,C,G,A,C,K,C,E,C,A,C,E,E,I,E,C,E,I,E,C,C,E,G,G,C,M,C,C,E,E,A,C,C,E,C,C,G,C,M,C,E,C,C,A,E,C,C,E,G,C,C,A,A,C,A,A,C,A,A,C,E,E,c,A,G,E,C,E,Y,E,E,C,C,A,M,C,E,C,A,C,C,C,E,C,C,C,C,C,C,O,I,C,M,C,I,C,W,C,E,E,C,A,A,K,C,A,C,A,I,C,C,C,C,O,I,E,E,C,A,E,C,C,E,C,I,U,C,C,C,C,O,E,I,C,G,E,C,G,K,A,C,A,A,M,C,U,C,C,C,C,C,C,C,C,O,E,I,C,G,E,C,G,I,C,E,E,A,C,A,E,C,C,E,C,U,C,C,C,C,I,E,E,C,A,I,G,C,I,C,E,C,G,A,A,I,E,C,C,E,C,C,Q,A,I,E,C,C,A,E,C,A,C,A,E,E,c,A,E,E,C,C,8B,E,I,C,S,C,G,C,A,C,A,Q,C,G,E,C,C,C,C,C,K,C,I,G,C,C,C,C,A,A,A,O,E,I,C,C,C,C,C,C,C,C,C,C,O,C,C,C,I,A,C,C,E,O,C,C,C,I,A,C,C,C,E,U,C,G,W,C,C,Y,C,C,C,C,E,C,A,G,C,C,C,A,C,M,C,C,C,C,C,C,C,C,M,C,E,E,M,A,E,C,Q,C,E,U,C,G,A,E,C,C,E,C,G,E,C,C,C,C,E,C,A,C,A,A,A,C,K,C,I,C,C,C,C,C,C,C,C,M,C,E,E,S,A,E,E,M,C,E,E,E,C,A,A,C,A,C,C,C,C,E,C,K,C,Y,C,C,C,C,C,C,C,C,C,C,I,I,G,E,E,A,I,E,A,C,A,M,C,C,C,C,G,G,C,A,C,C,A,C,C,E,C,C,O,C,C,E,C,A,A,I,E,C,C,C,A,E,C,G,a,E,C,C,E,E,W,A,E,E,I,a,C,E,C,E,A,E,C,E,I,a,C,C,I,C,C,A,I,E,E,G,C,C,G,E,C,C,A,E,E,I,C,E,K,A,C,E,C,E,A,E,G,A,E,E,K,G,C,E,C,A,E,E,W,A,E,E,E,C,A,E,C,C,C,E,C,E,E,C,C,A,I,C,C,A,C,C,E,C,C,A,C,I,E,G,C,C,C,G,C,E,I,a,E,C,C,E,I,a,C,E,C,E,I,a,C,C,C,E,I,c,A,C,C,E,E,C,I,A,C,E,C,E,A,E,E,A,C,E,E,I,G,G,C,A,C,E,C,C,A,C,A,E,C,A,E,C,E,C,K,E,I,C,E,C,A,C,A,A,M,C,U,C,C,C,C,C,C,C,C,E,U,C,G,A,G,C,A,C,C,C,C,C,A,E,E,C,A,E,A,I,G,C,A,I,A,E,A,E,A,E,C,C,C,C,A,C,C,E,E,C,I,C,A,C,E,C,C,A,C,E,C,C,E,E,A,C,C,E,C,I,E,E,E,E,C,C,C,E,C,C,A,C,A,C,C,C,A,I,E,E,G,C,C,G,E,A,C,C,E,E,C,M,A,C,C,C,C,C,C,E,C,C,C,C,C,A,C,C,M,C,E,E,c,A,E,A,I,I,O,K,C,0C,C,oB,C,G,E,A,C,C,U,C,A,E,E,K,C,C,A,C,E,C,C,C,C,E,C,E,M,C,E,I,M,C,C,E,K,M,C,O,C,E,K,A,C,E,C,E,A,E,G,A,E,C,C,C,E,G,C,a,C,C,C,K,C,E,E,O,A,E,C,E,E,Q,A,E,I,C,C,C,A,C,C,E,G,C,Q,C,C,C,K,C,E,E,S,A,E,G,E,C,K,E,C,A,O,G,C,E,C,S,C,O,E,G,Q,E,A,C,I,M,C,M,C,C,C,I,C,A,Q,C,M,C,E,E,c,A,E,A,Q,S,E,G,C,Y,C,O,C,G,E,A,A,C,A,C,C,A,C,C,c,A,G,E,G,e,C,M,C,E,C,C,A,C,A,A,C,A,A,C,A,E,gB,C,E,E,a,E,C,E,O,A,C,C,C,C,C,C,C,E,A,M,A,C,E,E,c,A,E,E,I,C,E,E,E,C,A,E,A,A,C,A,M,C,C,wB,O,c,C,E,a,2P,I,E,E,C,C,M,E,O,c,C,E,oB,C,Y,E,I,W,O,E,iB,C,G,A,O,c,C,E,sB,C,Y,E,I,W,O,E,mB,C,G,A,I,E,E,C,C,Q,O,A,c,C,E,K,C,Y,E,I,W,O,E,E,C,G,A,I,E,E,C,C,C,O,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,c,C,W,G,I,W,O,E,W,C,G,A,O,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,I,E,E,C,C,Q,O,c,C,E,c,C,W,G,I,W,O,E,W,C,G,A,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,I,E,E,C,C,C,O,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,0B,C,W,G,I,W,O,E,uB,C,G,A,O,c,C,E,uB,C,W,G,I,W,O,E,oB,C,G,A,I,E,E,C,C,G,K,O,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,O,c,C,E,kB,C,Y,E,I,W,O,E,e,C,G,+B,O,c,C,E,a,uK,I,E,E,C,C,K,E,E,E,C,C,I,I,S,E,C,E,C,G,E,I,A,G,C,C,C,K,E,G,I,C,A,C,E,A,C,C,G,C,A,C,C,C,C,A,M,C,M,C,E,C,A,G,C,A,C,C,E,A,I,K,K,oB,C,A,K,C,G,C,C,C,A,E,M,gE,C,A,E,E,E,C,C,G,C,A,G,C,C,C,A,E,M,oD,C,A,E,E,E,C,C,G,C,A,G,C,C,C,A,E,U,+B,C,A,E,E,E,E,G,A,C,G,C,A,C,C,A,E,E,A,C,E,C,A,C,I,A,M,K,C,A,E,C,I,C,A,G,C,C,A,K,C,G,C,C,C,A,E,C,G,C,K,O,C,G,C,a,C,G,C,c,C,G,C,e,C,G,C,O,C,G,C,I,C,C,A,E,A,M,C,S,C,C,A,C,C,A,M,C,Q,G,C,C,A,E,A,M,C,I,yB,C,C,A,E,A,K,C,C,8B,C,C,A,E,A,M,C,A,qD,C,A,C,M,I,A,A,G,C,A,A,G,E,M,E,C,O,I,C,C,C,A,A,C,A,A,I,M,E,C,O,I,C,C,C,C,C,M,C,I,C,C,C,A,A,C,A,A,Y,C,C,C,I,C,C,C,A,C,C,C,A,I,C,C,C,C,C,E,I,C,E,A,C,A,A,K,E,C,O,I,E,I,C,C,C,C,C,A,A,C,A,A,K,E,C,I,C,C,C,A,C,C,A,C,A,E,C,C,E,C,C,E,C,E,O,I,E,I,C,C,C,C,C,A,K,C,E,E,A,C,A,G,C,A,C,E,A,E,I,C,M,C,M,C,M,C,C,C,C,C,C,C,K,C,C,C,K,C,E,E,C,K,C,C,C,Q,C,E,E,C,K,C,C,C,Q,C,E,C,C,A,C,A,C,C,A,U,C,C,C,C,I,E,C,G,C,I,E,C,A,G,S,G,E,C,G,E,C,E,G,C,C,C,C,G,C,C,C,K,A,K,C,C,iB,E,E,C,G,C,C,C,C,A,O,I,C,G,E,C,I,A,C,A,A,O,C,C,C,C,G,I,C,I,E,C,I,G,E,C,C,G,E,C,G,C,I,E,A,C,M,A,K,C,C,S,E,E,E,I,E,E,C,G,C,C,E,I,C,S,C,E,C,G,C,C,C,C,C,A,A,O,I,C,G,E,C,I,A,C,A,A,Q,E,C,I,E,C,G,C,I,E,C,A,G,Y,E,C,E,C,G,C,M,A,K,C,W,C,C,A,I,E,I,A,C,C,C,C,C,I,C,C,C,A,C,C,C,E,C,I,C,C,C,C,A,O,I,C,C,C,A,C,E,C,I,C,C,C,A,C,C,A,I,C,I,E,C,I,E,C,G,C,I,E,C,A,G,Y,E,C,E,C,G,C,M,A,K,C,W,C,C,A,I,E,E,C,A,C,I,I,C,C,C,A,C,E,C,I,C,C,E,C,I,E,E,E,C,I,E,C,Q,C,A,E,I,A,C,I,C,C,C,C,C,I,C,C,C,A,C,C,C,I,A,C,C,C,C,C,C,C,A,C,E,A,E,C,I,I,C,C,A,C,C,E,C,I,C,C,C,A,C,C,A,I,A,C,C,C,G,I,C,C,C,A,E,I,C,C,A,E,C,M,C,C,K,A,K,C,e,C,C,A,O,I,C,C,C,C,C,I,C,C,C,A,C,A,C,A,A,W,C,C,C,C,I,E,C,G,C,Q,C,S,C,C,A,O,I,E,G,A,E,G,C,C,E,A,C,C,A,C,A,C,C,C,A,C,A,A,Q,C,C,C,C,G,C,E,C,I,C,M,C,O,I,C,A,I,E,C,G,C,I,E,C,A,O,E,C,G,G,E,E,A,C,A,C,E,C,A,C,G,A,C,A,A,G,E,C,I,E,I,A,C,I,E,C,A,O,I,C,C,C,A,E,C,A,C,C,A,I,C,G,E,C,I,E,E,C,A,C,G,I,C,C,I,C,C,C,A,C,C,C,I,C,C,C,C,C,M,C,C,E,C,C,I,E,G,C,C,C,C,C,C,C,C,C,A,E,I,A,C,C,E,E,G,C,C,C,E,E,G,C,C,C,C,C,A,A,M,C,a,E,E,I,A,C,G,C,C,C,C,A,C,A,C,A,S,E,C,A,E,I,E,E,C,A,C,C,A,I,G,C,A,C,C,C,C,C,C,E,A,I,C,A,C,G,C,S,C,C,C,E,C,C,A,C,C,I,A,C,M,A,K,C,C,c,E,E,G,C,E,E,E,E,A,E,C,C,A,C,A,C,A,C,C,E,C,A,E,C,C,C,A,C,C,C,C,A,E,G,E,E,E,A,I,E,C,I,E,C,C,E,O,C,G,E,C,C,A,C,A,A,I,C,G,I,C,E,A,C,C,C,A,C,C,M,A,C,A,A,C,C,C,C,E,O,C,I,E,C,C,A,E,C,E,G,C,E,M,A,C,Q,C,C,C,C,Q,C,C,C,C,K,C,C,C,C,I,C,E,C,I,C,E,Q,E,I,C,C,C,C,C,C,A,E,I,A,C,G,E,C,C,A,E,C,C,A,C,C,C,C,C,E,E,C,A,C,E,E,C,C,E,E,G,C,C,E,E,A,C,E,C,C,C,C,C,C,C,A,I,A,E,E,A,C,O,E,G,E,I,C,C,C,I,E,C,C,C,C,A,E,I,A,C,E,I,E,C,C,C,C,K,G,a,E,A,E,C,C,C,C,E,M,A,E,E,Q,kB,C,C,A,E,G,E,C,E,G,E,C,A,A,C,C,E,G,E,C,C,K,C,E,I,E,C,C,C,A,E,G,E,E,C,A,E,G,K,C,E,G,C,C,C,A,C,C,E,G,K,C,C,Q,C,E,I,E,C,C,C,K,G,A,I,G,E,G,E,G,K,C,E,G,C,C,C,A,C,C,E,G,K,C,C,Q,C,E,I,E,C,C,C,A,E,I,A,C,E,I,E,C,C,C,C,K,G,c,E,C,E,E,A,G,C,C,S,C,K,G,e,G,E,C,C,G,E,E,E,C,C,C,C,I,C,A,G,E,I,E,C,C,E,Q,G,C,C,E,I,E,C,C,C,C,I,C,C,I,E,E,C,E,C,C,C,I,C,A,E,E,E,A,C,A,C,E,A,C,G,E,C,C,C,C,K,C,C,E,E,S,A,E,G,A,E,C,A,C,A,G,E,I,E,E,S,E,C,C,C,E,I,E,C,C,C,C,I,C,M,A,K,C,yB,C,C,A,C,C,E,I,E,C,C,C,C,I,E,E,A,I,C,I,A,A,G,C,C,E,C,A,C,G,C,G,C,G,E,G,C,A,C,A,C,A,C,C,C,C,A,G,E,C,E,C,C,M,C,A,E,G,C,E,A,G,C,C,C,C,E,G,C,C,S,C,A,S,A,A,G,E,G,C,C,K,C,G,C,E,G,A,C,A,C,M,C,A,S,A,A,E,G,C,C,I,C,A,S,A,A,G,C,C,E,C,A,C,G,C,G,C,E,G,C,C,C,C,C,C,C,A,C,C,A,C,E,C,C,Q,C,A,G,E,C,E,C,C,M,C,A,S,A,A,M,A,K,C,C,iB,E,I,C,S,C,C,C,C,C,C,C,a,E,E,C,C,C,A,A,C,M,I,E,E,G,C,A,A,C,E,A,A,C,K,C,M,C,C,C,C,C,A,C,A,A,S,E,C,C,C,E,I,A,E,E,C,A,G,C,I,G,E,E,I,C,C,C,A,E,C,E,C,G,C,A,E,A,I,C,C,E,A,C,C,C,E,M,A,C,C,C,C,K,A,K,C,C,mB,E,E,I,C,C,G,C,C,C,C,A,C,A,A,S,E,C,C,C,E,G,C,C,I,O,C,G,C,G,C,A,E,E,G,A,C,C,C,I,C,A,G,I,E,C,C,E,E,A,K,C,C,S,E,E,E,I,E,E,C,C,C,A,A,E,K,E,I,G,C,I,C,A,C,A,A,S,E,C,C,C,E,I,E,E,E,E,C,C,C,C,I,C,C,E,E,E,E,G,C,I,C,S,C,C,A,G,A,I,G,E,G,C,E,C,E,C,C,E,I,C,C,A,A,C,E,E,G,C,C,C,A,E,G,C,E,C,I,C,C,A,C,I,C,C,oB,E,I,C,S,C,G,C,C,C,A,C,C,A,G,C,E,C,A,I,C,C,C,M,C,M,C,E,C,A,K,C,C,E,E,C,E,I,E,E,E,E,C,C,G,C,C,A,C,C,C,E,E,I,C,A,wB,C,K,C,G,C,C,C,C,A,E,E,E,I,C,A,yB,C,K,C,G,C,C,C,C,A,E,G,C,G,G,C,E,A,M,C,A,E,G,C,G,G,C,C,C,K,C,A,E,G,C,G,M,C,C,C,Q,C,A,E,G,C,G,S,C,C,C,W,C,A,E,G,C,G,O,C,C,C,K,C,A,Y,A,C,A,A,S,E,C,C,C,E,M,C,E,I,K,E,C,G,C,A,C,E,A,C,C,I,C,C,C,A,G,C,A,Q,C,A,C,C,A,C,E,G,E,A,I,I,C,I,C,C,C,G,E,G,C,C,C,A,E,I,I,C,Q,C,C,C,K,G,E,S,A,E,E,G,C,C,C,I,C,A,C,M,A,K,C,a,C,C,A,A,O,I,A,C,A,A,S,E,C,E,G,E,A,I,E,C,C,K,A,K,C,C,4B,E,E,I,E,C,E,E,E,I,I,E,C,C,C,A,C,A,A,I,E,I,M,C,C,mB,C,C,A,S,E,C,E,I,E,E,C,C,A,G,C,G,G,C,E,A,C,C,A,c,A,E,E,G,W,C,M,C,G,C,C,C,G,E,C,E,E,I,S,C,A,G,K,E,C,E,E,I,Q,C,A,G,C,C,C,C,C,C,I,E,I,I,C,C,C,C,C,C,C,A,C,E,E,c,A,E,C,G,G,G,A,E,C,A,sB,C,M,C,G,C,C,C,E,G,C,C,C,C,C,C,I,E,E,M,C,C,C,C,C,C,C,A,C,E,E,c,A,E,C,G,G,C,E,C,E,E,E,C,C,A,C,C,C,uB,C,M,C,G,A,C,C,C,I,C,C,A,E,C,C,E,C,C,C,A,C,C,M,A,C,G,C,kB,C,C,A,E,e,K,C,A,E,gB,C,A,E,A,gB,C,A,E,A,sB,C,A,E,A,mB,C,A,E,A,mB,C,A,E,A,iB,A,C,E,I,E,I,A,C,E,E,A,C,Q,A,C,O,A,C,U,A,C,W,A,C,a,A,A,a,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,G,C,E,E,a,A,E,E,E,C,G,O,C,C,A,M,C,c,C,I,C,E,C,K,A,C,C,C,C,C,A,I,E,I,E,A,C,A,C,K,C,E,K,G,A,C,C,A,O,E,C,G,G,E,E,E,G,I,E,A,E,A,M,A,K,A,C,E,C,C,A,K,G,A,I,K,E,E,E,A,E,M,A,K,A,C,E,C,C,A,G,A,O,C,C,G,I,A,I,E,E,E,I,A,K,C,E,C,C,A,K,G,I,E,A,E,M,A,E,G,C,E,C,C,A,C,E,E,gB,A,E,I,C,M,E,E,E,Y,Q,E,O,M,U,I,W,K,E,C,A,C,A,A,M,C,C,C,A,C,G,I,E,A,I,E,A,I,K,C,C,A,M,G,E,C,G,C,E,E,E,C,I,E,E,C,A,G,I,C,O,E,C,C,I,E,I,A,C,K,C,I,C,a,C,M,C,M,C,C,C,A,O,E,I,A,C,E,E,A,C,G,A,E,C,C,E,I,C,W,C,C,C,A,C,C,C,A,C,K,C,I,C,W,C,C,C,C,C,A,I,C,S,C,G,A,G,C,A,C,C,C,G,C,C,A,O,C,C,K,C,Q,C,O,C,A,C,G,C,I,C,K,E,C,A,C,K,S,E,A,O,I,C,O,C,E,E,I,G,C,I,C,O,A,C,C,I,C,O,E,E,C,E,I,M,C,I,C,U,C,G,C,A,C,E,A,C,G,C,K,C,C,C,M,C,I,C,C,A,A,C,G,C,S,C,G,A,G,C,A,C,C,E,C,A,C,M,I,C,O,E,E,A,G,G,C,C,a,C,M,C,G,G,A,C,A,C,A,C,C,I,C,W,C,C,C,A,C,C,C,A,C,K,C,I,C,W,C,C,C,C,C,C,I,C,O,E,C,C,E,G,A,C,I,C,U,C,G,C,A,G,C,A,C,C,C,I,C,I,E,C,C,A,C,A,M,A,C,C,G,I,C,A,C,E,C,C,G,C,A,G,G,C,C,I,C,A,S,E,C,I,A,E,E,E,G,C,O,G,G,G,O,C,C,A,M,G,G,G,C,C,I,E,C,G,G,A,C,I,C,I,A,C,E,C,C,A,I,C,E,E,C,M,O,C,C,C,I,C,Q,A,C,A,O,E,C,M,O,C,C,C,I,C,Q,A,C,A,W,E,C,O,I,C,C,A,I,C,O,A,C,A,I,C,C,C,C,C,C,G,I,C,O,E,C,C,G,C,K,C,O,C,G,E,C,E,C,A,K,C,qB,C,C,A,G,C,C,G,I,C,W,E,E,G,G,G,I,C,W,C,C,K,A,K,C,uB,C,C,A,I,E,G,C,C,A,O,E,G,A,C,A,C,E,A,C,C,A,G,U,C,I,C,C,C,I,A,G,A,C,C,C,C,A,C,O,E,C,C,G,C,K,C,O,C,G,E,C,E,C,A,K,C,qB,C,C,A,G,E,G,G,G,I,C,U,C,M,C,C,K,A,K,C,uB,C,C,A,I,E,G,C,C,A,O,E,G,A,C,C,C,C,C,E,C,C,C,A,G,O,C,C,C,C,I,C,C,C,I,A,G,C,C,C,C,A,E,I,C,A,I,C,E,C,E,A,C,A,C,A,C,C,C,C,C,C,C,E,G,I,C,O,E,C,C,G,C,K,C,O,C,G,E,C,E,C,A,K,C,qB,C,C,A,G,C,C,G,I,C,W,E,E,G,G,G,I,C,W,C,C,K,A,K,C,uB,C,C,A,I,E,I,C,E,W,C,A,E,E,E,C,E,E,C,A,E,I,G,C,C,E,G,E,A,E,A,C,C,A,C,C,E,C,C,E,A,C,C,E,C,A,A,C,C,C,C,A,C,C,A,C,A,C,A,C,A,C,A,A,E,G,G,A,C,C,E,A,A,G,I,C,O,E,C,C,I,E,E,E,C,C,C,G,O,C,A,G,K,C,O,C,G,E,A,C,C,C,C,C,E,E,C,I,C,G,I,E,G,E,M,E,A,O,E,G,C,E,A,K,C,qB,C,C,A,E,E,E,C,C,A,I,A,C,E,A,C,C,C,G,C,C,C,K,A,K,C,iD,C,C,A,G,C,C,E,G,C,I,C,C,C,A,E,I,A,K,C,C,4B,E,E,G,C,C,C,C,C,A,O,C,C,E,G,C,C,A,C,A,C,C,A,A,G,E,I,E,G,I,C,U,C,M,C,C,K,A,K,C,uB,C,C,A,E,I,G,C,C,E,G,E,A,C,C,A,E,A,C,C,C,A,C,C,E,E,E,A,C,C,E,C,A,A,C,C,C,C,A,C,C,A,C,A,C,A,C,A,C,A,A,E,G,G,A,C,C,E,A,A,I,E,E,E,E,C,A,I,C,G,E,A,C,C,E,A,C,C,C,I,C,C,I,Y,E,M,A,E,C,C,E,A,C,A,A,C,A,C,E,C,A,G,A,C,C,A,C,S,C,C,C,C,C,C,I,E,E,C,A,E,C,A,E,C,A,A,E,K,I,C,C,C,C,C,E,E,E,A,C,C,E,C,A,A,C,C,A,C,C,A,C,C,C,C,A,C,C,A,M,A,E,A,M,O,C,G,C,G,C,C,C,C,A,C,A,A,A,C,C,I,C,I,C,C,C,C,C,C,G,E,O,I,C,G,A,C,E,I,E,C,C,C,Q,E,A,O,E,C,C,C,C,O,E,I,C,E,A,C,E,A,C,E,A,M,E,C,A,C,A,C,A,C,E,c,A,G,E,G,iB,C,K,C,G,A,C,C,G,G,G,U,E,C,I,E,E,A,A,C,E,E,C,A,E,C,E,C,C,A,E,E,C,C,C,G,I,C,A,C,C,C,G,C,O,C,E,E,C,O,C,Y,C,E,A,E,M,C,C,A,E,E,C,A,Q,E,C,G,C,A,C,E,A,C,C,I,C,C,C,A,C,C,A,E,C,C,K,E,E,G,A,C,A,C,E,A,C,A,C,M,E,C,C,I,C,G,C,C,C,C,C,C,E,E,E,A,E,A,C,E,I,A,C,A,G,G,C,C,C,A,I,E,I,C,A,E,I,A,C,A,I,C,E,C,K,E,E,C,O,C,S,C,E,C,I,E,E,C,E,A,E,C,A,C,C,I,E,E,E,C,A,A,C,C,A,E,A,I,C,C,C,E,C,E,E,E,E,G,A,C,A,A,C,A,C,C,C,C,I,C,A,A,E,M,C,C,A,E,G,C,C,A,A,I,E,I,C,A,A,G,A,E,E,C,E,C,E,C,I,A,C,C,G,C,C,C,G,C,E,M,A,I,C,C,A,E,C,C,A,G,E,A,E,A,C,C,E,E,A,C,O,C,I,C,C,A,C,C,C,E,E,C,I,C,A,C,C,C,A,C,E,E,C,K,C,C,K,A,K,C,iB,C,C,A,O,I,E,E,E,E,A,A,C,C,A,E,E,E,A,C,A,E,A,I,E,A,E,A,C,C,C,C,A,C,A,C,E,E,c,A,E,C,G,C,O,E,O,G,C,C,A,E,G,C,G,I,C,C,Q,C,U,C,G,C,C,C,C,E,E,C,E,I,A,C,G,E,C,I,C,E,A,E,c,A,E,E,U,mB,C,a,C,E,C,M,C,C,A,E,C,C,G,A,I,A,C,C,E,A,C,G,C,A,E,E,E,G,C,A,G,G,E,C,I,C,C,A,C,A,O,C,A,C,C,C,C,E,I,C,C,A,E,E,I,C,C,C,E,C,C,C,C,C,C,C,U,C,E,C,S,C,C,C,A,O,I,E,E,G,C,A,C,A,C,E,E,K,C,E,I,C,A,E,G,A,G,G,I,A,C,C,C,G,C,C,E,Q,C,Q,C,E,E,E,I,E,C,C,C,G,C,C,C,I,E,E,C,C,A,C,A,C,A,E,C,S,C,E,C,S,C,G,C,A,C,E,A,C,C,I,C,C,C,A,C,C,A,C,G,C,A,O,A,I,C,C,A,E,G,C,A,C,A,C,E,E,K,C,E,E,G,A,C,C,I,C,C,A,A,O,I,E,E,G,C,A,C,A,C,C,C,E,A,C,C,C,G,C,C,A,E,E,A,C,G,C,A,I,C,I,C,A,C,A,A,M,C,W,C,C,C,C,O,G,C,C,A,E,G,C,C,C,A,A,E,S,C,C,C,C,C,I,E,A,I,A,A,E,I,C,A,a,C,C,C,C,C,C,C,C,E,E,a,A,E,E,E,C,G,M,C,C,A,E,I,E,C,M,C,E,I,C,E,C,C,A,C,E,E,gB,A,E,I,C,M,I,K,C,C,C,A,C,A,A,E,I,C,I,C,C,C,C,G,Q,E,O,E,C,A,C,E,C,E,I,C,C,G,C,K,C,G,C,A,A,C,C,I,C,C,C,C,A,O,E,I,C,C,C,C,E,C,A,A,C,C,C,G,U,E,O,A,E,A,C,C,A,E,O,C,I,G,C,A,C,Y,C,A,O,E,I,C,E,C,C,C,E,K,E,C,A,O,E,I,C,E,C,C,C,C,C,O,C,A,O,E,I,C,E,C,C,C,C,C,U,C,A,I,S,C,O,E,I,C,E,C,C,C,E,E,Q,C,A,O,E,I,C,E,C,C,C,E,E,M,C,A,O,E,I,C,G,A,C,C,E,C,G,Q,E,O,E,C,A,C,M,E,C,G,E,A,I,a,C,A,O,E,I,C,E,C,C,C,E,K,E,C,A,O,E,I,C,E,C,C,C,C,C,O,C,A,O,E,I,C,E,C,C,C,C,C,U,C,A,I,S,C,O,E,I,C,E,C,C,C,E,E,Q,C,A,O,E,I,C,E,C,C,C,E,E,M,C,A,O,E,I,C,G,A,A,C,A,C,C,C,C,M,A,G,E,C,E,gB,E,E,C,G,C,C,C,uB,C,C,S,C,e,C,C,C,A,A,C,E,E,c,A,G,E,G,0B,C,K,C,E,C,A,A,C,C,I,C,a,C,C,C,C,O,E,U,C,E,C,A,E,C,A,C,E,C,O,C,C,C,C,O,E,U,C,A,E,C,A,E,C,C,E,C,O,C,C,C,C,O,E,U,C,A,E,C,A,E,C,C,E,C,U,C,C,C,C,O,E,U,C,E,C,A,A,E,C,C,E,C,Q,C,C,C,C,O,E,U,C,C,C,C,C,A,C,C,A,C,O,C,C,O,C,S,E,C,G,A,A,E,W,C,C,C,C,C,C,C,C,C,K,C,E,E,C,C,C,C,E,A,C,C,A,c,A,E,A,Q,S,G,C,C,A,E,G,C,G,I,C,e,C,M,C,G,C,C,A,C,G,E,C,M,C,E,I,C,E,C,C,A,C,E,E,gB,A,E,I,C,M,C,C,C,A,C,A,A,C,A,S,E,C,C,C,E,G,G,G,C,E,G,C,A,A,C,E,A,C,A,C,M,C,I,E,C,C,A,C,M,C,C,C,E,I,A,C,A,C,E,C,C,G,A,C,A,A,E,a,C,C,O,M,I,E,C,U,C,C,C,C,C,C,C,C,K,C,E,G,I,C,E,E,C,G,C,C,C,C,c,C,I,C,E,C,K,A,C,C,C,C,A,C,A,A,I,Q,E,C,E,I,C,E,E,E,A,E,I,C,M,C,S,C,C,C,S,C,C,C,E,C,A,C,A,A,M,C,C,C,C,G,I,E,A,I,E,A,I,K,C,C,A,M,E,C,E,I,G,I,C,S,C,C,I,C,O,C,I,C,I,C,I,C,M,C,I,C,M,C,G,C,A,G,C,C,E,A,C,K,C,E,G,G,C,K,C,A,C,A,A,C,C,E,E,E,C,A,C,K,S,E,C,G,E,C,G,A,C,O,C,C,A,E,I,A,C,I,C,I,C,E,E,I,A,C,C,K,C,C,C,A,E,I,A,C,G,C,A,C,A,A,M,C,I,C,C,C,C,G,E,U,C,A,G,A,C,E,I,E,C,C,C,A,Q,E,O,E,C,C,K,E,I,C,E,C,E,C,A,A,C,C,C,G,U,E,C,I,E,E,A,A,O,C,C,E,A,C,C,A,E,E,C,A,C,C,K,C,C,G,A,C,C,E,C,C,E,E,E,A,C,A,G,C,A,C,E,I,E,E,E,C,C,E,C,E,A,C,K,C,A,C,C,C,K,C,G,C,E,I,C,C,A,C,A,C,C,A,C,A,A,M,C,U,C,C,C,C,O,G,C,C,A,E,G,C,C,C,A,A,E,a,C,C,C,C,C,I,M,I,E,C,Q,A,A,E,W,C,C,C,C,C,C,C,C,C,K,C,E,G,I,C,E,E,C,G,C,C,C,C,c,C,I,C,E,C,K,A,C,C,C,C,C,A,C,E,E,Y,I,A,E,I,C,W,C,C,C,A,C,A,A,I,C,Q,E,C,M,C,E,E,E,A,E,I,C,M,C,S,C,C,A,C,A,A,M,C,C,C,C,G,I,E,A,I,E,A,I,K,C,C,A,M,E,C,E,I,G,I,C,S,C,C,I,C,O,C,S,C,I,C,S,C,I,C,I,C,I,C,M,C,I,C,M,C,G,C,A,C,E,A,C,G,C,K,C,C,C,M,C,K,C,A,C,A,A,C,C,E,E,E,C,A,C,K,S,E,C,G,E,C,G,A,C,O,C,C,A,E,I,A,C,I,C,I,C,E,E,I,A,C,C,K,C,C,C,A,S,G,G,G,C,C,S,E,A,E,I,A,C,W,C,C,A,E,I,A,C,G,C,A,C,A,A,M,C,Y,C,C,C,C,C,C,O,A,I,E,E,A,E,E,A,A,C,C,E,A,C,C,A,C,A,C,A,G,C,A,C,E,A,C,C,I,C,C,C,A,C,C,C,G,E,C,C,K,A,C,A,A,M,C,I,C,C,C,C,G,E,U,C,A,G,A,C,E,I,E,C,C,C,A,Q,E,O,E,C,C,C,C,O,E,I,C,E,C,E,C,A,A,A,C,C,I,E,C,C,C,C,E,c,A,G,E,G,qB,C,K,C,G,A,C,C,G,G,G,U,E,C,I,E,E,A,A,O,C,C,E,A,C,C,A,E,E,C,A,G,C,C,A,C,A,C,C,C,E,C,A,C,C,G,K,G,C,C,C,C,G,C,W,C,C,A,O,E,G,A,C,C,E,C,C,E,E,E,A,A,G,A,C,C,I,C,A,C,G,E,E,E,C,C,E,C,E,A,C,K,C,A,C,C,C,K,C,G,C,A,C,E,A,C,C,I,C,C,C,C,I,A,C,C,A,C,A,C,A,C,E,C,Q,C,A,C,A,A,M,C,U,C,C,C,C,O,G,C,C,A,E,G,C,C,C,A,A,E,a,C,C,C,C,C,I,M,I,E,M,C,A,A,A,G,C,A,a,C,C,C,C,C,C,C,C,C,C,C,K,C,E,E,C,C,C,G,C,C,C,C,c,C,I,C,E,C,K,A,C,C,C,C,C,A,C,E,E,gB,A,E,A,I,C,S,M,C,A,C,C,A,A,C,A,A,M,C,C,C,C,G,C,E,E,M,A,E,I,E,G,G,M,G,E,I,qC,C,uB,C,C,S,C,iB,C,C,C,A,M,E,C,E,I,G,I,C,S,C,C,I,C,a,C,e,C,I,C,O,C,A,C,Q,C,A,C,U,C,A,O,C,I,C,O,C,G,C,I,C,C,A,I,C,G,C,I,C,G,C,C,I,E,M,C,A,C,G,C,M,C,G,C,A,C,E,A,C,G,C,K,C,C,C,M,C,K,C,A,C,A,A,C,C,E,E,C,C,E,S,E,E,E,I,A,C,C,K,C,C,C,C,C,A,O,I,C,O,E,A,E,I,A,C,S,C,C,A,I,E,A,I,C,G,E,E,I,A,C,C,C,E,I,C,G,C,Q,E,C,C,C,C,A,E,I,A,C,G,C,A,C,A,A,M,C,I,C,C,C,C,G,E,U,C,G,A,C,E,A,I,E,C,C,C,Q,E,A,O,E,C,C,C,C,O,E,I,C,E,C,E,C,A,A,C,C,I,A,E,C,C,C,C,E,c,A,G,E,G,0B,C,K,C,G,A,C,C,G,G,G,U,E,C,E,E,C,C,C,C,E,K,K,C,C,C,C,A,I,E,E,E,C,A,C,C,A,C,C,E,C,C,A,C,E,G,C,I,E,C,E,C,C,A,E,C,C,G,A,C,C,G,E,E,G,A,C,C,E,C,C,E,I,S,C,C,C,E,E,C,A,A,C,C,A,K,I,E,E,I,S,C,C,C,C,K,C,A,C,C,C,K,C,G,C,E,I,C,C,A,C,A,C,C,C,C,E,C,M,C,I,C,C,A,E,C,E,C,E,C,E,C,A,C,G,C,A,C,A,A,M,C,U,C,C,C,C,O,G,C,C,A,E,G,C,C,C,A,A,E,mB,C,C,C,C,C,I,U,E,A,I,E,C,A,A,a,C,C,C,C,C,C,C,K,C,E,G,O,C,G,G,C,C,C,C,c,C,I,C,E,C,K,A,C,C,C,C,C,A,G,E,e,C,A,E,I,C,S,C,C,C,A,C,A,A,G,G,C,C,C,C,I,E,C,C,A,C,C,I,C,M,C,M,C,S,C,A,C,S,C,C,K,A,M,E,C,E,I,A,C,S,C,M,E,E,a,C,I,C,O,C,A,C,Q,C,A,C,W,A,C,A,C,A,C,A,C,E,E,E,E,I,C,O,C,A,C,S,C,A,C,C,C,C,A,C,A,A,M,C,I,C,C,C,C,G,E,U,C,G,A,A,C,E,I,E,C,C,C,Q,E,A,O,E,C,C,C,C,O,E,I,C,E,C,E,C,A,A,C,C,C,G,E,C,C,C,C,E,c,A,G,E,G,wB,C,K,C,G,A,C,C,G,G,G,U,E,C,I,E,E,A,C,G,I,E,C,A,E,E,C,K,K,C,E,C,G,O,C,S,C,C,C,C,A,G,C,E,E,c,A,E,E,Q,0B,C,K,C,G,A,I,C,C,C,E,G,E,C,S,C,E,C,G,O,C,S,C,C,C,C,A,C,I,E,E,E,C,A,C,C,I,C,C,C,E,c,A,E,C,G,E,I,E,C,C,6B,C,C,Y,C,G,E,C,C,A,C,A,C,C,G,K,C,C,C,C,C,A,E,G,A,C,C,E,C,C,E,E,E,A,G,A,C,C,C,C,C,C,E,E,C,A,C,C,A,I,E,A,C,C,A,E,E,c,A,E,A,C,K,A,M,E,O,G,C,C,C,C,C,I,C,yB,C,Y,C,E,G,C,A,A,C,E,A,C,A,C,M,C,S,C,C,C,I,C,I,C,C,C,A,E,C,E,C,G,C,E,K,C,C,C,A,I,E,E,G,A,C,C,C,A,G,E,I,U,A,E,Y,G,G,O,E,G,E,Q,sB,C,qB,C,G,E,E,C,C,C,A,C,C,C,K,C,C,C,C,C,G,C,S,C,C,C,I,E,E,G,A,A,C,A,C,C,E,G,W,A,E,C,G,E,K,C,E,O,G,C,C,C,C,C,I,C,0B,C,a,C,E,G,C,A,C,A,E,A,C,A,C,M,C,S,C,C,C,I,C,I,C,C,C,A,A,O,E,G,A,C,C,E,C,C,E,E,E,E,K,C,A,C,C,G,M,A,C,Q,E,C,E,C,G,C,I,E,E,E,E,A,G,C,C,C,E,K,E,C,E,C,G,C,I,E,E,C,E,C,E,C,C,E,E,A,E,C,C,C,C,A,G,C,C,I,C,C,C,E,C,c,M,C,E,E,c,A,G,E,G,2B,C,K,C,E,C,A,A,C,C,I,C,U,C,C,C,C,O,G,C,C,A,E,G,C,C,C,A,A,E,gB,C,C,C,C,C,I,S,C,E,I,I,A,C,E,K,A,C,e,A,A,O,C,C,G,A,A,a,C,C,C,C,C,C,C,C,C,C,C,C,C,K,C,E,G,O,C,E,E,C,G,C,C,C,C,c,C,I,C,E,C,K,A,C,C,C,C,C,A,E,K,C,C,M,C,E,E,G,A,E,C,C,A,C,E,E,gB,A,E,I,C,C,Q,C,M,G,G,M,C,C,C,G,G,G,M,C,E,K,E,C,S,C,C,C,E,a,E,E,C,C,A,C,A,A,I,Q,E,C,M,C,E,E,E,A,E,I,C,M,C,S,C,C,C,S,C,C,C,E,C,A,C,A,A,M,C,C,C,C,G,I,E,A,G,G,A,G,M,C,C,A,M,E,C,E,I,G,I,C,S,C,C,I,C,U,C,I,C,I,C,I,C,Q,C,I,C,Q,C,e,C,A,Y,C,C,K,C,e,C,I,C,e,C,C,I,E,O,A,C,A,I,C,O,C,G,C,I,C,C,A,I,C,G,C,I,C,G,C,A,C,M,E,C,G,C,I,C,M,C,G,C,A,C,E,A,C,G,C,K,C,C,C,M,C,K,C,C,C,C,G,C,I,C,O,C,G,C,A,C,E,A,C,G,C,K,C,C,C,M,C,K,C,A,C,A,A,C,C,E,E,E,C,A,C,K,A,M,G,E,I,E,I,A,C,U,C,C,A,E,I,A,C,I,C,I,C,E,E,I,A,C,C,K,C,C,C,A,S,E,C,I,E,U,E,C,I,C,e,E,E,I,A,C,I,C,e,C,C,A,I,C,O,E,I,C,O,C,M,E,C,E,I,A,C,S,C,C,A,E,I,A,C,E,E,I,A,C,C,M,C,C,C,C,I,E,A,I,C,G,E,E,I,A,C,C,C,E,I,C,G,C,Q,E,C,C,C,C,C,E,I,A,C,G,C,A,C,A,A,M,C,W,C,C,C,C,C,C,O,A,I,E,E,A,E,E,A,I,C,C,C,C,A,G,A,C,C,A,C,A,C,G,C,A,C,E,A,C,C,I,C,C,C,A,C,C,A,E,C,I,C,C,A,Q,A,C,A,A,M,C,I,C,C,C,C,G,E,U,C,G,A,A,C,E,I,E,C,C,C,Q,E,A,O,E,C,C,C,C,O,E,I,C,E,C,E,C,A,A,C,C,C,G,E,C,C,C,C,E,c,A,G,E,G,wB,C,K,C,G,A,C,C,G,G,G,U,E,C,I,E,E,A,A,S,C,C,G,A,C,C,A,E,E,C,A,C,C,A,E,G,A,C,A,C,A,C,C,C,A,E,A,E,C,C,C,A,G,K,C,C,C,C,C,G,C,S,C,E,A,G,E,E,A,C,C,A,I,E,C,A,C,G,A,C,C,G,E,E,G,A,C,C,E,C,C,E,E,E,A,A,E,E,E,C,A,A,C,A,A,C,A,E,E,E,C,U,I,C,A,O,I,E,A,I,E,S,A,C,A,A,G,M,E,O,E,C,O,C,C,E,M,C,A,C,E,C,E,K,E,C,E,S,C,A,G,M,E,E,K,E,C,M,C,C,E,C,M,E,C,E,Y,C,A,C,E,S,E,E,K,E,C,M,C,C,E,C,M,E,C,E,Y,C,A,C,C,I,E,E,E,C,C,E,C,E,E,C,A,K,C,A,C,C,C,C,I,C,G,C,E,I,C,C,A,C,A,C,C,E,C,M,C,A,C,C,C,M,C,G,C,E,I,C,C,A,C,A,C,C,A,G,C,C,C,E,G,C,E,C,E,C,A,C,G,C,A,C,A,A,M,C,U,C,C,C,C,O,G,C,C,A,E,G,C,C,C,A,A,E,gB,C,C,C,C,C,I,S,C,E,E,S,C,C,C,C,C,C,C,C,K,C,E,G,K,C,E,E,C,G,C,C,C,C,c,C,I,C,E,C,K,A,C,C,C,C,A,C,A,A,M,E,C,M,A,G,E,C,O,C,A,C,A,A,M,C,I,C,C,C,C,G,A,Q,E,O,E,C,C,C,C,O,E,I,C,E,C,E,C,A,A,C,A,C,I,E,C,C,C,C,E,c,A,G,E,G,sB,C,K,C,G,A,C,C,G,G,G,U,E,C,I,E,E,A,A,Q,C,A,G,A,C,C,A,E,E,C,A,C,C,K,C,C,G,A,C,C,E,C,C,E,E,E,A,C,A,G,C,C,A,E,I,E,E,E,C,C,E,C,E,C,A,K,C,A,C,C,C,K,C,G,C,E,I,C,C,A,C,A,C,C,A,C,A,A,M,C,U,C,C,C,C,O,G,C,C,A,E,G,C,C,C,A,A,E,c,C,E,C,C,W,kB,O,c,C,E,a,8B,I,E,E,C,C,K,E,E,E,C,C,Q,E,E,C,C,A,O,C,E,E,C,C,K,G,E,E,C,C,O,A,E,E,C,C,K,G,E,E,C,C,Q,E,C,C,C,C,I,I,E,E,C,C,M,E,E,E,C,C,M,E,E,E,C,C,K,G,E,E,C,C,E,M,E,E,C,C,O,C,E,E,C,C,K,E,E,I,G,C,C,C,A,A,G,C,E,E,E,W,C,C,A,E,G,C,E,E,E,U,C,C,A,E,G,C,G,C,E,O,C,C,A,E,G,C,G,C,E,a,C,C,A,E,G,C,G,C,E,e,C,C,A,E,G,C,G,C,E,e,C,C,A,E,G,C,G,C,E,c,C,C,A,E,G,C,G,C,E,gB,C,C,A,E,G,C,G,C,E,Y,C,C,A,E,G,C,G,C,E,0B,C,C,A,I,E,I,M,C,C,gB,C,C,A,E,I,M,C,E,iB,C,C,A,E,I,C,A,E,G,C,A,C,M,I,C,C,A,C,C,C,G,E,G,I,E,C,C,M,I,E,U,C,I,C,C,C,C,C,E,G,U,C,C,E,G,Q,C,E,G,C,C,C,A,G,E,G,I,E,C,C,M,I,E,U,C,E,G,O,C,G,C,A,C,E,A,C,G,C,C,C,C,C,C,C,C,C,E,G,C,C,C,A,O,E,G,K,E,A,I,S,C,O,I,E,Y,C,E,G,C,C,A,C,I,M,C,O,I,E,Y,C,E,G,C,C,A,C,I,Q,C,O,I,E,W,C,E,G,C,C,A,C,I,O,C,O,I,E,U,C,E,G,C,C,A,C,I,E,C,O,I,E,S,C,E,G,C,C,C,A,A,I,E,E,C,E,C,C,K,C,G,G,E,C,E,E,E,A,C,C,A,M,C,C,C,C,C,E,K,C,C,A,M,C,E,E,c,A,E,C,G,G,C,E,C,E,E,E,C,C,A,C,C,C,U,C,C,C,C,C,C,a,C,O,C,G,E,C,C,A,E,W,C,E,C,C,A,K,C,E,C,C,C,C,C,E,G,C,C,C,A,A,G,C,C,E,C,C,C,C,C,K,C,G,C,I,E,E,E,C,C,E,C,C,C,C,C,C,C,A,M,C,E,E,c,A,E,C,G,G,C,E,C,C,C,sB,C,O,C,G,E,C,C,A,E,e,C,E,E,A,G,C,C,C,A,A,C,E,E,c,A,G,E,G,W,C,M,C,E,G,C,C,A,C,A,A,e,C,C,C,C,I,E,E,E,C,A,C,A,G,C,A,E,C,C,C,C,C,C,E,S,C,I,C,I,C,A,C,C,C,I,A,I,C,C,U,C,E,G,C,A,C,A,Y,E,A,C,A,A,M,C,C,C,C,C,C,C,E,E,mB,A,E,E,I,E,C,E,G,G,C,8B,C,C,A,I,E,E,E,C,A,C,A,G,C,A,E,C,C,C,A,E,C,E,S,C,I,C,I,C,A,C,C,A,C,E,C,E,U,C,E,G,C,A,C,A,C,C,I,A,E,M,C,C,C,K,E,G,G,C,E,G,C,C,C,C,C,C,A,A,C,A,A,M,C,C,C,C,C,C,C,C,I,E,E,E,C,A,C,A,G,C,A,E,C,C,C,C,C,C,E,S,C,I,C,I,C,A,C,C,C,I,A,I,C,C,U,C,E,G,C,A,C,A,M,C,I,E,M,C,E,E,A,G,A,C,A,M,C,Q,C,C,C,Y,C,C,C,C,C,E,E,c,A,E,Q,E,O,G,E,C,G,C,S,C,G,E,C,iC,C,O,C,G,E,A,C,A,C,A,A,G,C,E,C,Q,O,E,C,O,I,E,A,I,E,I,C,C,A,C,A,C,C,A,C,E,G,C,G,C,mB,C,C,C,C,C,C,C,C,O,A,S,A,C,C,C,C,C,C,C,E,I,C,C,K,G,a,C,A,E,I,A,C,A,E,I,A,C,A,G,E,C,C,C,K,e,C,A,I,E,C,E,A,E,Q,A,E,G,C,C,C,A,E,E,C,E,O,A,E,G,C,A,C,C,A,C,E,G,G,C,G,I,+C,C,A,E,I,Y,C,K,G,E,G,G,C,E,E,C,C,C,E,I,6C,C,K,G,Y,E,C,C,E,E,O,A,E,E,G,E,C,C,C,C,C,C,C,G,C,E,E,E,I,A,C,C,Q,C,C,E,G,E,C,C,C,C,C,C,C,C,A,E,C,G,M,C,e,C,I,C,O,C,I,C,C,E,C,C,A,E,C,C,E,C,C,I,C,S,C,G,C,C,A,A,C,C,I,E,C,E,C,I,6C,C,A,K,G,Y,E,C,C,E,E,O,A,E,E,G,E,C,C,C,C,C,C,C,G,C,I,E,E,I,C,E,M,A,C,C,S,C,C,E,G,E,C,C,C,C,C,C,C,C,C,A,E,C,G,M,C,gB,C,I,C,O,C,I,C,C,E,C,C,A,A,E,C,G,U,E,E,G,C,I,A,C,C,O,C,C,E,E,C,C,A,C,A,G,C,E,C,C,E,C,C,A,A,E,I,E,C,E,C,I,4B,C,A,K,G,I,qB,C,A,A,I,E,C,E,C,E,A,E,C,A,A,C,A,E,E,U,A,E,E,A,E,C,C,A,C,G,C,A,I,C,E,A,I,E,I,C,A,C,A,O,E,A,I,E,C,E,I,C,C,E,C,C,U,A,E,E,A,K,C,C,A,C,E,E,S,A,E,E,K,W,C,C,M,G,I,U,M,Q,E,S,C,C,I,C,O,E,C,A,C,A,C,C,C,E,A,E,A,E,A,M,S,E,C,A,C,A,C,A,E,Q,C,S,wB,O,c,C,E,a,+D,I,E,E,C,C,K,E,E,mB,C,E,O,A,C,E,I,E,C,E,A,C,C,K,M,A,E,G,C,C,C,A,E,G,G,C,E,C,C,K,A,K,C,2C,C,C,A,M,C,E,E,Y,A,E,E,E,C,A,A,C,A,C,E,mB,C,E,O,A,C,E,I,E,C,C,C,C,C,K,G,A,E,E,I,G,C,C,A,G,A,E,E,A,G,M,C,M,A,K,C,qC,C,C,A,G,C,E,C,C,C,E,C,C,M,A,K,C,6C,C,C,A,I,E,E,C,A,C,I,A,C,C,G,C,E,C,C,E,A,I,E,E,C,C,C,E,E,Y,A,E,E,E,G,C,C,C,G,C,E,C,C,C,2B,O,c,C,E,a,mI,I,E,E,C,C,M,E,E,E,C,C,I,I,E,E,C,C,K,E,E,E,C,C,E,M,E,E,C,C,Q,M,C,c,C,E,oB,C,W,G,I,W,O,E,iB,C,G,A,O,c,C,E,S,C,Y,E,I,W,O,E,M,C,G,A,I,E,E,C,C,E,M,E,E,C,C,O,O,E,Q,A,A,I,A,C,C,S,A,C,K,A,C,I,A,A,a,C,C,C,C,C,C,C,I,E,E,A,I,C,C,C,E,K,C,A,E,C,A,C,E,E,gB,A,E,I,C,C,Q,G,I,G,S,G,K,G,I,G,C,A,C,A,C,A,E,c,C,C,O,E,K,G,A,C,I,A,A,I,C,C,C,Q,A,C,Q,A,C,K,A,A,a,C,C,C,C,C,C,C,C,C,I,E,E,A,I,C,C,C,E,K,C,A,E,C,A,C,E,E,gB,A,E,I,C,U,O,C,G,G,I,Q,S,E,Q,A,E,C,A,C,A,C,A,A,E,sB,C,C,O,E,Q,A,C,I,A,A,C,A,I,A,C,S,A,A,Q,C,A,a,C,C,C,C,C,C,C,I,E,E,A,I,C,C,C,E,K,C,A,E,C,A,C,E,E,gB,A,E,I,C,C,Q,Q,I,G,I,Q,E,O,C,G,C,A,C,A,C,A,E,gB,C,C,O,E,I,A,A,C,E,O,C,A,M,E,S,C,C,C,C,M,C,C,C,G,E,A,G,O,A,C,A,C,A,A,Y,C,C,C,C,E,E,gB,A,E,I,C,M,E,E,Q,E,C,C,C,A,C,A,A,C,A,E,O,C,E,I,E,A,C,E,C,M,Q,C,E,C,c,C,G,C,oB,C,G,C,2B,C,G,C,c,C,G,C,4C,C,G,C,sD,C,G,C,2C,C,G,C,c,C,G,C,uB,C,C,A,E,C,U,E,C,C,S,C,e,C,I,C,O,C,M,C,C,Q,C,C,M,C,A,G,C,G,E,E,qB,E,I,C,S,C,G,C,C,A,C,C,C,U,C,C,S,C,gB,C,I,C,O,C,M,C,C,S,C,C,M,C,A,I,A,E,E,A,E,I,gB,C,A,O,G,C,A,E,G,C,G,C,C,C,E,E,M,E,C,E,C,E,C,C,E,A,E,M,G,A,C,C,C,2B,E,E,E,M,C,E,C,C,E,E,E,C,C,A,C,A,C,A,C,A,C,M,E,O,E,A,C,M,A,A,Q,C,C,O,A,G,C,A,G,C,A,G,C,A,G,C,A,A,a,C,C,C,I,E,C,C,C,A,E,A,C,O,E,O,E,I,C,E,C,E,C,G,E,I,A,C,A,C,A,C,A,C,A,C,I,G,C,C,C,E,C,C,A,E,C,I,G,C,C,C,E,C,C,C,C,C,I,G,C,C,C,E,E,E,C,A,A,I,I,C,I,E,C,C,C,C,E,G,C,C,E,Q,C,I,C,C,C,C,C,A,A,M,E,C,E,K,C,G,C,C,2B,E,I,C,S,C,C,C,C,C,C,C,E,G,I,C,C,A,A,C,E,E,gB,A,E,I,C,C,S,C,M,C,M,C,G,C,C,A,A,C,G,E,I,C,A,C,E,E,E,C,C,A,C,C,C,C,C,I,C,W,E,C,A,I,C,S,C,O,C,C,E,K,C,C,E,A,E,I,C,E,E,I,E,A,A,I,a,C,G,I,C,M,C,Y,O,C,G,C,oC,C,C,A,C,E,E,gB,A,E,I,C,C,M,C,C,C,C,C,A,I,E,C,I,U,C,A,C,E,G,E,I,C,M,C,E,I,A,C,A,A,E,E,c,A,E,C,G,E,G,G,C,G,E,M,C,C,gC,C,C,U,E,E,C,C,C,A,G,E,C,E,A,C,A,C,A,A,C,A,E,C,I,C,C,M,C,I,U,C,E,I,A,C,C,C,C,C,A,K,C,I,O,C,E,I,A,C,C,C,C,C,A,K,C,I,O,C,E,I,A,C,C,C,C,C,A,K,C,Q,O,A,A,I,E,E,K,C,A,E,C,A,E,G,C,A,I,E,G,A,C,A,A,E,A,E,C,C,C,A,A,E,C,C,A,C,A,M,E,A,C,E,E,gB,A,E,I,C,C,M,C,E,mB,C,I,C,e,C,C,C,C,A,C,E,E,gB,A,E,I,C,U,Q,E,C,C,C,A,C,A,A,G,G,C,C,C,C,I,E,E,E,G,C,C,E,C,A,C,K,C,A,C,M,A,G,C,A,C,S,C,G,C,A,C,E,A,C,A,C,M,C,G,C,A,E,C,C,C,K,E,C,O,I,C,S,C,A,G,C,C,S,C,G,C,A,C,E,A,C,A,C,M,C,M,C,C,C,A,G,C,A,C,E,A,C,G,C,K,C,C,C,C,C,A,C,A,A,W,E,C,O,E,Q,C,e,E,A,C,A,E,C,C,C,C,C,C,C,E,G,C,E,E,W,A,E,G,A,C,A,I,E,E,C,G,O,E,C,A,I,I,K,G,C,C,C,A,E,C,M,E,C,A,G,I,E,E,I,E,C,C,M,E,M,C,A,I,C,A,A,G,C,C,G,E,C,M,C,G,C,C,C,I,E,E,C,A,G,C,G,C,E,E,A,G,G,C,C,C,C,C,C,A,E,E,G,C,G,C,A,C,C,C,G,G,A,A,E,A,A,I,C,C,E,G,E,A,C,A,C,E,C,E,E,I,C,C,C,C,C,A,C,A,C,E,I,E,C,C,C,C,A,C,G,C,A,E,E,I,E,C,A,A,G,E,E,A,C,I,A,C,O,C,I,K,C,K,E,C,E,I,G,A,G,E,G,C,C,E,E,E,E,A,C,A,C,E,M,A,C,C,C,C,E,C,C,C,E,C,C,I,E,C,C,C,C,A,C,M,C,M,C,A,I,E,C,A,G,I,C,C,A,C,C,C,A,A,C,C,I,E,A,C,C,C,C,C,C,A,A,I,I,C,C,E,M,A,C,C,C,C,E,C,C,C,E,C,C,I,E,C,C,C,C,A,C,M,C,A,I,I,C,C,C,C,C,C,E,I,E,C,C,E,C,A,G,C,C,K,C,O,C,C,C,C,C,C,E,A,G,C,E,E,I,E,C,C,G,W,E,C,C,C,C,C,C,I,C,S,A,E,M,A,C,C,C,C,C,C,A,M,A,A,G,C,C,C,C,C,I,G,C,C,C,C,C,Q,C,C,E,M,A,C,C,C,C,C,C,A,M,A,E,C,A,G,C,G,E,M,A,E,G,E,C,G,E,G,C,C,C,C,C,M,C,M,C,C,I,E,C,C,E,C,G,E,C,C,C,C,C,I,E,G,I,C,C,O,C,I,G,C,M,O,C,C,E,A,E,C,C,I,A,C,C,C,C,C,C,A,A,G,C,E,C,E,M,A,C,O,I,C,A,G,E,M,A,C,C,E,E,C,I,E,E,A,G,C,A,A,C,C,C,A,C,G,C,S,C,C,C,M,E,C,C,C,I,C,I,C,C,A,C,E,E,c,A,G,E,C,E,2C,E,E,C,C,C,G,E,C,G,A,A,C,C,K,C,C,C,C,C,A,A,I,E,I,A,C,C,C,C,C,G,C,E,gB,C,I,C,G,A,C,K,E,C,C,O,A,G,G,C,A,C,A,A,A,e,C,C,C,C,I,E,I,C,C,A,C,C,C,E,C,G,E,G,E,C,C,E,C,E,E,c,A,E,E,M,gB,C,K,C,G,A,C,C,A,I,A,C,A,A,C,U,C,C,C,C,M,C,C,I,C,C,C,C,C,E,C,G,E,E,C,A,E,C,C,O,C,C,C,C,C,C,O,I,C,C,C,C,C,E,C,E,G,C,E,E,C,A,C,C,C,Y,C,C,C,C,I,E,G,E,C,I,C,I,C,C,C,C,C,I,E,C,C,A,E,G,C,C,C,C,C,C,E,C,C,A,C,a,C,C,C,C,C,A,I,I,C,C,C,C,C,C,E,G,G,C,C,E,C,C,I,E,C,C,A,C,C,C,A,E,I,C,C,A,C,C,C,G,C,G,C,A,C,A,C,A,A,A,C,E,C,C,C,C,C,C,C,E,G,C,E,E,W,A,E,G,A,C,A,I,E,E,C,K,K,E,C,A,I,I,K,G,C,C,C,C,C,C,M,E,C,A,G,I,E,I,E,G,C,C,M,E,M,C,A,I,C,A,A,G,C,C,G,E,C,M,C,G,C,C,C,I,E,E,C,A,G,C,G,C,E,E,A,G,G,C,C,C,C,C,C,A,E,E,G,C,G,C,A,C,C,C,G,G,A,A,E,A,A,I,C,C,E,G,E,A,C,A,C,E,C,I,C,C,E,M,A,C,C,C,C,E,C,C,C,E,C,A,C,C,C,C,C,M,C,M,C,E,I,E,E,A,E,M,A,C,C,C,C,C,C,A,I,I,C,C,E,M,A,C,C,C,C,E,C,C,C,E,C,C,I,E,C,C,C,C,A,C,M,C,A,I,I,C,C,C,C,C,C,E,I,E,C,C,E,C,A,G,C,C,K,C,O,C,C,C,C,C,C,E,A,C,C,C,C,C,I,G,C,C,C,C,C,Q,C,C,E,M,A,C,C,C,C,C,C,A,M,A,C,C,A,G,C,E,C,E,M,A,C,O,I,C,A,G,E,M,A,C,C,E,E,C,I,E,E,A,G,C,A,A,C,C,C,A,C,G,C,S,C,C,C,M,E,C,C,C,I,C,I,C,C,A,C,E,E,c,A,G,E,C,E,wC,E,E,C,C,C,G,E,C,G,A,A,C,C,K,C,C,C,C,C,A,A,I,E,I,A,C,C,C,C,C,G,C,E,a,C,I,C,G,A,C,K,E,C,C,O,A,G,G,C,A,C,A,A,A,Y,C,C,C,C,I,E,I,C,C,A,C,C,C,E,C,G,E,G,E,C,C,E,G,E,c,A,E,E,M,a,C,K,C,G,A,C,C,A,I,A,C,A,A,C,O,C,C,C,C,M,C,C,I,C,C,C,C,C,E,C,G,E,E,C,A,E,C,C,I,C,C,C,C,C,C,O,I,C,C,C,C,C,E,C,E,G,C,E,E,C,A,C,C,C,S,C,C,C,C,I,E,G,E,C,I,C,I,C,C,C,C,C,I,E,C,C,A,E,G,C,C,C,C,C,C,E,C,C,A,C,a,C,C,C,C,C,A,I,I,C,C,C,C,C,C,E,G,G,C,C,E,C,C,I,E,C,C,A,C,C,C,A,E,I,C,C,A,C,C,C,G,C,G,C,A,C,A,C,A,A,A,C,A,Q,C,C,C,C,C,C,G,C,E,E,W,A,E,G,A,C,A,I,E,E,C,G,O,E,C,A,G,C,C,E,C,C,I,E,E,a,C,I,C,C,C,E,C,K,I,C,C,A,I,I,K,G,C,C,C,A,E,C,M,E,C,A,G,I,E,E,I,E,C,C,M,E,M,C,A,I,C,A,A,G,C,C,G,E,C,M,C,G,C,C,C,I,E,E,C,A,G,C,G,C,E,E,A,G,G,C,C,C,C,C,C,A,E,E,G,C,G,C,A,C,C,C,G,G,A,A,E,A,A,I,C,C,E,G,C,C,C,A,C,A,E,M,A,O,A,O,E,C,E,C,C,a,C,I,C,qB,C,C,A,A,G,I,E,G,E,a,C,I,C,sB,C,C,A,I,C,A,G,E,M,A,C,C,C,C,I,E,E,G,C,A,A,C,C,C,A,C,G,C,S,C,C,C,M,E,C,C,C,I,C,I,C,C,A,C,E,E,c,A,G,E,C,E,gC,E,E,C,C,C,G,G,C,G,A,A,C,C,K,C,C,C,C,C,A,A,G,A,G,Y,E,E,E,C,C,a,C,I,C,G,A,C,K,E,C,C,A,O,E,a,C,I,C,qB,C,C,A,G,A,G,a,E,G,O,E,a,C,I,C,sB,C,C,A,I,E,I,A,C,C,C,C,C,G,C,G,C,C,K,A,G,G,C,A,C,A,A,A,Y,C,C,C,C,I,E,G,E,C,I,C,I,C,C,C,C,C,I,E,C,C,A,E,G,C,C,C,C,C,C,E,C,C,A,C,a,C,C,C,C,C,A,I,I,C,C,C,C,C,C,E,G,G,C,C,E,C,C,I,E,C,C,A,C,C,C,A,E,I,C,C,A,C,C,C,G,C,G,C,A,C,A,C,A,A,A,C,A,a,C,C,C,C,C,C,O,I,C,C,A,E,C,M,C,E,E,C,A,C,A,C,C,U,C,C,C,C,C,C,O,I,C,C,C,C,C,M,C,E,E,C,A,C,E,C,C,O,C,C,C,C,O,I,C,a,C,I,C,M,C,M,C,G,E,C,A,A,C,A,A,iB,C,C,C,C,C,C,G,Q,E,O,E,C,I,C,A,C,A,I,C,Q,C,G,G,E,A,C,C,Y,A,E,C,C,e,C,U,C,G,E,C,C,A,A,C,C,C,C,E,G,E,c,A,E,C,E,E,S,A,E,E,C,C,A,C,C,G,E,M,E,C,C,oC,E,E,I,C,C,A,C,C,M,C,G,C,C,C,C,C,a,C,E,M,A,C,G,E,S,A,E,E,C,C,A,C,A,C,A,A,iB,C,C,C,C,C,C,G,Q,E,O,E,C,I,C,A,C,A,I,C,Q,C,G,C,E,E,A,C,C,Y,A,E,C,C,e,C,U,C,G,E,C,C,A,A,C,C,C,C,E,C,E,E,M,A,E,C,E,M,E,C,I,C,a,C,E,M,A,C,G,E,C,A,C,C,A,C,A,A,kB,C,C,C,C,C,C,G,A,Q,S,E,C,I,C,A,C,A,I,C,W,C,G,C,E,E,A,C,C,Y,A,E,C,C,kB,C,U,C,G,E,C,C,A,A,C,C,C,C,E,G,E,c,A,E,C,E,E,S,A,E,E,C,C,A,C,C,G,E,M,E,C,C,uC,E,E,I,C,C,A,C,C,M,C,G,C,C,C,C,C,a,C,E,M,A,C,C,E,E,S,A,E,E,C,C,A,C,A,C,A,A,kB,C,C,C,C,C,C,G,Q,E,O,E,C,I,C,A,C,A,I,C,W,C,G,C,E,E,A,C,C,Y,A,E,C,C,kB,C,U,C,G,E,C,C,A,A,C,C,C,C,E,C,E,E,M,A,E,C,E,M,E,C,I,C,a,C,E,M,A,C,G,E,C,A,C,C,A,C,A,A,oB,C,C,C,C,C,C,G,Q,E,O,E,C,I,C,A,C,A,I,C,W,C,G,C,E,E,A,C,C,Y,A,E,C,C,kB,C,U,C,G,E,C,C,A,A,C,C,C,C,A,E,K,2B,C,A,E,C,E,A,E,Y,A,E,G,C,C,C,A,E,G,G,C,E,C,C,C,C,C,E,C,O,I,C,C,C,C,C,M,C,E,M,C,C,G,A,E,C,C,E,E,C,E,A,K,yB,C,A,A,C,E,E,M,A,G,E,E,C,I,K,C,C,K,C,C,E,E,O,A,E,G,E,C,C,C,C,M,C,E,I,C,C,Q,C,E,M,A,E,C,C,C,A,C,A,A,S,C,C,C,C,C,C,I,E,C,C,C,E,Q,A,E,E,G,G,C,C,A,E,E,C,O,C,uB,C,M,C,E,A,G,C,C,C,A,E,G,I,C,U,C,A,Y,C,8B,C,C,C,I,E,C,E,E,C,M,A,E,E,E,G,C,C,C,C,C,C,C,A,E,A,I,C,Q,C,G,G,E,A,A,C,C,A,C,C,I,E,E,E,C,C,C,C,C,M,C,E,A,M,C,E,E,G,C,C,C,C,C,A,E,G,G,C,C,I,C,E,A,I,C,S,C,E,A,M,E,C,I,G,C,A,E,G,G,C,E,G,G,C,S,C,A,E,G,I,C,C,oB,E,E,G,G,C,C,C,A,A,M,C,C,C,E,G,I,C,C,kD,C,C,A,C,A,I,E,I,A,C,gB,C,E,C,A,C,M,I,E,A,E,C,O,C,C,M,C,E,I,A,C,S,C,E,I,K,C,I,C,E,I,A,E,C,A,C,C,A,G,C,gB,C,C,C,C,C,C,G,Q,E,O,E,C,I,C,A,C,A,I,C,W,C,G,C,E,E,A,C,C,Y,A,E,C,C,kB,C,U,C,G,E,C,C,A,A,C,C,C,C,E,C,E,E,O,A,E,I,C,C,C,C,C,M,C,E,M,C,C,G,E,C,A,C,A,C,A,A,kB,C,C,C,C,C,C,G,Q,E,O,E,C,I,C,A,C,A,I,C,Q,C,G,C,E,E,A,C,C,Y,A,E,C,C,e,C,e,C,G,E,C,C,A,A,C,A,C,C,A,C,C,M,A,E,E,I,E,E,E,M,A,C,M,C,C,uB,E,E,M,A,E,C,C,C,qB,C,C,K,C,E,I,E,C,a,C,E,M,A,C,M,C,C,C,A,I,E,E,A,A,C,C,C,K,I,E,A,E,I,A,C,E,M,G,C,C,A,I,E,C,E,G,C,A,C,C,C,E,G,E,C,E,G,C,C,C,E,E,E,A,E,G,E,C,C,G,E,C,E,G,C,C,C,E,E,S,A,E,C,E,E,O,A,E,K,A,C,C,C,G,G,E,G,C,E,S,E,A,O,E,E,C,C,A,C,E,C,C,C,C,A,C,K,C,A,C,C,G,C,C,K,C,Q,C,C,C,C,C,E,A,E,O,A,E,G,E,A,C,C,C,A,C,C,K,C,Q,C,C,C,C,C,E,A,E,K,O,A,E,E,E,C,A,C,A,S,E,C,E,G,C,E,I,C,C,C,C,C,M,C,C,S,C,C,C,E,C,C,A,C,A,E,E,Y,A,E,C,E,E,O,A,E,G,E,A,C,A,C,C,I,E,I,G,C,C,E,G,E,A,E,E,A,E,E,C,K,A,C,E,C,A,E,C,C,E,G,I,C,W,G,E,c,A,E,I,E,E,G,iD,C,W,C,E,G,C,C,A,E,G,C,A,C,C,C,E,E,C,G,A,C,I,C,C,A,O,G,E,G,K,E,O,E,C,E,G,K,C,C,E,E,c,A,G,E,G,4C,C,W,C,E,G,C,C,A,G,E,C,C,C,C,O,C,G,E,A,C,E,C,A,C,E,G,A,C,A,G,C,C,A,E,A,G,E,A,C,C,A,A,C,C,E,A,C,E,E,G,A,C,C,A,C,A,A,C,A,C,A,I,E,E,I,C,E,C,C,E,I,E,C,C,C,E,E,G,C,C,C,A,O,C,C,A,I,C,S,C,C,C,C,C,C,G,Q,E,O,E,C,I,C,A,C,A,I,C,Q,C,G,C,E,E,A,C,C,Y,A,E,C,C,e,C,e,C,G,E,C,C,A,A,C,C,C,C,A,E,E,C,A,C,C,E,C,A,E,E,A,C,A,K,E,A,E,M,G,E,A,E,I,A,C,E,M,G,C,C,A,C,E,E,c,A,E,E,I,E,G,E,M,A,C,M,C,iC,C,Q,C,G,E,C,C,C,G,A,C,O,C,C,E,G,E,A,E,E,A,E,C,C,C,C,C,A,E,C,E,G,I,C,C,E,Q,E,C,E,G,C,C,E,I,A,C,C,E,E,E,A,E,K,C,C,C,C,G,A,K,E,E,G,I,C,E,I,A,C,C,E,E,S,A,E,K,C,C,C,C,G,O,G,E,G,K,E,O,E,C,E,G,K,C,M,A,K,C,iB,C,C,K,E,I,A,C,I,C,C,C,C,C,M,C,C,E,G,C,C,C,C,E,C,C,C,A,K,E,I,C,E,C,E,A,C,C,E,C,E,C,A,C,C,A,A,C,A,C,G,C,I,C,C,C,C,C,M,C,E,G,I,E,C,A,C,C,A,C,A,A,G,W,C,C,C,C,C,C,C,C,G,A,Q,S,E,C,I,C,A,C,A,I,C,Q,C,G,C,E,E,A,C,C,Y,A,E,C,C,e,C,e,C,G,E,C,C,A,A,C,C,C,A,C,G,E,G,C,E,A,M,G,C,C,I,E,E,M,A,G,C,A,C,E,E,c,A,E,C,E,E,W,A,E,C,C,C,C,C,E,C,E,C,C,C,C,C,W,E,G,E,Q,iB,C,W,C,C,C,C,C,C,C,A,E,E,E,E,C,C,C,C,C,A,A,I,E,E,C,A,E,A,E,C,A,E,E,C,A,A,E,A,M,A,C,O,C,C,E,G,E,A,E,A,E,C,I,C,C,O,G,E,G,C,E,O,G,E,G,C,E,O,G,E,G,K,E,O,E,C,E,G,K,E,E,I,C,A,E,S,C,I,C,C,I,C,S,C,I,C,E,G,C,C,C,C,C,A,E,I,C,C,I,C,A,C,C,I,C,A,G,E,A,C,C,E,C,C,K,A,C,C,A,I,C,G,A,E,A,C,C,E,C,C,G,C,C,A,C,A,A,C,G,E,I,C,C,A,E,G,C,A,C,C,C,C,C,M,C,E,C,E,E,A,M,A,E,I,E,C,C,A,C,A,A,C,C,I,C,C,A,E,C,K,C,C,E,G,C,E,C,C,A,A,C,C,C,A,C,C,E,A,C,A,E,C,C,E,C,C,A,O,A,C,C,M,A,C,O,C,C,E,G,E,A,E,E,A,E,G,C,C,A,G,E,G,I,C,C,E,I,E,A,E,E,G,C,E,G,C,C,A,C,K,G,C,C,E,C,C,C,A,G,C,E,C,C,G,C,C,C,K,C,E,A,C,E,C,C,C,G,C,A,A,M,C,C,C,A,E,A,E,C,E,C,C,G,C,E,C,C,C,G,C,A,A,M,E,C,C,C,A,C,C,A,C,C,C,C,E,A,C,G,E,A,C,C,A,E,C,E,G,C,E,I,C,A,C,A,C,C,A,E,M,C,S,C,E,E,C,A,C,A,C,C,a,C,C,C,C,I,E,C,C,C,E,Q,A,E,E,A,I,C,S,C,C,A,E,C,E,A,E,S,A,E,I,C,C,A,E,A,K,C,E,A,K,C,A,C,A,C,U,C,C,A,E,I,C,C,U,C,C,E,E,O,A,E,E,E,G,C,C,C,C,C,C,C,C,A,G,C,E,M,C,C,G,C,A,I,E,E,E,C,C,C,C,C,M,C,E,M,A,C,E,E,G,C,C,C,C,C,A,O,I,E,E,E,I,E,E,C,E,E,A,C,A,E,A,C,C,W,C,C,C,C,M,A,K,C,O,C,A,C,A,A,Q,C,C,C,C,I,E,I,C,C,O,C,E,C,K,C,C,C,C,C,M,A,C,G,E,G,G,G,C,C,G,C,A,I,E,E,E,I,E,E,C,C,I,C,c,C,E,E,C,G,A,C,E,C,K,C,C,A,C,A,A,U,C,C,C,C,I,E,C,E,E,A,O,A,E,G,C,C,A,C,G,C,C,O,C,C,E,E,S,A,E,E,C,C,C,C,C,A,C,A,G,C,E,M,C,C,G,C,A,I,E,E,E,C,C,C,C,C,M,C,E,M,A,C,C,E,E,S,A,E,E,C,C,C,C,A,C,M,I,E,E,E,I,E,E,C,C,C,C,A,C,C,C,G,C,I,C,C,C,Q,A,K,Q,E,K,C,A,C,C,C,M,C,E,A,O,E,G,C,A,C,K,C,G,E,C,C,C,K,E,A,O,E,G,O,C,A,E,G,O,E,C,A,C,S,E,A,O,E,G,G,C,A,E,G,G,C,M,C,C,A,C,C,C,C,A,C,C,A,C,Q,C,U,uB,O,c,C,E,a,sV,I,E,E,C,C,E,M,O,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,I,E,E,C,C,Q,O,c,C,E,sB,C,Y,E,I,W,O,E,mB,C,G,A,O,c,C,E,sB,C,Y,E,I,W,O,E,mB,C,G,A,I,E,E,C,C,E,M,O,c,C,E,sB,C,W,G,I,W,O,E,mB,C,G,A,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,O,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,O,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,O,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,I,E,E,C,C,E,M,O,c,C,E,oB,C,W,G,I,W,O,E,iB,C,G,A,O,c,C,E,U,C,Y,E,I,W,O,E,O,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,O,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,yB,C,Y,E,I,W,O,E,sB,C,G,A,O,c,C,E,S,C,Y,E,I,W,O,E,M,C,G,A,I,E,E,C,C,Q,O,c,C,E,Q,C,Y,E,I,W,O,E,K,C,G,wK,I,E,E,C,C,K,E,E,E,C,C,Q,E,C,C,I,C,C,C,C,A,S,E,C,K,I,A,I,E,A,E,G,C,C,A,C,C,A,G,C,K,E,C,G,M,A,I,E,A,E,G,C,C,A,E,G,K,E,A,C,A,A,E,O,C,E,I,A,I,G,C,A,C,Y,A,A,oB,C,A,a,C,C,C,C,C,C,C,C,E,E,gB,A,E,I,C,C,Q,C,E,G,G,E,C,M,C,E,G,G,M,C,U,C,E,G,C,A,C,A,A,C,K,E,C,G,G,C,M,C,c,C,sB,C,C,C,I,C,A,M,C,K,C,S,C,Q,C,E,G,C,I,C,M,C,E,G,C,Q,C,U,C,E,G,A,C,A,A,C,C,E,W,C,A,C,C,O,A,C,E,E,E,E,C,C,A,C,A,C,G,I,G,E,E,A,C,C,E,C,E,E,C,A,C,A,C,C,C,A,C,C,E,C,G,E,A,G,G,C,C,E,C,G,A,C,C,E,C,G,E,C,E,I,A,C,C,E,E,O,A,E,E,C,I,C,C,A,oF,C,K,C,G,C,C,C,G,E,G,A,C,G,E,A,C,C,E,C,C,E,C,E,C,A,G,E,S,A,E,C,C,E,C,A,C,Q,E,E,C,C,C,C,A,I,I,G,C,G,S,C,A,C,I,C,G,C,C,A,G,E,G,A,C,G,E,A,C,C,E,C,C,E,C,E,C,A,C,E,E,S,A,E,C,C,E,C,A,C,Q,E,E,C,A,C,C,C,O,E,C,S,E,C,E,I,M,C,C,E,E,a,A,E,E,C,U,C,C,A,E,C,gB,E,C,E,I,a,C,E,C,gB,C,K,E,C,C,A,U,G,G,C,C,C,I,I,C,E,C,O,A,C,C,gB,G,G,C,C,C,I,U,C,C,C,E,C,a,A,C,C,Y,G,G,C,C,C,I,M,C,E,C,S,A,C,C,qB,G,G,A,E,C,kB,E,C,E,I,e,C,E,C,kB,C,K,E,C,C,A,K,G,G,C,C,C,G,C,A,E,C,E,A,C,C,O,G,G,A,E,C,I,E,C,E,I,C,C,E,C,I,C,G,C,A,C,E,A,A,C,C,C,E,W,A,E,C,C,C,C,A,E,E,O,A,E,C,C,C,A,M,C,M,C,C,C,C,C,C,C,A,C,C,A,C,C,A,I,C,E,E,G,K,A,C,M,A,A,I,C,C,S,A,C,U,A,C,qB,A,C,K,A,C,U,A,C,Q,A,C,O,A,C,S,A,C,Y,A,C,W,A,C,a,A,C,K,A,C,U,A,C,S,A,C,a,A,G,C,A,A,a,C,C,C,C,C,I,C,C,C,C,C,E,G,S,C,G,C,A,E,C,A,C,E,K,E,A,O,E,A,C,G,E,E,A,G,E,C,A,C,C,C,A,C,C,I,Y,A,E,I,C,U,E,I,C,C,C,E,G,C,A,C,C,M,C,E,G,G,C,S,C,E,G,M,C,U,C,E,G,O,C,qB,C,E,G,kB,C,K,C,E,G,E,C,U,C,E,G,O,C,Q,C,E,G,K,C,O,C,E,G,I,C,W,C,E,G,Q,C,a,C,E,G,U,C,K,C,E,G,E,C,U,C,E,E,G,C,M,C,C,S,C,E,G,M,C,a,C,E,E,G,C,S,C,C,S,C,E,G,M,C,Y,C,E,G,S,C,C,A,C,A,A,I,Y,E,C,O,I,C,C,C,C,C,G,C,A,E,C,A,C,E,K,E,A,O,E,A,C,C,A,C,C,A,I,C,A,C,A,I,sB,E,C,I,E,C,G,C,C,C,C,C,K,E,C,O,A,C,E,C,E,C,K,C,E,C,C,C,E,E,M,A,E,A,Q,S,C,C,C,C,C,A,qD,C,uB,C,C,S,C,wB,C,C,C,A,E,C,A,A,C,K,E,C,G,e,C,Y,C,W,C,U,C,S,C,M,C,O,C,Y,C,O,C,Q,C,Y,C,uB,C,W,C,c,C,W,C,c,C,C,C,I,C,A,M,C,K,C,O,C,a,C,E,G,C,S,A,C,A,E,I,M,C,E,E,O,C,C,E,G,C,I,C,C,C,E,G,C,G,C,M,C,E,I,A,C,W,C,C,a,C,E,I,A,C,a,C,M,I,I,E,G,O,G,K,G,M,G,U,a,S,e,Y,S,A,M,Y,G,E,A,C,A,A,C,M,C,C,O,C,E,C,I,E,C,C,A,C,C,C,G,C,Y,C,A,M,C,I,C,G,C,A,C,C,G,C,C,M,C,C,A,K,C,C,C,I,C,A,E,E,E,E,C,A,C,C,I,M,E,I,E,C,A,C,C,A,A,C,A,A,A,I,M,E,C,O,I,C,C,C,C,C,M,A,C,A,A,I,I,E,Q,A,I,E,A,I,C,S,C,I,C,A,I,I,C,I,A,C,C,E,C,S,C,C,A,K,C,c,C,C,C,C,I,E,A,G,A,Q,C,C,A,A,O,E,E,A,I,C,C,C,A,C,A,C,E,C,I,C,G,C,E,E,A,S,E,E,C,A,I,I,C,I,I,C,C,C,C,C,A,G,Q,E,O,C,C,A,C,G,C,G,E,E,E,K,A,E,A,C,C,A,M,A,I,C,G,C,C,I,G,E,E,E,K,A,E,A,C,C,A,M,A,C,A,G,I,E,A,E,A,M,A,K,C,Y,C,C,M,A,A,Q,E,O,E,A,C,K,I,C,Q,C,c,C,E,C,A,C,A,C,A,A,A,C,uB,C,C,C,C,I,E,C,G,C,sB,C,A,G,A,Q,E,O,E,O,C,C,A,C,C,C,A,I,I,A,E,G,E,E,O,E,E,E,C,A,G,A,C,E,E,A,I,G,E,O,E,A,A,C,A,C,C,E,c,A,E,G,E,uB,C,a,C,E,C,A,O,C,C,A,C,A,M,C,C,I,C,I,A,C,A,A,Q,E,C,M,C,C,I,C,a,A,C,A,A,a,E,K,E,G,A,C,I,C,O,E,C,C,K,A,K,C,E,C,C,A,O,E,I,C,A,C,A,M,C,U,E,C,I,C,E,G,C,C,M,C,E,G,G,C,A,C,A,C,A,E,K,C,C,K,E,E,C,O,A,C,e,A,A,S,C,C,W,A,A,O,C,C,O,A,C,I,A,C,M,A,C,K,A,C,gB,A,A,a,C,C,C,C,C,I,C,Q,C,E,I,E,A,C,G,E,C,M,C,E,C,K,C,K,E,C,C,A,C,E,E,gB,A,E,I,C,C,e,C,E,C,c,C,S,C,E,C,Q,C,W,C,E,C,U,C,O,C,E,C,M,C,O,C,E,C,M,C,I,C,E,C,G,Q,E,I,C,C,E,C,I,C,gB,C,E,C,e,C,C,A,C,A,A,M,E,C,G,S,C,W,C,a,C,M,C,O,C,S,C,Q,C,iB,C,kB,C,C,C,I,C,A,M,C,K,C,K,S,O,K,S,K,O,I,A,I,K,K,O,E,M,Y,E,a,G,G,A,C,A,A,K,C,Q,E,C,I,E,G,G,I,C,Q,C,Q,C,I,C,S,C,C,A,M,C,E,E,M,A,E,C,C,E,G,yB,C,e,C,C,C,C,C,A,C,C,A,G,C,C,C,c,E,C,I,E,A,M,I,C,Q,C,c,C,I,C,e,C,C,A,M,C,E,E,M,A,E,C,C,E,A,4B,C,e,C,C,C,C,C,A,C,C,A,A,C,I,C,qB,E,C,I,E,K,C,I,C,Q,C,qB,C,I,C,e,C,C,A,M,C,E,E,M,A,E,C,C,E,K,+B,C,e,C,C,C,C,C,A,C,C,A,K,C,M,E,K,E,C,M,E,I,C,A,C,A,M,C,O,G,C,G,C,C,e,C,E,C,c,C,S,C,E,C,Q,C,W,C,E,C,U,C,O,C,E,C,M,C,I,C,E,C,G,C,M,C,M,C,M,C,E,C,K,C,K,E,C,C,K,C,E,C,I,C,C,A,C,A,C,A,E,G,C,C,G,I,E,Q,A,C,E,A,C,I,A,A,C,e,A,A,I,C,C,K,A,C,S,A,C,W,A,C,S,A,C,O,A,C,W,A,C,iB,A,A,Q,C,C,Y,A,C,I,A,C,M,A,C,I,A,G,C,A,A,a,C,C,C,C,C,I,C,C,A,E,C,M,C,M,C,E,A,I,C,G,C,A,G,A,E,E,A,E,C,C,C,I,G,C,A,C,C,C,G,C,A,C,C,C,E,A,iB,C,E,E,A,I,a,C,A,I,E,A,E,A,Q,G,E,E,A,I,I,A,C,C,C,E,E,gB,A,E,I,C,U,E,E,C,E,A,C,C,C,I,C,E,A,I,C,e,C,E,A,e,C,I,C,E,A,I,C,K,C,E,A,K,C,S,C,E,A,S,C,W,C,E,A,W,C,S,C,E,A,S,C,O,C,E,A,O,C,iB,C,E,A,iB,C,W,C,E,A,W,U,E,M,M,C,E,A,Y,C,I,C,E,A,I,C,M,C,E,A,M,C,I,C,E,A,I,C,C,A,C,A,A,I,I,E,C,O,I,C,C,C,C,A,C,A,A,M,E,C,G,I,C,M,C,C,iB,M,C,C,O,C,W,a,C,C,W,M,C,Q,C,M,C,C,A,C,I,C,A,M,C,K,C,oB,W,S,K,E,S,M,G,iB,C,E,I,A,C,iB,C,M,E,E,M,C,E,I,A,C,Q,C,C,W,C,E,I,A,C,W,C,C,Y,C,E,I,A,C,Y,C,C,O,C,E,I,A,C,O,C,M,I,I,K,E,I,Q,O,E,E,K,K,C,C,A,A,C,A,A,I,M,E,C,O,I,C,I,C,M,A,C,A,A,C,M,C,Q,C,E,C,I,E,C,C,A,C,K,C,I,C,G,C,A,C,C,G,C,C,M,C,C,A,K,C,I,C,I,C,I,C,A,E,E,E,C,C,C,A,C,C,I,M,E,I,E,C,A,C,C,A,A,C,A,A,A,I,G,E,C,O,I,C,O,C,I,C,Q,A,C,A,A,K,C,Q,E,C,I,E,G,G,I,C,Q,C,Q,C,I,C,S,C,C,A,G,I,E,A,E,G,G,A,K,C,M,C,C,A,O,C,C,A,G,C,C,C,c,E,C,I,E,A,M,I,C,Q,C,c,C,I,C,I,C,C,A,G,I,E,A,E,A,M,A,K,C,M,C,C,A,O,C,C,A,A,C,I,C,S,E,C,O,M,I,C,Q,C,oB,C,I,C,I,C,A,C,A,A,C,I,C,a,E,C,O,M,I,C,Q,C,c,E,C,A,I,C,W,C,C,A,C,A,A,Y,E,C,O,E,I,C,A,C,A,A,c,C,C,C,C,I,E,C,E,E,M,A,E,C,G,E,A,G,I,E,C,+C,C,uB,C,C,S,C,uB,C,C,C,A,E,I,C,E,C,C,A,C,C,A,C,iB,C,A,C,O,E,Q,A,C,A,Q,G,A,C,S,A,C,K,A,C,I,A,C,I,A,A,E,C,C,I,A,C,K,A,C,Q,A,A,Q,C,A,oB,C,C,Y,A,C,gB,A,C,I,A,C,K,A,C,O,A,C,S,A,C,U,A,C,mB,A,C,iB,A,G,C,A,A,a,C,C,C,C,C,I,C,Q,C,E,I,C,C,C,S,C,I,C,C,A,E,A,W,C,E,A,W,C,A,C,G,C,A,I,C,S,C,A,E,E,C,C,E,S,C,E,A,S,C,A,C,G,C,A,I,C,I,C,E,A,I,C,A,I,C,K,C,E,A,K,C,A,I,C,I,C,E,A,I,C,A,I,C,I,C,E,A,I,C,A,I,C,E,C,E,A,E,E,I,C,A,I,C,Q,C,E,A,Q,C,A,I,C,K,C,E,A,K,C,A,I,C,I,C,E,A,I,C,A,I,C,K,C,E,A,K,C,A,I,C,Q,C,E,A,Q,C,A,I,C,oB,C,A,E,E,C,C,E,oB,C,E,A,oB,C,A,C,G,C,A,I,C,Y,C,I,C,C,A,E,A,Y,C,E,A,Y,C,A,C,G,C,A,I,C,gB,C,I,C,C,A,E,A,gB,C,E,A,gB,C,A,C,G,C,A,I,C,O,C,E,A,O,C,A,I,C,S,C,E,A,S,C,A,I,C,U,C,I,C,C,A,E,A,U,C,E,A,U,C,A,C,G,C,A,I,C,mB,C,I,C,C,A,E,A,mB,C,E,A,mB,C,A,C,G,C,A,I,C,iB,C,I,C,C,A,E,A,iB,C,E,A,iB,C,A,C,G,C,A,I,C,C,C,C,C,C,C,A,C,A,A,M,E,C,G,a,C,W,C,O,C,M,C,M,C,C,I,M,C,O,C,M,C,W,C,C,Y,qB,C,C,C,I,C,A,M,C,K,C,qB,Y,U,I,W,C,S,a,E,O,C,E,I,A,C,E,K,C,M,I,G,E,E,M,C,E,I,A,C,Q,C,C,Q,C,E,I,A,C,Q,C,C,I,G,Y,C,E,I,A,C,Y,C,C,oB,C,E,I,A,C,oB,C,C,gB,C,E,I,A,C,gB,C,O,E,G,M,M,E,M,K,E,E,E,G,C,E,I,A,C,K,C,C,A,C,A,A,K,C,Q,E,C,I,E,I,C,I,O,C,A,G,I,E,E,C,I,E,A,E,I,I,C,c,E,A,C,C,E,C,E,E,A,O,I,A,C,C,A,G,I,E,A,E,O,E,E,C,A,I,E,G,C,C,Q,C,Q,C,G,G,I,C,C,A,A,C,C,G,G,A,K,C,M,C,C,A,O,C,C,A,G,C,C,C,c,E,C,O,I,C,Q,C,c,C,I,C,I,C,A,C,A,A,K,C,a,E,C,G,I,E,I,C,W,C,C,G,I,C,a,C,C,C,M,C,E,E,iB,A,E,C,E,C,I,C,c,E,C,W,C,I,C,Q,C,c,E,C,C,C,O,A,I,E,E,C,I,E,A,E,A,W,C,C,C,A,E,E,A,O,I,C,C,C,A,A,O,A,M,I,C,A,Q,C,c,E,C,A,I,C,W,C,C,A,C,A,A,K,C,I,C,C,C,C,C,C,I,E,I,C,C,A,A,E,C,C,A,C,C,E,C,G,C,A,A,C,A,A,E,C,C,A,C,C,E,A,I,A,C,A,C,C,C,A,C,A,E,C,C,C,A,E,C,A,C,C,C,C,A,A,E,E,A,C,A,C,C,E,C,E,C,A,C,C,E,C,C,O,G,C,C,A,A,G,a,C,O,C,C,C,M,C,E,E,iB,A,E,C,W,C,I,C,Q,C,c,E,C,K,C,I,C,Q,C,mB,C,I,C,I,C,C,C,C,A,G,E,G,C,C,K,C,C,E,E,M,C,A,A,E,C,A,E,O,G,C,C,A,A,I,E,G,G,I,C,c,E,C,A,I,G,E,E,E,A,E,G,Q,C,I,C,C,E,C,G,C,E,E,C,C,C,A,A,C,G,C,A,C,C,C,E,C,E,I,C,C,A,C,C,A,C,C,G,G,C,C,E,E,E,K,G,C,C,A,A,I,E,G,G,I,C,Q,C,Q,C,G,G,C,C,A,C,A,I,E,A,E,G,G,C,G,I,I,C,E,G,A,C,G,A,I,C,I,C,C,M,A,I,I,C,C,C,C,C,C,E,G,G,C,C,E,C,C,I,E,A,M,E,G,W,C,C,C,C,A,G,E,A,I,G,I,C,I,E,E,A,K,G,I,C,K,C,C,G,E,O,G,C,C,A,A,I,E,K,C,I,C,Q,C,qB,C,E,A,I,C,C,A,G,I,E,A,G,E,E,A,K,E,I,C,C,C,A,E,M,C,A,C,G,E,I,M,C,A,E,A,I,G,I,C,I,E,E,A,E,G,I,C,E,E,E,A,K,G,I,C,K,C,C,C,I,M,C,A,I,G,E,A,I,E,E,A,I,G,E,A,E,E,E,A,K,G,I,A,E,A,I,O,C,C,A,C,E,E,M,A,G,E,G,uB,C,sB,C,C,S,C,U,G,G,G,Q,C,E,M,G,E,I,O,C,E,A,sB,C,G,I,C,E,A,A,C,G,C,O,G,C,C,A,C,A,I,A,C,C,A,E,A,A,E,C,C,G,A,E,C,C,A,E,G,C,E,C,A,E,K,C,C,O,E,C,E,E,A,C,K,A,G,E,G,6B,C,gB,C,C,M,C,iB,C,I,C,I,C,M,C,I,C,U,C,I,C,M,C,I,C,W,C,C,E,C,E,E,C,E,E,C,E,I,C,A,I,C,E,C,A,C,O,G,C,A,C,A,C,A,E,K,C,I,C,Q,C,iB,I,C,I,C,I,C,C,A,G,C,E,C,E,M,C,E,G,G,C,C,C,A,C,E,C,A,E,C,G,K,C,E,K,Q,E,C,C,E,M,C,C,C,G,I,C,A,C,C,C,M,I,C,E,C,E,M,A,C,C,C,E,C,A,I,E,I,A,O,C,C,E,K,A,C,E,C,C,C,E,C,A,E,G,A,C,C,A,E,O,C,A,A,C,E,A,C,A,E,C,A,C,A,C,A,G,E,I,C,G,A,E,A,G,C,C,C,C,A,A,C,C,C,C,C,A,E,E,E,G,O,C,G,E,A,I,E,A,C,C,C,A,C,C,S,A,E,8B,C,S,C,C,A,C,A,C,G,E,E,C,C,A,C,G,A,E,A,Y,C,E,C,C,C,A,A,A,C,C,E,E,K,C,E,E,G,A,E,E,E,E,K,Q,E,C,C,E,C,I,C,C,C,C,A,C,C,E,G,C,A,G,C,C,C,A,A,E,C,E,A,G,C,A,A,C,A,C,A,A,C,E,E,I,C,G,A,E,A,I,C,Q,C,G,C,I,C,I,C,E,C,C,C,A,I,C,A,C,C,M,C,E,C,I,C,I,C,G,G,C,C,C,C,C,C,C,A,E,K,I,C,C,E,A,C,M,I,A,M,E,C,E,C,A,C,C,C,A,E,O,A,E,E,G,mB,C,C,C,I,E,A,E,C,A,C,C,C,C,G,A,C,A,A,G,I,C,I,E,E,C,I,C,O,C,E,C,C,A,E,I,C,G,A,C,C,A,A,C,G,C,Q,C,G,C,O,C,E,C,C,C,A,I,C,K,C,C,C,C,I,C,O,C,G,A,C,C,C,A,O,E,C,C,E,C,C,A,I,C,E,E,C,O,I,C,C,A,I,C,S,A,C,A,Q,E,C,O,C,C,C,C,I,C,I,A,C,A,Q,E,C,O,C,C,C,C,I,C,I,A,C,A,Q,E,C,O,C,C,C,C,I,C,I,A,C,A,Q,E,C,O,C,C,C,C,I,C,I,A,C,A,Y,E,C,M,G,E,M,A,E,I,C,O,E,C,uC,C,uB,C,C,S,C,e,C,C,C,A,E,I,C,A,C,A,A,c,C,C,C,C,I,E,C,E,E,M,A,E,I,C,O,E,C,uC,C,uB,C,C,S,C,e,C,C,C,A,C,E,E,M,A,E,C,G,E,A,G,I,E,C,+C,C,uB,C,C,S,C,e,C,C,C,A,E,I,C,E,C,A,E,C,C,kB,A,C,C,C,C,C,E,E,c,A,E,M,C,S,C,I,G,C,C,C,C,G,e,C,Y,C,G,I,E,A,C,C,C,C,E,I,C,I,C,O,C,C,C,A,O,E,C,A,E,C,E,C,C,A,C,A,A,K,C,G,E,C,C,C,E,M,C,M,C,W,U,I,E,M,C,C,A,C,A,A,E,O,E,C,E,M,C,M,C,W,O,I,C,C,A,A,C,A,A,E,mB,C,oB,oN,I,E,E,C,C,Q,E,E,A,C,C,K,C,O,Q,E,E,G,C,S,A,C,Q,A,C,I,A,A,a,C,C,C,C,C,C,C,K,C,E,C,C,C,O,C,C,A,I,E,E,A,G,W,C,E,E,C,G,A,C,E,C,K,C,C,A,C,E,E,gB,A,E,I,C,M,E,E,M,G,S,C,C,C,C,A,C,A,A,C,G,S,E,C,O,I,C,Q,C,I,A,C,A,A,I,c,E,C,O,I,C,Q,C,M,E,A,C,A,C,A,E,Q,C,C,O,C,S,E,G,C,C,I,A,A,a,C,C,C,C,C,K,C,E,C,C,C,O,C,C,A,C,E,E,gB,A,E,I,C,C,K,E,C,C,A,C,A,C,A,E,iB,C,C,O,U,A,E,c,I,G,C,A,A,a,C,C,C,C,C,C,C,K,C,E,A,G,I,C,A,C,A,C,A,C,C,C,C,A,G,C,A,I,E,C,O,K,C,I,C,G,C,A,G,C,C,E,C,E,E,C,G,E,C,M,C,A,C,G,C,C,C,C,C,Q,C,E,C,K,C,C,C,C,C,A,C,G,C,A,G,E,G,C,E,E,G,I,E,E,C,G,A,C,C,C,C,C,G,A,K,C,A,C,C,C,E,K,I,E,E,C,E,A,E,C,C,G,C,C,C,A,A,A,C,A,A,C,A,E,0B,C,C,O,U,E,O,Q,I,G,C,A,A,a,C,C,C,C,C,C,C,K,C,E,A,G,I,C,A,C,A,C,A,C,C,C,C,A,G,C,C,C,I,C,C,C,C,C,C,I,E,K,C,K,C,I,C,E,M,C,C,C,C,A,I,E,A,E,I,C,A,A,I,E,I,C,C,C,C,C,I,C,Q,C,C,C,C,C,A,E,C,C,C,wB,C,C,O,U,E,Q,I,C,E,C,A,A,a,C,C,C,C,C,C,C,C,C,K,C,E,E,G,C,A,E,A,A,C,C,A,gB,A,E,I,C,K,C,C,C,A,A,C,A,A,K,C,Q,E,C,O,M,I,C,G,C,Q,E,A,C,A,A,K,C,c,E,C,O,M,I,C,G,C,c,E,A,C,A,A,K,C,qB,E,C,O,M,I,C,G,C,qB,E,A,C,A,C,A,E,2B,C,E,E,oB,C,E,C,G,Q,E,O,G,E,C,C,C,C,C,C,C,C,C,C,C,E,G,C,E,E,E,E,E,A,A,E,E,E,A,E,I,G,C,I,I,A,C,C,A,C,C,A,M,G,C,c,C,E,I,C,C,E,C,I,C,I,C,G,C,M,C,C,A,C,E,E,gB,A,E,I,C,M,I,O,C,C,C,A,C,A,A,I,A,S,E,C,O,I,C,Q,C,I,A,C,A,A,I,c,E,C,O,I,C,Q,C,M,E,A,C,A,C,gJ,I,E,E,C,C,G,K,E,E,C,C,O,C,E,E,C,C,Q,E,E,A,C,C,K,E,E,E,C,C,C,O,E,E,I,C,C,C,C,A,S,E,C,E,E,K,G,E,Q,C,C,A,O,E,G,C,A,C,A,A,S,E,C,E,M,C,G,E,Q,C,C,A,O,E,G,Q,A,C,A,A,S,E,C,E,K,E,G,E,Q,C,C,A,O,E,G,Q,A,C,A,A,S,E,C,E,E,K,G,A,E,Q,C,C,O,E,G,Y,A,C,A,A,S,E,C,E,G,G,C,E,E,C,E,C,E,G,E,C,E,A,E,E,G,A,C,C,G,K,C,C,M,E,G,K,C,A,A,C,A,M,I,C,A,C,Q,A,A,K,Q,C,C,C,C,C,C,C,G,C,E,E,gB,A,E,I,C,U,C,C,C,C,A,E,E,I,A,C,M,C,E,E,I,C,C,K,A,K,C,oB,C,C,A,I,E,E,E,A,K,C,A,C,a,C,C,A,E,E,G,C,C,C,C,C,A,C,A,A,C,A,A,C,G,C,C,C,C,C,K,Y,I,E,M,I,G,C,G,C,E,M,A,C,G,C,C,E,G,C,A,A,C,E,A,C,C,C,A,C,C,E,C,A,E,E,C,A,E,G,M,C,C,C,E,C,C,C,C,E,E,A,A,C,E,C,C,I,E,G,A,K,C,O,C,G,E,C,E,E,C,G,C,E,G,A,C,A,C,E,A,C,E,E,c,A,E,C,C,K,G,A,C,C,A,C,C,Y,A,E,E,G,A,K,A,A,C,A,C,K,E,M,G,C,kB,C,E,E,C,C,C,C,A,A,A,C,K,C,C,M,E,C,O,I,C,C,A,E,A,C,A,C,A,S,E,C,C,C,I,K,A,I,E,A,E,G,C,C,A,U,E,A,O,C,C,E,C,A,E,E,A,C,C,C,K,E,U,E,A,O,E,G,K,C,E,C,A,E,E,C,K,C,A,I,A,C,A,A,S,E,C,Q,C,A,I,E,A,E,G,C,C,A,E,G,K,E,I,A,C,A,A,K,U,E,C,C,C,E,I,E,A,E,K,C,A,W,C,E,C,U,C,C,A,C,E,E,c,A,E,Q,E,O,E,Q,C,oB,C,W,C,G,A,C,C,E,E,C,E,E,E,S,A,E,G,M,C,A,C,C,A,E,c,A,E,I,E,E,E,E,C,E,C,E,A,C,C,A,O,C,I,C,E,C,C,oB,C,c,C,E,E,C,C,A,G,A,E,c,A,E,I,E,E,I,E,C,A,G,E,A,C,C,A,O,C,M,C,E,C,C,sB,C,gB,C,E,I,C,C,A,C,C,I,E,A,C,E,I,C,C,C,I,A,C,C,C,A,C,A,K,E,C,O,E,C,C,C,C,C,E,E,E,E,E,E,A,K,A,Q,C,C,A,E,E,G,C,C,C,C,C,A,C,A,A,C,A,A,C,M,M,O,C,G,C,E,G,C,A,C,E,G,C,C,C,C,E,A,M,C,C,C,E,C,C,C,C,E,E,C,A,E,A,E,A,C,I,C,W,C,E,G,A,C,C,C,M,E,C,G,C,A,E,E,c,A,E,E,G,A,I,C,A,A,A,C,A,C,A,a,C,E,E,U,C,C,E,I,E,I,E,A,C,G,C,0B,C,C,A,E,I,O,C,A,C,C,O,E,C,E,M,C,E,G,C,C,C,E,C,A,C,A,A,E,E,C,U,E,C,C,C,E,G,C,E,E,E,C,C,C,A,C,E,K,C,O,C,G,C,C,C,E,E,S,C,A,E,G,G,E,W,A,E,E,E,A,C,C,C,M,E,E,C,C,E,E,I,E,G,C,Q,C,G,C,C,C,G,C,E,E,c,A,E,E,M,Y,C,M,C,G,C,C,A,C,K,G,A,C,A,C,A,E,E,E,C,A,C,A,C,E,A,A,E,E,E,A,C,C,I,C,A,K,C,O,C,C,C,C,C,A,C,G,C,G,E,C,C,C,C,G,C,C,A,C,E,G,E,C,E,E,C,A,G,C,C,C,K,G,Q,E,A,O,E,C,E,A,C,C,W,A,E,E,E,C,A,C,C,C,C,E,C,A,C,C,C,E,I,E,G,C,Q,C,G,C,C,C,A,C,C,c,A,E,E,M,Y,C,O,C,G,E,A,C,A,C,C,C,K,G,C,C,M,G,E,M,E,O,A,G,E,C,a,I,E,G,C,M,C,C,O,E,G,W,C,C,A,E,G,A,C,E,E,C,A,C,C,I,E,E,G,W,E,C,A,U,G,E,E,C,A,C,C,C,A,E,G,A,C,I,A,C,C,S,C,C,A,C,E,E,c,A,G,E,G,iB,C,O,C,G,E,C,C,E,U,E,G,C,C,C,C,E,C,C,C,C,A,A,C,E,C,C,E,I,E,A,C,C,O,I,C,A,G,K,C,O,C,C,C,C,C,I,E,G,E,C,I,C,I,G,C,C,C,G,C,A,C,E,A,C,A,C,W,E,C,C,C,M,E,C,C,O,A,C,E,C,E,G,G,C,C,C,C,C,C,C,E,G,C,E,C,A,G,A,E,C,I,C,C,W,E,A,C,C,C,C,A,G,C,A,C,E,A,A,A,C,C,E,E,E,M,C,A,K,C,O,C,C,C,C,C,A,C,I,C,G,C,C,A,C,C,C,I,C,G,C,C,O,C,C,A,C,A,A,G,E,U,E,C,C,C,C,C,G,M,C,C,C,E,G,K,C,A,C,A,E,E,C,C,C,M,E,E,E,C,C,A,E,A,C,C,E,I,A,C,A,A,K,U,E,C,C,C,C,A,C,E,I,E,E,E,E,I,A,C,A,C,A,C,E,E,M,A,E,E,M,wC,C,uB,C,W,C,C,C,C,A,G,E,Q,C,K,C,Q,C,C,C,M,E,E,G,C,C,C,A,A,C,G,M,C,C,C,E,G,E,C,C,C,C,A,A,C,A,C,G,A,C,C,C,C,E,C,A,I,E,C,G,I,C,G,C,C,C,C,I,A,C,A,A,C,A,A,C,C,A,E,A,C,E,C,C,C,C,C,E,E,G,G,C,A,E,A,A,E,G,C,E,E,G,G,G,A,C,Q,C,E,C,K,C,C,C,C,C,A,A,M,E,C,C,A,C,E,E,C,I,E,E,E,A,E,A,E,I,A,C,A,C,A,A,G,C,c,C,E,E,C,G,A,C,E,C,K,C,C,A,C,C,C,A,E,E,A,E,E,A,C,C,A,C,I,C,C,C,E,iB,C,E,E,E,E,A,C,C,C,C,A,C,I,C,C,C,C,A,E,E,C,A,A,C,E,I,C,C,C,E,wB,C,E,E,E,E,C,A,A,C,A,A,C,A,A,E,E,C,A,E,C,A,I,E,C,Q,C,E,C,K,C,G,E,A,E,M,A,E,A,E,I,C,C,C,E,C,E,C,E,C,A,C,A,G,C,A,C,A,C,I,I,C,C,E,C,E,A,E,M,A,C,O,A,I,E,E,E,C,C,C,A,C,C,C,G,O,C,G,C,G,E,E,C,A,C,A,E,A,E,C,A,C,A,A,C,A,E,C,C,A,C,A,C,E,C,E,A,A,C,C,K,C,C,A,C,C,E,E,M,C,C,O,E,C,A,K,U,E,C,C,C,A,C,C,C,C,E,M,E,I,E,A,C,A,K,E,E,E,C,E,C,A,A,C,A,E,C,E,I,E,G,C,A,E,E,C,A,Q,C,M,C,A,O,E,C,Q,C,E,C,Q,C,M,C,C,U,C,M,C,C,E,E,A,I,E,K,C,A,I,C,G,C,C,C,A,E,I,C,C,A,C,C,C,E,C,C,A,C,A,C,C,E,G,C,A,C,C,A,C,G,C,C,I,G,A,A,E,G,C,A,C,C,C,C,A,C,K,C,C,C,C,C,A,A,C,A,E,C,E,C,Q,C,M,G,E,C,G,E,C,A,E,G,I,C,A,C,A,K,C,E,C,E,C,C,C,E,C,A,C,A,A,C,A,I,U,E,C,C,A,C,C,C,C,C,E,G,C,M,E,A,M,A,C,C,C,C,A,C,G,E,E,E,C,C,E,C,C,A,C,A,O,C,C,A,C,C,I,E,C,C,A,G,C,A,E,C,I,C,C,C,A,C,G,G,E,M,A,C,G,M,A,C,M,A,C,O,A,A,E,E,A,C,K,G,A,A,a,C,C,C,C,C,C,C,C,W,E,C,E,E,I,C,S,A,E,Q,E,O,G,C,E,A,C,C,a,A,E,G,G,C,+B,C,Q,C,G,G,C,A,C,C,A,I,E,A,I,A,C,C,A,I,E,E,C,Q,C,I,C,G,A,C,A,C,C,E,gB,A,E,I,C,Q,M,G,E,I,K,C,C,C,C,C,A,C,K,C,c,C,I,C,E,C,K,A,C,C,C,C,C,C,A,I,E,E,E,C,A,E,I,C,A,C,E,E,C,I,E,A,E,G,C,C,C,C,C,C,A,E,A,2B,C,I,C,S,C,E,G,A,G,C,E,A,C,C,A,E,G,C,C,C,C,A,Q,E,O,E,G,C,A,C,C,E,W,A,E,G,E,C,C,A,A,E,A,E,C,I,C,C,M,C,M,C,A,C,A,I,E,E,E,E,E,C,Q,C,C,A,G,C,E,G,K,A,A,C,A,E,A,E,S,A,E,kD,C,uB,C,C,S,C,a,C,C,C,A,E,E,M,C,I,C,G,G,C,A,C,A,I,A,E,C,C,G,E,A,E,E,G,C,E,E,S,A,E,qE,C,mB,C,C,K,C,E,C,C,A,E,K,E,I,C,C,G,C,C,E,C,C,A,C,A,C,A,A,C,I,E,E,I,G,G,E,C,I,C,A,I,A,E,C,C,G,E,A,E,E,I,A,K,C,M,C,C,A,O,E,I,C,C,G,C,C,E,C,C,A,C,A,C,A,A,C,C,I,S,O,I,A,O,O,C,A,C,C,A,C,A,C,G,C,A,I,A,C,E,C,A,G,E,C,C,A,C,C,I,C,I,C,C,C,C,C,G,C,C,E,E,E,A,G,G,A,E,E,I,E,O,G,C,C,A,O,C,I,A,A,C,A,C,C,M,O,C,G,C,E,E,E,A,C,G,C,C,C,C,I,I,C,Q,C,G,A,C,C,C,G,E,C,E,C,C,C,E,E,O,A,E,E,G,e,C,E,K,E,C,E,G,K,C,M,E,A,C,C,C,C,C,C,C,E,I,A,A,A,E,A,E,K,C,I,A,A,C,A,C,C,M,C,G,C,E,G,C,A,C,C,I,C,G,C,E,I,A,A,C,G,C,S,C,Q,C,M,C,I,A,C,A,C,A,A,C,K,C,E,E,gB,A,E,I,C,S,C,C,C,C,A,C,E,A,E,gB,A,E,I,C,C,Q,C,E,G,I,E,E,G,K,C,A,A,C,A,Q,A,C,E,I,E,E,G,M,I,C,C,C,I,E,A,M,E,E,C,M,A,C,C,A,C,A,C,C,A,E,C,M,E,M,I,E,C,A,E,A,I,E,C,E,A,I,C,M,C,E,E,c,A,E,E,A,I,C,E,E,M,A,C,C,C,C,A,I,E,E,C,K,G,C,A,E,C,E,E,A,S,A,E,E,A,K,E,E,E,C,c,C,G,E,E,A,A,C,C,E,A,C,C,E,E,A,I,E,I,C,C,C,E,G,K,E,E,A,G,K,C,O,G,E,G,I,E,E,C,G,A,C,E,C,A,C,C,a,A,G,E,G,gE,C,W,C,G,C,E,E,C,C,C,W,A,E,E,G,K,E,E,I,uC,C,gB,C,E,A,I,C,C,A,I,E,E,G,A,I,E,E,G,K,E,E,G,K,C,O,C,A,C,K,C,E,E,c,A,E,G,E,E,G,sC,C,iB,C,E,A,K,C,C,A,C,E,E,c,A,E,E,G,K,E,E,I,uC,C,gB,C,E,A,I,C,C,A,C,C,A,C,A,A,E,K,G,O,C,E,I,E,E,E,A,K,C,A,C,M,C,C,A,G,E,M,A,E,E,G,E,C,C,sC,C,uB,C,C,S,C,M,C,C,C,A,I,E,A,M,E,G,G,C,E,C,C,G,G,G,E,I,A,C,E,C,A,A,C,K,E,C,E,C,C,E,E,e,A,E,I,C,C,A,G,C,C,C,K,E,M,G,C,S,C,E,G,C,C,E,A,C,C,K,E,A,C,C,A,C,C,A,E,G,U,C,E,I,E,E,E,I,A,C,A,C,E,E,M,A,E,E,G,E,C,C,mD,C,uB,C,C,S,C,iB,C,C,C,A,I,E,A,M,E,I,W,C,M,E,I,E,E,C,C,A,C,C,A,I,A,C,A,A,C,A,O,I,E,2B,C,E,M,G,C,E,E,A,C,A,C,A,A,E,A,K,I,M,C,E,I,E,E,E,A,K,C,A,C,a,C,C,A,M,C,E,E,M,A,E,E,G,G,C,E,2C,C,uB,C,C,S,C,a,C,C,C,A,M,E,I,O,C,M,E,G,C,C,A,E,E,C,C,A,C,A,C,G,C,K,A,E,A,E,A,C,M,A,C,A,C,C,E,gB,A,E,E,C,G,M,C,Q,M,W,W,O,I,Q,C,E,C,C,A,C,C,C,G,A,C,A,C,C,A,C,G,C,A,C,C,A,I,K,C,I,C,C,G,C,C,E,E,E,A,G,G,A,E,E,I,E,O,G,C,C,E,C,G,E,C,M,C,I,A,A,C,A,C,C,M,O,C,G,C,E,E,E,A,C,G,C,C,C,C,I,E,I,O,C,G,A,C,C,C,G,E,C,E,C,C,C,E,E,O,A,E,E,G,e,C,E,K,E,C,E,G,K,C,M,E,A,C,C,C,C,C,C,C,E,I,A,A,A,E,E,I,E,O,G,C,C,E,C,G,E,C,M,C,I,A,A,C,A,C,C,M,C,G,C,E,G,C,A,C,A,C,G,K,C,W,C,G,C,A,A,C,A,A,A,C,M,C,C,C,C,O,I,E,I,C,K,C,C,I,C,S,C,E,C,A,G,C,C,C,C,C,C,C,O,I,E,E,I,A,C,G,M,C,I,C,M,C,A,C,A,A,K,C,U,E,C,O,M,E,I,C,C,G,Q,A,C,A,A,K,C,e,E,C,I,E,E,I,A,C,I,E,C,C,A,C,E,E,M,A,E,E,M,6B,C,uB,C,C,S,C,iB,C,C,C,A,I,E,E,I,E,M,C,C,M,I,C,U,E,C,C,M,A,I,E,C,E,E,E,C,A,C,C,A,E,C,E,C,iB,E,C,I,E,I,C,C,oB,E,C,A,G,E,M,C,C,K,E,I,E,A,C,A,I,C,A,G,A,I,A,E,A,M,I,C,e,E,C,A,O,I,C,A,I,E,E,I,A,C,I,E,C,C,A,M,C,E,E,M,A,E,I,E,E,M,sC,C,uB,C,C,S,C,mB,C,C,C,A,I,O,C,C,E,K,A,C,E,C,C,C,K,E,E,C,C,E,C,I,E,E,I,I,C,e,E,C,A,G,I,E,A,E,E,K,E,I,C,A,C,A,E,I,C,C,M,C,G,A,M,A,C,C,A,C,E,A,G,A,C,A,C,A,A,C,C,C,C,C,A,C,A,A,G,E,C,e,E,C,O,E,I,C,C,G,K,A,C,A,A,W,C,C,C,C,M,C,I,C,E,E,A,O,G,C,A,E,C,C,C,K,E,C,C,A,A,S,A,C,C,C,E,I,A,E,O,E,A,G,C,E,I,E,E,I,E,G,C,W,C,E,C,E,C,C,C,G,C,E,E,M,A,E,E,M,gB,C,uB,C,C,S,C,U,C,I,C,K,G,I,C,C,C,C,A,C,A,C,C,C,A,E,G,C,C,U,E,C,C,E,I,E,K,C,E,C,C,A,C,A,A,C,A,C,A,G,C,C,M,A,C,M,C,C,G,E,E,I,E,A,C,E,M,A,C,C,E,E,C,G,C,C,A,C,G,E,C,E,I,C,E,I,C,E,E,c,A,E,E,I,C,E,A,E,M,A,C,C,C,C,A,E,M,A,C,M,G,E,E,I,C,C,K,A,K,C,4E,C,C,A,I,E,M,E,E,A,M,A,C,A,E,M,A,C,G,C,C,C,I,M,C,M,C,C,C,C,E,M,C,A,E,E,iB,A,E,C,E,C,E,M,I,E,C,I,C,E,M,G,C,kB,C,E,G,C,C,A,C,A,A,C,A,E,G,C,C,G,O,G,C,E,I,E,I,E,K,I,C,C,I,A,C,A,C,C,C,E,I,E,C,C,C,C,C,C,A,C,C,C,A,E,C,C,A,G,U,G,C,E,I,E,E,E,I,A,C,A,C,E,E,M,A,E,E,G,E,C,C,mD,C,uB,C,C,S,C,iB,C,C,C,A,I,E,A,M,E,I,W,C,M,K,I,A,C,C,A,C,C,E,E,E,C,C,A,C,A,C,A,O,I,E,2B,C,E,M,G,C,E,E,A,C,A,C,A,A,E,A,K,I,M,G,C,E,I,E,E,E,A,K,C,A,C,a,C,C,A,M,C,E,E,M,A,E,E,G,G,C,E,2C,C,uB,C,C,S,C,a,C,C,C,A,M,E,I,O,C,M,K,G,C,A,C,A,A,C,C,A,K,E,C,M,C,G,C,E,I,E,E,E,A,K,C,A,C,M,C,C,A,G,E,M,A,E,E,G,E,C,C,sC,C,uB,C,C,S,C,M,C,C,C,A,I,E,A,M,K,G,C,C,A,C,G,A,C,A,G,C,A,C,C,I,E,E,I,A,C,E,C,A,A,C,K,E,C,E,C,G,E,e,A,E,I,C,C,A,G,C,C,C,K,E,M,G,C,S,C,E,G,C,C,E,A,C,C,K,E,A,G,C,A,E,K,C,E,C,C,C,A,C,G,E,M,G,C,oB,C,E,E,C,C,A,E,A,A,C,C,E,C,C,G,I,A,A,A,E,E,C,G,A,C,C,C,A,C,I,C,C,K,K,G,C,C,A,C,A,G,I,C,A,G,C,C,C,G,C,E,E,gB,A,E,E,C,G,C,C,E,M,G,C,e,C,G,A,C,Q,C,E,I,C,C,E,W,W,G,W,W,O,I,Q,C,U,S,E,C,C,A,M,C,K,S,C,E,I,M,C,C,Y,E,E,G,O,E,E,E,C,C,G,E,A,I,E,E,I,E,G,C,W,C,G,A,C,C,I,C,E,E,M,A,E,E,M,gB,C,uB,C,C,S,C,U,C,I,C,K,C,C,C,A,C,C,A,C,C,C,C,C,A,C,C,C,A,C,E,C,A,C,E,C,A,A,C,C,M,C,C,C,C,Q,E,A,O,G,C,A,E,C,C,C,K,E,C,C,I,E,I,C,C,C,C,C,C,C,C,C,E,S,A,G,C,E,I,E,E,I,E,G,C,Q,C,E,C,E,C,C,C,G,C,E,E,M,A,E,E,M,gB,C,uB,C,C,S,C,U,C,I,C,K,G,I,C,C,C,C,A,C,A,C,C,C,A,E,G,C,A,K,G,C,E,O,I,E,E,K,C,E,C,C,A,C,A,C,A,A,A,C,C,C,G,C,E,E,gB,A,E,E,C,G,C,C,E,M,G,C,Y,C,G,A,C,Q,C,E,I,C,C,E,W,E,C,C,A,M,C,A,c,C,E,I,M,C,C,Y,E,E,G,O,E,E,E,C,C,G,E,A,I,E,E,I,E,G,C,Q,C,G,A,C,C,I,C,E,E,M,A,E,E,M,gB,C,uB,C,C,S,C,U,C,I,C,K,C,C,C,A,C,C,A,C,C,C,C,C,A,C,C,A,C,C,E,C,A,C,gB,C,C,C,C,M,A,K,C,O,C,A,C,A,A,K,C,W,C,C,C,C,C,C,C,C,I,E,A,I,G,C,C,A,A,I,A,E,A,I,E,C,I,G,C,C,A,G,C,M,a,C,C,C,E,I,C,C,A,E,C,E,C,C,A,C,C,E,E,A,C,C,O,C,A,C,A,C,O,C,C,C,M,E,I,C,G,A,E,A,C,C,E,K,O,E,M,M,S,C,C,C,C,A,E,E,A,I,A,C,I,E,C,C,A,M,C,E,E,M,A,E,E,M,oC,C,uB,C,C,S,C,a,C,C,C,A,C,M,E,M,C,C,E,C,C,A,G,C,A,G,C,C,E,C,E,E,G,G,C,A,E,A,A,E,G,C,E,I,C,A,M,G,C,Q,C,E,C,K,C,C,C,C,C,A,A,M,E,C,C,A,C,E,E,G,C,O,A,E,E,E,Q,C,E,C,G,C,S,C,G,A,M,E,C,C,C,A,C,I,I,E,iB,C,E,C,E,A,E,C,C,G,I,E,G,C,E,C,C,C,C,A,C,A,A,G,C,C,A,C,E,C,C,C,C,C,C,I,E,C,K,E,I,A,C,I,C,G,E,C,C,G,E,C,Q,C,I,C,C,Q,G,I,E,C,C,C,C,A,C,C,C,I,E,C,A,I,A,C,A,A,K,C,I,C,C,C,C,C,C,I,E,C,K,E,I,A,C,M,C,G,E,C,C,G,E,C,Q,C,I,C,U,E,I,E,A,C,C,C,C,A,A,E,C,I,E,C,A,I,A,C,A,A,K,C,I,C,C,C,G,C,C,C,O,M,E,E,E,C,E,E,C,C,E,C,A,C,A,A,K,C,a,C,C,C,C,G,E,C,E,E,E,C,K,E,I,A,C,K,C,C,G,A,E,C,C,A,C,A,Q,C,M,C,A,C,C,A,A,G,M,C,C,C,E,I,C,C,A,E,C,A,C,A,C,G,G,C,W,C,G,E,E,I,E,C,A,G,E,A,M,C,A,A,O,C,C,A,G,C,C,C,S,C,C,C,C,G,E,C,E,E,E,C,K,E,I,A,C,K,C,C,G,A,E,C,C,A,C,A,Q,C,G,C,C,U,C,C,E,C,C,E,E,C,A,A,E,C,A,C,K,C,C,C,E,I,C,C,A,E,C,C,C,A,C,G,G,W,C,C,G,E,E,I,E,C,A,E,E,E,E,E,C,E,G,C,C,E,Q,C,C,E,C,C,G,I,C,C,C,A,C,C,A,I,C,A,C,G,C,C,C,C,C,C,I,E,C,K,E,I,A,C,G,E,C,A,C,A,E,C,E,I,I,C,A,G,E,C,I,C,C,E,C,A,Q,C,G,C,C,U,C,C,E,C,C,E,K,C,C,C,G,G,C,C,A,C,A,A,C,C,C,Q,C,M,C,E,C,C,C,A,A,A,O,I,E,G,C,E,C,C,C,C,Q,C,M,I,E,C,G,E,C,A,E,I,C,C,G,C,C,M,C,E,C,E,C,C,C,I,A,C,A,A,K,C,kB,C,C,C,C,G,E,C,E,E,E,C,K,E,I,A,C,G,E,C,A,C,A,E,C,E,I,I,C,A,E,C,G,E,C,A,E,I,C,C,G,C,C,M,C,E,C,E,C,C,A,I,C,G,M,C,C,C,E,I,C,C,A,G,C,G,K,C,M,C,C,G,E,E,I,E,C,A,I,A,E,A,C,C,I,C,G,A,A,C,C,K,I,A,C,A,A,K,C,W,C,C,C,C,C,C,O,M,I,C,E,C,E,E,C,A,A,K,A,C,A,C,a,C,C,C,C,C,C,O,M,I,C,G,C,E,E,C,A,A,K,C,A,C,A,U,C,C,C,C,O,A,M,Q,A,C,C,I,M,E,C,C,E,I,C,C,K,C,E,E,C,C,C,A,C,A,C,A,C,C,C,G,C,I,C,C,C,C,C,C,C,C,O,A,I,E,A,E,C,C,E,A,I,A,C,C,A,I,I,C,E,E,C,C,A,C,C,A,E,C,C,K,I,O,C,C,A,A,E,Q,C,G,C,C,O,K,G,E,K,A,E,M,E,A,C,S,kG,I,E,E,C,C,G,K,E,E,C,C,O,C,E,E,C,C,K,E,E,E,C,C,C,M,O,E,S,A,A,I,I,C,C,M,A,A,a,C,C,C,C,C,C,C,I,E,E,C,Q,C,I,C,G,A,C,C,M,K,U,E,C,Q,E,A,O,I,E,E,A,C,G,E,A,A,C,C,A,E,M,I,C,I,C,E,C,E,I,C,C,A,C,C,C,E,G,E,C,M,A,E,C,E,E,Q,A,E,I,C,E,C,C,A,C,C,c,A,E,I,C,U,E,M,G,C,E,G,G,C,G,G,C,C,A,C,A,C,A,A,M,C,C,C,C,O,I,E,Y,C,E,I,A,C,S,C,I,C,M,C,A,C,A,A,K,C,oB,C,G,C,C,C,I,E,C,C,C,A,E,E,E,C,C,Q,C,M,C,A,G,E,M,A,C,M,C,C,G,E,E,I,E,C,E,M,C,A,E,E,a,A,E,E,E,C,G,C,C,A,E,M,A,C,M,G,E,E,I,C,C,K,A,K,C,8C,C,C,A,I,E,M,C,E,C,C,W,A,E,I,C,M,C,E,M,A,C,G,C,C,C,I,M,C,M,C,C,C,C,E,C,I,C,C,E,E,M,A,E,C,I,C,Q,C,I,C,S,C,Y,C,G,C,A,C,A,C,A,C,A,A,K,A,C,A,M,C,G,C,C,C,I,E,A,M,I,C,oB,C,G,G,C,A,C,C,A,E,M,A,E,I,C,M,E,U,E,O,I,C,M,C,e,C,A,sD,C,uB,C,C,S,C,iB,C,C,C,A,I,E,I,E,I,C,M,C,e,C,E,C,A,C,C,C,E,E,A,gB,A,E,G,G,C,C,E,I,E,Y,C,E,I,C,A,S,C,I,C,M,C,E,C,A,G,C,C,E,C,C,C,C,O,I,E,I,C,Q,C,C,I,C,Q,C,E,C,A,G,C,C,C,C,Y,C,C,C,C,C,C,C,E,E,c,A,E,I,E,E,I,iB,C,Q,C,G,G,C,C,G,E,A,O,G,G,A,C,E,C,C,K,C,E,C,C,A,I,E,C,C,G,C,A,A,E,E,C,A,G,I,E,I,I,C,C,C,E,I,A,I,C,A,E,G,C,C,E,G,C,A,Q,E,C,E,E,G,C,A,A,Q,A,C,C,I,I,C,E,C,C,E,C,C,A,E,A,A,C,C,a,C,gB,oQ,I,E,E,C,C,C,O,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,W,C,W,G,I,W,O,E,Q,C,G,A,I,E,E,C,C,Q,O,c,C,E,kB,C,Y,E,I,W,O,E,e,C,G,A,I,E,E,C,C,C,O,O,c,C,E,uB,C,Y,E,I,W,O,E,oB,C,G,A,O,c,C,E,8B,C,Y,E,I,W,O,E,2B,C,G,A,O,c,C,E,6B,C,Y,E,I,W,O,E,0B,C,G,A,O,c,C,E,8B,C,Y,E,I,W,O,E,2B,C,G,A,O,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,O,c,C,E,oB,C,Y,E,I,W,O,E,iB,C,G,+B,O,c,C,E,a,0F,I,E,E,C,C,O,C,E,E,C,C,Q,C,C,E,C,C,Q,A,E,E,C,C,I,I,E,E,C,C,K,E,S,E,C,E,M,C,E,E,G,C,mB,C,C,C,C,E,A,E,O,C,E,C,C,A,E,E,G,C,a,C,C,C,C,E,A,E,O,C,C,C,C,A,C,E,E,c,A,G,E,G,sB,C,M,C,G,C,A,C,C,2B,E,E,C,A,C,A,A,A,M,E,I,A,A,a,C,C,C,C,A,E,E,gB,A,E,I,C,M,C,C,C,A,C,A,A,A,O,C,C,C,C,O,I,A,C,A,A,gB,C,C,C,C,O,C,C,A,G,C,C,C,a,C,C,C,C,C,C,M,A,K,C,kB,C,A,C,A,A,K,C,a,C,C,C,C,C,C,M,A,K,C,kB,C,A,C,A,C,A,E,uB,C,E,E,oB,Q,C,E,I,Q,E,a,C,C,G,C,C,A,C,qB,C,C,oB,C,A,C,C,C,I,E,A,M,C,E,gB,A,G,C,C,A,E,C,A,K,C,C,mB,A,G,C,C,A,M,C,e,C,G,C,C,E,A,M,C,E,gC,C,G,C,C,A,C,M,E,Q,A,C,A,O,A,C,I,A,C,G,A,G,C,A,A,a,C,C,C,C,C,C,C,C,E,E,gB,A,E,I,C,U,Q,E,O,A,C,C,C,C,A,A,I,C,C,C,C,C,I,C,A,I,C,C,C,C,C,I,E,Q,C,E,C,I,oD,C,qD,C,+C,C,mD,C,sD,C,oD,C,C,E,C,A,K,A,C,A,C,e,E,C,O,I,E,A,I,C,C,C,C,G,I,C,C,C,C,C,C,K,I,C,C,E,C,O,M,I,C,C,C,C,C,iB,C,Y,C,C,A,A,M,E,C,E,C,C,E,E,O,A,E,E,G,a,C,C,C,K,E,G,C,G,I,C,C,C,C,C,I,C,A,E,C,C,C,A,C,A,C,C,A,M,I,C,C,C,C,A,C,A,A,K,C,C,C,C,C,C,C,C,E,E,C,G,A,E,A,C,A,C,K,E,C,A,I,E,G,C,C,C,C,C,C,S,C,A,E,I,G,C,C,E,E,Q,A,E,I,C,I,C,C,C,A,I,E,I,A,C,C,K,I,C,gB,E,E,C,E,E,G,C,O,C,G,C,E,E,A,C,C,I,A,E,E,M,Y,C,e,C,C,I,C,U,C,C,C,C,C,A,E,C,A,C,E,A,E,S,A,E,I,C,I,C,G,C,C,E,G,e,C,E,G,C,A,E,A,A,C,K,gB,C,C,E,I,A,C,C,c,E,E,C,C,A,A,G,C,I,E,I,E,I,C,C,C,C,C,E,C,G,E,C,G,A,C,C,A,M,C,C,C,G,iB,C,E,E,C,C,C,C,A,A,A,O,E,A,I,C,C,E,C,E,C,C,G,E,O,A,E,E,G,a,C,C,C,K,E,A,G,C,G,I,A,C,A,A,K,C,U,C,C,C,C,G,I,E,A,I,E,E,A,C,C,A,E,A,E,C,E,G,C,E,E,E,I,E,I,C,C,C,C,C,e,C,C,A,G,I,E,G,G,C,E,A,W,C,C,M,I,C,A,O,E,A,I,C,C,E,C,E,C,C,E,E,O,A,E,E,G,a,C,C,C,M,I,A,C,M,E,A,G,A,C,E,C,E,E,A,M,I,C,C,I,E,E,M,C,G,C,A,E,E,I,I,C,C,C,C,C,oB,C,C,E,C,C,A,G,C,E,C,C,W,A,E,E,E,A,C,C,C,K,C,E,E,U,A,E,G,A,C,C,C,C,E,I,C,A,G,C,I,K,C,G,C,Q,C,O,C,A,G,C,C,I,O,G,E,I,Y,C,C,C,C,C,A,E,E,A,C,G,C,C,A,A,A,G,I,E,A,E,O,C,G,C,A,I,E,E,I,I,C,C,C,C,C,oB,C,C,E,C,C,A,G,C,G,E,G,C,G,E,C,E,E,K,I,C,A,I,E,K,C,E,Q,K,C,E,G,C,C,C,A,A,I,E,A,E,K,E,E,C,E,E,A,C,K,A,E,G,C,C,gB,C,C,uB,C,C,S,C,C,W,E,E,C,C,C,G,C,C,C,Q,Q,C,C,C,C,A,A,C,A,A,K,C,O,C,C,C,C,I,E,E,I,I,C,C,C,C,C,sB,C,C,E,C,A,C,O,A,I,E,G,C,G,E,C,E,E,E,C,A,C,C,A,E,C,E,C,c,E,C,I,E,E,I,I,C,C,C,C,C,sB,C,C,A,G,I,E,G,C,G,E,C,E,E,K,I,C,A,I,E,E,A,E,G,C,0E,C,C,A,G,E,C,C,G,E,I,M,C,C,C,C,C,C,C,C,M,C,A,C,K,C,A,E,I,I,C,C,C,C,C,C,E,C,C,A,G,C,C,C,C,C,M,G,C,C,C,C,I,E,C,E,E,G,C,C,C,E,E,Y,A,E,I,C,C,C,C,C,C,C,C,C,A,A,I,E,E,C,C,G,C,+B,C,C,A,G,G,E,A,E,C,C,C,C,C,C,M,C,M,C,M,E,C,C,C,C,C,C,C,A,C,E,E,M,A,G,E,C,E,sC,C,C,uB,C,C,S,C,kB,C,I,C,M,C,C,C,C,A,A,C,A,A,K,C,S,E,C,M,C,K,C,I,C,U,E,C,C,A,G,A,C,A,A,K,C,U,E,C,I,E,C,C,G,C,C,M,C,K,C,I,C,I,C,C,C,A,G,C,I,E,I,E,I,C,O,C,Q,C,C,A,G,I,E,A,E,I,G,E,I,C,A,C,I,C,S,C,K,C,E,C,C,C,A,C,G,C,I,S,C,C,C,A,E,E,E,C,A,C,I,C,Q,C,K,C,C,C,C,C,A,E,E,I,C,C,C,C,C,C,E,M,A,C,C,E,C,C,I,E,E,C,G,C,C,C,C,C,C,C,C,A,G,I,E,A,E,G,M,A,I,E,C,C,C,C,A,C,W,E,C,A,O,G,G,C,C,M,C,A,I,M,C,O,E,I,C,A,C,I,C,K,C,K,C,C,C,C,C,A,E,O,E,G,C,C,A,C,A,C,G,C,M,C,A,C,I,E,C,C,G,G,C,C,C,C,E,I,C,A,C,I,C,M,C,K,C,C,C,C,C,A,E,A,I,C,A,C,I,C,K,C,K,C,C,C,C,A,C,A,S,M,C,A,C,C,A,A,A,I,Q,C,A,I,S,C,A,C,I,E,M,E,C,C,C,E,I,e,C,A,C,a,C,A,E,I,C,A,C,I,C,E,I,C,C,C,C,C,C,A,E,E,E,G,G,I,C,U,E,C,A,G,I,E,A,E,G,I,E,I,C,A,C,I,C,Q,C,K,C,E,C,C,C,A,C,G,C,I,S,C,C,C,A,I,A,E,C,C,C,A,C,C,E,E,C,C,A,K,C,G,C,C,A,G,C,E,C,E,G,G,C,O,E,I,C,A,C,I,C,C,C,E,E,I,C,C,K,C,C,C,C,C,E,E,A,C,A,C,C,A,C,G,C,I,S,C,C,C,A,I,A,E,C,C,C,C,C,A,A,E,I,E,A,Q,C,C,C,C,C,C,C,+C,C,+C,C,0C,C,0D,C,C,I,C,Q,C,C,A,G,Q,G,E,C,G,C,E,M,E,A,M,C,C,G,G,C,C,C,C,C,C,O,C,C,C,G,C,A,C,I,C,Q,C,K,C,C,C,C,C,A,C,G,C,C,G,S,C,C,C,A,E,E,E,C,A,C,I,C,O,C,K,C,C,C,C,C,A,K,C,E,A,M,G,K,C,I,E,K,C,E,M,G,C,E,G,A,G,C,A,C,C,A,K,E,A,E,I,C,A,C,I,C,U,C,K,C,G,C,C,C,A,C,G,C,I,S,C,C,C,A,E,E,E,C,A,C,I,C,S,C,K,C,E,K,G,E,C,C,C,A,A,I,E,M,C,C,C,C,C,G,E,C,C,C,C,C,E,G,I,E,C,C,C,O,E,A,I,C,A,C,I,C,e,C,K,C,E,C,C,C,A,C,G,C,I,S,C,C,C,A,E,E,E,C,A,C,I,C,mB,C,K,C,C,C,C,C,A,O,E,E,C,I,E,A,E,O,A,C,C,K,C,C,E,E,O,A,E,E,E,C,C,C,Q,C,C,C,C,C,A,E,I,C,A,C,I,C,uB,C,K,C,C,C,C,C,C,E,I,C,C,G,M,C,E,A,G,E,E,C,C,A,E,A,G,C,C,A,C,I,C,c,C,K,C,C,C,C,C,A,I,E,C,A,C,C,A,E,C,K,A,I,E,Y,C,G,I,E,C,A,C,C,A,M,E,E,C,A,G,C,E,E,I,E,E,C,A,A,M,E,C,E,C,C,E,I,C,A,C,I,C,W,C,K,C,E,M,E,C,C,C,A,A,M,E,C,E,E,E,E,C,G,C,A,C,E,E,A,E,E,C,A,C,I,C,W,C,K,C,C,E,E,O,A,E,E,C,C,C,A,A,A,C,K,C,G,C,I,S,C,C,C,A,A,G,C,A,E,M,C,C,C,I,C,A,C,I,C,W,C,K,C,E,C,C,C,A,C,G,C,I,C,O,E,C,C,A,E,I,C,A,C,I,C,U,C,K,C,I,C,S,C,E,C,C,C,A,G,C,A,E,E,I,C,C,A,A,G,Q,E,A,O,E,M,C,A,E,I,C,A,C,I,C,W,C,K,C,E,C,C,C,A,C,G,C,I,C,O,E,C,C,A,G,E,K,C,A,sB,C,E,I,C,I,E,E,A,K,C,A,G,G,I,C,C,A,A,C,C,E,K,E,I,C,A,C,I,C,gB,C,K,C,C,C,C,C,A,C,G,A,C,I,S,C,C,C,A,E,E,E,C,A,C,I,C,e,C,K,C,C,C,C,C,A,E,E,A,G,A,C,I,C,A,C,A,E,I,C,A,C,I,C,K,C,K,C,C,C,C,C,A,I,K,E,G,C,C,A,C,C,A,C,C,C,A,E,I,E,C,C,A,C,K,C,O,G,G,C,I,C,A,C,A,A,M,C,K,C,a,C,C,C,C,I,E,K,C,E,M,I,E,C,A,E,E,K,A,I,C,gC,C,C,A,M,C,E,E,M,A,E,E,O,uB,C,uB,C,C,S,C,e,C,I,C,S,C,C,C,C,C,A,E,A,O,A,A,C,A,A,M,C,K,C,C,C,C,C,C,C,C,E,I,E,K,C,E,S,I,C,G,G,C,C,C,C,C,E,I,E,A,Q,C,E,C,I,+C,C,C,G,E,E,C,C,C,C,E,M,E,C,C,E,E,Q,A,E,G,C,A,C,a,E,E,C,C,A,A,G,I,A,E,W,C,C,M,I,C,A,O,E,A,E,C,G,E,C,E,I,E,A,C,A,E,C,G,C,K,C,Q,C,C,C,C,C,C,I,E,E,E,C,G,C,A,C,E,C,E,G,G,G,E,C,E,C,A,I,C,G,G,A,K,E,G,C,M,I,C,A,I,E,E,I,E,C,C,C,C,E,G,A,G,A,I,C,C,A,C,C,C,C,G,E,I,E,A,E,E,E,C,C,A,C,A,C,A,I,G,C,A,G,G,E,M,U,E,C,A,C,M,I,C,A,O,E,A,E,E,E,C,E,C,C,E,A,C,C,K,C,C,C,C,I,C,G,C,C,A,A,C,C,A,E,W,C,Y,0Q,I,E,E,C,C,O,C,E,E,C,C,M,E,E,E,C,C,Q,E,C,C,C,C,K,E,E,E,I,C,C,C,C,A,S,E,C,C,C,E,E,K,S,C,S,A,I,E,A,E,E,C,C,E,C,A,C,A,A,A,C,A,A,C,A,C,M,E,C,C,C,E,A,O,A,I,C,E,A,E,C,I,E,A,A,E,G,I,I,C,A,G,C,K,C,O,C,G,E,C,E,C,A,K,C,c,C,C,A,O,E,G,A,C,A,C,E,A,C,C,C,C,C,A,C,A,A,A,C,A,A,C,Q,E,C,C,C,C,C,O,A,I,C,E,C,C,C,C,C,C,A,C,G,I,G,E,E,C,G,C,E,E,C,C,A,C,G,G,E,A,G,C,C,G,E,C,A,C,C,C,C,G,I,K,C,A,C,E,C,A,A,G,K,C,C,C,E,A,E,E,E,C,C,A,C,A,G,C,I,E,A,C,C,E,C,A,C,C,E,C,C,E,G,I,E,E,C,A,C,C,C,C,A,C,C,C,A,A,M,E,C,E,E,E,K,A,Q,K,C,A,C,C,G,I,C,A,C,a,C,A,C,E,E,M,A,G,E,C,E,sB,E,E,C,C,E,E,C,C,C,E,Q,C,O,C,C,C,C,A,C,A,A,O,C,C,A,C,A,A,C,E,C,K,E,C,E,O,C,E,E,E,C,E,E,C,C,M,C,O,C,G,C,C,G,E,C,C,O,C,O,E,A,C,E,A,C,C,c,A,G,E,C,E,e,E,I,C,S,C,G,C,C,A,C,M,C,E,C,A,E,C,C,K,E,C,E,K,C,C,E,E,c,A,E,C,E,E,W,A,E,G,E,C,C,C,Y,C,O,C,G,C,C,A,A,C,C,C,C,K,E,C,E,K,C,G,E,c,A,E,C,E,E,W,A,E,E,E,C,A,C,c,C,O,C,G,C,C,A,A,C,C,A,C,C,O,C,E,E,M,C,C,E,E,I,E,C,E,E,G,U,C,E,E,U,A,C,E,E,O,G,C,E,E,O,M,C,E,O,A,C,E,G,C,A,C,E,E,C,U,A,E,G,E,C,E,C,A,K,C,iB,C,C,A,M,C,E,E,Y,A,E,E,E,C,A,A,C,A,C,I,E,E,C,G,E,E,C,E,U,C,S,C,E,Q,G,C,E,S,C,I,C,E,K,C,E,A,S,C,O,C,E,G,G,C,C,C,G,C,A,E,G,E,K,C,O,C,E,Q,Q,C,E,S,C,C,C,K,C,C,U,C,C,C,C,A,E,S,C,E,O,A,C,E,A,M,C,E,E,C,C,C,C,C,C,A,E,E,C,G,C,C,E,A,G,I,G,C,E,C,E,Q,a,C,E,E,I,C,A,C,E,I,C,E,S,C,S,C,E,S,C,K,C,E,G,I,G,C,E,C,E,S,C,Q,C,E,S,C,O,C,E,S,C,S,C,E,E,I,C,A,C,E,U,C,E,E,I,C,A,C,E,S,C,E,E,K,I,C,I,C,C,a,C,E,E,K,I,C,I,C,C,K,C,E,E,K,K,C,C,U,C,E,E,I,C,A,C,E,O,C,E,Q,K,C,E,E,K,I,C,C,C,C,U,C,C,S,C,C,C,C,A,E,W,C,E,O,A,C,E,E,E,E,E,A,E,C,E,C,C,G,A,E,I,Q,C,E,G,S,C,G,C,A,E,C,A,C,E,K,E,A,O,E,A,C,C,A,C,C,E,C,C,A,C,C,C,G,C,A,E,E,C,G,I,K,I,C,E,S,C,W,C,E,S,C,e,C,E,O,C,A,E,U,C,M,C,E,G,E,E,C,E,A,C,I,C,E,A,S,C,S,C,E,C,C,K,C,A,C,U,C,C,C,C,A,S,E,C,E,O,E,E,A,C,A,E,A,C,C,Q,M,C,E,I,E,E,C,E,C,A,E,C,C,K,K,C,E,E,C,C,I,C,E,E,K,K,C,I,C,C,e,C,E,E,K,K,C,I,C,C,K,C,E,S,C,I,C,E,E,K,E,C,C,O,C,E,S,C,W,C,E,E,K,I,C,I,C,C,S,C,E,G,I,G,C,C,C,E,I,C,E,C,G,C,E,C,E,E,S,C,C,C,A,S,C,iB,C,E,S,C,iB,C,E,E,K,I,C,C,Y,C,E,E,K,I,C,I,C,C,M,C,E,E,K,I,C,C,I,C,E,E,K,I,C,C,C,C,C,C,iB,C,C,U,C,C,I,C,C,iB,C,C,K,C,C,kB,C,C,C,C,A,S,E,C,E,E,E,C,C,C,E,E,S,A,A,E,E,E,C,A,G,I,A,E,A,E,C,A,4C,C,C,A,I,E,E,C,C,E,C,C,E,K,C,E,A,E,K,I,M,G,I,C,A,C,C,C,A,E,E,A,E,C,G,E,E,E,A,E,C,C,A,C,A,E,E,S,A,E,G,E,C,C,M,C,E,E,K,Q,C,I,C,C,mB,C,E,E,G,E,A,C,C,C,E,A,C,C,iB,C,E,E,A,C,E,C,C,A,A,G,E,C,C,C,C,C,S,C,C,C,C,A,C,S,C,I,C,I,E,C,C,G,I,C,A,M,E,C,E,E,C,C,A,C,E,G,E,C,G,G,C,A,C,C,C,C,C,K,C,M,C,C,C,C,C,C,S,C,C,C,C,A,A,G,G,C,O,C,C,E,E,U,A,E,C,C,O,C,C,O,C,C,E,E,S,A,E,C,C,O,C,C,K,C,C,E,E,S,A,E,C,C,K,C,C,S,C,E,S,C,I,C,G,A,A,C,A,A,C,I,C,C,E,C,C,S,C,E,E,I,C,A,C,E,S,C,E,E,K,I,C,I,C,C,gB,C,E,E,K,I,C,I,C,C,I,C,E,U,C,Q,C,E,E,K,I,C,C,oB,C,E,E,K,I,C,C,Y,C,E,E,K,I,C,C,gB,C,E,E,K,I,C,I,C,C,Q,C,E,S,C,E,C,E,E,K,K,C,I,C,C,K,C,E,S,C,K,C,E,S,C,I,C,E,O,C,A,E,E,K,K,C,I,C,C,O,C,E,E,K,I,C,I,C,C,C,C,I,C,C,O,C,C,Q,C,C,K,C,C,K,C,C,kB,C,C,C,C,G,E,C,A,C,G,E,E,E,E,A,I,E,A,E,I,G,G,E,I,G,C,C,E,E,gB,A,E,E,C,C,A,C,C,G,E,G,C,M,E,G,C,A,C,C,C,I,E,A,E,G,O,G,E,I,M,C,E,A,C,C,E,G,M,C,C,C,I,K,C,E,S,C,I,C,E,G,M,C,C,A,E,I,K,C,E,S,C,I,C,G,E,C,C,A,E,E,I,G,C,C,I,E,E,G,C,K,C,a,A,A,C,G,E,C,I,E,I,G,C,C,C,C,A,A,O,E,I,K,E,C,E,E,S,A,E,E,I,K,C,G,I,A,E,A,I,K,C,I,C,C,A,C,C,A,E,E,C,qB,C,E,O,A,C,E,O,E,E,C,C,C,C,A,A,C,K,W,Q,C,0B,iK,I,E,E,C,C,Q,E,A,E,C,C,K,C,O,E,I,A,A,O,M,C,C,C,G,E,gB,A,E,I,C,M,C,C,C,A,C,A,A,A,K,E,C,O,I,E,I,C,I,C,A,C,A,A,C,A,E,a,C,C,O,M,I,E,C,U,G,A,C,M,A,C,Q,A,C,U,A,C,a,A,C,sB,A,C,mB,A,A,a,C,C,C,C,C,I,E,A,I,E,C,C,C,K,A,C,C,E,iC,E,G,C,C,C,C,C,A,I,E,A,G,a,C,C,C,A,S,E,A,C,A,C,C,E,I,E,C,E,C,E,A,C,A,C,E,A,C,C,E,E,C,I,C,C,C,C,C,A,A,C,E,E,c,A,E,A,Q,S,E,C,E,C,e,E,E,C,C,A,O,C,G,C,C,A,C,C,A,C,C,A,C,A,E,C,A,C,M,C,K,C,A,C,C,C,S,C,K,C,A,C,C,C,W,C,C,C,C,A,E,C,c,C,E,C,C,A,E,C,uB,C,I,C,C,A,E,C,oB,C,I,C,C,A,C,E,E,gB,A,E,I,C,E,C,A,E,C,C,C,E,C,O,I,E,I,C,M,Q,C,I,C,A,C,A,C,A,E,a,C,C,O,M,G,C,E,O,A,C,G,U,A,A,a,C,C,C,C,C,K,C,gC,C,C,A,G,E,gB,A,E,I,C,C,O,C,G,I,I,U,C,yB,C,A,a,C,I,C,C,A,E,C,C,A,C,C,C,A,C,A,A,K,A,E,C,C,C,K,I,E,I,C,E,K,C,I,C,a,C,A,C,A,C,A,E,S,C,C,O,E,Q,I,C,A,A,K,A,G,Q,E,C,O,I,C,C,C,C,A,C,A,A,Y,C,C,C,K,C,oC,C,C,A,I,C,C,C,C,C,C,C,A,K,C,G,C,M,C,C,C,C,O,M,I,C,C,C,C,C,E,C,A,K,A,C,C,A,C,O,I,E,I,C,C,C,C,C,A,C,A,C,A,E,K,e,C,E,E,iB,W,C,E,I,Q,I,A,A,G,C,A,A,K,A,G,C,C,A,C,C,M,I,C,C,C,A,A,C,A,A,I,W,E,C,O,I,C,C,C,C,A,C,A,A,Y,C,C,C,C,C,K,C,kD,C,C,A,I,C,C,A,C,C,E,C,C,E,C,C,C,C,C,C,C,A,K,E,C,C,C,K,I,A,C,A,C,gC,O,c,C,E,a,6B,I,E,E,C,C,Q,E,C,C,C,C,K,E,E,E,C,C,Q,A,E,I,E,C,A,E,C,I,I,C,A,E,C,C,A,G,C,A,A,a,C,C,C,C,C,I,C,C,C,C,C,E,E,C,C,C,C,C,C,C,G,E,S,A,E,G,I,A,C,A,C,A,C,C,C,I,G,A,C,A,C,C,I,E,C,M,C,I,C,I,C,I,C,O,C,M,C,I,C,O,C,C,A,C,A,A,I,I,E,C,O,I,C,C,C,C,A,C,A,A,I,I,C,C,C,C,I,C,C,A,E,C,C,C,A,G,C,A,O,E,C,O,I,C,C,C,C,A,C,A,A,I,O,C,C,C,C,I,C,C,C,C,C,G,E,S,A,E,E,G,M,C,A,C,A,A,O,C,C,C,C,G,I,E,A,E,G,G,G,E,C,A,A,Q,S,E,C,E,C,A,C,O,I,C,O,G,C,E,E,S,A,E,G,A,E,C,C,C,C,E,C,C,A,C,M,I,C,I,G,E,A,G,A,C,C,M,E,O,G,A,E,C,K,S,E,C,E,C,A,C,O,I,C,O,G,C,E,E,S,A,E,G,A,E,C,C,C,C,E,C,C,A,C,M,E,A,G,A,A,C,O,S,E,C,E,C,A,I,E,E,G,I,C,C,G,C,O,I,C,O,G,C,E,E,S,A,E,E,G,I,C,C,A,A,C,K,E,C,C,A,C,M,E,A,G,A,C,G,E,A,E,G,C,C,O,I,C,I,G,E,G,C,C,A,A,C,M,C,C,A,G,C,A,O,E,C,O,K,C,I,C,I,C,C,C,C,C,M,E,C,A,C,A,A,Y,C,C,C,C,G,I,C,C,C,C,C,G,C,E,I,A,C,C,C,K,A,K,C,C,gC,E,E,I,A,C,C,C,C,C,A,O,I,C,C,C,C,C,G,C,E,I,A,C,E,I,C,E,C,C,A,I,A,C,A,A,S,C,C,C,C,O,I,C,C,C,C,C,G,C,I,A,C,C,E,A,C,A,A,U,C,C,C,C,O,I,C,O,C,M,C,A,C,E,A,C,A,C,I,C,K,C,G,C,C,C,C,G,E,C,A,K,A,C,C,A,C,A,C,G,E,G,C,E,I,C,A,I,C,I,C,O,C,C,A,O,I,C,O,C,O,C,A,I,E,A,E,C,C,Q,C,E,I,C,E,C,A,C,A,C,C,A,C,C,A,G,C,e,C,C,C,C,I,E,G,C,C,S,C,oC,C,E,I,E,a,C,C,C,A,C,A,C,G,G,C,A,G,I,E,A,E,A,E,G,G,A,E,G,K,A,C,C,E,A,I,C,C,G,I,C,C,C,C,C,C,E,A,I,C,M,C,C,E,C,C,A,I,E,C,E,A,I,C,S,C,C,C,C,C,C,C,C,G,A,E,G,O,C,A,G,A,E,G,U,C,A,G,E,A,U,C,C,I,E,G,E,G,U,A,E,E,A,U,C,C,A,I,I,I,C,E,G,A,E,G,A,C,e,C,E,G,mB,C,C,C,E,C,C,U,C,M,C,A,A,O,C,C,A,C,C,I,C,I,C,C,C,C,G,A,S,E,I,G,C,C,A,C,C,A,A,C,A,A,M,E,A,C,C,C,C,U,C,C,C,Q,C,C,W,C,C,C,C,A,E,S,A,C,C,C,C,U,C,C,C,C,C,A,E,S,A,C,C,C,C,U,C,C,C,C,C,A,E,Q,C,A,C,C,C,U,C,C,C,C,C,A,E,O,C,C,C,C,C,U,C,E,C,C,C,A,E,S,A,C,Q,C,C,U,C,Q,C,C,C,A,E,S,A,C,K,A,C,U,C,I,C,A,C,C,A,E,S,A,C,E,C,C,C,C,C,A,E,S,K,C,C,C,C,C,C,C,A,E,S,C,C,K,C,C,U,C,C,C,C,C,A,E,S,Q,C,M,C,C,C,C,C,A,E,S,S,C,M,C,C,C,C,C,A,E,M,C,E,E,C,C,U,C,C,C,C,C,A,E,S,I,C,K,C,C,C,C,C,A,E,S,K,C,K,C,C,C,C,C,A,E,K,C,E,C,A,C,U,C,C,C,C,C,A,E,M,C,E,A,C,C,C,C,C,A,E,O,C,C,I,C,C,U,C,C,C,C,C,A,E,S,K,C,K,C,C,C,C,C,A,E,S,M,C,K,C,C,C,C,C,A,E,O,C,C,E,C,C,U,C,C,C,O,C,C,E,iB,0B,C,A,C,C,C,A,E,S,G,C,K,C,C,C,C,C,A,E,S,K,C,K,C,C,Q,C,C,a,C,U,C,C,O,C,C,E,iB,kC,C,A,C,C,C,A,E,S,C,C,E,C,C,U,C,C,C,O,C,E,C,C,C,A,E,S,Q,C,G,C,C,C,C,C,A,E,S,S,C,Q,C,C,C,C,C,A,E,M,C,E,C,C,C,U,C,C,C,C,C,C,S,E,C,C,C,C,C,E,E,E,E,E,S,I,E,I,C,C,E,E,C,A,I,C,C,C,I,E,A,E,K,K,E,E,K,O,C,I,E,S,C,I,C,E,K,K,C,C,C,A,E,K,O,C,I,E,a,E,A,A,C,C,C,I,G,E,E,A,C,C,O,C,A,I,E,A,E,E,C,O,C,E,C,C,C,A,C,A,C,A,C,A,A,E,E,C,E,G,C,E,E,C,C,C,A,C,I,G,C,E,G,C,C,A,A,C,I,G,E,A,E,K,G,C,O,C,A,I,A,E,A,E,G,G,C,E,E,A,C,C,A,A,C,A,A,A,C,A,G,A,I,E,C,C,O,E,I,C,A,S,C,C,A,G,Q,E,A,O,I,E,C,C,G,C,C,E,C,C,A,Q,E,O,G,I,C,G,E,O,E,C,I,A,C,C,E,G,C,E,C,A,G,C,C,A,C,M,E,E,A,G,I,E,C,C,E,A,O,E,K,C,C,I,E,K,I,C,G,G,C,C,A,C,a,A,G,E,G,c,C,S,C,G,A,G,C,C,C,O,E,A,O,E,K,A,C,A,O,A,E,G,C,C,A,E,C,A,G,Q,E,O,E,C,C,E,C,C,A,c,A,E,A,Q,S,E,I,C,A,C,Q,E,O,E,K,E,C,A,wC,C,S,C,G,I,A,C,C,A,I,A,E,E,G,C,C,A,A,C,C,K,E,C,C,A,C,K,G,I,M,E,M,E,K,K,A,C,E,A,E,I,Q,C,I,E,S,C,E,K,K,C,E,K,K,C,C,C,A,E,A,C,E,C,C,A,c,A,G,E,G,c,C,S,C,E,C,A,I,C,C,A,C,Q,C,C,C,C,C,C,Q,E,A,O,I,E,M,C,A,C,C,C,C,A,A,I,E,E,G,C,A,E,C,G,C,E,E,A,E,A,C,C,U,A,G,E,C,E,sB,E,I,C,S,C,E,I,C,C,A,C,C,e,C,G,E,G,C,E,A,E,A,C,A,C,A,A,O,A,C,C,A,E,C,C,C,E,G,C,E,G,G,C,G,G,A,C,A,C,C,G,E,C,W,C,C,C,K,A,K,C,C,oB,E,E,C,C,C,A,C,G,E,E,C,E,E,C,G,C,C,A,G,C,E,C,E,G,G,E,E,G,C,C,E,C,C,A,C,E,C,E,G,G,C,M,A,K,C,C,oB,E,E,C,C,C,A,C,I,C,C,C,C,C,M,C,G,C,C,C,C,C,C,A,G,C,A,G,C,C,C,C,C,M,C,C,C,C,I,E,E,I,C,C,C,C,C,C,S,C,C,C,C,C,C,A,C,C,C,C,C,C,C,S,C,C,C,C,K,C,M,C,E,A,I,A,C,C,A,C,A,C,C,E,E,M,E,C,A,A,O,M,C,C,C,C,C,C,C,C,C,C,C,A,C,A,A,S,E,C,E,O,I,E,C,2B,C,E,C,I,C,E,E,M,C,C,C,A,E,A,E,I,C,A,I,C,Y,C,Q,C,C,A,G,C,G,C,E,E,C,I,C,C,O,C,G,C,C,E,I,C,C,C,I,C,C,A,E,C,E,C,A,C,A,C,A,A,E,C,K,C,Q,C,A,M,C,A,O,C,A,C,E,M,E,C,Y,C,E,E,K,C,A,C,C,C,C,oB,C,E,E,K,C,Q,C,C,C,C,C,A,A,M,E,C,C,C,C,E,M,A,G,E,C,E,0C,E,I,C,S,C,E,G,C,C,A,C,C,C,c,C,S,E,K,G,G,K,E,C,C,C,A,A,C,C,A,C,A,A,E,O,C,E,I,E,C,K,A,C,qQ,I,E,E,C,C,K,E,S,E,C,C,C,O,I,C,K,C,I,C,S,C,G,A,C,A,A,C,C,A,oB,C,E,O,A,C,C,C,Q,A,G,I,E,A,C,E,G,C,E,G,G,E,A,C,C,S,A,C,C,E,E,C,A,C,C,G,E,E,K,C,A,C,A,C,E,E,M,A,G,E,C,E,wB,C,uB,C,C,S,C,sB,C,I,C,O,C,C,C,C,A,C,A,A,A,O,I,C,A,G,C,A,G,C,A,G,C,A,A,K,Q,C,C,C,I,C,C,A,E,C,E,I,C,C,A,C,A,C,C,I,C,A,I,C,C,C,C,C,I,A,C,G,C,C,C,C,C,C,C,A,C,A,A,I,e,E,C,O,I,C,C,C,C,A,C,A,A,I,e,C,C,C,C,I,C,C,C,C,C,C,C,A,G,C,C,C,C,C,C,G,G,C,I,E,M,G,C,C,C,C,C,C,c,E,C,A,G,C,C,G,I,C,C,C,C,C,C,I,C,C,A,E,C,E,O,A,A,E,C,A,I,I,C,C,C,A,C,C,C,I,I,C,C,I,C,C,C,C,C,C,C,C,E,E,C,E,C,C,G,C,G,E,A,I,C,C,C,C,C,M,C,M,I,C,C,C,C,C,I,C,O,C,C,C,C,A,A,I,C,C,C,C,C,E,C,A,M,E,A,C,C,A,C,G,E,A,I,C,C,C,C,G,I,C,C,C,C,C,I,C,C,C,C,C,W,C,I,C,C,C,C,C,I,C,I,C,C,I,C,C,C,E,C,A,C,A,A,K,E,C,I,C,C,A,E,E,C,I,C,C,C,C,C,I,C,C,C,C,C,W,C,I,C,C,C,C,C,I,C,I,C,C,I,C,C,C,C,C,C,A,I,C,C,C,C,E,C,A,C,A,I,E,C,I,C,C,C,C,E,C,I,C,C,C,C,C,a,C,I,C,C,C,C,C,C,A,I,C,C,C,C,C,I,C,A,C,A,K,C,C,C,C,I,C,I,E,C,A,I,I,C,C,A,E,C,E,A,C,A,C,A,A,A,M,E,C,I,C,K,E,A,C,A,C,A,E,sB,C,C,O,I,C,A,G,C,A,G,C,A,A,E,E,S,C,C,C,I,C,C,C,C,C,E,I,C,C,A,C,A,C,E,E,G,C,A,C,C,A,E,C,A,I,I,C,E,E,C,C,A,E,I,C,C,C,C,C,A,A,C,A,A,C,A,A,K,C,K,C,C,C,C,C,C,M,A,K,C,gC,C,A,C,A,A,K,E,C,I,C,C,C,C,E,C,I,C,C,C,C,E,E,E,C,C,C,C,A,E,C,C,C,C,C,A,I,C,C,C,C,C,E,C,O,C,I,C,C,A,E,C,C,A,C,A,I,E,C,I,C,C,C,C,E,C,I,C,C,C,C,C,G,E,C,C,C,C,C,C,C,G,C,O,C,I,C,C,C,C,C,C,A,C,A,K,C,C,C,C,I,C,I,E,A,C,A,A,M,E,C,I,C,K,E,A,C,A,C,A,E,iB,C,E,E,c,W,C,E,I,Q,I,C,A,G,C,A,A,K,G,A,K,C,C,C,C,C,K,C,G,I,C,A,C,A,C,A,C,C,E,C,C,E,C,C,C,C,C,C,C,A,C,A,A,K,C,C,C,C,I,I,C,C,C,C,C,E,A,C,C,A,A,K,C,K,C,E,C,A,K,C,K,C,A,C,A,C,A,C,C,C,I,E,G,G,E,M,E,C,I,C,C,C,C,C,A,C,G,E,C,I,C,A,C,E,C,I,C,C,C,C,C,I,C,C,C,C,C,E,G,G,C,A,E,G,G,C,I,C,C,C,C,E,C,E,I,C,C,G,C,C,C,C,C,E,G,G,C,C,A,I,C,C,C,C,C,E,G,G,C,C,C,C,C,E,uB,C,E,I,Q,I,C,A,A,O,G,E,C,C,C,C,C,C,K,C,G,I,C,A,C,A,C,A,C,C,E,E,A,C,A,G,C,C,A,C,K,C,C,C,C,C,C,M,A,K,C,O,C,A,C,A,C,A,O,U,I,C,A,A,Y,C,A,C,C,C,C,C,K,C,G,I,C,A,C,A,A,C,C,C,C,C,A,E,C,E,C,K,C,C,C,C,C,C,I,E,A,M,E,M,e,C,I,C,C,C,C,C,C,A,E,C,C,C,I,C,C,G,C,C,C,C,C,E,A,C,A,C,A,A,E,4B,C,E,E,sB,C,E,A,I,E,C,A,G,C,A,G,C,A,G,C,A,G,C,A,A,A,G,U,C,C,C,C,C,I,C,C,C,C,C,E,I,C,C,A,C,A,C,C,E,E,C,G,C,A,C,A,C,C,C,C,I,C,C,C,C,C,I,C,I,C,C,A,I,C,C,C,C,E,E,G,C,A,C,C,A,E,C,C,C,A,C,A,A,K,C,C,C,C,C,C,E,G,C,C,E,C,I,C,C,C,C,C,O,A,I,E,E,E,A,E,C,C,C,C,C,C,A,E,I,K,C,I,C,C,C,C,C,C,C,A,E,I,G,C,E,I,E,E,C,C,E,I,C,C,C,C,C,O,C,G,G,A,C,A,C,E,E,E,I,C,C,I,C,C,C,C,C,E,E,E,C,I,A,C,C,C,C,C,E,E,C,C,A,K,E,A,A,I,I,G,E,E,E,C,C,C,C,C,C,C,I,C,I,C,C,C,C,C,G,A,C,C,E,C,C,C,C,C,E,C,U,A,C,A,A,K,E,C,I,C,C,C,C,E,C,I,C,C,C,C,E,E,C,C,A,C,C,C,I,C,C,C,C,E,I,C,C,C,C,C,c,E,C,I,C,A,I,I,C,C,A,C,C,C,A,C,C,A,C,C,A,I,C,C,C,A,C,A,C,E,C,O,C,I,C,C,C,C,C,C,A,C,A,I,E,C,I,C,C,C,C,E,C,I,C,C,C,C,E,E,G,C,A,C,C,C,C,C,G,C,O,C,I,C,C,C,C,C,C,A,C,A,K,C,C,C,C,I,C,I,E,C,A,I,I,C,C,C,C,C,E,A,C,A,C,A,A,A,M,E,C,I,C,K,E,A,C,A,C,+B,O,c,C,E,a,4D,I,E,E,C,C,O,C,E,E,C,C,Q,C,C,E,C,C,Q,A,E,E,C,C,I,I,E,E,C,C,Q,E,C,C,C,C,K,E,E,E,C,C,K,G,E,E,C,C,Q,E,E,C,C,Q,E,E,C,C,C,O,E,E,C,C,Q,E,C,C,I,C,C,C,C,A,S,E,C,E,I,G,G,A,E,Q,C,C,O,E,G,C,A,C,A,A,S,E,C,C,C,C,C,O,E,G,C,A,I,C,S,C,E,C,C,C,A,C,E,E,A,G,I,E,A,C,C,M,M,C,A,G,Q,E,A,O,C,C,A,M,C,O,E,C,C,Q,E,C,C,C,A,G,Q,E,A,O,C,C,A,O,C,C,W,E,C,A,G,Q,E,O,C,C,C,C,K,C,O,C,C,C,C,C,I,E,E,I,C,I,C,C,C,C,A,O,E,E,E,E,C,A,E,E,I,C,C,E,G,A,E,A,C,C,A,E,C,A,C,C,E,C,A,A,G,C,C,A,C,A,C,A,A,O,C,A,C,A,C,A,C,A,A,M,E,I,A,A,a,A,C,C,C,C,E,E,gB,A,E,I,C,M,C,C,C,A,C,A,A,A,K,E,C,C,A,I,E,C,C,A,K,C,C,C,C,C,A,M,E,C,C,C,A,S,E,C,E,I,E,C,E,E,C,E,C,I,C,I,G,C,G,E,C,G,G,C,C,A,I,E,C,A,C,C,A,G,C,C,U,E,C,C,C,E,G,I,C,C,A,E,I,E,A,K,C,e,C,C,A,G,K,C,O,C,K,C,C,A,C,C,E,G,C,E,C,C,A,E,M,E,A,O,E,I,C,E,G,G,C,C,M,C,A,I,O,C,A,I,O,C,A,I,W,C,A,I,S,C,A,I,S,C,A,I,M,C,A,M,C,I,C,E,G,C,A,C,C,C,A,A,G,A,C,E,E,W,A,E,E,E,C,C,A,C,I,E,E,A,I,O,E,C,A,M,C,I,C,a,C,G,C,E,I,A,C,M,C,C,C,C,K,C,C,C,A,A,C,E,E,I,E,C,C,I,E,E,C,G,C,C,C,I,C,Q,C,G,C,E,I,I,C,G,E,C,G,C,C,G,C,A,K,C,I,C,S,C,A,G,C,C,A,A,A,A,C,A,C,C,A,E,I,G,E,E,I,E,C,A,C,I,E,E,C,C,C,C,C,C,G,C,A,G,E,I,E,E,A,C,C,G,C,A,C,E,A,A,E,E,E,A,C,C,I,C,A,K,C,O,C,C,C,C,C,C,C,C,G,C,A,C,A,E,A,C,A,C,W,E,C,C,C,A,C,C,W,E,C,C,C,A,G,E,G,I,C,C,I,E,E,C,A,E,E,A,C,A,E,A,C,G,A,C,C,C,C,A,C,W,A,E,G,C,C,A,E,E,C,E,C,C,C,A,C,G,C,C,A,K,I,C,C,C,I,C,E,I,C,E,E,c,A,E,E,E,E,C,C,E,A,A,C,A,A,C,A,A,A,C,I,C,O,C,E,G,I,C,C,C,C,G,I,C,O,C,G,E,E,G,A,C,C,C,C,C,C,A,E,M,A,E,A,M,O,C,G,C,G,E,G,C,A,C,E,C,E,E,G,C,A,C,A,E,A,A,C,A,C,W,E,C,C,C,A,A,M,Q,E,G,C,A,E,I,G,C,G,G,C,A,C,O,C,C,A,A,C,E,E,c,A,G,E,G,oB,C,O,C,E,C,A,G,C,C,I,I,G,I,I,I,E,C,O,E,A,C,A,A,E,mB,C,E,I,E,C,W,A,C,C,G,C,e,C,I,A,C,A,S,E,C,C,C,E,G,C,G,E,C,E,I,G,I,C,A,G,C,I,E,C,E,C,C,S,A,E,C,E,E,S,A,E,E,E,E,A,C,C,C,A,C,C,A,E,G,C,C,S,A,E,C,E,E,S,A,E,E,E,E,A,E,A,C,C,A,C,A,M,G,E,S,A,E,E,E,E,A,C,C,C,E,C,C,E,A,G,C,C,C,E,C,C,A,C,M,I,A,C,A,A,S,E,C,E,C,G,E,C,E,C,C,S,A,E,G,E,C,A,C,C,I,E,C,E,C,C,K,A,K,C,6B,C,C,A,I,E,I,A,U,C,E,C,C,A,O,E,G,C,A,E,E,C,C,C,I,E,C,C,A,C,C,A,E,E,C,a,C,E,I,C,E,A,G,C,A,G,C,A,E,C,C,A,C,E,C,A,G,C,A,G,C,A,C,G,A,G,C,A,G,C,A,G,C,A,G,C,A,A,a,C,C,C,C,C,G,I,C,C,C,C,C,M,C,M,C,C,C,C,E,G,C,C,C,C,A,A,K,A,E,C,E,I,C,C,A,C,C,E,E,E,C,C,C,C,C,C,C,I,C,K,G,E,C,I,C,C,E,G,I,C,I,C,E,K,C,A,C,A,A,C,C,E,E,G,C,A,C,C,C,C,C,O,C,O,C,G,I,C,C,I,C,G,E,A,I,C,I,C,S,C,E,I,C,A,A,C,A,C,C,C,C,A,K,C,G,C,C,A,E,E,E,G,C,A,C,C,C,C,C,I,C,A,I,C,C,C,C,C,C,C,C,A,I,C,C,C,C,C,I,G,C,C,C,E,C,C,C,C,C,I,G,C,C,C,E,C,C,C,C,C,I,G,C,C,C,E,C,C,C,C,C,I,C,A,I,C,C,A,E,E,E,G,C,A,C,C,C,C,C,C,C,A,I,C,C,C,C,C,I,G,C,C,C,E,C,C,C,C,E,C,C,A,G,C,A,e,E,C,O,I,C,C,C,C,C,e,A,C,A,A,I,Q,E,C,O,I,A,C,A,A,I,O,E,C,O,K,C,I,C,I,C,C,C,C,C,M,E,C,A,C,A,A,Y,C,C,C,C,G,I,C,C,A,E,C,G,C,E,I,A,C,C,C,K,A,K,C,C,gC,E,E,I,A,C,C,C,C,C,A,O,I,C,C,C,C,C,G,C,E,I,A,C,E,I,G,C,I,C,C,C,A,I,A,C,A,A,S,C,C,C,C,O,I,C,C,C,C,C,G,C,I,A,C,C,E,A,C,A,A,I,e,E,C,O,I,C,C,C,C,A,C,A,A,I,e,C,C,C,C,I,C,C,C,C,C,C,C,C,C,A,G,C,C,C,C,C,C,C,C,E,I,E,I,C,A,C,C,C,C,Y,C,A,G,E,C,C,C,E,I,M,I,C,Q,C,G,A,C,C,E,E,C,C,E,C,C,I,C,G,A,C,C,A,I,C,A,C,C,C,C,G,C,G,A,C,C,K,I,E,C,E,C,C,A,Q,C,G,A,C,C,E,C,C,C,C,C,G,C,E,C,E,I,C,C,I,C,G,E,A,I,C,C,C,C,C,G,C,G,C,C,G,I,A,C,C,A,C,C,C,M,C,E,C,A,C,A,C,G,G,C,C,C,C,C,A,K,A,C,A,a,C,C,C,C,C,C,C,C,G,I,C,e,E,C,G,E,E,I,E,I,E,A,E,A,E,C,O,I,C,A,I,E,E,A,E,A,C,W,E,C,A,E,E,A,M,K,E,C,A,E,E,C,A,I,I,A,C,C,C,C,C,C,E,E,I,C,C,E,C,C,I,E,E,A,C,A,A,C,C,C,C,A,E,E,A,C,M,C,U,C,G,G,C,G,C,Q,C,G,C,C,A,C,G,C,C,Y,C,E,C,C,A,C,A,A,C,C,G,O,C,Q,C,G,E,I,C,A,M,I,K,E,C,C,A,E,E,C,I,C,O,C,C,M,C,0B,S,E,K,A,C,C,M,C,C,C,C,A,A,I,E,U,K,C,A,G,C,E,E,I,E,I,C,C,C,A,A,M,E,C,E,A,I,C,E,G,C,G,C,C,A,I,C,I,C,O,C,C,M,C,2B,S,E,K,C,C,O,C,C,C,C,C,A,A,S,A,A,G,C,I,E,E,E,A,M,C,A,G,E,I,A,C,C,M,I,C,I,C,O,C,C,M,C,4B,S,O,E,C,C,C,C,A,E,A,I,A,A,C,E,G,I,E,A,G,E,I,G,A,A,C,C,I,C,I,C,O,C,C,M,C,2B,C,O,U,C,C,C,C,A,A,E,I,E,C,C,A,C,A,E,E,M,A,E,E,E,Q,C,G,E,E,E,Q,E,G,C,C,sC,E,E,C,C,Q,Q,C,C,M,C,sB,C,W,C,E,A,I,C,K,G,Y,C,C,C,C,C,A,E,I,C,A,G,A,C,E,A,E,I,C,C,A,A,G,E,C,E,mC,E,E,G,C,A,C,E,A,C,G,A,C,S,C,C,C,C,C,I,C,I,C,C,C,C,gB,C,C,M,C,kB,C,W,C,E,A,I,C,M,E,E,W,E,C,C,C,A,C,A,A,U,C,C,C,C,C,C,O,I,E,K,C,C,E,E,W,A,E,G,E,C,C,C,A,C,A,A,Q,C,C,C,C,C,C,O,I,E,G,C,G,E,S,A,E,G,E,C,C,C,A,C,A,A,uB,C,C,C,C,C,C,O,I,E,kB,C,C,E,E,wB,A,E,G,E,C,C,C,A,C,A,A,wB,C,C,C,C,C,C,O,I,E,mB,C,C,E,E,yB,A,E,E,C,A,I,C,A,C,A,A,c,E,C,C,E,E,M,A,G,E,G,8B,C,uB,C,C,S,C,gB,C,C,A,C,A,A,K,C,Q,C,C,C,C,C,E,E,M,A,G,E,C,E,kB,E,E,C,K,C,C,C,uB,C,C,S,C,E,C,K,C,I,C,E,C,A,A,C,A,A,K,C,c,E,C,I,E,C,E,E,I,K,A,E,M,I,C,C,C,C,C,C,M,C,gB,C,C,C,W,C,C,A,O,I,C,C,C,C,E,C,E,C,I,C,C,A,E,C,C,C,C,A,C,C,A,S,C,C,C,C,C,C,M,C,E,E,c,A,E,E,I,C,A,A,C,A,A,Y,C,C,C,C,G,A,I,E,E,A,M,Q,C,A,O,G,I,C,E,O,C,M,K,A,C,I,W,C,A,I,Q,C,A,I,S,C,A,I,M,C,O,E,M,A,A,C,A,E,E,W,A,E,G,A,C,E,E,A,C,E,Q,A,E,E,E,C,C,C,C,A,C,E,E,C,C,Q,A,E,I,I,C,C,E,E,A,O,I,E,C,C,C,A,E,C,Q,A,E,E,M,K,C,C,A,Q,E,A,O,G,A,G,C,C,A,C,A,A,E,A,E,U,A,E,G,I,C,A,C,A,C,A,C,E,C,C,C,A,E,E,U,A,E,I,C,C,C,C,C,G,I,C,A,C,C,Y,E,C,I,C,A,C,E,A,C,E,E,U,A,E,C,C,Q,A,C,A,C,C,A,E,c,A,E,G,E,gB,C,U,C,E,C,A,K,C,C,G,C,C,C,C,I,E,E,E,C,E,A,A,C,E,A,C,E,E,E,A,C,C,A,A,C,A,E,C,A,C,E,A,A,E,E,E,A,C,C,I,C,A,K,C,O,C,C,C,C,C,C,C,C,G,C,A,C,A,E,A,C,A,C,W,E,C,C,C,A,C,C,W,E,C,C,E,O,I,G,E,E,E,C,C,A,K,C,C,I,E,E,C,E,E,A,A,C,G,G,A,E,A,E,A,K,E,C,C,M,A,E,A,A,C,I,C,C,A,K,C,K,C,C,E,C,C,C,C,C,A,A,K,C,Q,E,I,E,A,C,A,E,E,A,G,A,G,C,A,I,C,C,C,E,M,A,C,C,C,C,G,E,A,K,C,gB,C,C,A,I,E,C,C,C,A,C,M,G,G,C,E,A,I,C,C,C,C,A,E,I,E,E,C,E,I,E,C,C,C,C,A,I,E,G,C,C,I,C,C,C,C,A,I,E,C,E,C,G,C,C,C,C,A,I,E,G,C,C,I,C,C,C,C,A,C,C,C,A,E,C,C,A,C,A,E,C,E,I,G,C,C,E,K,C,O,C,E,I,G,C,C,C,G,I,I,C,E,I,G,C,A,E,I,C,A,I,C,W,C,I,C,C,C,E,E,I,C,A,I,C,W,C,E,I,G,C,C,C,M,W,G,I,E,A,E,E,C,E,U,C,E,I,M,C,C,A,C,S,G,G,G,A,E,E,A,C,Y,C,E,I,I,C,C,A,E,K,C,C,A,C,E,A,Q,C,C,C,C,K,C,C,C,M,E,I,E,G,M,E,C,C,O,G,I,E,A,C,E,A,I,I,C,C,O,G,I,C,E,C,G,C,C,O,C,G,C,G,E,E,A,C,A,C,G,A,C,C,A,G,E,C,A,C,C,A,C,C,A,A,C,C,C,C,C,C,C,C,C,C,C,C,E,E,E,C,C,C,A,A,I,A,C,C,gB,C,C,C,C,I,E,C,E,E,A,W,A,E,G,E,E,C,A,A,C,C,C,A,C,I,C,M,C,C,O,C,A,G,C,C,E,A,I,E,A,C,C,E,C,A,O,A,I,E,C,C,C,E,c,A,E,C,C,E,C,A,I,C,C,A,E,G,C,C,A,E,A,E,C,C,I,Y,C,C,E,C,A,M,C,C,C,C,C,A,C,A,C,A,C,E,C,A,C,C,C,C,A,A,A,C,G,G,C,Q,C,C,I,E,I,C,C,W,C,E,K,G,C,C,A,E,G,E,E,C,C,A,C,C,A,I,Y,E,K,G,C,M,C,C,C,E,C,A,C,C,A,C,I,G,C,E,M,C,A,A,E,M,A,C,C,I,Y,O,M,O,C,G,C,G,C,C,C,E,A,A,C,A,A,C,A,A,A,C,I,A,C,A,U,E,C,G,I,E,I,C,C,C,C,C,C,I,E,C,K,I,C,A,C,E,C,I,E,K,C,I,C,c,E,C,A,O,I,C,I,C,S,C,E,I,C,A,C,A,E,A,K,C,A,E,C,E,I,I,C,C,C,C,G,I,I,C,C,C,C,C,A,E,E,C,C,A,E,C,C,C,A,C,C,A,C,M,I,C,C,C,C,C,E,A,O,C,C,C,A,C,C,G,E,C,A,A,I,E,I,C,C,C,C,C,A,C,E,A,E,C,G,A,G,O,C,G,C,C,E,I,C,O,O,E,C,A,C,C,A,O,E,M,C,G,E,I,G,C,C,C,I,C,C,C,C,E,A,I,C,I,C,S,C,E,G,C,G,C,A,C,A,C,A,C,G,I,I,C,C,A,E,C,C,E,I,C,O,C,E,C,C,C,G,E,M,A,G,E,C,E,e,E,E,M,C,C,I,E,E,I,G,C,C,C,C,e,C,C,K,C,S,C,C,C,C,E,K,C,C,A,C,A,A,K,C,U,E,C,I,E,K,C,I,C,U,E,C,A,E,K,I,C,C,C,C,Q,C,U,C,a,C,C,C,M,C,E,E,iB,A,E,C,M,C,I,C,C,C,C,C,Q,E,G,E,C,K,C,A,K,I,E,A,G,C,I,E,G,G,I,C,C,C,C,C,C,M,C,a,C,C,C,A,M,C,E,E,S,A,E,E,G,Q,C,C,A,A,M,E,C,C,A,C,M,I,A,C,A,C,E,C,A,W,C,C,K,I,C,C,E,C,I,E,G,G,I,C,C,C,C,C,C,M,C,gB,C,C,C,A,M,C,E,E,S,A,E,E,G,Q,C,C,A,A,M,E,C,C,A,C,M,I,C,A,C,C,E,A,C,A,C,A,E,I,C,A,E,G,C,C,A,E,G,C,C,M,I,C,E,G,C,G,C,C,C,G,E,A,G,U,E,C,E,A,I,C,C,E,E,C,K,C,C,C,C,C,Q,C,C,A,E,E,G,K,K,C,E,E,C,A,I,E,O,C,E,C,C,A,E,C,C,A,A,E,E,E,A,G,I,C,E,C,C,8C,C,C,A,G,E,C,G,C,E,C,G,E,Y,C,E,G,C,A,C,A,E,K,C,E,I,O,C,E,I,C,G,A,C,C,E,G,I,E,O,C,E,K,G,C,E,K,O,C,E,K,e,C,C,A,A,O,M,G,C,A,K,C,I,E,C,I,C,C,C,C,I,E,A,I,C,sB,C,G,A,C,C,K,E,E,C,C,C,C,C,A,M,C,C,C,A,C,E,E,S,A,E,M,I,C,C,C,C,C,C,M,C,a,C,W,C,E,A,C,C,W,C,A,C,A,A,K,C,C,C,C,C,C,C,C,C,C,E,C,E,E,M,A,E,E,E,C,A,E,G,kB,kB,C,gB,C,C,M,C,oB,C,W,C,M,C,M,C,C,C,C,E,A,C,Q,G,c,E,C,C,C,C,A,C,C,A,I,E,C,E,E,I,O,A,E,E,C,A,C,E,C,M,C,E,E,O,A,E,M,I,C,Q,C,C,M,C,M,a,E,Q,C,C,C,C,C,C,A,A,M,E,C,E,C,C,I,C,e,E,G,E,e,A,E,I,C,C,A,G,C,E,G,C,E,C,O,G,G,I,C,C,E,E,E,K,O,G,G,E,S,A,E,E,G,C,C,C,C,C,C,C,C,I,E,E,E,A,E,C,A,C,C,A,E,M,A,C,E,E,c,A,E,E,E,C,I,C,C,A,A,G,C,E,A,M,G,A,C,E,I,E,C,A,G,G,C,E,A,C,I,C,E,C,Q,C,E,C,Q,C,E,C,S,C,E,C,S,C,E,C,C,A,C,E,E,M,A,E,C,E,E,U,A,E,I,A,C,A,G,A,E,gC,C,gB,C,C,M,C,kC,C,C,C,A,I,E,C,E,C,C,S,A,E,E,C,C,A,E,C,C,A,C,E,E,M,A,E,C,E,E,S,A,E,E,C,C,E,A,C,G,C,E,E,S,A,E,E,C,C,C,C,C,C,+B,C,gB,C,C,M,C,+B,C,C,C,A,E,I,E,C,C,E,E,S,A,E,E,E,C,C,A,A,G,C,I,E,E,A,C,A,E,C,E,E,G,M,A,E,C,E,E,S,A,E,E,E,A,C,E,C,C,C,A,E,C,E,E,G,M,A,E,C,E,E,S,A,E,E,E,A,E,E,C,C,C,A,C,C,C,A,E,E,C,Q,A,E,E,E,A,E,C,C,A,I,A,I,C,C,C,C,C,C,E,C,E,C,C,G,C,E,A,C,Q,A,C,C,C,A,E,G,C,G,C,E,E,C,C,G,C,C,C,A,C,A,C,G,E,C,C,E,E,Y,A,E,G,A,E,C,C,E,E,C,C,A,C,M,I,A,C,A,C,E,E,C,A,C,A,E,A,G,I,E,A,E,C,K,A,K,C,O,C,C,A,E,E,E,C,G,A,A,C,C,A,I,A,C,E,A,E,C,G,E,C,C,C,C,E,M,A,G,E,G,0B,C,gB,C,C,M,C,6B,C,C,C,A,A,G,C,I,E,E,E,E,A,A,C,C,A,G,A,I,E,A,E,M,A,A,K,C,O,C,C,A,E,I,I,C,E,A,M,A,C,C,C,C,C,C,E,M,A,E,G,E,+B,C,gB,C,C,M,C,iC,C,C,C,A,A,C,E,E,M,A,E,G,E,S,A,E,E,E,C,C,G,C,G,C,E,E,S,A,E,E,C,C,C,C,C,C,0C,C,gB,C,C,M,C,0C,C,C,C,A,E,I,I,C,C,E,E,S,A,E,E,E,A,C,G,C,C,A,G,C,I,E,E,E,E,C,A,C,C,A,E,C,I,E,A,E,M,A,C,I,C,O,C,C,A,E,I,K,C,E,A,M,C,C,A,C,E,C,E,M,A,E,G,E,gC,C,gB,C,C,M,C,kC,C,C,C,A,A,O,E,I,K,C,yC,C,K,C,G,C,C,G,C,A,C,E,A,C,A,C,C,C,C,C,A,C,C,C,C,E,A,C,C,S,A,E,E,G,C,C,C,C,C,C,A,A,M,E,C,C,C,C,E,M,A,G,E,E,C,E,I,C,gB,C,C,M,C,U,a,E,I,C,I,E,C,C,C,C,A,C,A,A,C,E,E,M,A,E,E,M,A,C,W,E,G,E,M,K,E,C,2B,C,gB,C,C,M,C,M,M,E,E,I,C,gB,C,W,C,E,S,C,C,I,C,M,C,C,S,C,qD,C,I,C,gB,C,I,C,E,M,G,C,C,C,C,A,I,E,M,E,E,C,a,C,E,E,M,C,C,C,E,I,C,C,A,A,C,E,E,M,A,E,A,I,I,E,8B,C,gB,C,C,M,C,c,a,E,I,C,C,G,C,C,E,G,C,C,S,C,E,M,G,C,C,C,C,A,I,E,A,C,E,C,E,I,C,C,A,E,E,M,A,E,C,E,M,E,C,A,S,A,C,C,C,I,E,E,A,C,A,C,C,C,C,A,I,C,G,C,C,C,C,C,C,E,G,G,C,C,E,C,A,E,I,A,C,G,E,C,A,C,C,C,A,G,C,I,C,C,C,C,C,C,E,G,G,C,C,E,C,C,I,E,C,C,C,E,Q,A,E,C,C,C,C,C,C,A,C,C,C,C,C,E,G,C,C,I,A,A,C,A,C,C,E,E,A,I,C,C,C,A,E,I,A,C,A,Q,C,A,C,E,G,E,A,G,G,C,E,C,C,C,C,C,M,E,G,C,A,E,I,A,U,C,E,C,A,C,G,C,I,C,E,G,G,C,E,C,E,O,E,G,C,A,G,C,C,A,C,A,C,E,C,A,A,C,C,C,A,E,C,E,C,A,A,I,C,I,C,E,E,I,C,E,C,C,A,M,G,E,M,A,E,E,C,C,C,C,C,A,C,C,M,A,G,C,C,C,C,C,C,A,I,C,I,C,O,C,C,M,C,kB,C,W,C,C,C,A,C,C,A,G,C,I,E,I,E,I,C,C,C,C,C,E,A,E,E,C,C,C,A,C,C,K,I,C,I,C,O,C,C,M,C,2B,C,W,C,M,C,M,C,C,C,C,E,C,A,M,E,C,C,C,A,E,A,I,C,C,E,C,E,I,I,C,I,C,O,C,C,M,C,0B,C,W,C,M,C,M,C,C,C,C,E,C,M,C,C,C,C,A,C,C,C,A,E,C,G,E,A,C,A,E,C,E,C,C,C,C,C,C,E,G,O,C,C,C,M,C,E,E,iB,A,E,C,O,C,I,C,U,E,C,K,C,E,C,C,A,G,I,C,C,A,G,C,C,C,I,C,C,C,C,G,I,C,C,U,C,C,M,G,E,iB,A,E,C,E,C,I,C,sB,C,G,A,C,O,C,I,C,Y,C,E,C,O,C,C,C,C,A,O,M,I,C,C,C,C,C,I,C,C,C,C,C,E,A,E,E,C,G,U,C,A,C,A,C,A,C,A,C,C,C,A,C,A,A,K,C,C,C,C,C,C,C,C,C,C,E,I,E,I,C,A,W,C,G,E,G,C,A,C,A,C,W,C,G,M,C,A,C,O,E,O,G,I,C,K,O,C,C,E,C,C,E,A,C,C,C,E,G,C,O,C,G,C,C,E,G,C,C,A,A,G,G,I,C,C,C,C,C,I,C,C,C,C,C,M,C,M,C,E,K,I,E,K,G,E,C,C,C,C,A,C,A,A,K,C,U,C,C,C,C,C,C,M,C,E,E,S,A,E,M,I,C,C,C,C,C,C,M,C,Y,C,C,E,G,E,G,C,K,C,A,C,A,A,K,C,mB,C,C,C,C,C,C,M,C,E,E,S,A,E,M,I,C,C,C,C,C,C,M,C,qB,C,C,E,G,E,G,C,K,C,A,C,A,A,K,C,O,C,C,C,C,C,C,M,C,E,E,O,A,E,M,I,C,C,C,C,C,C,M,C,S,C,C,E,G,C,A,C,G,C,A,C,A,C,S,C,C,C,C,C,C,C,C,I,E,C,E,E,C,Q,A,E,E,O,G,C,C,A,M,C,E,E,O,A,E,M,I,C,C,C,C,C,C,M,C,Y,U,C,C,C,E,G,A,C,A,C,G,C,A,C,A,C,mB,C,C,C,C,G,a,C,M,C,C,S,C,C,M,C,E,E,iB,A,E,C,W,C,I,C,c,E,C,I,C,I,C,Q,C,C,M,C,sB,C,iB,C,E,C,C,I,G,C,I,C,U,E,C,C,C,A,E,A,E,W,C,I,C,G,G,E,A,A,C,C,E,G,E,E,E,E,A,K,C,wC,C,C,A,O,I,C,wB,C,E,A,G,I,C,iB,C,E,C,A,K,C,C,C,A,C,A,C,A,C,C,C,E,G,C,E,E,W,A,E,E,E,C,A,C,C,M,M,I,C,C,C,C,C,C,M,C,U,C,S,C,K,iB,E,C,C,A,I,E,I,C,C,G,Q,C,G,E,C,C,E,A,Q,E,O,I,E,E,C,G,A,C,C,C,A,M,I,C,C,A,E,C,C,M,C,U,C,Q,uB,E,C,A,C,A,A,K,C,Q,C,A,C,C,C,C,C,G,S,C,Q,C,C,C,M,C,E,E,iB,A,E,C,O,C,I,C,U,E,C,M,C,I,C,C,C,C,C,E,C,C,C,E,C,C,M,C,A,A,I,E,A,E,I,A,C,A,I,C,U,C,E,E,C,A,C,G,C,A,C,A,c,C,C,C,C,G,S,C,Q,C,C,C,M,C,E,E,iB,A,E,C,O,C,I,C,U,E,C,M,C,I,C,C,C,C,C,C,M,C,gB,M,C,C,C,C,A,C,C,O,A,I,E,A,E,I,A,C,A,I,C,wB,C,E,E,C,A,C,G,C,A,C,A,qB,C,C,C,C,G,S,C,Q,C,C,C,M,C,E,E,iB,A,E,C,O,C,I,C,U,E,C,M,C,I,C,C,C,C,C,C,M,C,uB,M,C,C,C,C,A,C,C,A,G,I,E,A,E,I,G,I,C,A,G,I,E,E,I,I,E,I,E,E,I,a,C,C,I,E,A,M,I,C,C,C,C,C,C,M,C,gB,M,C,C,C,C,A,A,G,A,E,E,E,E,M,A,K,C,qD,C,C,A,E,I,a,C,E,A,Q,C,A,A,O,I,C,uB,C,E,E,C,A,C,G,C,A,C,A,oB,C,C,C,C,G,Q,C,C,C,M,C,E,E,iB,A,E,C,O,C,I,C,U,E,C,M,C,I,C,C,C,C,C,C,M,C,sB,M,C,C,C,C,A,C,C,O,A,A,I,E,A,E,I,C,A,C,E,E,O,A,E,E,C,A,G,C,C,A,C,O,C,C,C,C,I,E,I,A,C,U,C,G,E,E,C,C,C,C,C,A,A,E,E,E,C,C,C,A,G,S,C,C,Q,C,C,M,C,E,E,iB,A,E,C,O,C,I,C,U,E,C,M,C,I,C,C,C,C,C,C,M,C,S,C,M,E,C,C,C,C,C,A,O,E,G,C,A,A,C,E,A,C,G,C,Q,C,C,C,G,C,A,G,C,C,C,M,C,C,C,C,C,E,E,M,A,E,G,E,yC,C,uB,C,C,S,C,gB,C,C,A,C,A,A,K,C,W,C,C,C,C,O,M,E,W,C,Q,C,I,C,E,C,A,C,C,C,E,C,S,C,C,C,C,I,E,M,A,I,C,W,C,I,C,C,I,A,E,M,A,E,A,M,G,E,C,A,I,A,C,A,A,K,C,W,C,C,C,C,I,E,M,A,I,C,W,C,I,C,C,I,A,E,M,A,E,A,M,I,E,C,A,I,A,C,A,A,K,C,a,C,C,C,C,E,C,E,E,A,U,A,E,G,I,A,C,C,A,C,C,C,E,Q,A,E,E,K,I,C,C,C,C,W,E,C,e,C,C,A,G,C,I,E,K,C,E,W,C,a,C,I,C,C,A,E,I,E,G,K,C,E,C,I,+C,C,C,I,C,C,A,E,M,A,E,Q,C,A,G,C,C,C,A,I,E,G,I,C,C,E,S,C,C,M,I,C,A,I,E,I,E,Q,A,C,E,C,K,yC,C,C,I,C,C,A,E,E,I,E,I,C,G,C,C,C,A,A,G,E,C,I,C,W,C,I,C,A,C,C,K,E,A,I,C,A,O,E,A,E,C,G,E,C,E,C,C,E,E,O,A,E,E,G,O,C,E,I,E,C,E,G,E,E,C,E,E,O,A,E,E,G,a,C,C,C,M,I,A,C,M,E,A,C,A,E,C,E,C,kB,C,C,C,C,C,C,C,C,I,E,I,C,C,A,A,E,E,C,C,G,E,C,C,A,A,C,E,C,E,I,C,C,oB,C,G,C,C,C,C,O,C,K,C,E,K,A,C,E,C,C,C,G,C,C,A,E,K,C,A,I,G,C,G,C,C,C,C,I,C,I,C,qB,C,G,C,C,C,A,I,E,A,G,E,E,A,K,E,I,C,C,E,E,C,E,G,A,E,E,A,C,A,C,C,S,C,G,E,A,C,C,C,C,C,C,O,A,C,A,M,E,C,E,K,C,G,C,K,C,G,A,E,C,C,A,C,I,C,O,C,E,C,A,C,C,E,C,C,A,C,A,I,E,C,E,O,C,G,E,A,I,E,A,I,C,C,G,C,C,A,I,C,G,C,O,C,G,E,C,E,A,C,A,C,A,S,A,E,S,C,S,C,C,M,C,S,C,C,C,C,A,C,C,E,C,C,A,E,M,A,I,C,c,E,C,A,C,A,C,A,C,A,A,K,C,Y,C,C,C,C,C,E,E,M,A,G,E,G,kB,C,iB,C,C,S,C,c,C,C,A,C,A,A,a,C,C,C,C,I,E,G,C,C,C,C,C,C,G,C,G,I,A,C,A,C,A,C,E,E,E,A,Y,C,E,G,E,C,C,A,I,C,C,C,C,C,M,C,G,C,A,G,C,C,M,C,C,C,C,C,C,I,E,A,I,G,A,C,C,A,E,E,E,I,C,A,C,C,C,E,C,A,E,E,C,E,A,I,C,C,C,C,C,M,C,G,G,C,A,C,A,A,A,C,C,C,A,I,C,M,C,C,G,C,C,C,C,C,G,C,E,C,I,C,C,I,M,E,E,E,C,C,C,C,C,G,C,C,I,E,G,O,C,E,E,C,I,A,C,A,C,A,A,E,C,G,C,E,K,E,K,E,E,E,E,C,G,C,C,C,A,A,C,E,I,C,C,A,K,C,Y,C,C,C,C,I,I,G,E,I,C,C,C,C,C,M,E,C,A,E,E,A,C,S,C,A,C,A,A,c,C,C,C,C,O,E,C,G,E,A,I,O,C,A,I,O,C,A,I,S,C,O,I,E,E,C,G,C,A,C,I,K,E,C,A,C,I,E,I,E,E,oB,C,I,C,C,A,O,E,Q,O,C,I,C,e,C,A,E,A,I,I,C,C,C,A,I,W,C,O,I,E,yB,C,I,C,E,C,G,C,A,C,I,O,C,O,I,E,sB,C,I,C,E,C,K,C,A,C,I,a,C,O,I,E,4B,C,I,C,E,C,G,C,A,C,I,Q,C,O,I,E,uB,C,I,C,E,C,K,C,C,A,A,M,A,K,C,C,mB,E,E,C,G,C,C,C,A,C,A,A,kB,C,C,C,C,C,C,I,I,G,E,I,C,C,C,C,C,M,E,C,A,G,E,C,S,G,E,C,E,C,A,M,E,A,E,C,S,C,I,E,C,A,E,C,S,C,E,E,C,C,C,I,E,A,E,I,C,E,C,A,A,I,E,I,C,C,C,C,E,E,I,C,C,I,C,C,C,C,C,C,A,M,A,A,C,A,K,C,C,C,C,C,C,C,C,E,I,E,C,K,E,E,G,C,C,C,A,K,C,A,G,I,K,I,E,G,E,G,G,A,C,C,G,I,A,C,C,A,C,C,C,O,G,E,C,K,E,C,M,C,K,K,C,G,C,C,C,C,C,C,C,K,C,C,A,I,C,C,A,E,C,G,C,E,C,E,C,E,I,A,C,A,A,K,C,C,C,C,C,C,E,I,E,M,E,E,A,G,C,C,C,A,E,C,C,C,E,C,A,E,C,G,A,C,C,C,C,C,G,C,G,A,C,C,C,C,E,C,A,I,E,I,C,G,W,C,G,E,C,M,C,C,G,M,E,C,C,Y,C,I,O,C,C,C,K,C,I,G,C,C,C,K,E,E,G,M,C,E,C,C,A,I,C,C,C,C,C,G,C,E,C,E,A,A,C,C,K,C,C,A,C,C,G,C,E,C,C,C,C,C,C,I,E,C,K,I,C,C,C,C,C,G,E,C,C,G,E,C,Q,C,I,C,U,E,I,E,A,C,C,C,C,A,C,C,C,M,E,C,E,C,S,C,K,E,C,A,E,C,M,E,E,E,C,C,E,A,I,C,C,C,C,E,E,C,S,C,K,C,I,C,C,C,C,C,C,C,I,A,C,A,A,K,C,I,C,C,C,C,C,C,I,E,C,K,I,C,C,C,C,C,G,E,C,C,G,E,C,Q,C,I,C,U,E,I,E,A,C,C,C,C,A,A,E,C,M,E,C,E,C,S,C,K,E,C,A,E,C,M,E,E,E,C,C,E,A,I,C,C,C,C,E,E,C,S,C,K,C,I,C,C,C,C,C,C,C,I,A,C,A,A,K,C,I,C,C,C,G,C,C,C,I,E,C,K,I,C,C,C,C,C,E,G,A,C,C,C,A,C,G,A,C,E,C,E,C,Q,C,M,C,O,E,G,C,A,E,E,C,A,Q,C,M,C,A,O,E,C,Q,C,E,C,Q,C,M,C,C,U,C,M,C,C,E,E,A,I,E,I,C,C,Y,C,I,C,E,E,C,C,A,C,A,C,C,G,E,C,A,A,C,A,A,E,I,C,C,G,E,E,E,E,C,A,I,C,C,A,E,C,C,A,C,K,C,C,C,C,C,A,A,C,A,E,C,E,C,Q,C,M,G,E,C,M,E,A,E,C,S,C,I,E,C,A,I,C,C,C,C,C,M,C,E,C,E,C,C,C,E,C,A,C,A,A,C,A,I,C,a,C,C,C,C,G,E,C,E,E,E,C,K,I,C,C,C,C,C,K,C,C,G,A,E,C,C,A,C,A,Q,C,M,C,A,C,C,A,A,I,E,C,C,A,C,G,G,W,C,C,G,I,C,C,C,C,C,M,E,C,A,G,E,A,M,C,A,A,O,C,C,A,G,C,C,C,S,C,C,C,C,G,E,C,E,E,E,C,K,I,C,C,A,E,C,K,C,C,G,A,E,C,C,A,C,A,Q,C,G,C,C,U,C,C,E,C,C,E,E,C,A,A,E,C,C,A,E,E,C,A,C,G,G,C,W,C,G,I,C,C,C,C,C,M,E,C,A,E,E,E,E,E,C,E,G,C,C,E,Q,C,C,E,C,C,G,I,C,C,C,A,C,C,A,I,C,A,C,G,C,C,C,C,C,C,I,E,C,K,I,C,C,C,C,C,G,E,C,A,C,A,E,C,E,I,I,C,A,G,E,C,I,C,C,E,C,A,Q,C,G,C,C,U,C,C,E,C,C,E,K,C,C,C,G,G,C,C,A,C,A,A,C,C,C,Q,C,M,C,E,C,C,C,A,A,A,O,G,C,E,C,C,C,C,Q,C,M,G,E,C,M,E,A,E,C,S,C,I,E,C,A,I,C,C,C,C,C,M,C,E,C,E,C,C,C,I,A,C,A,A,K,C,kB,C,C,C,C,G,E,C,E,C,K,C,S,C,Y,C,C,C,M,I,C,C,C,C,C,G,E,C,A,C,C,E,E,A,E,C,A,C,G,C,C,C,C,C,M,C,G,A,C,C,G,C,G,G,C,E,C,Q,C,Y,C,C,C,G,I,C,C,C,C,C,A,G,E,E,E,A,E,C,A,C,G,C,C,C,C,C,M,C,G,A,C,C,K,I,A,C,A,A,K,C,W,C,C,C,C,C,C,O,M,I,C,E,C,E,E,C,A,A,K,A,C,A,C,a,C,C,C,C,C,C,O,I,C,G,C,E,E,C,A,A,I,C,C,C,M,E,C,O,I,C,C,C,C,A,C,A,A,O,E,C,I,I,K,E,E,C,kB,E,C,A,I,C,C,A,E,C,I,E,C,C,I,C,a,C,G,I,A,C,A,C,A,C,C,E,C,C,A,E,C,C,M,E,C,O,I,C,C,A,I,C,C,C,C,A,C,A,I,M,C,C,C,C,C,C,I,C,G,C,M,E,C,I,C,M,C,C,G,C,M,E,C,A,I,C,K,E,G,C,A,C,C,C,E,C,C,C,C,G,I,C,C,C,C,C,C,C,C,A,I,E,I,C,C,C,C,C,C,G,A,C,C,O,C,C,C,C,C,G,E,E,A,C,E,E,M,A,G,E,G,qC,C,uB,C,C,S,C,O,C,C,C,A,A,I,I,K,A,I,C,kB,C,A,C,E,A,C,A,C,K,C,I,I,C,C,C,C,C,C,C,A,C,C,A,C,G,C,C,C,C,C,I,C,C,E,C,C,E,G,E,E,A,Y,C,E,G,E,C,C,A,E,G,C,C,I,E,C,E,A,C,A,C,A,A,M,E,C,G,I,E,A,I,C,C,C,C,C,I,I,K,A,I,C,kB,C,A,C,E,A,C,A,C,M,E,C,C,A,I,C,C,C,C,C,I,C,A,I,C,C,C,C,C,M,E,E,C,I,E,E,G,A,C,C,A,E,C,E,C,C,C,C,C,C,E,A,G,C,C,I,G,E,C,I,C,E,G,C,C,G,A,C,C,C,C,C,C,C,E,G,C,U,C,E,C,C,A,E,G,iE,C,qH,I,E,E,C,C,O,C,E,E,C,C,Q,E,C,C,C,C,K,E,E,E,C,C,C,O,S,E,C,C,C,E,G,E,C,G,I,C,C,M,E,I,I,C,A,C,E,E,M,A,G,E,G,e,C,uB,C,W,C,C,C,A,C,A,A,K,A,U,E,C,C,C,E,C,G,E,C,A,E,E,W,A,E,E,C,A,C,E,I,E,A,E,C,C,G,E,C,C,C,C,E,E,c,A,E,E,C,C,C,E,C,C,A,I,E,E,C,G,C,C,I,E,E,A,C,G,C,A,E,C,G,C,O,C,G,C,C,E,I,M,E,C,C,E,E,c,A,E,E,E,C,C,C,C,C,E,C,C,C,E,E,E,A,C,C,A,C,E,E,c,A,E,E,K,M,E,G,E,E,S,E,C,2B,C,S,C,G,C,C,C,C,G,C,C,C,C,C,G,C,E,I,M,E,C,A,O,M,C,E,E,iB,A,E,E,C,A,A,C,C,I,E,Q,A,A,I,S,C,C,C,C,E,E,gB,A,E,I,C,C,Q,C,G,I,A,C,A,A,C,A,C,A,A,K,C,Q,C,C,C,C,O,E,I,C,M,e,C,C,mB,C,M,I,C,U,E,C,E,C,A,K,A,C,A,C,W,C,C,C,C,O,A,G,C,E,E,I,C,C,C,A,C,A,A,C,I,C,mB,C,C,C,C,I,E,E,I,A,C,M,e,C,C,A,E,C,K,E,I,C,C,C,A,C,C,E,E,C,E,C,I,G,E,C,I,C,M,I,C,Q,C,U,C,C,A,I,E,A,E,C,O,G,E,C,O,C,M,I,C,W,C,E,C,C,A,I,E,K,C,I,C,Q,C,U,E,C,A,G,A,G,C,I,O,C,C,I,E,C,E,E,A,S,A,E,E,C,M,C,C,A,C,E,E,c,A,E,I,E,C,I,E,C,8B,C,Y,C,E,A,O,C,C,A,K,C,C,C,M,C,E,K,E,C,A,I,E,I,E,E,A,C,W,E,I,C,C,A,E,C,mB,C,G,I,E,E,A,C,O,G,C,G,E,C,G,E,C,C,C,A,C,C,C,E,c,A,G,E,G,2C,C,I,C,E,C,A,C,A,C,G,E,C,G,M,E,C,G,A,C,C,C,G,C,E,E,E,E,U,A,G,E,G,wE,C,I,C,E,C,A,C,A,C,G,E,C,G,E,M,E,C,G,A,C,C,C,I,E,E,C,W,E,I,C,C,A,E,C,mB,C,E,C,G,C,C,C,K,G,C,G,E,C,G,E,A,C,E,G,I,C,C,I,E,K,C,E,M,I,E,C,A,C,E,E,M,A,E,I,E,E,K,G,C,mC,C,uB,C,C,S,C,a,C,C,C,A,I,E,A,E,C,O,G,E,C,O,C,E,K,G,A,C,C,I,C,I,E,K,C,E,M,I,E,C,A,G,I,E,A,E,C,G,C,G,I,E,E,K,O,E,A,I,E,C,C,oB,C,G,E,C,gB,E,E,C,gB,C,M,C,C,C,C,G,C,C,C,A,E,C,G,C,C,C,A,I,E,E,C,O,C,C,I,E,E,C,G,I,A,C,O,E,C,O,C,A,E,C,W,C,E,E,C,G,C,e,C,E,K,C,A,C,E,E,A,E,C,W,E,G,A,Y,C,E,K,O,A,C,C,I,E,A,E,C,mB,G,E,C,mB,C,E,K,e,A,C,M,A,I,E,C,C,Q,E,G,E,M,A,E,C,E,Q,2B,C,uB,C,C,S,C,qB,C,C,C,A,A,G,C,E,E,Q,G,E,C,O,C,E,K,G,A,C,C,E,C,G,C,C,C,C,C,E,E,M,A,G,E,G,gC,C,uB,C,C,S,C,mB,C,C,C,K,C,G,E,C,G,E,C,G,E,C,G,M,E,C,G,A,C,E,C,I,E,A,E,C,W,G,E,C,W,C,E,K,O,A,C,C,I,E,A,E,C,mB,G,E,C,mB,C,E,K,e,A,C,E,A,O,M,G,E,iB,A,E,E,C,A,A,C,C,G,C,qB,C,C,C,C,I,E,E,I,C,M,C,C,C,C,G,E,C,C,G,I,E,A,E,E,K,G,E,E,K,C,C,M,E,I,C,M,M,C,C,U,E,C,C,A,O,A,C,C,I,E,A,E,E,G,G,E,E,G,C,M,I,C,Q,E,C,C,A,C,C,A,E,C,E,C,W,C,C,C,C,O,E,I,C,M,O,C,C,W,C,M,I,C,Y,C,E,C,A,C,A,A,C,I,C,I,C,C,C,C,O,E,I,C,M,A,C,C,I,C,M,I,C,Y,C,E,C,A,C,A,A,C,I,C,W,C,C,C,C,I,E,E,I,A,C,M,O,C,C,A,O,M,E,M,K,C,E,C,A,C,C,C,E,C,e,C,C,C,C,I,E,E,I,A,C,M,W,C,C,A,E,C,K,I,C,mB,C,E,A,C,C,M,E,C,G,C,A,I,E,E,C,U,C,I,C,G,A,C,C,K,M,E,M,c,C,M,I,C,e,C,G,C,A,C,C,C,C,K,C,C,C,C,C,E,E,M,A,G,E,G,4C,C,uB,C,C,S,C,W,C,C,A,C,A,C,A,E,c,C,C,O,O,G,A,E,O,A,A,K,Q,C,C,C,C,C,K,C,G,C,E,E,A,C,C,c,A,E,I,C,S,C,C,C,A,C,A,A,G,E,C,U,E,C,O,I,C,O,A,C,A,A,O,C,C,C,C,O,I,E,I,C,G,I,C,E,C,E,C,C,C,A,C,A,C,A,E,G,E,M,A,G,E,C,E,qB,E,E,C,C,E,qB,C,W,C,C,C,A,C,A,A,K,A,C,e,C,C,C,C,I,C,C,C,C,C,c,C,iB,C,A,C,A,A,K,C,W,C,C,C,C,I,C,C,C,C,C,U,C,a,C,A,C,A,A,K,C,a,C,C,C,C,C,C,C,C,I,C,C,C,C,C,Y,C,e,C,A,C,A,C,A,E,U,C,W,qB,O,c,C,E,a,yC,I,E,G,C,G,A,E,C,A,mB,C,E,O,A,C,E,E,G,A,C,I,C,E,A,C,E,A,A,A,C,G,I,C,C,C,C,G,C,4B,C,C,A,O,C,G,C,C,0B,E,E,K,+B,C,C,C,A,O,C,G,C,E,C,C,A,O,C,G,C,2E,C,C,A,O,C,G,C,oE,C,C,A,O,C,G,C,E,C,C,A,O,C,G,C,yE,C,C,A,O,C,G,C,wE,C,C,A,O,C,G,C,+E,C,C,A,O,C,G,C,E,C,C,A,O,C,G,C,sD,C,A,C,M,C,G,C,4B,C,C,A,C,mK,I,E,E,C,C,K,E,E,E,C,C,O,I,G,I,C,A,G,C,A,G,C,A,G,C,A,C,E,C,A,C,G,A,A,a,C,C,C,I,C,C,C,C,C,E,I,C,C,A,C,A,C,C,I,C,A,I,C,C,C,C,C,I,C,C,A,E,C,I,C,I,C,C,A,I,C,C,C,C,E,E,G,C,A,C,C,A,E,C,I,C,A,I,C,C,C,C,E,C,C,A,G,C,M,C,C,C,C,M,A,K,C,+B,C,A,C,A,A,Y,C,C,C,C,C,C,M,A,K,C,+B,C,A,C,A,A,Q,C,C,C,C,M,A,K,C,+B,C,A,C,A,A,K,C,C,C,C,C,C,E,G,C,I,E,A,I,C,C,C,C,G,I,C,C,C,C,C,I,C,U,C,I,C,C,A,G,C,C,A,I,E,I,C,A,C,E,C,E,M,A,I,C,C,A,E,C,A,A,M,E,C,E,C,C,C,E,E,O,A,E,E,G,oB,C,E,e,E,C,E,G,M,C,M,E,A,G,A,C,G,E,E,C,I,C,A,C,C,C,C,I,C,A,I,C,C,C,C,C,kB,C,I,C,I,C,Q,C,I,C,C,A,E,C,C,C,A,O,A,A,I,E,K,C,I,C,C,C,C,C,U,E,C,A,G,A,I,C,C,C,C,E,C,I,C,C,C,C,C,C,C,C,A,I,C,C,C,C,C,O,G,E,K,E,C,C,K,A,K,C,e,C,C,A,G,I,C,C,C,C,C,C,M,A,I,E,I,E,I,C,C,C,C,C,I,C,sB,C,C,E,C,A,C,I,E,I,C,Y,C,I,C,C,C,C,C,G,A,G,C,C,C,E,C,E,K,C,G,C,O,C,G,A,E,C,C,A,C,C,C,C,C,I,C,O,C,I,C,C,A,E,C,A,C,A,E,C,G,I,E,I,C,C,C,C,C,A,I,A,I,C,C,A,E,C,E,E,A,C,A,E,I,C,A,I,I,A,A,C,C,A,C,C,A,C,S,E,A,I,C,C,C,C,C,I,C,qB,C,C,E,C,A,C,A,C,C,A,C,A,C,I,E,C,I,C,C,C,C,E,C,I,C,C,C,C,E,E,E,C,C,C,C,C,C,C,C,C,C,C,A,C,A,I,E,C,I,C,C,C,C,E,C,I,C,C,C,C,E,E,G,C,A,C,C,C,C,E,E,E,C,C,C,C,C,C,E,C,A,I,C,C,C,C,C,G,C,O,C,I,C,C,C,C,C,C,A,C,A,K,C,C,C,C,G,I,C,C,C,C,E,C,A,C,E,C,C,C,C,C,C,G,C,O,C,I,C,C,C,C,C,A,C,A,A,M,E,C,I,C,K,E,A,C,A,C,A,E,kB,C,E,E,e,Q,C,E,I,Q,I,C,A,A,O,G,G,A,C,C,C,C,C,K,C,G,I,C,A,C,A,C,A,C,C,E,E,C,C,I,C,I,C,S,C,A,G,A,C,A,A,C,C,A,C,C,I,C,C,C,C,O,I,E,sB,C,E,I,C,C,A,C,C,C,A,C,A,A,K,C,U,C,C,C,C,O,A,M,E,A,C,G,C,C,c,C,C,I,C,C,C,C,C,C,A,C,A,A,K,C,Y,C,C,C,C,C,C,I,I,K,C,C,E,G,C,A,C,C,G,C,C,C,C,C,E,M,E,C,E,E,E,I,E,C,C,A,C,A,C,C,E,yB,C,E,I,Q,E,K,C,M,G,C,A,C,C,C,C,O,M,E,I,C,C,gC,C,E,C,A,C,A,A,K,C,Y,C,C,C,C,C,C,I,I,K,C,C,E,G,C,A,C,C,Q,C,E,C,C,E,C,C,4B,O,c,C,E,a,sG,I,E,E,C,C,G,K,E,E,C,C,O,C,E,E,C,C,I,I,E,E,C,C,Q,E,C,C,C,C,K,E,E,E,C,C,O,E,C,C,C,C,Q,A,E,E,C,C,Q,E,E,C,C,Q,E,E,A,C,C,Q,E,C,M,uC,C,K,C,I,C,C,A,S,E,C,E,G,A,I,E,G,E,A,O,A,C,O,I,C,A,C,C,A,A,A,U,E,O,E,G,O,C,A,O,E,G,A,C,I,C,O,C,G,E,C,E,E,E,G,A,C,G,G,E,C,C,C,G,E,A,O,E,G,C,G,M,C,I,C,G,E,C,G,C,C,E,G,A,E,A,C,C,A,E,C,A,C,C,E,C,A,A,G,C,C,A,C,A,A,C,M,A,K,C,C,mB,E,E,E,C,C,O,E,C,C,C,A,A,C,A,A,S,E,C,S,A,A,E,E,C,E,A,Q,E,C,A,C,C,A,G,C,K,E,C,E,K,E,G,E,M,C,C,A,O,E,G,Y,A,C,A,A,I,E,C,O,E,E,A,G,U,C,I,C,c,C,E,C,Y,C,C,I,E,C,A,a,C,G,C,Y,C,G,C,e,C,I,A,A,C,M,U,E,C,a,C,O,A,A,a,C,C,C,C,C,K,C,G,E,C,E,A,C,C,A,A,U,A,E,G,C,E,C,C,A,C,e,A,E,I,C,S,C,C,C,A,C,A,A,G,I,C,C,C,C,C,E,E,M,A,G,E,G,6B,C,uB,C,C,S,C,gB,C,C,A,C,A,A,K,C,U,E,C,O,I,C,O,A,C,A,A,K,C,mB,C,C,C,C,O,M,I,C,Y,C,E,A,C,A,A,C,I,C,wB,C,C,C,C,I,E,A,E,G,A,C,C,A,C,C,C,A,G,A,E,A,I,C,C,I,E,E,A,C,G,C,A,E,I,C,C,A,K,I,C,C,G,E,E,I,C,E,E,c,A,E,E,G,C,C,Q,C,C,A,C,E,E,c,A,E,I,E,G,C,C,E,S,E,G,I,C,O,C,W,E,C,uB,C,a,C,G,A,C,C,A,A,I,C,C,C,C,C,C,A,C,C,A,K,C,C,A,I,C,I,C,O,C,A,G,I,E,A,E,A,Q,E,E,I,C,C,A,K,I,C,C,C,A,Q,C,M,I,C,Q,C,W,C,C,G,C,C,I,C,I,C,O,C,C,A,C,A,C,E,C,C,A,A,E,E,I,E,C,C,I,E,C,C,A,E,C,A,E,I,C,C,A,K,I,C,C,C,A,E,C,M,G,E,c,A,E,E,C,G,C,Q,C,C,A,C,C,E,C,A,A,C,C,M,A,E,A,M,O,C,G,C,G,I,C,C,A,C,E,C,C,Q,C,iB,C,E,C,A,C,M,I,C,Q,C,I,C,qB,C,C,E,C,A,C,A,A,C,I,C,e,C,C,C,C,I,E,M,G,C,C,Q,C,c,E,C,A,E,E,I,I,C,wB,C,E,C,A,C,M,M,I,O,C,C,E,K,A,C,E,C,C,C,C,I,A,C,E,C,C,A,E,C,C,A,E,E,G,A,I,C,C,E,C,I,E,A,M,I,C,Q,C,c,C,G,C,C,C,A,I,E,E,A,Y,E,E,A,G,mB,C,I,A,M,C,C,A,C,A,C,C,C,C,E,E,O,A,E,E,G,Q,C,E,G,E,O,A,E,E,G,O,C,E,C,E,E,O,A,E,E,G,Y,C,E,G,E,O,A,E,E,G,oB,C,C,C,I,E,A,E,G,C,G,E,G,C,C,C,C,C,C,E,G,C,C,mB,C,E,E,A,C,E,C,C,C,C,G,A,A,G,C,E,E,O,A,E,E,G,e,C,E,C,I,I,A,E,A,A,C,C,G,C,G,E,G,C,C,E,C,C,A,E,G,C,C,mB,C,E,E,A,C,C,E,E,U,E,G,C,C,C,C,A,C,Q,C,I,C,O,C,C,E,E,S,A,E,2D,C,e,C,O,C,C,C,C,C,A,A,A,I,C,Q,C,W,C,G,E,A,G,C,C,E,A,E,C,A,E,C,C,I,A,C,A,C,A,A,G,C,C,A,C,A,A,C,A,E,C,C,C,e,C,C,C,C,I,E,A,E,G,A,C,C,C,A,E,A,I,C,C,I,E,E,I,C,E,E,c,A,E,E,A,I,C,I,C,Q,C,C,A,C,E,E,c,A,E,I,E,G,C,C,E,S,E,G,I,C,O,C,W,E,C,uB,C,a,C,G,A,C,C,A,A,I,C,E,E,C,E,C,C,A,I,C,I,C,O,C,A,I,E,G,C,C,Q,C,iB,C,E,C,A,C,M,M,I,C,Q,C,I,C,qB,C,C,E,C,A,C,A,A,C,I,C,W,C,C,C,C,I,E,K,G,C,C,A,O,E,C,E,E,C,C,S,A,E,G,E,G,C,C,C,A,C,A,C,K,I,C,Q,C,I,C,e,C,C,C,E,E,O,A,E,G,I,A,C,A,O,C,W,E,C,C,A,C,A,A,K,C,a,C,C,C,C,C,C,C,C,I,E,E,C,E,E,C,A,C,C,G,C,C,gB,C,Y,C,E,E,E,A,C,E,E,C,I,C,E,C,C,C,K,C,C,E,E,c,A,E,G,E,C,C,E,C,E,E,c,A,E,I,E,E,K,oC,C,O,C,G,C,C,A,C,A,C,A,A,G,C,G,M,I,C,Q,C,I,C,sB,C,C,I,C,O,C,W,E,C,I,C,S,C,E,gB,C,U,C,E,M,C,A,E,E,C,I,C,C,A,C,C,A,C,A,A,K,C,M,C,C,C,C,O,I,C,Q,C,I,C,wB,C,C,I,C,O,C,W,E,C,E,I,C,C,A,A,C,A,A,K,C,kB,C,C,C,C,I,E,A,K,G,C,C,O,E,C,E,E,C,C,S,A,E,G,E,G,C,C,C,A,C,A,C,K,I,C,Q,C,I,C,U,C,C,I,C,O,C,W,E,C,C,E,E,O,A,E,G,C,A,C,A,C,A,C,C,A,a,C,C,O,M,I,E,M,U,G,C,A,G,C,A,G,C,A,C,G,A,G,C,A,G,C,A,G,C,A,G,C,G,G,I,C,C,C,C,C,C,M,A,I,E,C,C,C,C,G,C,C,U,C,e,C,C,C,C,A,C,G,C,U,C,gB,C,C,A,I,C,C,C,C,C,U,C,G,E,A,I,C,C,C,C,C,I,C,A,I,E,I,C,C,A,C,C,C,A,I,I,C,C,C,C,C,E,C,A,E,M,A,E,C,I,E,C,A,E,A,K,C,C,C,A,C,A,K,A,E,M,A,C,C,E,G,G,G,I,C,C,C,C,C,a,E,A,G,E,G,C,C,E,K,C,C,C,C,A,A,C,G,C,A,S,C,E,G,A,C,A,C,E,A,C,A,C,O,C,C,C,A,M,C,I,C,C,C,C,C,Y,C,C,E,M,C,C,E,G,A,E,C,C,A,C,K,A,A,C,K,I,C,C,G,E,A,C,C,C,E,A,C,M,C,C,C,C,C,C,O,C,A,C,C,G,A,C,A,C,E,A,C,A,C,O,C,C,A,C,G,C,I,C,O,C,C,M,C,gB,S,C,C,C,C,A,G,A,C,I,E,I,E,I,C,K,C,G,I,A,C,C,C,S,C,Q,C,S,C,C,G,I,C,I,C,O,C,C,M,C,kB,Q,C,C,C,C,A,E,C,C,C,E,I,C,S,C,C,E,C,E,C,C,S,A,E,uC,C,uB,C,C,S,C,E,K,C,C,C,C,C,A,S,A,A,I,E,E,A,I,E,C,A,C,E,A,C,A,C,E,G,E,E,C,C,C,A,C,C,A,G,I,E,E,C,C,G,E,C,E,A,E,S,A,E,8B,C,U,C,C,K,C,E,I,A,C,S,C,C,C,C,C,A,E,E,C,I,C,O,C,G,E,A,C,C,C,C,C,C,C,K,A,A,G,O,G,E,C,C,C,I,A,C,W,C,E,I,A,C,A,C,C,M,A,A,E,E,E,C,G,C,C,A,C,A,M,E,C,E,E,G,C,Q,C,G,I,C,I,C,O,C,C,M,C,iB,O,C,C,C,C,A,C,E,E,A,C,E,C,A,C,A,C,A,C,C,A,A,C,A,C,E,C,A,M,C,C,I,C,C,C,C,C,K,C,E,G,E,E,A,C,A,C,A,C,C,C,C,C,A,I,C,C,C,C,C,M,C,M,C,C,C,C,E,G,C,C,C,C,A,A,I,C,A,C,A,E,C,E,C,A,I,C,C,C,C,C,I,C,A,I,C,C,C,C,C,I,C,A,I,C,C,C,C,C,I,A,C,C,I,E,I,C,A,A,E,I,C,M,C,A,I,E,C,C,A,C,C,A,A,C,C,E,A,C,A,C,C,C,C,C,O,W,C,C,C,A,A,I,A,E,I,C,M,I,C,e,C,A,A,C,Q,E,Q,G,C,E,E,K,C,Q,A,E,C,G,K,G,E,A,K,kD,C,S,C,G,G,C,C,C,C,E,A,I,A,G,C,C,C,C,C,C,E,O,C,I,C,E,C,C,C,I,C,E,E,I,E,Q,A,E,A,I,G,E,E,O,C,G,A,I,C,oC,C,S,C,G,I,A,C,A,C,A,A,E,C,E,C,A,U,A,C,A,C,C,C,O,I,C,C,C,C,C,E,A,C,A,A,A,I,Q,E,C,M,C,E,E,M,A,E,I,C,C,A,E,C,8B,C,e,C,C,A,I,C,C,C,C,A,C,A,A,K,C,Q,C,C,C,C,G,M,G,E,C,K,E,a,G,E,C,K,C,C,I,E,A,E,C,U,C,A,G,E,C,I,E,E,A,I,E,C,E,E,S,A,E,E,A,I,C,E,A,A,E,E,I,Y,E,I,E,E,A,oB,C,C,I,E,K,C,I,C,U,E,A,C,G,G,E,K,O,E,I,E,A,E,K,e,G,E,C,K,C,M,C,C,C,C,E,C,A,W,C,M,C,M,C,C,C,C,E,A,C,I,M,C,C,C,E,C,C,A,C,A,C,G,E,I,C,A,a,C,G,C,C,K,A,I,E,A,E,K,C,I,C,I,C,E,K,C,C,E,I,C,A,C,A,K,C,Q,C,E,C,A,A,C,C,G,C,c,E,C,I,E,I,C,A,U,C,e,C,C,A,G,G,I,A,E,E,A,E,A,K,E,O,A,C,E,I,C,C,C,C,C,C,M,I,C,C,C,C,C,A,O,I,C,C,C,C,E,C,I,C,K,C,C,G,C,C,C,C,C,C,K,I,C,C,E,C,I,E,E,E,K,C,I,C,C,E,E,S,A,E,M,I,C,I,C,a,C,E,C,C,C,C,A,O,I,C,C,C,C,C,I,C,A,E,A,I,C,C,E,C,E,I,I,C,C,C,C,C,I,C,A,E,C,C,C,A,C,C,A,C,G,C,C,C,C,C,C,K,I,C,C,G,E,E,C,C,C,A,C,C,G,C,C,C,C,E,C,M,C,a,C,M,C,E,C,O,C,K,C,C,A,I,C,I,C,O,C,C,M,C,gB,C,O,E,C,C,C,A,G,C,E,C,G,G,I,C,K,C,E,C,A,C,C,C,C,A,I,C,C,C,C,C,I,C,A,A,M,E,C,E,I,I,C,C,C,C,C,I,C,A,I,C,I,C,O,C,C,M,C,iB,O,C,C,C,C,A,C,C,A,G,A,C,G,C,I,C,O,C,C,M,C,kB,Q,C,C,C,C,A,E,M,G,E,I,E,C,E,O,C,I,C,G,E,S,A,E,E,I,E,C,C,A,C,M,I,C,W,C,E,G,C,C,A,C,C,A,C,A,A,M,I,C,C,C,C,A,C,A,A,M,E,C,I,E,I,C,C,C,C,E,A,I,E,I,C,C,C,C,C,O,G,I,C,C,C,C,C,O,E,C,A,I,C,C,C,C,C,I,C,A,C,K,I,C,C,I,I,E,I,C,C,C,C,E,C,I,C,S,C,C,G,C,I,C,C,C,C,C,M,I,C,c,E,C,A,A,M,E,C,E,C,I,C,S,C,C,K,A,O,C,G,C,iI,C,C,A,I,C,I,C,O,C,C,E,E,S,A,E,uC,C,e,C,C,K,C,2B,C,I,C,C,K,E,C,C,C,C,C,A,M,A,I,C,M,C,A,I,G,E,E,G,C,E,I,A,C,A,A,C,A,C,A,A,A,I,C,C,C,C,A,C,C,A,C,A,C,C,E,A,C,A,A,K,C,e,E,C,G,I,E,A,I,C,C,C,C,C,O,M,I,C,C,C,C,C,O,A,C,A,A,c,C,C,C,O,A,S,E,C,E,C,G,C,I,E,yB,C,I,C,C,A,O,E,C,E,C,G,C,A,I,C,U,C,S,C,C,C,G,E,sB,C,I,C,E,C,K,C,C,A,I,E,uB,C,I,C,E,C,K,C,C,A,A,Q,G,E,C,G,E,U,E,C,E,C,K,C,M,C,I,E,mB,C,Q,C,C,A,K,C,c,C,E,C,A,A,C,C,E,K,E,C,O,A,I,C,K,C,C,C,C,A,C,A,iB,C,C,C,C,I,E,C,C,C,A,C,K,C,S,C,U,C,U,C,M,C,c,C,sB,C,O,C,O,C,C,O,C,A,G,C,C,E,A,I,E,A,C,C,E,C,A,O,A,I,E,C,C,C,C,A,A,Q,E,K,E,I,C,C,C,A,C,C,E,C,C,E,A,E,U,A,E,C,E,E,S,A,E,C,C,E,C,A,C,G,E,E,C,A,C,C,A,C,A,C,C,A,C,M,C,I,C,M,C,C,O,C,A,G,C,C,E,C,E,A,C,C,E,C,E,C,C,E,C,A,C,E,E,O,A,E,C,C,G,A,C,A,C,A,C,C,A,E,A,U,E,C,E,I,M,C,C,A,E,E,a,A,E,E,A,W,C,C,A,E,A,mB,E,C,E,I,e,C,C,C,A,mB,C,G,C,A,C,C,C,C,C,W,G,C,C,A,E,A,iB,E,C,E,I,a,C,C,C,A,iB,C,G,C,A,E,E,A,E,E,C,C,C,E,E,gB,A,E,E,C,A,C,K,C,O,C,C,C,O,C,K,C,C,E,E,U,A,E,C,C,K,C,C,O,C,C,E,E,U,A,E,C,C,O,C,C,O,C,G,E,U,A,E,C,C,S,C,O,C,C,C,C,C,E,E,U,A,E,C,C,S,C,C,C,C,C,C,C,E,E,U,A,E,C,C,S,C,C,C,C,A,C,C,C,C,A,C,C,A,I,C,Q,C,C,C,C,O,E,C,K,E,A,I,S,C,M,C,M,C,a,C,I,C,E,C,A,C,I,gB,C,M,C,M,C,iB,C,I,C,E,C,A,C,I,a,C,M,C,M,C,c,C,I,C,E,C,A,C,I,gB,C,M,C,M,C,0B,C,I,C,E,C,A,C,I,Y,C,M,C,M,C,gB,C,I,C,C,E,E,C,M,C,A,C,E,C,O,C,C,A,C,I,qB,C,M,C,M,C,yB,C,I,C,C,E,E,C,M,C,A,C,E,C,O,C,C,A,C,I,S,C,M,C,M,C,a,C,I,C,C,E,E,C,M,C,A,C,E,C,O,C,C,A,C,I,Y,C,M,C,M,C,kB,C,I,C,C,E,E,C,M,C,A,C,I,C,E,C,O,C,Q,C,E,C,C,A,E,C,O,C,C,A,C,I,sB,C,M,C,M,C,wB,C,I,C,C,E,C,gB,C,C,A,C,I,U,C,G,U,G,E,C,E,G,C,M,C,sB,C,I,C,C,E,C,O,C,C,C,E,C,kB,C,C,C,A,G,W,G,E,C,E,G,C,M,C,oB,C,I,C,C,E,C,Q,C,C,C,E,C,kB,C,C,C,A,K,C,I,gB,C,M,C,M,C,0B,C,I,C,C,E,C,G,C,C,A,C,I,uB,C,M,C,M,C,2B,C,I,C,C,E,C,G,C,C,A,C,I,M,C,M,C,M,C,U,C,I,C,C,I,C,iB,C,E,C,U,C,C,E,C,O,C,C,A,C,I,a,C,A,M,C,M,C,iB,C,I,C,C,I,C,iB,C,E,C,U,C,C,C,A,C,I,S,C,O,E,C,K,E,I,E,A,E,C,K,C,O,G,K,C,O,C,E,C,K,C,O,C,C,C,C,C,K,C,O,C,E,C,K,C,O,C,G,C,G,E,C,K,C,A,C,C,K,C,E,E,C,K,C,C,M,C,C,C,C,M,C,a,C,I,C,C,E,C,K,C,C,C,A,A,O,I,A,C,A,A,W,C,C,C,C,C,C,G,Q,C,C,C,E,K,C,C,C,C,C,E,G,A,C,C,I,W,M,E,G,I,C,C,I,E,C,C,G,I,C,A,G,C,E,C,I,C,S,C,E,E,C,I,C,qB,C,C,C,K,C,E,E,S,A,E,oB,C,oB,C,C,W,C,E,K,C,C,C,C,C,A,I,C,S,O,C,C,C,C,C,C,A,A,G,E,C,I,C,Q,C,E,E,C,I,C,U,C,C,C,K,C,E,E,S,A,E,6B,C,e,C,C,W,C,E,K,C,C,C,C,C,A,I,C,S,O,C,C,C,C,C,C,A,A,A,G,U,G,G,G,c,G,E,C,G,C,E,A,I,K,E,A,C,E,G,G,C,E,A,E,G,I,I,C,A,G,Q,E,O,E,G,I,C,C,E,G,I,C,K,C,S,C,E,C,E,E,W,A,E,E,G,C,C,C,C,K,C,O,C,E,G,I,C,I,C,E,G,C,C,C,A,G,Q,E,O,E,C,E,C,C,I,G,E,E,C,E,E,E,E,C,C,A,E,C,A,C,A,G,A,E,I,E,C,E,A,I,C,E,I,C,A,A,G,Q,E,A,O,E,G,A,C,A,O,E,I,C,I,C,C,I,A,C,C,C,C,E,E,C,C,A,C,M,I,A,C,A,C,G,C,C,A,C,C,A,Q,C,uB,C,U,C,C,C,E,I,E,C,A,C,Y,C,E,K,C,C,C,C,C,A,C,C,E,E,C,C,A,A,C,A,C,G,C,C,A,C,M,C,C,I,C,O,K,K,C,C,C,A,C,C,A,A,E,E,E,I,C,A,S,C,A,S,A,C,E,E,E,E,E,C,A,C,C,K,A,S,E,C,C,C,C,C,G,I,C,C,A,G,E,C,A,Q,E,O,E,G,I,C,C,E,I,A,C,E,G,I,C,C,A,Q,E,A,O,E,G,C,A,I,G,E,E,E,C,A,C,A,E,C,A,G,G,A,C,C,A,M,E,A,O,E,G,A,C,A,O,E,I,C,K,C,E,C,E,C,A,A,G,C,C,C,E,C,C,C,A,C,C,E,G,A,C,C,C,A,C,C,C,C,A,C,C,C,A,C,O,E,O,E,G,I,C,C,E,G,I,C,K,C,iC,C,C,C,K,C,E,E,S,A,E,C,oB,C,C,iB,C,C,M,C,A,C,Q,C,a,C,a,C,a,C,oB,C,e,C,mB,C,iB,C,mB,C,iB,C,mB,C,e,C,sB,C,e,C,A,C,A,E,E,E,O,C,A,M,C,U,C,I,C,S,O,C,C,C,C,C,C,A,A,G,wB,G,G,G,kB,G,E,C,G,C,E,E,K,C,C,A,C,C,C,A,C,E,E,K,A,C,gD,C,C,C,K,G,E,S,A,E,mD,C,oB,C,a,E,I,C,I,G,C,C,C,C,C,A,A,G,E,K,A,C,Q,C,E,E,K,A,C,U,C,C,C,K,C,E,E,S,A,E,6B,C,e,C,a,E,I,C,I,G,C,C,C,C,C,A,A,G,E,K,A,C,0B,C,E,E,K,A,C,c,C,C,C,K,C,E,E,S,A,E,yB,C,yB,C,a,E,I,C,C,G,E,E,C,C,C,C,A,G,E,K,A,C,wB,C,C,C,K,C,E,E,S,A,E,+C,C,uB,C,C,S,C,E,I,A,C,a,E,I,C,I,G,C,C,C,C,C,A,C,A,A,I,E,C,C,E,K,A,A,C,+B,C,C,M,C,C,G,G,E,A,G,A,E,E,E,E,G,I,C,U,C,sB,C,E,C,G,C,C,C,A,G,C,C,C,E,G,E,I,A,E,uB,C,uB,C,C,S,C,E,K,C,C,I,C,C,K,W,C,C,C,C,C,A,C,C,C,E,S,A,E,0B,C,e,C,O,K,K,C,C,C,A,C,A,A,G,C,C,C,C,C,C,C,G,I,C,S,C,C,M,O,C,M,C,C,E,E,S,A,E,uC,C,uB,C,C,S,C,C,C,C,C,C,A,C,G,E,A,I,C,C,A,E,E,C,A,E,I,C,M,C,C,E,K,A,C,E,C,C,A,C,C,C,C,I,C,S,O,E,E,I,G,C,Q,E,I,E,M,E,A,O,C,K,C,C,C,A,C,A,C,C,A,O,I,C,C,C,C,E,C,A,C,C,A,K,A,C,A,S,C,C,C,C,A,I,E,C,G,E,C,C,C,E,E,E,I,C,I,C,G,W,C,E,C,C,A,G,Q,E,O,E,C,I,A,C,C,M,A,E,G,G,E,E,G,C,A,A,C,A,C,K,A,K,C,iB,C,C,A,O,I,E,I,C,C,C,E,C,C,A,A,A,G,A,C,U,C,C,M,C,E,E,iB,A,E,C,O,C,I,C,U,E,C,Q,C,E,C,C,A,I,I,G,E,E,A,C,E,E,A,U,A,E,G,G,C,C,C,A,C,C,C,A,E,U,A,E,K,E,A,C,I,E,A,I,E,I,C,E,I,C,C,C,A,A,K,C,iB,C,A,C,A,A,K,C,Y,E,C,M,C,M,C,G,C,I,C,c,C,G,C,C,A,G,C,A,C,E,A,C,G,E,I,C,C,C,C,A,C,A,A,E,K,E,C,I,G,S,C,Q,C,C,G,I,C,C,A,E,E,C,Y,C,I,C,C,C,C,C,C,A,I,C,C,C,C,C,I,C,C,I,C,C,C,C,C,C,E,G,C,C,S,A,E,uC,C,uB,C,C,S,C,E,K,C,C,C,C,C,A,I,C,C,C,C,C,E,C,A,K,C,O,E,A,C,A,C,A,E,kB,C,C,O,U,C,G,C,A,A,U,G,A,C,C,C,C,C,K,C,E,G,E,E,A,C,C,A,I,C,Q,E,C,iB,C,A,C,G,E,C,I,E,E,O,I,C,G,A,C,C,I,C,C,C,C,C,C,C,A,a,C,A,C,C,C,C,I,E,K,C,E,Y,C,G,A,C,C,K,E,K,E,C,E,C,E,E,O,C,I,C,C,C,C,A,C,C,C,C,A,I,I,C,U,E,C,O,I,C,C,C,C,A,C,A,A,I,e,C,C,C,C,G,C,M,C,S,C,I,C,C,A,C,C,C,A,K,A,K,C,kB,C,C,A,I,C,C,A,E,C,E,G,C,A,C,kB,C,A,G,C,C,C,C,E,C,C,C,C,C,A,c,C,I,C,C,C,C,A,C,A,C,C,A,C,A,C,A,E,yB,C,E,E,e,C,E,I,A,Q,I,A,C,A,A,E,W,C,C,C,C,C,C,C,A,I,E,A,G,C,E,C,sB,C,C,A,K,C,E,G,E,E,C,C,E,E,A,O,E,C,C,E,C,C,C,C,C,I,E,Y,C,G,A,C,C,E,C,C,C,C,C,E,C,I,E,A,C,A,A,c,E,C,O,I,C,C,C,C,C,K,E,A,C,A,A,K,C,I,C,C,C,C,C,C,O,M,I,C,M,E,C,A,M,K,C,I,C,E,E,C,A,C,E,C,C,A,C,K,C,C,C,C,I,E,I,C,A,c,E,C,A,E,I,C,A,I,C,S,C,G,E,E,C,C,C,I,C,c,C,kB,C,C,A,I,E,M,A,E,I,C,C,C,A,E,M,E,E,C,A,I,E,E,A,M,E,C,A,O,A,K,C,O,C,I,C,A,E,A,C,C,C,C,C,A,C,C,C,C,C,qG,I,E,E,C,C,K,E,E,E,C,C,E,K,E,E,C,C,Q,E,E,C,C,Q,C,C,W,uD,A,C,M,U,E,A,e,C,M,A,A,a,C,C,C,C,C,I,E,A,I,E,E,I,G,C,C,A,I,E,E,G,I,C,I,C,E,I,E,A,C,A,C,G,E,A,C,C,C,A,C,I,C,A,E,K,K,A,C,E,G,E,A,C,A,C,C,E,E,C,E,E,E,A,C,C,S,C,C,C,C,C,C,E,A,E,gB,A,E,I,C,Q,C,C,C,A,C,A,A,E,U,C,C,C,C,G,C,O,I,E,E,I,C,A,G,G,C,C,A,A,M,E,C,C,A,C,M,K,C,Y,C,E,C,A,I,C,C,A,C,U,C,C,C,C,C,C,A,I,E,A,I,E,C,C,C,A,C,G,E,I,C,C,Y,C,C,Q,E,A,O,E,A,C,E,I,G,G,C,E,C,S,C,M,kB,A,C,I,Q,C,M,yB,A,C,I,S,C,M,0B,A,C,I,U,C,M,uB,A,C,I,M,C,M,mB,A,C,I,a,C,M,0B,A,C,I,c,C,M,2B,A,C,I,K,C,M,kB,A,C,I,M,C,M,iC,A,C,I,O,C,M,sB,A,C,I,c,C,M,6B,A,C,I,U,C,M,uB,A,C,I,iB,C,M,+B,A,C,I,kB,C,M,+B,C,A,A,C,E,E,c,A,G,E,G,kB,C,S,C,E,C,C,A,C,C,A,I,C,A,C,C,E,E,C,C,C,A,C,M,E,K,I,E,E,E,C,C,E,E,E,K,E,E,A,C,K,C,E,E,G,E,C,C,C,C,C,C,kB,A,E,c,C,C,C,E,C,C,A,A,C,A,C,A,K,C,K,C,C,C,C,C,C,M,wB,E,C,E,K,C,E,G,E,A,G,E,E,+C,E,C,E,G,E,C,O,G,E,G,E,C,O,C,qC,C,C,A,K,C,W,C,E,E,C,A,E,A,C,C,e,E,C,O,I,C,M,G,C,C,C,A,E,Q,C,C,E,C,a,oB,O,c,C,E,a,qC,I,E,E,C,C,K,E,E,E,C,C,E,K,E,E,C,C,Q,E,E,C,C,Q,C,C,W,uB,A,C,M,U,E,G,Y,C,M,A,A,a,C,C,C,C,C,I,E,A,I,E,E,I,G,C,C,A,I,E,E,G,I,C,I,C,E,I,E,A,C,A,C,G,E,A,C,C,C,A,C,I,C,A,E,K,K,C,E,A,G,E,A,C,A,C,C,E,S,C,C,C,C,C,A,C,E,A,E,gB,A,E,I,C,Q,C,C,C,A,C,A,A,E,U,C,C,C,C,G,C,O,I,E,E,I,C,A,M,A,C,C,A,A,M,E,C,C,A,C,M,K,C,Y,C,E,C,A,I,C,A,C,A,Q,C,C,C,C,G,sB,G,E,C,K,C,C,I,E,E,C,I,C,I,C,C,C,M,C,E,E,iB,A,E,C,K,C,I,C,I,C,mB,C,C,E,C,G,C,C,C,E,C,I,C,c,C,E,C,G,C,C,C,C,A,G,I,E,G,E,E,E,A,E,A,O,I,C,A,I,G,E,A,G,A,C,A,E,C,C,A,C,C,C,M,C,M,C,A,E,A,G,O,C,C,E,C,C,C,C,K,C,A,M,E,C,C,A,C,E,E,E,E,E,G,E,M,A,E,C,E,G,8C,C,gB,C,C,M,C,sB,M,E,E,I,C,I,C,W,C,E,A,U,C,I,C,M,C,I,C,A,C,C,A,E,E,C,A,C,C,M,A,G,E,G,2B,C,U,C,C,K,C,C,C,C,C,A,A,C,M,M,K,C,Q,C,E,C,A,A,C,C,iB,E,C,O,I,C,M,G,C,C,A,M,C,I,C,C,I,C,C,C,C,C,C,I,E,A,G,G,A,C,C,C,A,A,I,E,I,C,C,Y,C,C,Q,E,A,O,E,A,C,E,I,G,G,C,E,C,S,C,M,2B,A,C,I,Q,C,M,0B,A,C,I,S,C,M,2B,A,C,I,U,C,M,2B,A,C,I,iB,C,M,0B,A,C,I,kB,C,M,2B,A,C,I,M,C,M,4B,A,C,I,a,C,M,2B,A,C,I,c,C,M,4B,A,C,I,O,C,M,+B,A,C,I,Y,C,M,4B,A,C,I,c,C,M,8B,A,C,I,U,C,M,2B,A,C,I,iB,C,M,0B,A,C,I,kB,C,M,2B,C,A,A,C,E,E,c,A,G,E,G,kB,C,S,C,E,C,C,A,C,C,A,I,C,A,C,I,E,E,C,C,C,A,C,M,E,K,I,E,E,E,C,C,E,E,E,K,E,E,A,C,K,C,E,E,G,E,C,A,C,C,C,C,C,kB,A,E,S,C,C,C,E,C,C,A,A,C,A,C,C,A,E,E,C,Y,C,gB,8F,I,E,E,C,C,K,E,E,E,C,C,E,K,E,E,C,C,Q,E,E,C,C,Q,C,Q,E,C,E,I,G,G,C,E,C,S,C,A,M,kC,A,C,I,U,C,A,M,kC,A,C,I,K,C,A,M,kC,A,C,I,O,C,A,M,kC,C,A,A,C,E,E,c,A,G,E,G,kB,C,S,C,E,C,A,C,C,C,G,U,E,M,S,C,M,A,A,a,C,C,C,C,C,I,E,A,I,E,E,I,G,C,C,A,I,E,E,G,I,C,I,C,E,A,I,E,A,A,C,C,G,E,E,E,A,K,A,A,C,C,A,K,C,A,E,K,K,C,E,G,A,E,A,C,A,C,C,E,S,C,C,C,C,C,A,C,E,A,E,gB,A,E,I,C,Q,C,C,C,A,C,A,A,E,U,C,C,C,C,G,C,O,I,E,E,I,C,A,M,C,C,A,A,C,K,E,C,C,A,C,M,K,C,Y,C,E,C,A,I,C,C,a,E,C,O,I,C,M,G,E,I,C,E,M,C,I,C,A,C,A,A,C,K,C,U,C,C,C,C,C,C,A,I,E,A,G,G,E,C,C,K,A,A,C,C,A,I,E,I,C,C,Y,C,C,Q,E,A,O,E,A,C,E,I,G,G,C,E,C,S,C,M,sC,A,C,I,U,C,M,sC,A,C,I,K,C,M,iC,A,C,I,O,C,M,qC,C,A,A,C,E,E,c,A,G,E,G,kB,C,S,C,E,C,C,A,C,C,A,I,C,A,C,C,E,E,C,C,C,A,C,M,E,K,I,C,G,C,C,E,E,A,E,I,C,A,A,E,C,E,K,I,C,K,C,E,E,G,E,C,C,C,C,C,C,kB,A,E,oB,C,C,C,E,C,C,A,A,C,A,C,C,A,E,E,C,e,C,mB,c,O,c,C,E,a,wC,I,E,E,C,C,K,E,E,E,C,C,Q,E,E,C,C,O,E,K,U,E,M,S,C,Y,C,C,C,I,E,A,G,G,E,G,I,C,C,A,I,E,E,G,I,C,I,C,G,C,E,E,A,C,C,Y,A,E,S,G,E,I,C,A,qB,C,S,C,G,K,A,C,A,C,6B,A,E,C,I,S,C,C,C,C,A,C,A,C,A,E,A,kB,C,mB,c,O,c,C,E,a,yD,I,E,E,C,C,G,K,E,E,C,C,Q,A,E,E,C,C,Q,E,C,C,C,C,K,E,E,E,C,C,O,E,C,C,C,C,Q,E,E,C,C,Q,A,E,E,C,C,E,K,E,e,wB,A,C,M,U,E,G,U,C,O,A,A,a,C,C,C,K,C,G,C,E,E,S,C,C,K,A,E,I,C,S,C,C,C,A,C,A,A,G,E,E,C,O,I,E,I,C,O,C,A,A,C,A,C,A,E,e,C,E,I,E,C,K,E,S,C,C,A,E,C,A,C,E,I,U,E,K,W,C,O,A,C,M,A,G,C,A,A,a,C,C,C,C,C,K,E,C,A,I,E,E,G,I,C,I,C,G,I,C,A,C,A,A,C,C,C,E,K,I,C,G,G,E,S,C,C,K,A,E,I,C,C,M,C,I,C,C,A,E,E,G,C,C,A,C,C,M,C,C,C,A,C,A,A,G,O,E,C,G,I,C,C,C,C,C,C,M,I,C,C,C,C,C,O,C,A,O,I,C,O,C,I,E,A,I,S,C,M,0B,C,C,G,Q,C,M,iC,C,C,G,S,C,M,kC,C,C,G,S,C,M,kC,C,C,G,U,C,M,yB,C,C,G,iB,C,M,gC,C,C,G,M,C,M,0B,C,C,G,c,C,M,kC,C,C,G,K,C,M,yB,C,C,G,M,C,M,iC,C,C,G,O,C,M,6B,C,C,G,Y,C,M,kC,C,C,G,c,C,M,qC,C,C,G,U,C,M,qC,C,C,G,iB,C,M,6C,A,A,C,A,E,E,c,A,G,E,G,kB,C,S,C,I,C,O,C,A,C,A,A,M,C,C,C,C,C,C,I,E,G,G,C,I,C,G,G,C,E,C,C,E,G,A,E,A,E,E,E,C,C,C,C,C,A,A,O,A,I,C,C,I,G,C,C,A,E,E,C,E,E,C,A,C,C,A,C,C,C,E,A,C,A,C,A,O,I,C,M,E,C,G,C,C,O,E,I,C,M,C,C,A,C,C,C,wC,E,I,C,O,C,O,C,Q,E,E,E,E,A,C,A,C,A,A,C,S,E,C,M,C,wC,E,I,C,O,C,O,C,C,A,C,A,A,W,C,C,C,C,C,C,O,E,I,E,C,E,E,E,C,C,E,C,I,C,M,C,A,E,I,G,C,I,C,O,C,O,C,A,C,C,A,I,C,A,C,a,E,C,O,I,C,O,A,C,A,A,K,C,K,C,C,C,C,C,C,C,C,I,E,A,I,E,A,C,C,A,C,C,C,C,A,C,U,E,C,A,C,G,C,M,C,E,G,C,C,C,C,A,C,C,A,C,A,C,A,C,W,C,E,G,C,E,C,A,C,A,A,C,A,G,C,I,C,O,C,C,M,C,a,I,E,I,E,C,M,C,C,C,C,C,A,G,C,E,I,C,C,Y,C,G,A,C,C,A,K,Y,C,C,Y,C,G,C,A,C,C,A,E,K,I,C,C,E,C,C,E,G,E,E,A,C,C,kB,E,E,A,C,E,E,mB,A,E,W,C,C,A,O,C,O,E,I,A,C,C,A,K,M,C,K,C,E,K,A,G,C,C,C,C,C,E,I,C,E,C,A,C,G,C,K,C,C,E,E,Y,A,E,E,I,C,C,A,C,A,C,A,C,C,A,E,C,K,G,C,C,A,O,E,I,E,C,A,E,I,E,C,A,C,C,C,C,A,W,E,C,O,C,Y,C,E,C,C,A,M,O,E,C,E,G,C,A,E,A,E,I,E,E,O,E,E,I,G,E,I,I,A,C,C,G,C,O,C,C,M,C,c,I,E,A,M,C,a,C,K,C,C,C,C,C,A,E,A,M,Y,C,E,I,E,E,K,G,C,A,C,G,A,C,C,G,C,O,C,C,M,C,c,I,E,A,M,C,a,C,K,C,E,I,E,C,C,C,A,E,M,Y,C,E,I,E,C,C,G,C,C,C,C,C,A,A,C,C,E,C,C,A,C,E,E,I,C,c,C,kD,C,C,A,E,I,C,A,M,C,I,C,G,G,C,A,A,C,A,E,A,C,E,C,C,C,E,C,C,C,C,C,C,C,C,I,C,G,C,C,C,I,E,M,A,E,I,C,C,C,A,G,C,E,M,E,E,C,A,A,M,E,C,E,E,C,I,C,O,C,C,M,C,c,I,E,M,E,G,G,C,U,C,C,C,A,C,E,E,M,A,G,E,G,a,C,c,C,S,E,K,G,E,C,C,C,A,A,E,M,C,E,E,C,I,C,I,C,O,C,C,M,C,c,I,E,A,K,C,c,C,M,C,W,C,C,C,A,G,E,M,A,G,E,G,e,C,c,C,S,O,I,C,C,C,C,C,G,C,E,I,A,C,K,C,C,E,E,Y,A,E,E,I,C,C,A,C,M,A,M,C,E,I,K,E,A,E,I,G,G,I,C,I,C,O,C,C,M,C,c,I,E,O,E,I,E,C,kB,C,C,C,A,C,E,E,M,A,G,E,G,gD,C,c,C,S,O,I,E,I,C,C,A,M,E,C,C,C,C,C,E,I,C,E,C,I,C,I,C,O,C,C,M,C,c,I,E,O,E,I,E,C,gB,C,C,C,A,C,E,E,M,A,E,G,E,c,C,c,C,S,O,I,E,I,C,C,O,C,C,C,C,C,C,C,C,E,E,A,I,E,G,kB,G,E,I,G,E,0B,E,I,G,A,C,C,C,C,A,E,E,I,E,G,Q,E,E,K,E,I,G,C,C,E,I,G,C,K,C,M,C,C,C,C,I,C,I,C,O,C,C,M,C,c,I,E,A,M,E,C,C,C,A,C,E,E,M,A,G,E,G,a,C,c,C,S,O,I,E,I,C,C,O,C,C,C,C,C,C,A,I,C,I,C,O,C,C,M,C,gB,I,E,A,M,E,C,C,C,A,E,I,E,A,C,A,A,uB,C,C,C,C,I,E,C,C,C,A,C,G,I,G,E,E,C,G,E,G,G,C,C,G,C,A,C,E,A,I,E,A,C,C,E,C,A,S,A,I,E,C,C,C,C,C,A,A,G,C,E,I,M,K,A,C,E,A,C,E,Q,M,W,C,C,E,A,C,E,C,C,I,E,E,E,M,C,G,C,O,E,E,E,S,E,E,E,kB,E,E,E,G,C,G,C,I,E,C,C,C,C,A,E,C,A,C,C,C,E,A,E,U,A,E,K,C,C,C,G,Y,E,C,E,C,C,G,A,C,C,E,E,a,A,E,G,E,C,A,C,A,G,A,C,C,E,O,E,E,C,M,C,gB,E,E,C,U,C,I,C,K,C,C,G,C,C,C,I,C,G,C,C,G,C,K,G,qB,G,E,C,A,G,C,E,C,E,G,G,C,S,A,C,E,E,M,A,E,G,E,kD,C,uB,C,C,S,C,yB,C,I,C,a,C,C,C,C,C,A,K,C,A,C,C,E,A,E,O,A,E,G,C,C,A,C,C,A,C,A,G,A,E,C,I,C,C,A,I,C,M,C,C,C,C,C,C,C,C,I,E,E,C,A,E,C,C,E,E,O,A,E,E,G,W,C,C,C,G,C,E,E,G,A,C,C,M,C,K,C,O,C,A,A,M,C,C,C,C,A,G,C,E,G,C,C,C,C,C,G,A,C,C,O,C,A,A,M,C,C,C,C,C,A,G,a,E,C,E,C,K,E,C,E,K,A,C,S,C,E,E,K,A,C,qB,C,E,A,C,E,E,M,A,G,E,G,iB,C,oB,C,C,W,C,E,C,U,C,C,C,C,M,G,E,C,K,E,gB,E,C,K,A,C,E,A,E,K,A,C,qB,C,C,C,I,E,E,A,C,A,G,C,E,E,A,G,C,C,M,C,K,C,I,C,A,A,M,E,C,C,A,C,G,C,C,E,Q,C,uB,C,E,C,K,C,E,C,U,C,E,E,C,C,G,C,C,I,C,C,O,C,G,K,C,C,C,A,C,C,A,A,A,G,G,I,E,gB,G,E,C,K,C,C,I,E,E,O,I,C,I,C,E,C,gB,C,A,C,E,I,C,C,c,C,E,E,K,A,C,c,C,E,A,C,E,E,M,A,G,E,G,sB,C,yB,C,a,E,C,C,A,E,K,A,A,C,oB,C,E,A,C,E,E,M,A,E,G,E,iD,C,oB,C,a,E,C,C,A,E,K,A,A,C,2E,C,E,A,C,E,E,M,A,G,E,G,0B,C,e,C,a,E,C,C,A,A,M,C,A,C,A,G,C,C,C,c,E,C,O,I,C,O,A,C,A,A,K,C,Q,C,C,C,C,O,E,C,K,E,A,I,S,C,O,I,C,O,C,O,A,C,I,gB,C,O,I,C,K,C,O,C,C,M,C,iB,C,C,A,C,I,a,C,O,I,C,K,C,O,C,C,M,C,c,C,C,A,C,I,gB,C,G,S,E,C,I,C,O,C,I,C,M,Y,C,A,G,U,E,C,I,C,O,C,I,C,M,S,A,C,M,A,K,C,4C,C,A,C,I,Y,C,O,I,C,K,C,S,C,C,M,C,S,C,O,C,E,C,M,C,G,C,E,C,O,C,C,A,C,I,qB,C,O,I,C,K,C,O,C,C,M,C,yB,C,O,C,E,C,M,C,G,C,E,C,O,C,C,A,C,I,S,C,O,I,C,K,C,O,C,C,M,C,a,C,O,C,E,C,M,C,G,C,E,C,O,C,C,A,C,I,Y,C,O,I,C,K,C,O,C,C,M,C,kB,C,O,C,E,C,M,C,Q,C,E,C,O,C,G,C,E,C,O,C,C,A,C,I,sB,C,O,I,C,K,C,O,C,C,M,C,wB,C,G,C,E,C,gB,C,E,G,C,C,G,C,A,G,E,E,A,C,C,U,C,E,C,C,E,C,A,gB,C,C,A,K,U,C,G,U,G,E,C,E,I,I,C,K,C,O,C,C,M,C,sB,C,G,C,E,C,O,C,O,C,E,C,kB,C,A,C,K,C,A,C,M,C,A,C,C,A,C,E,E,M,A,E,G,E,gD,C,uB,C,C,S,C,qB,C,C,A,C,I,gB,C,O,I,C,K,C,O,C,C,M,C,0B,C,M,C,E,C,G,C,C,A,C,I,uB,C,O,I,C,K,C,O,C,C,M,C,2B,C,M,C,E,C,G,C,C,A,C,I,M,C,A,C,G,Q,E,C,E,C,O,C,M,A,K,C,sD,C,C,A,I,E,I,C,C,sB,C,E,C,U,C,C,A,E,M,A,C,O,C,A,E,M,A,C,U,C,A,G,C,O,M,I,C,K,C,O,C,G,G,A,C,C,A,C,G,E,C,E,K,I,C,W,C,E,C,C,E,C,A,U,C,C,A,C,A,I,a,C,A,C,I,E,I,C,C,sB,C,E,C,U,C,C,A,E,M,A,C,O,C,A,E,M,A,C,iB,C,A,G,C,O,M,I,C,K,C,O,C,G,G,A,C,C,A,C,G,E,C,E,K,I,C,W,C,E,C,C,E,C,A,U,C,C,A,C,C,A,O,K,C,Q,C,E,C,A,A,C,C,G,C,U,E,C,O,I,C,O,A,C,A,A,K,C,a,E,O,A,A,S,E,K,C,O,C,I,C,E,C,C,Q,C,C,M,I,C,K,C,O,C,C,M,C,U,E,C,C,A,M,C,A,C,A,A,K,C,W,C,C,C,O,I,E,I,C,A,W,C,E,E,E,E,C,A,C,A,C,E,C,E,I,C,C,A,O,E,G,C,C,E,E,K,C,C,C,C,A,G,C,I,E,E,I,I,C,K,C,U,C,C,M,C,Q,C,O,G,C,C,A,E,C,G,C,K,C,G,C,C,C,I,I,E,Q,C,E,E,C,E,C,C,C,A,A,M,E,C,E,K,I,C,A,A,C,A,mB,E,C,O,I,C,C,A,I,C,M,A,C,C,A,E,iB,C,kB,eCjuCxB,IAAM,EAAA,EAAA,CAAA,CAAA,QAEN,EAAU,qBAAqB,CAAA,EAAA,CAAA,CAAA,QAC/B,EAAU,MAAM,CAAA,EAAA,CAAA,CAAA,OAChB,EAAU,QAAQ,CAAA,EAAA,CAAA,CAAA,QAClB,EAAU,MAAM,CAAA,EAAA,CAAA,CAAA,QAEhB,EAAU,SAAS,CAAG,EACtB,EAAU,eAAe,CAAG,EAAU,MAAM,CAE5C,EAAO,OAAO,CAAG,oG,I,E,E,C,C,Q,E,K,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,+B,O,c,C,E,a,iI,I,E,E,C,C,O,E,C,C,C,C,K,E,E,E,C,C,O,E,K,G,E,A,G,C,A,A,K,E,I,E,C,O,I,C,K,C,I,C,C,C,C,C,A,C,A,E,C,A,G,C,A,G,C,A,A,a,C,C,C,C,C,I,C,C,C,C,C,E,I,C,C,A,C,A,C,C,I,C,S,C,G,G,C,A,C,A,C,C,C,C,I,C,A,I,C,C,C,C,C,I,C,A,I,C,C,C,C,C,I,A,C,A,A,K,E,C,I,C,C,C,C,C,I,C,C,C,C,C,I,C,e,C,I,C,M,C,C,I,C,A,I,I,A,C,C,A,C,C,A,C,S,C,E,I,C,C,A,A,G,C,A,I,A,C,C,C,I,C,C,C,C,C,I,C,A,I,I,A,C,C,A,C,C,A,C,S,E,A,I,C,C,A,E,C,I,C,iB,C,C,E,C,A,C,A,C,C,A,E,E,C,C,C,C,C,I,A,C,A,A,K,C,C,C,C,C,E,E,M,A,E,E,a,qD,C,uB,C,C,S,C,c,C,C,C,A,I,C,C,C,C,C,C,C,C,C,A,M,E,C,I,A,C,A,C,C,C,C,I,A,C,A,A,c,C,C,C,C,G,I,E,A,I,C,C,C,C,E,A,I,O,C,C,C,C,C,C,I,E,I,C,C,C,C,C,A,A,E,I,E,A,E,C,G,C,I,C,C,I,C,C,C,C,C,G,E,E,C,C,A,C,I,C,I,C,C,K,I,C,K,C,I,C,C,C,C,C,E,C,C,C,A,E,C,C,A,C,C,C,C,C,E,I,C,G,C,C,A,I,C,C,C,C,G,I,I,C,C,C,A,C,C,A,I,C,A,C,A,C,C,A,A,C,A,K,C,K,C,C,C,C,C,C,M,A,K,C,yC,C,A,C,A,C,A,E,gB,C,C,O,S,C,E,S,G,C,C,A,C,K,C,E,C,K,K,C,C,A,C,A,A,K,C,K,C,C,C,C,C,C,E,I,C,C,M,C,Q,C,E,K,C,C,C,A,C,A,C,A,E,qB,C,C,O,U,E,E,S,C,C,C,A,C,K,C,E,C,K,mB,C,C,A,C,A,A,K,C,K,C,C,C,C,C,C,E,I,C,C,Q,C,E,C,C,A,E,C,C,C,oB,C,C,O,U,G,E,A,A,C,I,C,K,G,E,C,O,I,C,K,C,I,C,C,C,C,C,A,C,A,A,Y,C,C,C,C,C,K,C,E,C,K,C,C,E,C,C,A,E,E,C,C,C,C,C,I,C,S,C,E,C,A,G,C,C,A,C,K,C,C,C,C,C,C,E,I,C,C,G,C,S,C,E,M,E,C,E,E,G,G,E,C,C,A,C,A,C,A,E,qB,C,C,O,U,E,E,A,gB,G,C,A,G,C,A,G,C,A,A,a,C,C,C,C,C,I,E,K,C,C,M,C,C,C,C,I,C,C,A,E,E,C,C,C,C,A,A,C,C,C,A,C,C,c,A,E,I,E,E,K,Q,E,C,G,E,K,Q,C,gD,C,uB,C,G,E,G,C,C,A,Q,C,C,C,A,I,E,A,E,K,Q,G,E,K,Q,E,C,C,C,A,K,C,E,G,E,E,A,C,A,C,A,A,E,C,I,G,C,C,C,E,C,C,C,C,C,I,G,C,C,C,E,C,C,C,C,C,I,G,A,C,A,C,C,Y,C,C,C,C,O,E,C,G,E,A,I,O,C,O,I,E,mB,C,O,C,A,C,I,O,C,O,I,E,I,C,A,C,I,S,A,C,O,I,E,I,C,A,C,I,O,C,G,I,I,E,I,C,E,C,K,C,A,C,I,A,Q,C,G,U,E,C,E,C,K,C,M,C,O,I,E,mB,C,U,C,C,A,A,O,K,C,c,C,E,C,A,A,C,C,O,C,C,C,C,C,C,I,C,C,C,C,C,G,C,E,G,G,C,E,C,C,C,C,C,A,C,C,C,C,G,C,G,G,E,A,C,A,C,G,A,I,K,E,A,E,G,C,I,M,C,G,I,A,C,A,C,A,C,C,C,M,C,G,A,C,A,I,C,A,C,A,K,C,C,C,C,G,E,c,A,E,C,K,C,O,C,G,I,C,kC,C,S,C,G,I,A,C,C,A,I,C,M,C,C,E,K,A,C,E,C,C,A,C,C,C,C,G,C,E,E,C,E,O,O,G,O,E,C,C,C,A,C,A,C,C,A,A,O,M,I,C,e,E,C,A,M,I,C,M,C,I,C,S,C,I,C,E,C,C,C,C,E,A,C,A,A,I,C,C,e,C,C,C,C,I,E,I,A,C,K,C,G,G,C,C,C,A,C,E,K,E,O,G,G,C,A,G,E,C,G,C,E,I,C,C,A,C,C,C,G,C,E,E,C,C,A,A,G,I,E,E,M,M,I,C,I,C,O,C,C,E,E,S,A,E,gC,C,e,C,C,U,C,Y,Q,E,C,C,C,A,C,G,C,C,A,E,C,M,C,E,E,C,C,A,A,E,M,C,C,G,G,C,A,C,A,I,G,G,e,G,E,I,E,C,Y,I,C,I,C,O,C,G,E,S,A,E,6B,C,e,C,C,U,C,oB,Q,E,C,C,C,A,C,G,E,E,I,A,E,C,Y,C,A,E,I,C,C,C,C,A,C,G,C,G,G,E,A,C,C,A,M,E,A,M,C,E,I,E,C,M,C,C,I,C,I,E,I,C,A,C,C,C,C,G,C,E,I,E,A,C,A,C,G,E,C,C,C,A,E,E,C,C,C,C,C,G,C,E,I,E,A,C,C,C,C,C,A,E,I,E,C,M,C,C,A,C,A,C,A,K,C,M,C,C,C,C,M,A,K,C,gC,C,A,C,A,C,A,E,c,C,e,8F,I,E,E,C,C,O,C,C,E,C,C,E,G,E,A,C,M,U,E,K,S,G,C,A,G,C,A,A,K,S,E,C,G,I,E,A,I,C,C,C,C,C,M,A,K,C,kB,C,C,A,O,I,C,C,C,C,A,C,A,A,Y,C,C,C,C,C,C,C,K,C,E,G,A,E,E,C,C,E,E,O,G,A,C,G,C,C,C,C,C,G,C,C,G,E,S,C,G,A,C,C,E,C,C,C,C,C,I,C,C,C,C,E,C,C,U,E,A,O,G,A,C,G,C,C,C,C,C,E,C,C,E,C,C,C,C,C,G,E,C,A,I,C,C,C,C,C,I,C,A,I,C,C,C,C,C,G,A,C,G,C,S,C,M,C,K,I,C,C,E,C,M,I,C,M,E,C,A,I,C,M,E,C,A,A,M,E,C,E,K,C,G,C,mC,C,G,A,C,C,A,A,C,C,E,C,S,C,S,C,A,I,G,C,C,A,E,a,C,E,I,C,A,A,C,A,A,C,A,A,K,C,M,C,C,C,C,I,C,S,C,I,C,E,C,A,I,C,A,C,A,O,E,C,I,E,A,I,C,C,C,C,G,I,C,C,C,C,C,K,E,C,A,I,C,C,C,C,C,I,C,C,K,C,O,E,A,C,A,C,A,E,iB,C,kB,kH,I,E,E,C,C,K,E,E,E,C,C,E,K,E,E,C,C,Q,E,E,C,C,Q,C,C,E,C,C,Q,E,C,a,oB,A,C,M,U,E,W,M,C,S,A,A,a,C,A,a,C,C,C,C,C,I,E,I,E,A,E,G,E,A,C,C,E,C,A,C,E,Q,E,C,A,C,E,E,M,A,E,C,E,C,U,C,8C,C,uB,C,C,S,C,uC,C,C,C,A,K,C,A,E,C,A,E,C,O,C,Q,C,I,C,C,O,C,M,C,S,C,C,A,E,M,E,C,C,A,C,E,E,gB,A,E,I,C,C,S,C,E,M,G,C,a,C,E,M,O,C,C,A,C,A,A,mB,E,C,O,I,C,S,G,C,C,C,A,E,W,C,C,U,C,C,O,U,E,E,E,W,C,S,A,C,a,A,A,a,C,C,C,C,C,C,C,I,E,A,I,E,E,I,G,C,C,A,I,E,E,G,I,C,I,C,E,I,E,A,C,A,C,E,G,C,C,C,A,A,G,C,E,A,I,E,I,C,C,A,C,I,A,C,A,E,K,K,C,C,C,E,G,A,E,C,C,G,G,C,C,I,C,C,C,C,C,A,C,E,A,E,gB,A,E,I,C,W,S,O,C,C,C,A,C,A,A,S,G,C,C,C,C,G,C,O,I,E,E,I,C,A,K,I,C,I,C,a,C,C,A,A,M,E,C,C,A,C,M,K,C,Y,C,E,C,A,I,C,C,a,E,C,O,I,C,S,G,C,C,A,M,C,O,C,C,W,C,C,C,C,C,C,O,I,E,E,E,C,A,E,I,A,C,A,C,Q,C,C,C,C,C,C,C,C,C,I,E,A,G,G,C,C,C,A,A,G,C,E,A,I,E,I,C,C,A,C,G,C,C,I,C,C,Y,C,C,Q,E,A,O,E,A,C,E,I,G,G,C,E,C,S,C,M,mB,A,C,I,Q,C,M,kB,A,C,I,S,C,M,mB,A,C,I,U,C,M,4B,A,C,I,iB,C,M,2B,A,C,I,kB,C,M,4B,A,C,I,M,C,M,wB,A,C,I,c,C,A,C,G,a,C,M,kB,K,A,C,I,c,C,M,wB,A,C,I,K,C,M,uB,A,C,I,M,C,M,uB,A,C,I,O,C,M,yB,A,C,I,c,C,M,wB,A,C,I,e,C,M,yB,A,C,I,O,C,M,2B,A,C,I,Y,C,M,wB,A,C,I,c,C,M,0B,A,C,I,U,C,M,4B,A,C,I,iB,C,M,2B,A,C,I,kB,C,M,4B,C,A,A,C,E,E,c,A,G,E,G,kB,C,S,C,E,C,C,A,C,C,A,I,C,A,C,I,E,E,C,C,C,A,I,G,E,K,I,E,E,E,C,A,E,K,G,E,I,C,E,C,G,I,I,C,C,A,C,C,G,I,C,A,E,G,C,E,E,G,E,C,A,C,C,C,C,C,kB,A,E,gB,C,C,A,G,C,A,C,A,A,C,C,C,A,E,E,C,W,C,e,kB,O,c,C,E,a,uC,I,E,E,C,C,K,E,E,E,C,C,E,K,E,E,C,C,Q,E,E,C,C,Q,C,C,U,gC,A,C,M,U,E,K,U,C,K,A,A,a,C,C,C,C,C,I,E,A,I,E,E,I,G,C,C,A,I,E,E,G,I,C,I,C,E,I,E,A,C,A,C,G,C,C,C,C,C,A,A,K,C,A,E,K,K,C,E,E,C,E,A,A,C,A,C,G,S,C,C,C,C,C,A,C,E,A,E,gB,A,E,I,C,C,K,E,C,C,A,C,A,A,Y,C,C,C,C,G,C,O,I,E,E,I,C,A,K,C,C,A,A,C,K,E,C,C,A,C,M,K,C,Y,C,E,C,A,I,C,C,a,E,C,O,I,C,K,G,C,C,A,M,C,G,C,C,K,C,C,C,C,C,C,I,E,A,I,C,C,C,C,C,A,A,I,E,I,C,C,Y,C,C,Q,E,A,O,E,A,C,E,I,G,G,C,E,C,S,C,M,qB,A,C,I,Q,C,M,qC,A,C,I,S,C,M,sC,A,C,I,S,C,M,sC,A,C,I,U,C,M,sC,A,C,I,iB,C,M,qC,A,C,I,kB,C,M,sC,A,C,I,M,C,M,kC,A,C,I,a,C,M,iC,A,C,I,a,C,M,kC,A,C,I,K,C,M,yB,A,C,I,M,C,M,iC,A,C,I,O,C,M,2B,A,C,I,c,C,M,mC,A,C,I,U,C,M,8B,A,C,I,iB,C,M,qC,A,C,I,kB,C,M,sC,A,C,I,M,C,M,0B,C,A,A,G,E,c,A,G,E,G,kB,C,S,C,E,C,C,A,C,C,A,I,C,A,C,C,E,E,C,C,C,A,A,O,E,K,I,E,E,E,C,C,C,G,E,K,C,E,C,C,K,C,E,E,G,E,C,A,C,C,C,C,C,kB,A,E,mB,C,C,C,E,C,C,A,A,C,A,C,C,A,E,E,C,c,C,kB,0F,I,E,E,C,C,K,E,E,E,C,C,O,E,C,C,C,C,Q,E,E,I,C,G,C,C,A,E,E,I,C,G,C,C,A,S,I,G,I,I,I,E,C,O,E,A,C,A,A,S,E,C,E,I,G,I,C,S,C,E,C,E,A,C,G,A,C,E,E,G,E,A,O,E,C,E,C,C,C,Q,C,K,C,E,G,K,E,C,C,A,E,C,A,E,C,C,E,C,U,E,C,G,C,Q,C,C,C,M,C,C,C,C,A,E,C,S,E,C,C,C,C,Q,C,C,C,a,C,C,C,c,C,C,C,S,C,C,C,C,iB,C,C,C,e,C,C,C,K,C,C,C,Q,C,I,C,a,C,I,C,U,C,C,C,e,C,I,C,wB,C,C,C,C,A,K,U,E,C,C,C,E,I,E,E,I,O,C,C,E,E,I,O,C,C,C,C,E,A,E,I,S,E,C,E,I,S,C,C,K,I,C,C,E,C,I,E,M,E,C,G,I,C,c,E,C,A,E,E,I,G,I,E,C,E,I,O,C,C,C,C,A,A,M,E,C,E,A,I,O,C,C,C,C,A,E,I,W,C,E,E,C,C,E,oB,C,I,A,E,C,E,C,A,S,C,I,C,A,C,C,C,C,C,A,M,E,I,S,C,A,E,I,K,E,C,C,E,I,W,E,E,C,A,S,E,C,E,G,E,E,E,A,E,G,G,M,C,A,G,K,C,O,C,G,E,C,E,C,G,C,E,G,A,C,G,I,C,E,C,A,C,C,G,C,A,G,Q,E,O,G,E,C,O,E,A,O,E,G,G,C,A,O,E,E,G,G,A,E,C,C,A,O,O,G,E,C,C,C,Q,C,A,I,Q,C,O,E,G,K,E,A,C,I,Q,C,A,I,Q,C,O,M,C,G,E,C,K,E,A,C,I,Q,C,O,I,C,S,C,E,G,C,C,A,Q,C,A,C,I,E,E,I,C,I,C,G,E,C,C,G,E,E,E,E,C,A,G,C,E,E,C,C,A,C,E,A,C,E,I,C,S,C,C,C,C,C,E,E,C,C,C,C,C,C,C,C,A,C,I,C,G,C,C,G,C,A,C,A,M,O,C,G,C,qB,C,G,A,E,C,C,C,C,Q,C,A,C,A,A,S,E,C,C,C,E,G,K,E,G,E,C,E,E,E,E,C,E,E,C,A,M,C,G,C,C,E,E,O,A,E,E,G,a,C,C,C,C,M,C,C,K,C,C,C,C,E,C,E,U,M,E,M,C,K,E,I,G,G,E,C,C,C,A,E,E,C,E,C,C,C,A,C,C,C,C,A,A,E,E,E,E,E,C,G,C,A,M,C,G,C,E,G,G,C,C,A,C,C,C,A,C,A,A,G,M,E,C,C,C,E,I,A,E,G,C,G,C,C,C,E,G,O,C,K,C,Q,C,C,G,E,C,I,A,C,C,E,G,A,C,G,C,A,C,K,G,M,C,C,C,C,A,C,C,M,E,E,E,E,C,A,A,C,E,C,A,C,C,A,A,I,E,E,E,C,A,I,I,C,I,E,G,G,E,C,A,C,C,M,E,I,C,C,E,C,A,C,A,M,C,E,E,I,A,C,E,C,G,C,A,C,A,G,E,E,E,G,E,E,G,A,C,A,A,S,E,C,C,C,E,E,E,E,C,C,A,E,I,E,A,C,C,C,C,A,I,C,A,E,A,E,C,A,C,G,G,O,C,C,K,Q,C,C,G,E,G,E,C,E,Q,K,C,C,I,C,C,E,G,C,E,C,C,A,O,E,G,G,C,C,C,C,A,C,C,M,E,E,E,E,C,A,C,E,A,C,A,C,C,C,I,E,G,C,C,I,E,C,E,M,A,C,C,E,G,C,C,A,I,C,C,C,I,A,C,M,C,I,C,C,C,A,C,C,G,C,C,A,E,I,E,C,A,C,E,E,I,E,C,C,E,E,E,E,C,C,C,I,E,E,G,C,A,C,C,C,C,C,E,C,A,C,A,A,C,A,C,C,A,C,A,C,C,C,C,C,E,C,C,C,A,C,A,C,C,C,A,C,C,A,C,A,C,C,C,C,K,C,E,I,E,C,C,C,C,O,A,E,I,E,C,C,C,C,A,C,E,C,A,A,C,C,C,E,C,A,C,C,C,C,E,C,A,C,C,C,A,C,C,A,E,C,M,E,C,C,C,E,I,C,C,E,E,A,G,C,G,A,C,C,E,I,E,G,C,C,E,E,I,A,C,G,C,I,E,G,C,C,A,C,I,C,C,M,C,C,K,A,C,A,A,M,U,E,I,Y,C,M,A,C,W,A,C,Y,A,G,C,A,G,C,A,G,C,A,A,a,C,C,C,C,C,C,C,K,C,E,G,E,E,A,C,A,C,A,C,C,C,E,G,C,A,C,E,A,A,A,C,C,W,E,gB,C,C,K,C,M,C,C,Q,C,C,C,C,E,G,M,C,C,C,C,C,E,C,C,C,C,E,C,C,I,I,C,A,C,C,C,A,C,A,C,A,C,C,A,I,C,C,C,C,C,I,C,A,G,I,A,E,A,E,K,C,C,I,C,M,C,E,K,C,C,A,I,C,M,C,I,C,I,C,I,C,C,C,C,C,M,C,C,E,G,C,E,C,C,C,A,C,G,E,C,A,C,C,C,C,C,C,A,I,C,W,C,C,C,A,I,C,Y,C,C,C,A,C,E,E,c,A,E,I,C,M,E,I,C,C,C,C,C,M,C,C,C,C,C,E,C,C,A,C,A,C,C,M,C,A,C,C,C,+B,C,Q,C,I,C,M,C,A,C,A,A,I,e,E,C,O,I,C,C,C,C,C,G,C,A,C,E,C,C,G,E,I,E,C,M,C,C,C,C,C,C,C,A,I,I,G,E,E,G,C,C,A,C,C,C,C,C,E,O,C,C,E,C,A,A,O,C,C,C,A,C,A,A,E,C,E,C,c,E,C,O,E,O,C,I,C,C,E,E,S,A,E,M,I,C,Q,C,C,M,C,S,C,C,C,C,A,C,A,A,K,C,iB,C,C,C,C,C,C,O,E,C,K,E,A,I,sB,C,O,M,E,M,c,C,E,C,gB,C,A,C,I,M,C,O,M,E,I,C,C,K,C,M,C,C,C,C,E,C,U,C,C,Q,C,E,C,O,C,C,C,A,C,I,S,C,M,C,M,E,M,I,E,C,C,A,O,A,C,I,a,C,O,M,E,M,K,C,E,C,U,C,A,C,I,Y,C,O,M,E,M,I,C,E,C,M,C,E,C,O,C,A,C,I,U,C,A,C,I,E,G,Q,G,E,C,C,A,C,A,Q,C,A,C,C,C,O,C,A,O,M,E,M,E,C,E,E,C,A,kB,C,C,A,A,I,gB,C,O,M,E,M,Q,E,A,C,I,S,C,O,M,E,M,C,C,E,C,M,C,E,C,O,C,A,C,I,a,C,M,C,M,E,M,I,E,C,C,A,Q,A,C,I,gB,C,M,C,M,E,M,I,E,C,C,A,oB,A,C,I,S,C,O,M,E,M,C,C,E,C,K,C,A,C,I,Y,C,O,M,E,M,I,C,E,C,M,C,E,C,O,C,E,C,O,C,A,C,I,gB,C,O,M,E,M,Q,C,E,C,G,C,A,C,I,qB,C,O,M,E,M,a,C,E,C,M,C,E,C,O,C,A,C,I,uB,C,O,M,E,M,e,C,E,C,G,C,A,C,I,sB,C,O,M,E,M,c,C,E,C,G,C,C,A,A,C,E,C,C,C,E,I,E,K,A,C,I,C,G,G,C,A,A,C,A,E,A,C,A,C,M,C,C,A,E,I,C,C,A,E,A,C,K,E,C,A,I,I,C,C,A,E,G,G,C,C,A,C,A,C,A,C,C,C,C,E,C,C,I,C,C,I,C,K,C,I,C,M,E,E,C,A,E,C,C,C,A,C,C,C,A,C,C,C,A,C,C,C,C,C,C,C,C,C,C,C,A,C,C,C,C,C,E,A,C,C,E,I,K,C,C,I,C,C,C,C,A,C,E,C,C,A,C,Q,C,C,C,Q,C,C,A,C,E,I,E,C,C,E,W,E,A,C,C,E,C,E,K,E,C,G,G,C,G,E,I,C,E,I,A,C,A,E,C,C,C,C,C,E,I,E,I,A,C,C,C,C,C,G,G,C,C,C,C,E,A,E,I,G,I,C,A,I,E,I,I,E,I,E,C,I,C,O,E,E,G,I,C,I,C,O,C,I,C,C,A,E,C,G,G,E,C,C,E,I,G,C,C,K,I,C,C,E,C,E,I,I,E,C,A,E,I,E,C,C,M,C,M,I,C,iB,C,E,I,I,C,E,C,A,C,A,A,A,C,K,E,C,E,A,I,U,E,C,A,E,I,E,C,O,C,C,C,A,A,E,E,E,A,I,E,C,A,C,A,C,A,G,M,E,E,A,C,C,I,W,C,I,A,E,I,W,C,I,A,E,A,C,C,I,G,C,I,C,A,C,C,E,A,C,C,I,G,C,C,K,I,E,I,M,E,E,C,C,I,A,Q,C,A,C,G,O,C,A,I,G,E,E,G,C,E,E,C,C,C,A,C,E,A,C,C,E,G,C,I,C,A,C,C,E,A,C,C,G,C,C,E,C,C,A,C,C,C,C,C,A,C,C,C,C,G,I,E,I,C,C,C,C,C,A,A,G,C,E,C,I,E,E,A,C,A,G,C,C,C,C,C,C,O,C,A,I,E,A,E,E,A,C,C,A,K,I,C,C,K,E,E,C,C,C,A,A,C,C,E,E,W,E,C,E,I,I,C,M,E,I,I,C,U,E,C,C,A,C,C,E,A,C,A,C,A,C,A,I,C,C,C,C,C,E,C,K,G,C,C,C,K,O,C,G,C,G,I,C,C,A,C,G,C,A,A,I,I,K,C,G,C,C,C,C,C,C,G,E,I,W,C,C,Q,A,I,E,E,G,C,I,A,C,C,E,E,C,E,E,E,C,E,E,E,C,A,E,K,E,G,G,C,E,C,C,C,K,A,G,E,G,yC,C,uB,C,C,S,C,sB,C,C,C,A,C,C,C,E,A,A,C,K,C,C,A,K,C,C,C,C,A,C,A,C,C,C,E,I,E,E,C,A,E,E,I,K,C,C,G,E,C,C,E,E,I,E,C,C,G,K,C,O,C,C,C,E,E,C,K,C,E,E,E,E,C,C,A,E,I,C,A,K,G,K,E,G,G,C,E,I,E,C,M,C,C,C,A,A,K,E,K,C,C,C,C,C,C,E,C,C,A,C,A,C,C,M,C,A,C,C,C,I,C,M,A,E,C,O,E,C,K,E,A,I,gB,C,A,C,C,C,E,C,I,C,C,C,C,G,I,C,C,C,C,C,I,C,I,C,C,E,E,S,A,E,E,I,C,E,I,C,I,C,C,C,C,C,M,C,A,C,E,A,C,C,A,C,e,C,C,G,C,A,C,E,C,A,C,K,C,C,C,W,C,G,C,C,E,E,S,A,E,C,C,W,C,C,Q,E,C,M,C,C,C,M,E,C,C,C,C,C,C,A,I,E,A,E,O,A,C,C,C,A,M,E,C,E,C,E,C,C,C,E,E,E,C,E,E,A,C,Q,A,E,E,E,G,C,C,E,C,M,C,C,A,I,E,G,C,G,C,C,C,A,C,A,E,I,C,C,E,C,C,A,C,E,G,A,C,I,E,C,K,E,I,E,C,C,C,C,A,C,C,M,E,E,E,E,C,A,A,C,E,C,C,A,C,A,C,A,A,I,G,C,Q,O,C,C,G,E,C,I,A,C,C,C,E,E,S,A,E,G,E,A,C,A,A,C,A,C,C,G,E,C,A,A,C,A,C,E,E,C,A,A,C,A,C,A,C,G,A,G,C,A,C,C,C,C,A,I,E,C,Q,C,Q,C,C,G,E,G,G,E,C,A,G,G,C,E,A,G,C,A,G,E,C,E,I,E,C,A,E,C,C,A,C,C,C,A,A,E,E,E,E,C,A,C,E,C,C,E,C,C,C,I,C,E,C,G,C,G,G,C,C,C,C,C,M,G,E,E,A,O,E,A,C,C,E,C,C,C,C,E,C,I,C,C,C,C,C,C,C,C,A,I,C,C,C,C,C,A,A,I,a,C,A,I,gB,C,A,I,a,C,O,E,I,C,E,I,C,E,K,A,C,C,Q,C,G,U,G,G,A,S,E,C,E,C,O,C,O,E,I,C,K,C,C,G,I,C,C,C,E,I,C,I,E,C,E,K,A,C,C,I,C,A,I,S,C,A,I,Y,C,A,I,qB,C,A,I,S,C,A,I,Y,C,A,I,gB,C,A,I,uB,C,A,I,S,C,O,E,I,C,I,E,C,E,K,A,C,C,oB,C,O,E,I,C,K,C,C,G,A,C,E,C,C,A,C,K,A,G,E,G,iB,C,uB,C,C,S,C,C,S,E,E,E,C,I,C,C,C,C,C,C,C,C,A,C,A,K,C,C,C,C,C,C,C,C,E,G,A,C,E,G,C,G,C,M,A,K,C,c,C,C,A,I,E,E,C,A,E,C,C,A,E,E,E,E,K,C,C,C,G,C,C,I,G,E,A,E,I,C,E,E,E,G,C,C,A,E,I,G,C,C,E,I,C,E,E,E,G,C,C,A,S,A,C,E,I,G,E,C,E,I,G,E,E,E,C,E,A,I,C,C,C,C,C,G,I,C,C,C,C,C,E,G,A,C,C,A,M,I,E,C,E,A,C,K,Q,K,C,C,K,E,G,C,G,E,A,G,C,A,I,C,C,C,C,C,C,E,C,E,C,A,I,A,C,C,C,C,C,E,G,A,C,C,A,I,C,E,E,M,A,E,E,M,C,C,C,A,gB,C,c,C,C,O,C,e,C,I,C,C,O,C,E,C,M,C,K,C,I,C,G,G,C,A,A,C,A,E,A,C,C,C,C,K,C,C,C,C,C,C,C,A,M,O,C,I,C,G,M,E,C,C,A,C,C,C,C,C,E,E,C,A,A,C,C,A,G,C,Q,C,C,C,C,G,sB,G,E,C,K,C,C,I,E,I,C,A,C,C,C,C,G,C,A,C,E,A,C,G,C,C,A,E,I,C,C,A,E,A,C,G,C,K,C,U,C,Q,C,C,C,K,A,E,C,C,A,I,E,I,E,E,M,E,C,G,A,C,A,C,A,E,C,E,I,C,M,C,E,E,C,K,C,C,G,G,E,C,C,C,Q,C,C,C,C,A,A,E,I,E,C,C,C,A,E,C,E,I,C,M,C,E,E,C,K,C,I,G,C,C,C,C,C,O,C,C,C,C,A,A,C,C,A,C,A,M,C,C,E,E,G,O,C,C,G,C,C,G,C,C,C,C,A,C,E,A,I,C,C,A,C,A,A,C,C,G,C,C,K,Q,K,C,C,A,E,K,E,G,C,A,E,E,E,E,C,I,E,C,E,K,C,C,A,C,E,A,A,C,A,C,E,C,C,C,C,E,G,C,E,E,O,A,E,E,I,gB,C,C,C,K,E,I,A,C,C,E,G,G,C,C,A,C,C,C,E,C,I,C,C,A,C,A,A,C,A,C,C,E,G,C,E,C,E,K,C,C,K,C,M,O,C,I,C,G,A,I,A,C,C,A,E,E,E,C,K,C,C,G,G,C,A,C,C,A,E,M,A,E,K,C,K,G,yB,C,c,C,C,O,C,e,C,I,C,C,O,C,E,C,M,C,E,G,C,C,C,C,C,C,C,A,G,C,E,O,K,C,C,K,E,I,C,E,E,A,I,C,C,I,C,C,C,C,E,C,A,I,E,I,C,E,C,C,C,A,C,C,A,M,C,C,E,A,E,E,I,A,C,C,C,C,C,E,G,A,C,C,A,C,I,E,A,G,C,E,C,E,I,E,C,C,C,I,A,C,E,I,C,M,C,C,K,A,A,I,E,I,E,I,C,C,C,C,C,E,G,A,C,C,A,E,I,K,C,C,E,G,C,A,G,E,I,E,A,E,I,E,E,E,I,E,C,a,E,C,A,O,C,C,A,I,C,A,C,O,E,C,I,G,U,C,C,G,I,C,C,C,C,C,A,E,M,C,E,C,A,K,C,O,E,A,C,A,C,A,E,gB,C,iB,6F,I,E,E,C,C,K,E,E,E,C,C,M,E,E,E,C,C,Q,C,C,E,C,C,Q,E,E,A,C,C,Q,E,E,A,C,C,Q,E,C,C,C,C,Q,A,E,E,C,C,Q,E,C,C,C,C,Q,E,A,E,C,C,Q,C,C,E,C,C,Q,E,E,C,C,Q,E,C,K,+E,C,K,C,G,C,C,A,E,kB,C,E,O,A,C,C,C,E,A,I,E,C,A,E,G,C,C,C,C,A,A,I,E,A,G,A,C,E,A,E,A,C,C,A,C,E,E,C,Q,E,A,O,E,K,I,C,A,I,A,E,K,I,C,C,A,K,C,O,C,E,K,I,C,E,A,C,C,C,C,C,E,K,I,C,O,C,I,A,C,E,Q,E,O,G,E,E,C,E,A,C,U,C,C,C,M,I,E,e,C,G,G,C,C,C,K,E,O,G,E,E,C,E,A,C,Q,C,E,E,C,E,Q,E,E,K,A,E,G,C,C,A,C,A,E,Q,C,C,A,O,E,G,E,C,A,O,I,E,iB,C,G,I,A,C,C,A,I,C,A,G,C,E,A,E,O,C,C,G,C,G,A,I,C,C,A,E,C,C,A,C,G,E,E,C,A,G,C,C,U,K,C,E,I,O,E,A,C,C,C,I,C,E,I,A,C,E,E,E,e,C,2B,A,E,W,I,C,C,C,C,C,A,Q,I,E,C,E,I,E,E,G,C,C,E,E,E,e,C,uC,A,E,C,U,G,E,C,C,C,C,C,E,S,C,A,C,C,E,C,E,I,C,E,E,E,e,C,E,E,G,E,E,C,C,C,A,A,M,E,C,C,A,C,E,E,M,C,E,C,G,E,A,E,I,C,A,G,C,E,I,C,E,E,E,Y,C,E,E,G,C,C,A,C,C,A,A,M,E,C,C,A,C,E,E,U,E,C,C,C,E,C,E,I,C,E,E,E,kB,C,E,E,G,E,K,C,C,C,A,A,M,E,C,C,A,C,E,E,U,E,C,C,C,E,C,E,I,C,E,E,E,kB,C,I,A,G,C,C,C,A,E,C,C,A,C,E,E,U,C,C,C,C,E,C,E,I,C,E,E,E,iB,C,E,E,G,E,I,C,C,C,A,A,M,E,C,C,A,C,E,E,Q,C,C,A,C,E,C,I,E,E,E,K,A,C,C,A,A,G,K,E,A,E,C,I,I,E,E,C,C,K,E,I,C,A,E,E,K,E,E,C,C,E,I,C,E,E,E,c,C,E,E,G,C,A,G,G,E,C,A,C,A,A,C,A,C,C,E,U,C,C,C,C,E,C,I,E,E,C,I,I,C,A,E,I,C,E,E,E,iB,C,E,I,A,C,A,C,C,C,E,E,C,C,A,C,E,C,E,E,M,A,E,E,M,C,A,6B,C,uB,C,C,S,C,oB,C,C,C,A,A,C,E,G,G,G,C,O,C,C,C,C,C,A,I,E,I,A,C,K,C,E,M,C,A,C,C,C,A,O,E,C,E,A,C,G,C,C,A,A,G,C,C,E,C,E,G,G,C,C,E,I,C,G,G,A,C,C,A,C,E,E,E,G,C,E,C,E,E,E,G,C,A,C,C,I,E,gB,C,O,E,A,O,C,C,C,C,A,C,A,E,qG,I,E,E,C,C,K,E,E,E,C,C,O,C,M,U,E,A,c,C,M,A,G,C,A,G,C,A,A,a,C,C,C,K,C,E,I,I,C,C,A,C,E,E,gB,A,E,I,C,C,M,E,C,C,C,A,I,C,C,C,C,C,I,C,A,I,C,C,C,C,C,C,A,C,A,A,K,C,U,E,C,O,I,C,M,C,U,E,A,C,A,A,O,C,C,C,C,O,I,E,I,C,K,C,C,O,C,G,C,A,I,C,A,C,A,C,O,C,C,C,C,G,S,G,E,C,I,C,C,A,I,C,C,C,C,G,I,C,C,C,C,C,K,C,Q,C,U,C,C,A,I,E,G,C,C,C,C,C,C,A,O,M,I,C,C,C,C,C,A,E,A,G,C,G,K,C,Q,C,E,C,A,K,C,C,E,E,C,I,C,C,C,C,E,A,C,A,A,K,E,C,I,C,C,A,E,C,C,C,A,I,C,C,C,C,C,I,A,C,A,A,K,C,e,C,C,C,C,I,E,I,C,K,G,C,S,C,C,A,O,I,C,S,E,C,A,C,C,C,A,M,I,C,M,C,mB,C,E,C,C,A,K,C,M,E,M,I,A,C,A,M,C,e,C,E,A,C,A,A,C,c,C,C,C,C,O,I,C,M,C,e,C,E,A,C,A,A,C,U,C,C,C,C,O,I,C,M,C,W,C,E,C,A,I,C,C,O,C,C,C,C,C,C,C,C,O,I,C,M,C,a,C,E,E,E,A,C,A,C,A,C,C,A,C,W,C,a,8F,I,E,E,C,C,K,E,E,E,C,C,O,E,K,U,E,G,sB,E,C,A,G,C,A,A,a,C,C,C,C,C,C,C,I,E,K,C,C,M,C,C,C,C,I,C,C,A,E,E,C,C,C,A,C,A,E,C,C,S,C,C,C,C,C,A,C,E,E,c,A,E,G,E,G,G,C,C,2B,C,U,C,G,K,A,C,A,C,C,G,E,E,A,C,A,C,A,C,C,C,I,C,A,G,E,G,G,M,E,C,I,C,C,C,C,C,E,M,M,A,C,C,I,C,C,C,A,C,K,C,E,I,C,C,E,C,C,C,K,G,M,G,C,C,C,A,G,C,C,I,C,O,C,C,M,C,oB,S,C,C,C,C,A,G,A,C,I,E,I,E,E,M,C,C,G,I,C,C,C,I,C,I,C,O,C,C,M,C,sB,C,M,E,C,C,C,A,E,A,I,C,C,C,C,C,I,E,A,G,E,C,C,C,O,C,A,C,M,E,G,C,C,C,C,I,C,A,E,G,C,C,C,C,I,C,A,E,G,I,C,E,I,C,A,C,G,C,O,C,C,M,C,qB,O,C,C,C,C,A,C,C,A,C,A,C,A,A,C,C,E,Y,E,C,O,I,C,C,C,C,A,C,A,A,K,C,I,C,C,C,C,C,C,O,M,I,C,M,E,C,A,M,K,C,I,C,E,E,C,A,C,E,C,C,A,C,K,C,C,C,C,C,E,E,c,A,E,C,K,C,O,C,G,I,C,oC,C,S,C,G,G,C,A,C,C,E,E,I,E,I,C,C,C,A,C,E,K,C,C,E,K,C,E,E,C,C,A,M,C,C,E,C,E,E,C,E,I,E,C,C,C,A,A,M,C,C,C,M,C,C,E,C,E,E,C,E,G,C,C,I,C,C,C,I,C,I,C,C,C,I,C,O,C,C,C,O,C,C,C,C,A,A,C,A,W,C,C,C,C,C,C,O,C,E,E,C,C,C,K,C,I,C,S,C,G,C,C,A,A,K,C,I,E,C,C,E,A,K,I,C,E,G,E,C,O,C,C,oB,E,E,G,E,C,O,C,C,C,A,K,C,K,I,C,E,G,E,C,O,C,C,oB,E,E,G,E,C,O,C,C,C,A,A,O,K,C,W,C,E,E,C,A,E,A,C,C,C,C,S,C,C,C,C,I,E,A,I,G,A,C,C,A,E,E,E,M,A,I,C,I,C,c,C,E,C,C,M,A,Q,E,A,O,E,E,G,C,E,A,C,G,E,E,A,C,C,C,E,M,E,C,A,C,C,E,E,M,A,C,A,C,E,A,C,A,C,W,E,G,G,I,C,C,C,C,A,K,C,S,C,C,C,C,G,I,E,A,I,G,A,C,C,A,C,C,K,I,C,S,C,G,G,C,A,C,C,C,G,I,C,C,C,A,C,qB,C,E,C,C,A,A,M,E,C,E,E,E,E,G,A,I,A,C,M,I,C,W,C,E,C,E,C,C,C,E,C,E,G,E,C,C,C,A,A,O,M,K,C,S,C,E,C,A,I,C,C,A,C,K,C,Q,C,C,C,C,G,I,E,A,G,G,C,A,C,C,C,A,E,K,G,C,C,M,I,E,E,K,G,C,C,A,C,G,E,E,G,E,C,C,A,C,C,K,C,C,A,C,U,C,C,A,O,M,C,A,M,C,A,C,G,C,A,G,I,E,A,E,K,E,I,C,A,I,E,E,K,E,I,C,A,G,G,E,K,C,E,C,C,M,I,E,E,K,G,C,C,A,C,E,C,C,kB,G,G,I,W,G,G,I,iB,G,C,C,C,A,E,K,I,C,A,I,E,E,G,E,E,C,A,C,C,K,E,C,A,C,E,C,O,A,C,E,C,E,I,C,A,A,M,I,O,C,C,E,K,A,C,E,C,C,C,E,C,A,A,E,A,I,C,C,C,E,A,A,C,C,E,G,G,C,C,A,G,G,C,C,A,E,C,A,E,A,A,C,C,A,C,E,Y,C,G,E,A,C,C,C,G,C,C,E,G,E,E,G,C,C,C,I,E,E,I,C,C,C,E,G,A,C,A,C,C,C,M,C,M,C,C,C,C,C,C,I,C,C,C,C,A,C,E,I,E,A,E,E,I,A,C,A,C,K,G,Q,K,E,E,K,E,C,A,C,C,C,C,C,C,G,C,C,A,G,E,I,E,A,C,E,A,E,C,E,G,C,A,C,C,C,C,C,I,E,C,C,C,I,C,I,C,A,C,A,C,C,A,C,C,E,C,E,C,U,C,C,M,C,C,E,E,C,C,E,C,C,O,C,C,C,G,G,M,C,E,C,C,A,C,A,K,C,C,C,E,C,C,S,A,E,8B,C,uB,C,C,K,C,E,C,C,C,A,C,E,E,C,G,U,C,M,C,C,C,C,C,C,C,C,A,E,I,C,C,O,C,C,C,G,G,M,C,E,C,C,A,C,A,K,E,I,C,A,C,A,E,K,c,C,0B,C,E,C,C,A,E,G,E,C,C,G,C,G,E,A,G,C,C,G,A,E,A,C,C,C,C,C,W,C,0B,C,G,E,K,C,C,C,K,C,I,K,C,yB,C,C,A,C,A,C,A,C,A,C,A,A,E,e,C,gB,8F,I,E,E,C,C,K,E,E,E,C,C,Q,E,E,C,C,O,E,K,U,E,M,S,C,M,A,A,a,C,C,C,C,C,I,E,A,I,E,E,I,G,C,C,A,I,E,E,G,I,C,I,C,E,I,E,A,C,A,C,G,E,A,I,A,C,C,A,K,C,A,E,K,K,C,G,E,A,C,C,C,C,C,S,C,C,C,C,C,A,G,A,E,gB,A,E,I,C,Q,C,C,C,A,C,A,A,E,U,C,C,C,C,G,C,O,I,E,E,I,C,A,M,C,C,A,A,C,K,E,C,C,A,C,M,K,C,Y,C,E,C,A,I,C,C,a,E,C,O,I,C,C,C,I,C,M,A,C,A,a,C,C,C,C,I,E,E,G,C,a,C,G,A,C,C,K,G,C,gB,G,E,E,I,E,C,E,A,E,E,E,C,M,G,E,E,E,C,E,E,E,C,K,E,C,A,E,E,E,C,I,C,Q,C,C,C,C,C,A,E,C,Q,C,C,C,C,C,C,I,E,E,C,C,E,C,C,A,C,C,A,C,G,C,A,G,G,C,C,I,G,E,G,C,E,C,C,E,E,W,A,E,E,G,C,E,E,E,G,C,A,C,G,E,C,O,Q,C,I,C,kC,C,I,C,4B,C,I,C,uD,C,I,C,4C,C,I,C,C,A,E,E,A,C,I,gB,E,E,E,G,I,C,E,C,C,E,G,A,C,C,E,E,C,A,C,C,E,G,I,E,E,C,E,C,E,C,C,E,G,A,I,E,G,A,C,C,I,E,G,A,E,E,E,C,Y,E,E,G,C,C,C,C,C,A,E,G,C,C,0E,C,G,K,C,A,C,C,C,C,I,E,A,E,G,C,E,yB,E,C,E,G,I,G,E,G,I,E,kB,C,C,A,O,K,C,W,C,E,E,C,A,E,C,C,C,C,C,U,C,C,C,C,I,E,I,C,C,Y,C,A,M,G,A,C,E,G,I,G,C,E,C,S,C,M,wC,C,C,G,S,C,M,gD,C,C,G,S,C,M,gD,C,C,G,S,C,M,wC,C,C,G,U,C,M,6C,C,C,G,M,C,M,yC,C,C,G,c,C,M,iD,C,C,G,O,C,M,4C,C,C,G,U,C,M,6C,C,C,G,kB,C,M,qD,C,C,G,M,C,M,4C,A,A,C,A,E,E,c,A,G,E,G,kB,C,S,C,E,C,C,A,C,C,A,I,C,A,C,C,A,O,E,K,I,E,E,C,C,A,C,A,A,E,E,C,e,C,mB,uF,I,E,E,C,C,K,E,E,E,C,C,E,K,E,E,C,C,Q,E,E,C,C,Q,C,C,kB,Q,A,C,M,U,E,E,a,C,a,A,C,iB,A,A,a,C,C,C,C,C,C,C,I,E,A,I,E,E,I,G,C,C,A,I,E,E,G,I,C,I,C,E,A,I,E,A,C,C,G,E,A,C,C,C,A,I,E,A,E,E,E,I,C,C,A,K,A,C,A,E,C,I,K,C,C,C,E,G,A,E,C,I,C,C,K,C,C,A,A,C,A,C,A,C,C,C,C,E,A,E,gB,A,E,I,C,e,a,O,C,C,C,A,C,A,A,Y,C,A,C,C,C,G,C,O,I,E,E,I,C,A,K,Q,C,I,C,iB,C,C,A,A,M,E,C,C,A,C,M,K,C,Y,C,E,C,A,I,C,C,A,C,U,C,C,C,C,C,C,C,C,A,I,E,I,E,C,A,C,C,A,I,E,E,E,C,C,Y,C,C,Q,E,A,O,E,A,C,E,I,G,G,C,E,C,S,C,M,kC,A,C,I,Q,C,M,iC,A,C,I,O,C,M,mC,A,C,I,c,C,M,yC,C,A,A,C,E,E,c,A,G,E,G,kB,C,S,C,E,C,C,A,C,C,A,I,C,A,C,O,E,E,C,C,C,A,O,C,C,K,I,E,E,E,C,A,E,K,O,E,A,C,E,C,G,I,I,E,G,C,C,A,C,G,C,I,C,C,A,E,E,G,E,C,A,C,C,C,C,C,kB,A,E,gB,C,C,C,E,C,C,A,A,C,A,C,A,K,C,a,E,C,O,I,C,a,G,C,C,C,A,E,c,C,A,C,C,a,8F,I,E,E,C,C,Q,E,C,C,C,C,O,C,M,U,E,K,S,G,C,A,A,K,M,E,C,O,I,C,C,C,C,A,C,A,A,Y,C,C,C,C,C,C,C,K,C,E,G,E,E,A,C,A,C,A,C,C,C,C,E,E,O,A,E,G,C,C,C,C,C,M,C,E,C,O,C,K,I,C,C,E,C,M,I,C,M,E,C,A,A,M,E,C,E,K,C,G,C,mC,C,G,A,C,C,A,C,A,A,C,G,E,M,A,C,K,C,C,C,C,A,I,C,M,C,E,C,M,C,A,I,A,E,C,C,A,U,C,W,C,C,A,S,A,C,C,C,A,I,E,E,A,A,C,A,A,C,C,C,A,C,A,K,C,C,C,E,E,E,A,E,E,K,C,E,C,G,G,C,C,C,C,A,C,A,E,A,M,A,E,I,C,C,C,E,M,C,E,E,C,A,I,I,E,C,I,E,C,C,A,E,E,A,C,C,A,A,G,G,U,E,M,G,C,E,E,M,C,E,C,A,C,A,C,E,E,C,G,A,C,M,C,C,E,E,C,C,A,C,C,C,M,C,C,A,I,G,C,C,A,E,a,C,E,C,C,C,A,E,A,C,A,C,A,C,C,A,E,E,C,A,C,K,C,E,C,K,C,G,E,A,I,C,I,C,O,C,C,A,I,C,M,C,O,E,C,A,I,C,M,C,G,E,A,C,A,C,A,C,A,A,O,E,C,I,C,M,C,O,E,C,A,I,C,M,C,G,E,C,A,K,C,O,E,A,C,A,A,K,C,M,C,C,C,C,A,E,K,G,C,I,C,E,C,G,I,A,C,C,A,I,C,M,C,K,C,E,C,C,A,E,C,C,C,c,C,kB,c,O,c,C,E,a,i0B,I,E,E,C,C,O,G,I,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,O,c,C,E,sB,C,Y,E,I,W,O,E,mB,C,G,A,I,E,E,C,C,Q,A,O,c,C,E,iB,C,W,G,I,W,O,E,c,C,G,A,O,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,I,E,E,C,C,E,K,O,c,C,E,sB,C,Y,E,I,W,O,E,mB,C,G,A,I,E,E,C,C,Q,C,M,c,C,E,qB,C,W,G,I,W,O,E,kB,C,G,A,I,E,E,C,C,K,G,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,0B,C,Y,E,I,W,O,E,uB,C,G,A,I,E,E,C,C,Q,O,c,C,E,U,C,Y,E,I,W,O,E,O,C,G,A,I,E,E,C,C,Q,I,G,c,C,E,e,C,W,G,I,W,O,E,Y,C,G,A,I,E,E,C,C,Q,A,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,O,c,C,E,gB,C,W,G,I,W,O,E,a,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,O,c,C,E,uB,C,Y,E,I,W,O,E,oB,C,G,A,O,c,C,E,+B,C,Y,E,I,W,O,E,4B,C,G,A,I,E,E,C,C,C,O,O,c,C,E,Q,C,Y,E,I,W,O,E,K,C,G,A,O,c,C,E,U,C,Y,E,I,W,O,E,O,C,G,A,O,c,C,E,M,C,Y,E,I,W,O,E,G,C,G,A,O,c,C,E,qB,C,Y,E,I,W,O,E,kB,C,G,A,O,c,C,E,sB,C,Y,E,I,W,O,E,mB,C,G,A,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,I,E,E,C,C,Q,E,K,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,I,E,E,C,C,Q,C,M,c,C,E,qB,C,W,G,I,W,O,E,kB,C,G,A,O,c,C,E,kB,C,Y,E,I,W,O,E,e,C,G,A,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,I,E,E,C,C,Q,C,M,c,C,E,kB,C,Y,E,I,W,O,E,e,C,G,A,I,E,E,C,C,Q,C,M,c,C,E,kB,C,Y,E,I,W,O,E,e,C,G,A,I,E,E,C,C,Q,I,G,c,C,E,qB,C,Y,E,I,W,O,E,kB,C,G,A,I,E,E,C,C,M,E,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,I,E,E,C,C,Q,I,G,c,C,E,qB,C,W,G,I,W,O,E,kB,C,G,A,I,E,E,C,C,Q,I,G,c,C,E,qB,C,Y,E,I,W,O,E,kB,C,G,A,I,E,E,C,C,Q,G,I,c,C,E,oB,C,Y,E,I,W,O,E,iB,C,G,A,O,c,C,E,kB,C,W,G,I,W,O,E,e,C,G,A,I,E,E,C,C,Q,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,0B,C,Y,E,I,W,O,E,uB,C,G,A,I,E,E,C,C,Q,A,O,c,C,E,iB,C,W,G,I,W,O,E,c,C,G,A,I,E,E,C,C,Q,G,I,c,C,E,oB,C,Y,E,I,W,O,E,iB,C,G,A,I,E,E,C,C,Q,C,E,I,I,E,Q,C,E,oB,C,Y,E,I,W,O,E,iB,C,G,A,I,E,E,C,C,Q,A,O,c,C,E,iB,C,W,G,I,W,O,E,c,C,G,A,I,E,E,C,C,Q,G,I,c,C,E,oB,C,Y,E,I,W,O,E,iB,C,G,A,I,E,E,C,C,Q,A,O,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,O,c,C,E,wB,C,Y,E,I,W,O,E,qB,C,G,A,O,c,C,E,0B,C,Y,E,I,W,O,E,uB,C,G,A,O,c,C,E,wB,C,Y,E,I,W,O,E,qB,C,G,oG,I,E,E,C,C,O,C,E,E,C,C,I,I,E,E,C,C,O,E,A,E,C,C,Q,E,C,C,C,C,K,C,O,U,A,E,c,C,O,A,G,C,A,A,a,C,C,C,C,C,K,C,G,G,E,A,C,C,Y,A,E,G,O,G,E,O,E,I,C,A,G,kB,C,Y,C,c,C,C,A,I,C,C,C,C,C,E,I,E,C,C,C,A,E,A,c,A,E,I,C,U,C,S,C,C,A,C,E,E,gB,A,E,I,C,C,O,E,C,C,A,C,A,A,I,U,E,C,O,I,C,C,C,C,A,C,A,A,I,U,E,C,O,I,C,U,C,U,A,C,A,A,K,C,U,E,C,O,I,C,O,A,C,A,A,O,C,C,C,C,O,I,E,I,C,C,A,E,A,C,E,C,A,K,A,C,A,C,c,C,C,C,C,E,A,C,E,E,W,A,E,E,C,A,C,E,I,C,M,C,C,C,M,C,E,E,iB,A,E,C,E,C,E,A,E,C,A,C,E,E,c,A,E,E,A,E,C,I,C,C,C,I,E,I,C,E,A,A,C,G,C,A,C,A,E,E,c,A,E,E,A,I,C,I,C,C,C,I,E,C,A,C,G,E,A,C,A,E,E,E,A,E,C,C,C,C,A,A,I,A,E,I,E,A,I,C,C,C,C,A,I,E,A,E,A,I,G,C,E,E,c,A,E,C,E,E,U,A,E,E,A,I,C,C,E,I,C,O,C,mC,C,S,C,E,A,I,C,C,A,O,E,A,I,C,C,I,E,C,C,W,C,I,C,E,C,A,C,M,E,C,Q,C,I,C,U,C,I,C,E,C,W,C,C,A,E,C,S,A,C,A,A,K,C,W,C,C,C,C,O,I,C,e,C,E,C,A,I,C,C,S,C,C,C,C,O,I,C,U,C,I,C,C,E,E,W,A,E,I,G,C,C,K,A,C,A,A,a,C,C,C,C,C,E,E,c,A,E,Q,E,O,E,E,K,C,A,mC,C,c,C,G,C,C,C,C,E,I,C,E,Q,C,I,C,C,E,E,iB,A,E,I,A,C,C,C,I,M,C,M,C,C,C,C,C,O,C,C,E,E,U,A,E,E,E,K,C,C,K,C,C,E,E,S,A,E,E,E,G,E,C,C,C,O,C,C,E,E,S,A,E,E,E,K,E,C,C,C,C,C,S,E,C,C,A,C,A,A,K,C,S,C,C,C,C,O,E,E,I,C,M,C,C,C,C,E,C,C,M,C,M,C,E,E,c,A,E,E,E,K,C,I,C,C,C,C,A,I,C,a,C,M,I,C,qB,C,G,C,A,A,C,C,C,E,C,a,C,C,C,C,C,C,C,C,I,E,M,C,C,gB,C,Y,C,E,E,E,A,C,E,E,C,I,A,C,C,C,C,C,M,A,E,I,E,I,C,Q,C,6C,C,uB,C,C,S,C,a,C,I,C,M,C,C,C,C,A,C,A,I,E,K,C,I,C,Q,C,W,C,G,C,C,C,G,C,E,E,M,A,E,I,E,E,K,kB,C,mB,C,C,K,C,E,C,C,A,A,C,C,C,C,A,G,C,G,I,C,U,C,I,C,E,gB,C,I,C,E,M,C,A,E,E,C,I,C,C,A,C,U,A,C,A,C,A,E,U,C,W,mG,I,E,E,C,C,K,E,E,M,yB,C,A,E,E,S,C,A,S,E,C,C,C,C,C,I,E,E,C,A,E,K,E,G,G,C,C,E,G,C,C,C,E,C,A,E,C,E,C,E,C,C,C,C,C,C,G,C,C,A,E,C,C,C,M,C,Y,C,G,I,A,A,C,A,C,A,E,C,A,E,A,G,C,C,I,A,C,C,C,E,A,C,A,A,C,A,A,S,E,C,C,C,C,C,I,I,C,C,E,M,A,C,C,C,C,E,C,C,C,E,C,A,E,E,A,E,G,C,C,C,C,C,C,C,I,C,E,E,O,C,C,C,C,C,C,C,C,C,C,C,C,C,A,I,E,E,C,A,C,C,E,E,E,G,C,4B,C,C,E,C,C,E,A,E,E,C,C,E,A,E,E,E,A,I,C,C,Q,C,G,C,A,C,C,C,C,C,E,C,A,E,I,A,C,G,C,C,K,E,I,A,C,E,E,S,E,C,C,A,M,E,A,C,A,C,C,A,G,E,M,A,A,E,G,C,C,W,E,I,C,S,C,G,C,C,C,A,E,C,I,E,E,E,A,E,C,C,A,C,G,C,A,C,A,A,E,M,C,E,E,G,M,C,E,O,A,C,E,A,M,A,C,E,E,c,A,E,G,G,C,C,C,C,C,uB,C,M,C,G,C,C,A,C,C,E,A,O,C,C,C,C,C,E,M,A,C,C,E,E,O,C,C,C,C,C,C,C,E,M,A,C,C,A,C,A,mG,I,E,E,C,C,K,E,E,Q,C,E,I,A,K,C,A,A,E,W,C,C,C,C,E,E,gB,A,E,I,C,Q,C,C,C,A,C,A,A,E,G,C,C,C,C,O,E,I,O,E,C,K,C,M,C,A,C,A,A,I,C,C,C,C,O,E,G,C,C,G,C,A,C,A,C,qG,I,E,E,C,C,I,I,E,E,C,C,K,E,E,E,C,C,G,K,E,E,C,C,C,M,O,U,C,C,Q,G,A,A,G,C,A,A,a,C,C,C,C,C,C,C,K,C,G,G,C,A,C,A,C,C,A,C,E,E,C,C,C,C,C,C,C,E,I,C,C,A,C,A,C,C,I,A,C,A,A,I,K,E,C,O,I,C,C,A,C,A,C,A,A,Y,E,C,M,C,E,E,S,A,E,I,C,C,C,A,C,A,C,A,E,C,A,G,C,G,G,A,I,M,C,C,A,E,C,C,I,E,G,C,C,Y,E,C,A,G,A,C,E,E,E,A,C,C,E,G,C,C,I,C,C,I,C,C,E,I,C,C,C,C,C,C,K,A,K,C,C,mB,E,I,C,M,C,O,C,C,C,A,I,C,C,C,C,C,E,A,G,C,G,I,C,C,C,C,A,C,A,A,O,C,C,C,C,I,E,G,C,C,C,C,C,E,C,A,M,C,E,E,c,A,E,G,C,C,C,E,E,C,E,G,C,C,oB,E,E,C,C,C,M,C,G,C,C,A,C,C,A,A,C,A,A,E,U,C,C,C,C,O,I,C,C,C,C,E,C,O,C,E,C,C,A,A,C,C,A,W,C,Y,sF,I,E,E,C,C,K,E,E,I,A,C,C,K,M,I,E,W,C,a,C,K,C,I,C,C,K,E,Q,C,C,q2L,C,A,oE,C,A,C,A,M,C,Q,E,C,O,I,E,A,I,E,E,E,C,C,A,C,A,C,C,C,A,A,E,G,C,E,C,O,6F,I,E,E,C,C,M,E,E,E,C,C,K,E,E,E,C,C,Q,G,M,E,C,E,M,C,A,C,E,C,C,C,A,C,C,C,C,A,C,E,E,C,A,C,A,A,C,Q,E,C,C,C,E,G,E,K,U,A,E,M,C,C,A,A,I,E,E,E,E,E,I,E,C,Q,E,C,C,A,I,E,E,C,I,C,A,G,C,E,E,A,C,C,Y,A,E,E,G,G,C,C,C,C,C,E,E,G,G,E,E,E,E,G,G,E,E,C,yB,C,U,C,c,C,C,A,I,E,I,C,S,C,I,C,I,C,E,C,E,G,G,C,C,C,C,C,A,E,C,C,A,E,E,I,C,C,C,C,C,C,E,G,G,C,C,E,C,C,I,E,E,C,K,M,C,C,C,C,C,C,S,C,M,C,C,C,A,G,E,c,A,E,G,C,C,A,C,+B,E,C,C,C,C,U,C,c,C,C,A,I,I,E,C,A,C,E,C,C,C,G,C,C,C,A,C,E,A,E,C,G,C,A,C,A,A,C,G,C,C,C,C,C,E,C,C,G,C,C,A,C,A,C,C,C,A,E,E,A,C,C,E,C,E,G,C,E,C,C,C,A,E,E,E,G,G,A,C,C,A,C,A,C,E,C,E,E,C,G,C,C,E,A,E,C,E,E,M,A,E,E,K,A,C,C,C,E,C,C,C,C,C,C,C,C,C,C,M,C,E,C,C,A,c,A,E,K,C,C,C,C,I,C,C,C,C,C,C,C,C,C,A,2B,C,U,C,c,C,C,A,C,E,E,O,A,E,E,K,A,C,C,C,E,C,C,C,A,C,A,A,K,I,E,C,C,C,E,C,E,E,K,S,A,E,E,K,C,C,C,C,C,C,E,E,K,C,E,E,E,E,K,C,E,E,C,sB,C,S,C,c,C,C,A,I,E,A,I,E,E,A,I,E,C,Q,E,C,C,A,I,E,C,C,C,C,A,C,C,E,C,A,I,I,A,C,C,C,C,C,C,E,K,C,C,C,E,C,A,E,C,E,A,C,C,E,I,C,C,C,C,C,G,C,C,A,C,C,E,K,C,C,C,C,E,C,C,C,C,C,A,G,C,C,E,C,C,E,E,G,C,C,C,C,G,E,C,C,E,K,C,C,A,C,A,C,E,C,C,C,C,E,C,C,E,E,I,C,A,C,C,C,C,A,C,C,A,A,C,A,G,C,A,C,C,C,C,A,C,C,A,E,C,C,C,C,E,C,A,C,A,C,A,C,I,E,C,C,K,C,C,C,A,C,A,E,M,E,C,C,E,E,M,A,E,G,I,C,I,C,C,C,C,C,C,E,C,C,E,G,O,A,C,C,A,C,C,A,K,C,C,C,C,G,E,C,C,E,K,C,A,C,A,C,C,E,G,C,C,E,C,C,I,C,C,C,C,C,C,A,C,A,A,C,E,C,C,A,E,I,C,C,I,C,A,A,C,C,C,C,A,E,C,C,A,C,C,K,E,M,A,A,C,Q,A,A,Q,C,C,O,A,A,a,C,C,C,C,C,C,C,C,C,C,C,I,E,A,I,E,E,A,C,C,A,E,E,E,A,I,E,E,A,I,E,C,Q,E,C,C,A,C,E,E,a,A,E,E,E,C,G,M,C,C,A,C,E,E,gB,A,E,I,C,Q,M,K,Q,G,Q,E,C,C,C,A,C,A,A,G,Q,E,C,I,E,C,C,C,E,W,A,E,U,C,I,C,Q,C,M,C,C,A,M,C,E,E,M,A,E,G,E,W,A,E,I,C,M,C,M,C,C,E,E,E,C,E,C,Q,C,A,C,A,A,M,C,U,C,C,C,C,C,C,C,C,I,E,E,E,C,E,C,I,C,C,A,E,C,C,C,C,C,E,Q,A,E,A,G,G,C,C,E,C,C,A,C,C,E,E,A,A,E,C,C,A,C,A,G,E,C,A,C,A,W,C,C,C,C,C,C,C,C,I,E,C,E,E,A,Q,A,E,E,M,G,C,C,A,E,E,E,A,G,E,G,C,C,A,G,C,E,E,G,C,A,C,O,A,E,G,E,E,A,C,C,A,C,A,G,E,C,A,C,A,e,C,C,C,C,C,C,O,E,C,E,E,Q,A,E,A,C,C,M,A,G,C,C,A,E,C,A,K,C,A,C,A,e,C,C,C,C,C,C,O,E,E,E,C,A,C,I,C,A,C,A,G,Y,C,C,C,C,C,C,G,C,O,E,E,G,C,E,A,C,C,A,C,C,E,C,C,C,C,A,C,M,C,C,C,A,E,A,C,O,C,S,wB,U,E,E,C,E,E,C,C,sB,E,S,C,C,C,C,C,C,C,6sB,I,E,C,E,C,E,C,E,C,E,A,C,E,C,E,C,C,A,E,C,C,C,E,A,E,A,E,A,E,C,C,E,C,E,C,G,A,G,C,E,C,G,A,I,A,I,A,G,C,G,A,G,C,E,C,G,A,G,C,G,A,I,A,G,C,G,A,I,A,I,A,I,A,I,A,I,A,I,A,I,A,C,A,C,C,C,G,C,G,A,I,A,I,A,I,A,I,A,I,A,I,A,G,C,C,E,E,A,G,C,G,A,I,A,I,A,I,A,I,A,I,A,I,A,I,A,I,A,G,C,E,C,G,A,I,A,I,A,I,A,I,A,I,A,I,A,I,A,I,A,I,A,I,A,I,A,G,C,E,C,E,C,G,A,I,A,G,C,G,A,I,A,I,A,I,A,I,A,G,C,E,C,C,E,E,A,G,C,G,A,G,C,G,A,E,E,E,A,E,E,C,C,G,A,I,A,I,A,G,C,G,A,I,A,E,E,E,A,G,C,E,C,E,C,G,A,G,C,G,A,G,C,E,C,G,A,I,A,G,C,G,A,G,C,G,A,G,C,G,A,E,E,E,A,G,C,G,A,I,A,G,C,G,A,I,A,I,A,G,C,E,C,E,C,E,C,G,A,I,A,I,A,I,A,I,A,G,C,E,C,E,C,G,A,G,C,G,A,E,E,E,A,G,C,E,C,G,A,I,A,G,C,G,A,G,C,G,A,I,A,I,A,G,C,G,A,I,A,I,A,I,A,G,C,E,C,G,A,I,A,I,A,I,A,G,C,E,C,G,A,G,C,G,A,G,C,E,C,G,A,I,A,I,A,G,C,G,A,G,C,E,C,G,A,G,C,G,A,G,C,G,A,G,C,E,C,G,A,I,A,G,C,G,A,I,A,G,C,G,A,G,C,E,C,G,A,I,A,G,C,E,C,E,C,E,C,C,E,C,C,E,C,G,A,I,A,I,A,G,C,G,A,I,A,I,A,I,A,I,A,I,A,G,C,G,A,I,A,I,A,G,C,G,A,I,A,G,C,G,A,I,A,I,A,I,A,I,A,E,E,E,A,I,A,G,C,E,C,E,C,G,A,I,A,I,A,I,A,I,A,I,A,G,C,E,C,G,A,I,A,I,A,I,A,G,C,G,A,I,A,G,C,C,E,E,A,G,C,E,C,E,C,E,C,G,A,I,A,I,A,G,C,G,A,I,A,I,A,I,A,G,C,G,A,I,A,I,A,I,A,I,A,G,C,G,A,I,A,I,A,G,C,E,C,G,A,I,A,I,A,I,A,G,C,G,A,I,A,G,C,G,A,G,C,G,A,G,C,E,C,G,A,G,C,G,A,G,C,A,A,E,A,C,G,C,C,E,E,A,I,A,G,C,E,C,G,A,G,C,G,A,G,C,G,A,I,A,I,A,I,A,I,A,I,A,I,A,I,A,G,C,G,A,I,A,G,C,G,A,I,A,G,C,G,A,G,C,E,C,G,A,I,A,I,A,I,A,G,C,G,A,I,A,G,C,G,A,I,A,G,C,E,C,G,A,G,C,G,A,G,C,E,C,G,A,I,A,G,C,C,E,C,C,G,A,I,A,G,C,G,A,G,C,G,A,I,A,G,C,G,A,G,C,G,A,I,A,I,A,G,C,G,A,I,A,I,A,I,A,I,A,I,A,I,A,G,C,G,A,I,A,G,C,G,A,G,C,G,A,I,A,I,A,I,A,I,A,G,C,E,C,G,A,I,A,I,A,I,A,G,C,E,C,E,C,E,C,G,A,I,A,I,A,I,A,I,A,I,A,I,A,E,E,E,A,I,A,I,A,G,C,G,A,I,A,G,C,C,E,E,A,I,A,G,C,C,E,E,A,G,C,E,C,G,A,I,A,G,C,E,C,C,E,E,A,I,A,I,A,E,E,A,E,C,C,G,A,I,A,G,C,G,A,G,C,E,C,E,C,G,A,I,A,I,A,I,A,I,A,I,A,I,A,I,A,I,A,I,A,I,A,I,A,I,A,I,A,G,C,G,A,I,A,G,C,G,A,I,A,I,A,G,C,G,A,G,C,G,A,I,A,I,A,G,C,G,A,G,C,G,A,G,C,E,C,G,A,I,A,I,A,I,A,G,C,E,C,G,A,G,C,G,A,G,C,G,A,G,C,E,C,E,C,G,A,I,A,I,A,G,C,G,A,I,A,I,A,I,A,I,A,I,A,G,C,G,A,G,C,G,A,I,A,G,C,G,A,E,E,E,A,G,C,G,A,G,C,E,C,E,C,E,C,G,A,I,A,G,C,E,C,E,C,G,A,I,A,G,C,G,A,G,C,E,C,E,C,G,A,I,A,I,A,I,A,I,A,I,A,I,A,I,A,I,A,G,C,E,C,G,A,G,C,G,A,I,A,I,A,I,A,I,A,G,C,G,A,G,C,G,A,G,C,E,C,E,C,C,E,E,A,I,A,I,A,I,A,G,C,G,A,I,A,G,C,E,C,E,C,E,C,E,C,G,A,C,A,E,A,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,E,Q,E,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,C,A,E,A,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,E,Q,E,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,C,A,E,A,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,E,Q,E,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,A,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,C,A,E,A,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,E,Q,E,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,A,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,C,A,E,A,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,A,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,E,Q,E,A,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,A,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,C,A,E,A,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,E,Q,E,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,A,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,C,A,E,A,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,E,Q,E,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,C,A,E,A,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,S,C,S,C,U,A,U,C,U,C,U,C,U,A,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,E,Q,E,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,C,A,E,A,C,E,Q,E,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,C,A,E,A,C,E,Q,E,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,C,A,E,A,C,E,Q,E,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,C,A,E,A,C,E,Q,E,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,S,C,S,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,A,U,A,U,C,U,C,U,C,U,C,U,C,U,C,U,C,U,C,C,A,S,E,C,E,I,E,E,C,A,A,C,G,I,C,C,C,C,C,C,E,G,G,C,C,E,C,C,A,E,I,A,C,C,C,C,C,E,E,C,A,C,A,C,C,C,C,C,E,E,C,A,C,A,C,C,C,C,C,E,C,C,A,C,C,C,C,C,C,C,C,A,O,C,C,A,I,C,C,E,C,G,G,E,C,O,E,I,C,E,I,C,K,E,A,C,A,A,Y,C,C,K,E,G,A,C,C,G,C,I,C,K,G,A,E,G,C,I,C,K,G,A,E,G,C,I,C,K,G,A,C,C,I,Y,C,C,C,A,E,I,K,C,qC,C,C,A,E,I,C,E,I,U,C,G,A,C,G,C,A,I,E,C,C,E,E,C,G,C,M,C,C,A,G,I,E,A,E,I,E,A,S,C,+C,C,C,A,E,I,C,E,E,C,I,C,A,E,I,C,E,E,C,I,C,A,I,I,C,C,C,C,C,E,E,C,E,C,A,A,E,I,C,E,I,C,I,C,C,C,C,C,C,C,C,C,C,C,C,A,E,I,C,E,I,C,I,C,C,C,C,C,C,C,C,C,C,C,C,A,I,E,C,E,C,C,C,C,A,C,A,E,A,C,G,C,G,C,M,C,C,C,A,E,A,E,I,C,G,C,C,A,E,E,I,C,C,C,C,C,C,E,A,C,E,C,A,E,C,E,A,C,C,A,E,I,C,E,I,C,E,C,C,C,A,C,C,C,C,C,C,C,C,A,E,I,C,E,I,C,E,E,C,C,A,C,A,C,C,C,C,C,C,C,C,A,I,E,C,C,A,C,C,E,A,E,A,C,A,I,C,C,G,C,G,E,A,C,C,E,A,A,C,C,C,A,C,C,C,C,E,C,C,E,C,E,C,A,I,A,E,E,C,A,C,C,E,C,C,C,A,I,A,E,E,C,A,C,C,I,A,E,A,E,C,C,A,C,C,E,C,E,C,A,I,A,C,C,C,E,E,E,C,A,C,C,C,C,A,C,A,C,E,A,E,A,C,G,I,C,C,C,C,C,C,E,A,C,E,C,A,C,C,C,C,E,C,C,C,C,C,C,C,I,C,I,I,C,C,C,C,C,C,E,A,C,C,A,C,E,C,A,C,C,C,C,E,C,C,C,C,C,C,C,A,E,A,C,C,E,A,C,C,A,C,C,C,A,C,C,E,A,C,C,E,C,C,I,A,E,A,C,C,C,E,C,C,C,A,I,A,E,C,C,A,C,C,E,C,E,C,A,I,A,E,E,C,A,C,C,E,C,E,C,A,I,A,E,E,C,A,C,C,E,I,C,C,E,A,C,C,A,C,C,C,C,E,A,C,E,C,A,C,C,C,C,E,C,C,C,C,C,C,C,A,A,I,C,C,C,C,C,C,C,C,A,K,C,C,E,C,C,C,G,C,C,C,E,C,C,A,C,C,C,A,C,A,C,C,A,E,I,C,E,I,C,C,C,C,C,C,C,C,C,C,C,C,A,E,I,C,E,I,C,E,C,C,C,C,A,C,C,C,C,C,E,C,C,A,C,E,C,A,A,I,I,C,C,C,C,C,C,E,C,E,C,A,A,I,I,C,C,C,C,C,C,C,C,C,E,C,A,E,A,E,I,C,E,I,C,C,C,C,C,C,C,A,E,I,C,E,I,C,C,C,C,C,C,C,C,C,E,C,E,C,A,I,A,C,C,C,E,C,E,C,A,I,A,C,C,C,E,C,C,C,A,I,A,C,C,C,I,A,E,A,A,C,A,A,C,M,C,C,C,C,G,E,E,A,E,M,C,A,M,A,S,C,2C,C,C,A,I,E,E,E,E,C,E,I,C,M,C,C,C,A,C,C,C,C,C,C,C,C,C,C,C,C,A,C,C,E,G,I,E,C,C,A,C,A,C,C,C,C,C,C,C,C,E,C,A,C,C,C,C,E,E,I,C,E,I,C,C,C,C,C,C,C,A,I,I,C,C,C,C,C,C,E,C,E,C,A,C,I,I,C,C,C,C,C,C,C,C,C,E,C,A,C,C,C,C,C,C,C,C,C,C,C,E,E,C,A,I,A,C,C,C,C,C,C,C,E,C,C,A,C,C,E,E,C,A,I,A,C,C,C,C,C,C,C,E,C,C,A,C,C,E,C,C,A,I,A,C,C,C,I,A,C,C,C,C,E,C,C,A,C,C,C,C,E,I,C,E,I,C,C,C,C,C,C,C,A,C,A,C,C,C,K,E,C,A,A,I,E,I,A,U,C,E,C,C,A,E,A,C,C,A,I,I,C,C,C,C,C,C,C,C,C,E,C,A,E,A,E,I,C,E,I,C,E,C,C,C,C,A,A,C,C,C,C,C,C,C,A,E,C,C,C,C,C,E,E,C,A,I,A,C,E,C,E,C,A,C,A,I,A,C,A,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,E,C,C,A,C,C,E,E,C,A,I,A,C,E,C,E,C,A,C,A,I,A,C,A,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,E,C,C,A,C,C,E,C,C,A,I,A,C,E,E,C,A,C,A,I,A,C,A,C,C,C,C,C,C,C,C,C,C,C,A,I,C,C,C,C,E,C,C,A,C,C,C,C,C,C,C,A,I,A,C,M,C,C,A,I,C,E,C,C,C,C,G,A,E,E,E,I,E,C,M,A,S,C,4C,C,C,A,I,E,E,E,E,C,E,I,C,M,C,C,C,A,C,C,C,C,C,C,C,C,C,C,C,C,A,C,C,E,G,I,G,C,A,C,A,A,C,C,C,C,C,C,C,C,E,C,A,C,C,C,C,E,E,I,C,E,I,C,C,C,C,C,C,C,A,I,I,C,C,C,C,C,C,E,C,E,C,A,C,I,I,C,C,C,C,C,C,C,C,C,E,C,A,C,C,C,C,C,C,C,C,C,C,C,E,E,C,A,I,A,C,C,C,C,C,A,C,G,C,C,A,C,C,E,E,C,A,I,A,C,C,C,C,C,C,C,E,C,C,A,C,C,E,C,C,A,I,A,C,C,C,I,A,C,C,C,C,C,C,C,C,C,C,C,C,E,I,C,E,I,C,C,C,C,C,C,C,A,C,A,C,C,C,K,E,C,A,A,I,E,I,A,U,C,E,C,C,A,E,A,C,C,A,I,I,C,C,C,C,C,C,C,C,C,E,C,A,E,A,E,I,C,E,I,C,E,C,C,C,C,A,A,C,C,C,C,C,C,C,C,C,C,C,C,C,C,E,E,C,A,I,A,C,E,C,E,C,A,C,A,I,A,C,A,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,E,C,C,A,C,C,E,E,C,A,I,A,C,E,C,E,C,A,C,A,I,A,C,A,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,E,C,C,A,C,C,E,C,C,A,I,A,C,E,C,C,A,C,C,I,A,C,A,C,C,C,C,C,C,C,C,C,C,C,I,A,C,C,C,C,E,C,C,A,C,C,C,C,C,C,C,A,I,A,C,M,C,C,C,A,E,C,C,C,C,I,iJ,I,E,E,C,C,Q,E,M,S,C,E,I,A,Y,A,C,C,C,A,C,C,C,C,G,G,A,C,C,I,Y,C,C,C,A,E,I,A,K,C,C,E,E,E,8B,C,C,C,A,M,C,gB,C,I,C,C,G,C,C,U,E,E,E,G,C,I,E,G,C,E,C,A,C,A,I,C,C,U,E,E,E,G,C,C,C,C,C,A,A,C,A,C,wyB,I,E,E,C,C,O,O,G,A,O,E,e,C,Y,C,C,C,C,C,G,K,C,K,C,E,C,E,A,C,C,A,G,C,I,C,K,G,A,E,G,C,I,C,K,G,A,E,A,C,G,E,A,M,C,E,C,C,K,A,S,C,oC,C,C,A,E,I,C,E,I,U,C,E,C,I,C,A,K,C,C,I,C,E,I,U,C,E,C,C,I,C,A,E,I,C,E,I,C,E,C,I,A,C,A,A,I,E,E,C,O,I,U,C,E,I,C,E,I,C,A,C,A,A,O,C,C,C,C,G,E,M,C,A,E,C,C,K,A,S,C,uD,C,C,A,I,E,I,I,M,C,E,M,C,A,C,A,I,I,C,C,C,C,C,C,E,M,C,A,C,E,E,C,C,I,I,C,C,C,C,C,C,E,C,C,E,C,A,E,I,C,E,I,C,C,C,E,C,C,C,C,C,C,C,A,E,I,C,E,I,C,G,C,O,C,E,I,C,E,I,C,C,I,C,A,E,G,C,E,E,E,C,E,I,C,C,C,C,A,A,O,C,C,A,O,C,A,C,A,C,C,G,E,M,C,C,C,C,C,K,A,S,C,wD,C,C,A,I,E,I,G,O,C,E,M,C,C,A,A,I,I,C,C,C,C,C,C,E,M,C,C,A,E,E,C,C,I,E,G,C,C,G,C,O,C,E,Q,A,C,C,C,C,C,E,C,C,C,A,I,I,C,C,C,C,C,C,E,C,C,E,C,A,C,C,C,C,C,C,C,C,C,C,C,C,E,I,C,E,I,C,C,C,C,A,E,I,C,E,I,C,C,C,C,C,C,C,C,C,C,C,A,A,O,C,C,C,A,E,G,C,A,C,G,q0B,I,E,E,C,C,O,O,G,A,O,E,e,C,Y,C,C,C,C,E,C,C,C,G,K,C,K,C,E,C,E,C,C,U,E,G,C,I,C,K,G,A,E,G,C,I,C,K,G,A,C,M,C,S,C,I,E,C,C,A,C,E,C,E,A,C,Q,C,qB,C,C,A,G,M,C,gB,C,I,C,C,W,C,C,U,E,E,E,G,C,C,C,C,C,C,A,E,A,C,G,A,E,A,M,C,E,C,C,K,A,S,C,oC,C,C,A,E,I,C,E,I,U,C,E,C,I,C,A,K,C,C,I,C,E,I,U,C,E,C,C,I,C,A,E,I,C,E,I,C,E,C,I,A,C,A,A,I,E,E,C,O,I,U,C,E,I,C,E,I,C,A,C,A,A,O,C,C,C,C,G,C,C,E,M,C,A,I,C,W,C,C,K,A,S,C,gE,C,C,A,I,E,I,C,I,O,C,C,C,A,E,I,I,M,C,G,I,E,C,C,A,C,C,C,C,C,C,E,M,C,C,A,E,E,C,I,E,E,E,C,G,A,C,O,C,E,I,C,E,I,C,C,A,I,I,C,C,C,C,C,C,E,C,E,C,A,C,C,C,C,C,A,C,E,C,C,C,C,C,A,E,I,C,E,I,G,I,C,G,C,C,E,Q,A,C,C,C,C,C,A,A,O,C,C,A,O,C,A,C,A,C,C,G,C,C,E,M,C,C,G,C,W,C,C,K,A,S,C,iE,C,C,A,I,E,I,C,I,O,C,C,C,A,E,I,G,O,C,G,I,G,C,A,C,A,C,C,C,C,C,E,M,C,A,C,E,E,C,I,E,E,E,C,G,A,C,O,C,E,I,C,E,I,C,C,A,I,I,C,C,C,C,C,C,E,C,E,C,A,C,C,C,C,C,A,C,E,C,C,C,C,C,A,E,I,C,E,I,G,I,C,G,C,C,E,Q,A,C,C,C,C,C,A,A,O,C,C,C,A,E,G,C,A,C,G,mD,C,E,I,E,I,C,I,O,C,C,C,A,E,I,C,E,I,C,G,C,E,I,C,E,I,C,Q,C,I,E,I,C,A,C,C,A,C,G,C,G,C,E,E,M,C,C,C,G,E,C,E,C,E,C,K,C,C,gyB,I,E,E,C,C,O,O,G,A,O,E,e,C,Y,C,C,C,C,C,K,C,K,C,E,C,E,A,C,C,A,G,C,I,C,K,G,A,E,G,C,I,C,K,G,A,E,G,C,I,C,K,G,A,E,I,C,E,I,U,C,E,C,C,I,C,A,E,I,C,E,I,C,I,C,C,C,C,A,E,I,C,E,E,I,C,E,I,C,I,C,A,C,C,I,C,E,E,C,I,C,A,I,E,A,I,G,C,C,A,G,G,C,C,E,A,O,E,I,C,K,C,S,C,G,I,C,I,C,C,S,C,E,C,A,I,K,C,C,A,E,C,O,I,U,C,E,I,C,E,I,C,A,C,A,A,e,C,C,C,C,G,C,M,C,S,C,I,C,C,A,C,E,A,E,G,G,C,gB,C,C,K,A,S,C,uC,C,C,A,I,I,E,E,C,A,G,C,C,A,E,E,E,C,C,E,C,E,I,C,E,C,E,A,G,A,C,A,E,G,C,C,K,C,E,G,A,C,A,C,A,A,e,C,C,C,C,G,E,E,C,E,G,G,C,M,A,S,C,iD,C,C,A,E,I,C,E,I,C,G,C,E,C,A,E,C,C,K,E,C,I,I,C,C,E,C,C,E,C,C,C,E,C,A,G,G,E,C,E,I,C,E,I,C,C,C,C,E,I,C,E,I,C,C,C,C,C,C,I,C,E,I,C,E,I,C,C,C,E,C,A,M,A,A,C,A,O,C,C,C,S,I,E,I,G,O,C,G,I,E,C,C,A,C,C,C,C,C,C,E,M,C,A,C,E,C,A,E,E,C,E,I,C,E,I,G,E,I,C,E,I,C,G,C,O,C,E,I,C,E,I,C,C,I,C,A,E,I,C,E,C,C,I,C,A,I,C,S,E,C,C,C,C,C,C,E,E,I,C,E,I,C,E,I,C,G,E,E,I,C,E,I,C,E,I,C,C,C,I,C,E,A,C,A,O,C,C,A,O,A,C,A,C,C,C,O,I,C,O,C,E,C,C,A,E,G,C,A,C,C,E,qI,I,E,E,C,C,O,O,G,A,O,E,e,C,Y,C,C,C,K,C,K,C,E,C,C,C,A,A,C,C,K,C,C,C,C,G,E,M,C,A,E,C,C,K,A,S,C,uD,C,C,A,I,E,I,G,O,C,E,M,C,A,C,A,I,I,C,C,C,C,C,C,E,M,C,A,C,E,E,C,A,E,G,C,G,C,C,G,C,O,C,E,O,C,C,C,C,C,C,E,C,C,C,C,C,C,A,O,C,C,A,O,A,C,A,C,C,C,G,E,M,C,A,E,C,C,K,A,S,C,wD,C,C,A,I,E,I,G,O,C,E,M,C,A,C,A,I,I,C,C,C,C,C,C,E,M,C,A,C,E,E,C,A,E,G,C,G,C,C,G,C,O,C,E,O,C,C,C,C,C,C,E,C,C,C,C,C,C,A,O,C,C,C,A,E,G,C,A,C,G,uyB,I,E,E,C,C,O,O,G,A,O,E,e,C,Y,C,C,C,C,C,G,K,C,K,C,E,C,E,A,C,C,A,G,C,I,C,K,G,A,E,G,C,I,C,K,G,A,E,G,C,I,C,K,G,A,E,A,C,G,E,A,M,C,E,C,C,K,A,S,C,oC,C,C,A,E,I,C,E,I,U,C,E,C,I,C,A,K,C,C,I,C,E,I,U,C,E,C,C,I,C,A,E,I,C,E,I,C,E,C,I,C,A,E,I,C,E,E,C,I,A,C,A,A,I,E,E,C,O,I,U,C,E,I,C,E,I,C,A,C,A,A,O,C,C,C,S,G,E,M,C,A,E,C,C,K,A,S,C,uD,C,C,A,I,E,I,I,M,C,G,I,E,C,C,A,C,C,C,C,C,C,E,M,C,C,A,E,C,A,E,E,C,E,I,C,E,I,G,E,I,C,E,I,C,G,C,O,C,E,I,C,E,I,C,C,I,C,A,E,I,C,E,C,C,I,C,C,C,C,C,C,E,E,I,C,E,I,C,E,I,C,E,G,E,I,C,E,I,C,E,I,A,C,C,C,I,C,E,A,C,A,O,C,C,A,O,C,A,C,A,C,C,G,E,M,C,C,C,C,C,K,A,S,C,wD,C,C,A,O,I,C,O,C,E,C,C,A,E,G,C,A,C,C,E,sJ,E,Q,C,E,O,A,C,C,C,I,C,C,E,C,C,C,E,I,C,E,C,A,C,C,I,A,U,C,E,E,I,C,G,E,C,C,C,A,C,A,G,C,C,C,C,I,C,C,E,E,I,C,C,C,E,I,E,C,C,E,C,A,C,C,C,C,C,E,I,C,E,C,C,C,E,C,C,Q,C,E,O,A,C,E,C,E,E,E,A,I,C,E,C,C,K,A,S,C,uB,C,C,A,I,E,C,C,E,A,E,I,C,C,C,C,A,G,E,E,C,C,A,K,A,S,C,kC,C,C,A,I,E,E,E,A,I,C,E,I,A,C,G,C,C,C,C,C,C,E,C,E,C,A,A,G,C,C,E,C,C,E,C,E,I,E,A,A,S,C,6B,C,C,A,O,I,U,C,E,E,M,C,C,C,G,C,E,C,C,C,iK,I,E,E,C,C,Q,O,C,a,C,E,M,C,Y,E,I,W,O,E,G,C,G,A,I,E,E,C,C,Q,O,E,Y,C,E,kB,C,Y,E,I,W,O,E,e,C,G,A,I,E,E,C,C,C,O,O,c,C,E,M,C,Y,E,I,W,O,E,G,C,G,A,I,E,E,C,C,C,O,O,c,C,E,M,C,Y,E,I,W,O,E,G,C,G,A,I,E,E,C,C,C,O,O,c,C,E,M,C,Y,E,I,W,O,E,G,C,G,A,I,E,E,C,C,C,O,O,c,C,E,M,C,Y,E,I,W,O,E,G,C,G,A,I,E,E,C,C,C,O,O,c,C,E,M,C,Y,E,I,W,O,E,G,C,G,A,I,E,E,C,C,O,O,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,O,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,+B,O,c,C,E,a,kE,I,E,E,C,C,K,E,S,E,C,E,M,E,M,E,E,K,G,E,I,C,E,G,C,I,C,E,C,E,I,C,C,C,A,C,A,C,E,E,Y,A,E,E,C,A,E,I,C,C,O,C,E,E,I,C,E,G,E,E,A,C,C,C,C,C,I,E,G,G,C,G,E,A,C,C,C,G,C,G,E,C,C,C,A,C,E,G,C,G,C,C,C,E,A,C,U,C,E,O,A,C,I,I,A,E,M,E,A,O,E,C,E,E,C,C,S,A,E,E,M,A,C,C,A,C,E,E,Y,A,E,E,C,C,E,E,C,C,G,C,E,O,A,C,A,C,A,C,E,E,E,E,E,C,E,E,C,oC,C,C,A,C,E,E,c,A,E,I,E,E,G,W,C,M,C,G,E,C,C,A,E,C,C,A,C,C,C,A,E,C,C,A,C,C,C,A,E,E,C,C,C,C,C,C,C,C,C,E,C,C,I,A,C,G,I,C,E,E,S,E,C,K,C,G,C,C,C,G,K,C,O,C,G,A,C,A,G,C,E,E,G,C,U,C,C,C,K,A,E,C,A,C,Q,C,G,C,A,A,C,I,G,A,Q,S,E,C,A,C,G,E,G,C,C,A,I,I,G,E,E,C,C,C,E,C,U,E,G,E,C,C,C,C,C,C,C,C,A,A,M,A,A,E,C,C,G,C,C,C,C,C,G,C,A,G,A,G,C,E,E,M,A,A,G,C,E,E,c,A,E,C,G,C,G,E,E,C,uB,C,M,C,G,C,C,C,A,C,G,E,E,C,A,G,A,I,C,E,G,I,Q,E,O,G,A,C,C,C,I,C,Y,C,C,C,M,Q,C,G,C,C,G,G,M,C,a,C,G,A,C,E,I,E,A,C,C,C,Q,E,C,G,C,O,E,O,G,A,C,C,C,I,C,a,C,C,C,M,U,C,G,A,C,C,C,M,E,C,G,C,O,E,A,O,E,C,C,K,E,G,A,C,C,C,K,E,G,G,C,I,C,O,C,G,C,A,E,E,A,O,E,C,C,C,I,E,C,C,C,E,c,A,G,E,C,E,mB,E,E,C,C,A,C,M,C,G,A,C,C,C,I,C,C,C,C,8B,O,c,C,E,a,oI,I,E,E,C,C,Q,E,E,C,C,A,O,C,E,E,C,C,M,E,E,E,C,C,Q,E,C,C,C,C,K,E,E,E,C,C,Q,E,E,C,C,E,M,E,S,S,C,A,S,E,C,C,C,E,G,C,E,C,A,E,E,Q,A,E,G,C,C,A,C,A,E,E,G,I,A,E,E,E,uB,C,C,A,E,C,E,E,I,G,A,E,C,E,E,S,A,E,C,E,E,M,A,E,C,E,C,I,C,E,C,E,C,C,E,C,C,C,C,I,K,C,C,C,C,A,C,E,E,c,A,E,I,C,E,E,E,K,A,E,E,E,kB,C,C,W,E,C,oB,C,U,C,c,C,C,A,I,E,A,O,C,C,A,C,C,C,C,C,E,A,G,A,M,O,G,C,E,E,O,A,E,E,E,oB,C,C,A,C,I,E,A,C,E,E,O,A,E,E,E,4B,C,C,A,E,I,A,E,G,C,E,C,C,C,A,C,K,C,E,E,O,A,E,E,I,G,C,I,A,C,E,E,C,C,C,C,E,A,G,E,G,iB,C,uB,C,C,S,C,S,C,C,A,C,A,C,E,E,A,C,I,C,C,C,E,C,C,G,E,C,E,E,A,A,C,C,Y,A,E,G,G,E,E,A,C,C,G,C,C,I,E,E,C,C,K,C,W,E,A,C,A,E,G,O,C,I,C,E,C,E,G,C,C,C,C,C,A,C,E,E,c,A,E,C,E,E,U,A,E,K,A,C,C,K,iC,C,S,C,E,E,K,C,C,A,A,I,E,K,I,O,M,C,C,C,A,G,A,I,C,E,C,G,E,O,A,E,E,E,uB,C,C,A,C,I,E,E,C,I,C,C,C,C,E,C,C,A,E,C,E,E,O,A,E,E,A,E,iC,C,C,A,E,C,E,E,G,I,A,E,E,E,8B,C,C,A,E,I,E,G,C,E,A,G,E,I,C,A,C,C,C,C,C,I,C,C,E,E,O,A,E,E,E,oB,C,E,E,M,C,C,C,C,A,E,O,A,E,E,E,sB,C,E,I,C,A,O,C,C,E,E,O,A,E,C,E,E,Q,A,E,E,O,C,I,C,C,A,A,O,C,C,A,G,C,C,A,C,A,G,E,C,E,I,E,C,A,E,E,G,I,A,E,E,E,iB,C,C,A,G,G,A,Q,E,A,O,G,A,C,E,A,G,K,K,W,E,C,C,I,E,C,C,C,E,O,A,E,E,E,2B,C,C,A,C,C,C,E,E,O,A,E,E,E,uB,C,C,A,C,C,C,E,E,O,A,E,E,E,uB,C,C,A,C,C,C,E,E,O,A,E,E,E,uB,C,C,A,G,E,c,A,E,C,C,C,E,C,C,C,C,E,C,A,C,C,C,C,e,C,O,C,C,C,C,A,C,E,E,c,A,E,C,C,C,E,C,C,C,C,a,C,K,C,G,A,C,C,E,E,C,E,A,E,O,A,E,E,E,2B,C,C,A,M,C,E,E,c,A,E,E,G,E,G,gB,C,W,C,G,C,C,C,C,C,C,Q,C,I,G,C,K,C,G,C,C,K,C,E,C,C,A,K,G,Q,G,E,C,U,E,C,C,I,E,C,C,C,E,O,A,E,E,E,2B,C,C,A,E,C,A,E,E,O,A,E,E,E,4B,C,C,A,E,E,C,I,A,C,G,C,C,G,E,C,A,C,E,E,c,A,E,A,Q,C,K,A,Q,C,I,iB,C,S,C,G,A,C,C,E,E,C,E,A,E,O,A,E,E,E,uB,C,C,A,E,C,E,A,E,O,A,E,E,E,2B,C,C,A,M,C,E,E,c,A,E,E,G,E,G,gB,C,W,C,G,C,C,C,C,C,C,Q,M,E,E,G,S,K,O,C,C,C,C,A,C,E,E,A,c,A,G,E,G,kC,C,K,C,E,C,A,A,C,C,O,E,C,E,A,O,I,O,C,A,I,G,E,E,G,C,G,E,A,G,C,C,E,A,C,C,A,A,C,A,A,A,G,C,C,I,E,C,E,I,E,E,E,C,C,A,E,A,I,C,A,C,E,E,Q,A,E,E,I,C,A,c,C,C,A,C,A,E,E,W,A,E,E,C,C,A,C,C,C,I,E,A,C,A,C,C,C,C,C,C,C,A,O,E,K,C,E,C,E,K,C,C,C,E,A,C,E,E,K,C,E,A,C,C,E,K,C,C,C,E,C,C,C,E,K,C,E,A,C,C,E,K,C,C,C,E,C,C,C,E,K,C,E,A,C,E,C,E,E,c,A,E,Q,E,O,C,C,C,C,C,C,E,M,C,a,C,C,C,E,C,M,C,C,C,C,M,C,C,C,E,C,C,E,M,C,C,C,C,4B,C,W,C,C,C,C,A,C,E,E,c,A,E,Q,E,O,C,C,C,C,C,C,E,M,C,a,C,C,C,C,4B,C,W,C,C,C,C,A,C,E,E,c,A,E,Q,E,O,C,C,C,C,C,C,E,M,C,a,C,C,C,C,4B,C,W,C,C,C,C,A,C,I,C,Q,C,K,C,E,M,I,A,C,G,C,G,C,C,A,C,A,A,S,E,C,C,C,C,C,C,C,E,I,C,C,C,E,E,G,K,A,E,E,K,K,C,Y,C,C,A,E,A,I,C,C,A,E,E,C,C,C,C,E,Q,A,E,E,E,C,E,U,C,C,A,C,A,E,E,W,A,E,E,C,C,A,C,E,E,c,A,E,E,G,E,A,M,C,2B,C,Y,C,E,E,C,C,A,C,G,E,I,C,C,A,E,A,I,C,A,C,E,E,Q,A,E,E,I,C,A,c,C,C,A,C,E,E,W,A,E,E,C,C,A,C,E,E,c,A,E,E,G,E,M,C,C,4B,C,c,C,E,E,C,C,A,C,G,E,E,C,I,C,A,C,C,E,C,C,A,E,E,C,I,A,C,E,C,E,C,C,A,E,I,A,E,G,C,E,E,C,A,C,C,C,E,A,E,G,K,A,E,E,I,G,C,I,E,C,A,E,C,C,A,C,C,O,A,E,C,E,E,M,A,E,C,E,E,C,C,C,A,E,A,C,C,C,K,C,E,K,E,C,S,C,C,C,C,W,E,C,E,C,C,E,E,M,A,E,G,O,A,C,A,C,C,M,C,C,M,C,a,C,Y,C,C,E,C,G,E,O,A,E,E,C,A,S,C,C,C,C,C,U,C,C,E,E,O,A,E,G,O,C,C,C,C,C,C,G,C,Q,C,S,C,C,I,C,C,E,E,O,A,E,E,C,G,C,C,S,C,C,C,C,C,C,E,C,A,C,K,C,E,C,C,C,E,C,A,C,C,C,E,C,A,C,C,G,C,E,C,Q,C,C,C,C,C,C,A,G,E,K,G,C,C,I,E,I,A,C,C,A,E,K,C,C,E,K,C,C,A,C,A,O,E,E,O,C,C,C,A,E,E,A,K,G,C,I,E,E,E,E,E,G,A,C,E,C,M,E,I,C,A,E,E,C,I,C,C,C,C,E,C,C,A,E,C,E,E,A,Q,A,E,E,K,G,C,O,C,0B,C,C,A,E,C,E,E,G,Q,A,E,E,C,C,A,E,I,E,G,C,E,A,G,E,C,E,C,C,A,C,C,M,A,E,C,C,O,C,I,A,E,C,A,C,C,C,A,I,C,C,C,S,C,C,C,a,E,C,G,C,C,E,E,I,A,E,E,C,U,E,C,C,C,C,C,C,G,C,C,E,E,I,A,E,E,C,S,E,C,C,C,C,G,C,G,E,I,A,E,E,C,U,E,C,C,C,C,G,C,C,E,E,I,A,E,E,C,Y,E,C,C,C,C,G,C,C,E,E,I,A,E,E,C,Y,E,C,E,C,C,E,K,A,C,A,C,C,A,E,K,C,A,C,A,A,C,E,I,I,C,C,Q,M,S,O,I,C,I,E,I,W,C,C,E,E,O,A,E,G,O,C,C,C,C,C,C,kB,C,G,E,O,A,E,G,S,C,C,C,C,E,C,I,C,K,C,C,A,A,O,I,C,S,C,E,C,A,C,C,A,C,a,C,E,O,A,C,E,G,C,C,G,E,C,C,E,C,K,C,G,C,C,A,A,C,G,A,C,A,C,E,O,C,Q,C,E,E,K,C,C,A,C,A,C,A,C,E,C,E,C,E,K,E,E,A,E,C,G,E,C,C,A,C,K,E,C,C,C,C,A,uB,C,E,O,A,C,C,C,E,I,E,E,E,C,C,I,C,C,E,C,C,A,C,A,E,E,C,U,A,E,G,E,E,E,A,C,A,C,A,C,C,A,Q,G,A,E,I,A,C,C,G,M,C,O,C,O,C,W,C,C,C,E,I,C,E,E,E,C,C,C,C,C,C,C,C,C,E,A,E,E,E,E,A,E,A,C,E,C,A,C,E,E,A,C,C,I,A,E,A,M,E,K,I,C,mB,C,e,C,Q,C,C,C,C,A,E,C,M,C,G,C,G,C,G,C,O,C,C,C,E,I,C,E,E,E,C,C,C,C,C,C,C,C,C,M,A,E,E,E,C,C,A,C,C,A,C,C,G,C,C,A,C,C,A,mB,C,E,G,U,A,C,C,C,C,C,E,A,I,E,E,E,C,C,I,C,G,C,C,A,C,A,E,E,C,U,A,E,G,E,E,E,A,C,A,C,A,C,C,A,Q,G,A,E,I,A,C,C,I,E,C,C,A,C,A,C,E,G,E,C,C,C,A,C,G,M,C,C,O,O,C,W,C,C,C,E,E,C,A,C,C,A,E,M,A,E,E,E,E,A,E,A,C,E,A,M,C,A,C,G,E,C,C,A,C,A,C,E,G,E,C,C,C,A,C,E,E,E,C,A,A,C,C,C,A,E,M,A,E,Q,G,E,I,A,C,mB,C,e,C,Q,C,C,C,C,A,E,C,M,C,G,C,G,C,C,C,O,C,C,C,E,I,C,E,E,E,E,E,E,A,C,A,C,C,A,E,M,A,E,E,E,C,C,A,C,C,A,C,C,E,G,A,C,C,E,C,C,C,oB,C,E,O,A,C,C,C,C,C,E,I,E,A,I,A,E,C,A,C,C,C,A,C,G,E,C,E,E,M,K,A,E,G,E,C,C,C,C,C,A,E,C,A,C,C,A,C,C,O,G,A,E,E,E,C,G,C,E,C,A,C,A,E,C,A,C,E,C,A,C,E,C,C,A,O,E,C,E,E,Q,A,C,C,G,A,C,C,C,C,E,C,C,C,C,C,C,C,gB,C,E,G,U,A,C,C,C,C,C,E,A,A,I,E,C,G,E,A,E,C,C,A,C,G,E,C,E,E,M,K,A,E,G,E,C,C,C,C,C,A,E,C,C,C,C,E,G,E,C,K,A,E,E,E,C,G,C,E,C,A,C,A,E,C,A,C,E,C,A,C,E,C,E,K,W,C,C,A,O,E,G,E,Q,A,C,C,G,A,C,C,C,C,E,C,E,E,C,C,2K,I,E,E,C,C,M,E,E,E,C,C,O,E,A,E,C,C,Q,E,C,C,C,C,K,E,E,E,C,C,Q,E,C,C,C,C,I,I,E,E,C,C,C,O,E,E,C,C,M,E,E,W,C,kB,C,A,I,E,I,M,I,C,C,E,C,G,C,G,C,E,C,G,C,G,C,G,C,E,C,G,C,G,C,G,C,G,C,C,C,A,C,C,M,C,oE,C,C,A,S,E,C,C,A,C,E,I,E,E,C,A,C,I,G,E,A,A,C,G,c,A,C,A,E,E,C,A,C,E,E,E,C,A,C,C,K,C,E,E,C,A,C,A,K,E,I,E,C,A,C,C,G,C,C,G,C,A,E,I,C,C,I,C,C,C,A,I,C,I,E,C,E,I,E,C,E,A,E,C,O,A,E,G,E,C,C,C,A,A,E,S,A,E,C,E,E,M,A,E,C,E,E,M,A,E,I,C,A,C,A,C,A,C,C,A,E,C,E,A,E,M,A,E,C,E,E,C,A,C,A,C,K,G,E,Y,A,E,E,C,A,E,C,C,A,E,C,C,C,A,C,Q,E,C,C,C,A,C,C,C,C,E,I,E,E,E,U,C,E,C,C,W,G,C,C,C,E,A,M,A,E,G,C,C,C,E,Q,8B,C,uB,C,C,S,C,a,C,C,C,A,E,E,C,C,C,E,E,Q,A,E,G,C,C,C,C,E,C,C,A,C,C,C,E,E,Q,A,E,I,I,C,C,C,C,A,C,C,E,C,C,E,C,C,C,E,C,C,A,C,C,E,E,C,A,G,C,C,A,C,G,E,A,C,C,C,A,C,G,A,C,C,E,C,C,G,E,Q,A,E,C,E,E,W,A,E,Q,C,E,I,A,C,C,C,A,G,C,E,C,C,C,K,C,C,C,E,C,C,E,C,C,C,K,C,E,C,C,A,C,A,A,S,E,C,C,C,E,G,C,E,E,E,G,C,A,G,C,C,A,C,E,E,c,A,E,E,M,C,C,A,C,c,C,M,C,G,C,C,C,A,E,C,C,C,C,C,G,C,E,E,c,A,E,C,G,E,E,G,C,C,oF,E,E,E,G,C,C,C,M,C,G,C,C,A,C,I,E,C,A,C,I,E,E,E,A,C,C,I,C,C,C,C,C,C,E,M,C,C,A,E,C,C,I,E,C,C,C,C,C,A,E,C,E,K,C,C,U,C,C,C,I,E,G,K,C,E,O,E,C,C,C,E,M,C,A,C,C,C,C,A,C,E,E,c,A,E,K,G,K,M,c,C,C,K,E,C,C,C,C,C,G,E,E,E,A,C,C,A,O,C,W,A,G,E,C,C,C,G,E,K,C,C,S,C,C,C,I,E,G,K,C,G,C,E,E,C,C,C,W,A,E,K,G,K,M,c,C,C,K,E,C,C,C,C,C,G,E,E,E,A,C,C,A,O,C,G,E,C,C,A,C,C,C,E,c,A,G,E,G,qB,C,C,K,E,C,C,C,C,C,G,A,M,C,A,C,A,C,A,I,C,C,U,E,A,U,C,S,A,C,W,A,A,iB,C,A,Q,C,A,S,C,C,I,A,C,K,A,C,K,A,A,a,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,K,C,E,G,C,E,E,A,A,C,C,W,A,E,E,E,C,G,U,C,C,A,C,E,E,gB,A,E,I,C,C,S,C,E,Q,W,C,C,C,A,I,E,C,E,E,I,K,A,E,C,E,E,S,A,E,C,E,E,M,A,E,I,C,S,C,C,C,C,C,C,C,C,A,C,E,E,gB,A,E,I,C,mB,E,W,I,S,O,E,A,E,G,S,E,C,C,A,C,A,E,E,gB,A,E,I,C,U,C,C,C,A,C,A,A,I,G,C,C,C,C,O,I,E,E,I,A,C,G,O,C,I,C,iB,C,I,C,S,C,I,C,I,C,I,C,K,C,I,C,K,C,I,C,Q,C,E,C,E,C,E,C,A,C,G,E,C,I,G,C,I,C,O,C,U,C,I,C,U,C,C,A,C,C,I,C,Q,C,A,O,I,C,I,E,C,E,A,C,G,K,Q,C,M,E,A,C,C,E,G,Q,G,E,K,G,C,C,I,C,I,C,I,C,M,C,I,C,O,C,C,C,O,C,C,C,C,C,A,K,A,C,A,O,C,C,C,C,C,C,O,M,C,E,E,mB,A,E,I,C,C,A,E,E,C,E,M,Y,C,C,C,A,C,A,A,W,C,A,C,C,C,M,C,E,E,uB,A,E,I,C,C,C,C,E,C,E,C,A,I,C,C,C,Q,E,C,M,C,E,E,M,A,E,I,C,K,C,G,C,gB,C,uB,C,C,S,C,a,C,C,C,A,E,C,E,E,M,A,E,C,C,W,C,E,E,E,C,K,C,C,C,C,I,C,iB,C,E,E,E,C,K,C,C,C,C,I,C,S,C,C,E,E,M,A,E,C,M,C,I,C,U,C,C,C,C,C,A,C,A,A,O,E,C,O,A,I,C,C,I,C,I,A,C,A,M,E,C,O,I,E,E,I,A,C,O,A,C,I,C,S,C,I,C,iB,C,I,C,S,C,I,C,I,C,I,C,K,C,I,C,K,C,I,C,Q,C,A,C,A,A,W,C,C,C,C,I,E,C,E,A,E,S,A,E,E,I,G,C,C,A,C,E,E,c,A,E,G,E,Q,C,e,C,O,C,G,E,C,C,A,E,E,E,C,I,C,A,I,A,E,C,C,E,E,C,A,U,C,C,C,C,C,S,I,C,E,C,A,E,C,C,C,G,G,C,C,A,I,C,C,C,E,E,C,E,C,C,S,C,I,C,S,C,I,C,U,C,C,A,O,I,E,E,I,A,E,A,E,A,Q,C,C,E,E,O,A,E,A,E,E,E,Q,A,E,E,C,A,M,C,I,C,W,C,C,A,C,C,E,C,C,C,A,I,C,W,C,C,E,E,O,A,E,E,C,A,E,E,A,G,C,C,K,C,C,C,I,C,Q,C,I,C,Q,C,A,C,A,A,U,C,C,C,C,O,E,I,C,E,C,A,A,C,C,C,G,C,C,C,C,C,C,C,C,E,C,E,E,c,A,E,C,E,E,W,A,E,G,E,C,W,C,M,C,Y,C,C,A,I,E,C,C,C,E,Q,A,E,E,G,G,C,C,A,C,E,E,c,A,E,E,E,I,E,E,E,E,E,I,E,E,C,c,C,M,C,Y,C,C,A,I,C,C,C,E,E,Q,A,E,C,E,E,W,A,E,Q,C,E,I,A,C,C,C,G,C,I,E,E,I,A,E,A,E,Q,A,C,C,E,E,O,A,E,C,C,K,C,C,C,E,C,C,C,C,A,Y,C,C,E,E,O,A,E,C,C,K,C,E,C,C,C,G,C,C,C,C,C,E,I,C,A,C,A,A,A,M,C,e,C,C,C,C,I,E,G,A,E,S,A,E,C,E,E,Y,A,E,I,G,E,E,C,C,C,C,Q,A,E,E,G,C,C,G,G,E,E,E,G,E,C,C,C,E,C,C,C,E,E,S,a,C,a,C,c,C,C,A,I,E,C,C,C,A,C,C,A,E,C,E,E,O,A,E,C,C,G,E,C,C,C,C,C,C,C,A,E,G,K,C,G,E,O,A,E,E,G,E,C,C,C,E,C,C,C,S,C,C,C,C,E,C,C,A,E,C,E,E,E,K,A,E,E,G,E,C,E,C,E,C,C,C,A,E,C,C,G,E,C,E,C,E,C,C,A,O,C,E,E,O,A,E,E,G,E,C,C,C,C,C,C,E,A,I,Y,C,A,I,Y,C,A,C,I,E,C,E,E,E,K,A,E,G,A,C,C,K,I,E,E,C,E,C,C,O,O,A,E,G,E,E,E,A,C,E,C,C,E,A,E,C,E,C,A,C,C,A,A,I,Y,C,A,I,a,C,G,C,E,C,C,C,C,C,C,M,A,O,I,E,E,I,A,E,E,Q,C,E,C,I,C,C,C,C,C,E,E,I,C,E,A,E,C,E,C,A,C,I,C,C,A,A,C,E,E,c,A,G,E,G,0B,C,a,C,c,C,A,C,A,A,M,C,Y,C,C,C,C,C,C,C,C,I,E,A,I,E,E,A,C,C,A,E,E,E,A,I,A,E,E,A,W,A,C,C,I,E,A,I,E,E,A,I,E,C,Q,E,C,C,A,I,E,E,I,I,C,W,C,C,E,E,W,A,E,E,C,C,E,G,G,E,C,C,A,E,C,C,C,C,E,I,E,K,E,C,G,K,C,I,C,E,C,A,C,C,C,G,C,Y,C,C,C,C,C,C,O,A,I,A,E,A,E,A,W,A,C,C,E,C,C,C,C,E,I,E,K,E,C,G,K,C,I,C,E,C,A,C,C,C,G,C,U,C,C,C,C,C,C,C,C,C,C,I,E,A,I,E,E,A,C,C,A,E,E,E,A,I,A,E,E,A,W,A,C,C,I,E,A,I,E,E,A,I,E,C,Q,E,C,C,A,I,E,E,I,I,C,U,C,E,E,E,C,G,E,C,C,A,E,C,C,C,C,E,I,E,K,E,C,G,K,C,I,C,E,C,A,C,C,C,G,C,Q,C,C,C,C,O,E,C,C,C,C,E,E,E,A,C,A,C,A,C,A,E,Y,C,C,O,K,K,E,I,M,C,S,A,A,W,C,C,iB,A,C,S,A,A,I,C,C,K,A,C,K,A,A,a,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,K,C,E,G,C,C,C,E,A,C,C,W,A,E,E,E,C,G,c,C,C,A,C,E,E,gB,A,E,I,C,W,C,C,C,C,A,I,C,C,C,E,E,I,K,A,E,G,E,S,A,E,C,E,E,M,A,E,I,C,C,C,C,C,A,A,C,A,C,C,E,gB,A,E,I,C,W,S,K,W,S,Y,E,G,C,G,M,K,G,E,C,A,C,A,A,C,M,C,C,C,C,O,I,E,E,I,A,C,O,A,C,I,C,S,C,I,C,iB,C,I,C,S,C,I,C,I,C,I,C,K,C,I,C,K,C,E,C,A,I,C,C,C,Q,E,C,M,C,E,E,M,A,E,I,C,K,C,G,C,gB,C,uB,C,C,S,C,a,C,C,C,A,E,C,E,E,M,A,E,C,C,W,C,E,E,E,C,K,C,C,C,C,I,C,iB,C,E,E,E,C,K,C,C,C,C,I,C,S,C,I,C,S,C,C,C,A,C,A,A,O,E,C,O,I,C,C,A,I,C,I,A,C,A,W,C,C,C,C,I,E,C,E,A,E,S,A,E,E,I,G,C,C,A,G,E,c,A,E,G,E,Q,C,e,C,O,C,G,E,C,C,A,E,E,E,C,I,C,A,I,A,E,C,C,E,E,A,C,A,I,O,C,C,C,U,I,C,E,C,A,E,C,C,C,G,G,C,C,A,I,C,C,C,E,E,C,E,C,C,S,C,I,C,S,C,I,C,C,A,E,A,E,U,C,S,C,E,A,I,C,S,C,I,A,C,C,K,I,E,E,C,E,C,C,C,M,C,M,A,E,E,C,A,C,C,A,I,C,W,C,C,E,E,O,A,E,E,C,A,E,E,A,G,C,C,K,C,C,C,I,C,Q,C,A,C,A,A,U,C,C,C,C,O,E,I,C,E,C,A,C,A,A,C,C,A,gB,C,E,E,a,C,C,E,O,A,C,E,I,C,C,C,E,A,E,A,S,A,E,E,I,G,C,C,A,M,C,E,E,c,A,E,G,C,C,C,K,G,K,M,iB,C,O,C,G,C,C,C,C,O,E,E,G,E,C,A,C,A,C,E,qB,C,E,O,A,C,E,I,E,C,E,A,E,C,M,E,A,E,E,I,G,C,C,A,M,C,E,E,c,A,E,G,C,C,C,E,G,G,I,C,A,M,iB,C,O,C,G,C,C,C,C,Y,E,E,C,A,C,A,C,+B,O,c,C,E,a,4D,I,E,E,C,C,Q,E,E,C,C,A,O,C,E,E,C,C,M,E,E,E,C,C,I,I,E,E,C,C,K,E,E,E,C,C,O,G,e,C,E,O,A,C,E,G,C,E,C,A,I,A,C,A,K,C,G,C,C,C,I,C,C,M,E,A,E,C,G,E,C,C,A,C,M,C,C,C,E,A,C,mB,C,E,O,A,C,C,C,E,I,E,E,C,C,C,I,C,C,G,C,C,A,C,E,E,C,U,A,E,G,E,C,E,C,C,A,A,C,S,A,E,C,E,E,O,A,E,E,E,e,C,C,C,A,E,G,E,A,a,A,E,G,E,O,A,E,E,E,e,C,C,C,A,C,E,E,c,A,E,G,E,E,G,C,C,E,C,C,C,C,iB,C,M,C,G,C,C,C,C,E,C,A,E,E,Q,A,E,C,E,E,M,A,E,E,E,I,A,A,E,A,C,Q,C,C,C,K,C,C,C,E,C,C,A,E,A,E,K,A,C,C,C,E,C,C,A,E,E,K,A,C,E,C,A,C,A,E,I,A,E,G,C,E,C,C,C,A,C,C,C,C,C,E,U,A,E,G,E,Q,A,E,E,I,G,C,K,E,E,C,A,E,C,C,A,C,C,C,C,C,C,C,C,C,C,E,E,I,C,C,E,C,A,G,I,E,C,Y,C,C,C,C,C,C,C,A,M,S,E,K,K,C,C,E,E,E,A,E,E,C,A,C,A,G,C,6F,I,E,E,C,C,M,E,E,E,C,C,K,E,E,E,C,C,I,I,E,E,C,C,C,O,E,E,C,C,O,C,E,E,C,C,M,E,E,E,C,C,C,O,S,E,C,E,A,O,I,O,C,A,I,G,E,E,G,C,G,E,A,G,C,C,E,A,C,C,A,A,C,A,A,A,G,C,C,C,M,I,E,U,C,Y,C,C,C,C,C,Q,E,E,K,G,A,C,C,C,S,C,I,C,E,A,G,A,I,C,C,C,C,A,K,C,A,Q,C,C,A,A,O,E,C,C,E,E,U,C,G,A,C,C,A,C,A,C,A,C,A,K,C,C,A,C,C,C,C,O,I,E,I,A,C,U,C,E,C,A,K,A,C,A,C,M,C,C,C,C,C,C,I,E,C,I,G,C,I,C,O,C,U,C,I,C,U,C,C,A,O,M,C,E,E,mB,A,E,E,E,C,E,G,W,E,C,C,A,C,A,A,W,C,C,C,C,I,E,C,I,G,C,I,C,O,C,U,C,I,C,U,C,C,A,M,C,E,E,uB,A,E,E,E,C,A,E,G,C,A,C,A,C,C,C,C,C,E,G,C,E,E,c,A,E,E,K,gB,C,M,C,c,C,C,A,U,G,G,E,E,G,G,E,I,G,E,K,G,C,M,C,C,I,E,E,I,I,C,W,C,E,K,G,C,O,C,C,A,E,E,E,U,C,Y,C,E,E,I,C,G,C,I,C,C,A,G,E,I,G,G,E,K,E,E,E,I,M,G,E,K,K,C,C,M,E,I,C,E,C,G,C,kF,C,C,A,A,I,E,I,A,E,E,E,G,K,C,C,A,M,C,E,E,c,A,E,E,I,G,G,E,K,E,C,6B,C,M,C,c,C,C,A,C,C,A,I,C,C,C,K,C,iB,C,C,C,C,C,C,C,C,I,E,I,C,A,A,M,C,E,E,c,A,E,G,C,C,A,E,G,C,C,E,E,mB,A,E,E,E,A,G,C,E,A,E,A,C,C,a,A,E,I,C,A,E,E,E,C,C,A,C,A,C,E,G,E,C,C,C,A,C,E,C,E,E,A,oB,A,E,E,E,C,I,C,C,A,C,A,C,A,C,A,C,E,G,E,C,C,C,A,E,E,C,A,E,C,A,E,C,A,I,C,C,A,C,qB,C,C,C,C,C,C,I,E,I,C,A,A,M,C,E,E,c,A,E,G,C,C,A,C,C,C,E,A,uB,A,E,E,E,C,G,E,A,C,C,a,A,E,G,C,C,A,C,C,C,E,A,oB,A,E,E,E,C,C,E,E,A,C,C,Y,A,G,E,G,kB,C,M,C,c,C,C,A,E,C,C,C,C,A,E,C,A,I,C,C,A,C,Y,C,C,C,C,I,E,E,E,U,C,Y,E,C,O,A,E,E,I,A,E,C,C,G,C,C,A,G,C,A,C,A,C,C,U,C,C,C,C,C,C,I,E,E,E,U,C,U,C,M,C,C,E,A,E,E,I,A,E,C,C,G,C,C,C,A,E,A,C,A,C,A,I,C,O,0B,O,c,C,E,a,uS,I,E,E,C,C,I,I,O,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,I,E,E,C,C,C,O,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,wB,C,Y,E,I,W,O,E,qB,C,G,A,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,I,E,E,C,C,O,C,O,c,C,E,kB,C,Y,E,I,W,O,E,e,C,G,A,O,c,C,E,uB,C,Y,E,I,W,O,E,oB,C,G,A,I,E,E,C,C,M,E,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,0B,C,W,G,I,W,O,E,uB,C,G,A,O,c,C,E,sB,C,Y,E,I,W,O,E,mB,C,G,A,O,c,C,E,sB,C,Y,E,I,W,O,E,mB,C,G,A,O,c,C,E,0B,C,Y,E,I,W,O,E,uB,C,G,A,I,E,E,C,C,C,O,O,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,I,E,E,C,C,Q,O,c,C,E,S,C,Y,E,I,W,O,E,M,C,G,oG,E,U,C,E,O,A,C,C,C,C,C,I,C,C,C,C,E,C,C,A,C,A,C,C,A,E,E,C,A,C,C,C,C,C,C,C,C,A,E,C,C,A,C,G,I,C,C,C,C,C,C,E,E,I,C,C,E,C,A,I,E,G,A,C,C,A,A,A,M,4D,C,A,O,C,C,C,C,C,C,C,A,C,E,C,A,C,A,G,C,E,C,C,G,E,G,A,E,A,E,A,G,A,C,A,C,A,A,C,C,E,C,C,A,A,C,A,C,C,A,G,C,C,A,C,E,A,C,C,C,G,E,C,E,G,C,A,A,C,E,G,A,E,A,C,A,C,A,C,A,A,O,C,C,I,C,gG,I,E,E,C,C,K,E,E,E,C,C,G,K,E,E,C,C,G,I,G,U,C,E,O,A,C,C,C,C,C,I,C,C,C,E,A,E,S,A,E,G,C,C,E,C,G,C,C,A,O,E,K,A,C,I,C,C,O,C,A,I,E,E,A,E,A,E,C,G,C,C,+B,C,C,A,C,E,E,c,A,E,I,G,E,G,6B,C,S,C,G,I,A,C,C,A,C,C,A,E,C,E,A,E,E,Q,A,E,Q,C,C,C,C,C,C,C,C,C,C,C,C,C,A,E,M,E,C,C,C,C,C,C,C,A,E,A,G,G,C,C,E,E,C,C,C,C,C,E,C,C,G,C,C,A,E,E,C,E,I,C,E,C,E,A,C,I,C,A,E,A,A,E,A,C,C,E,C,E,E,E,E,E,C,Y,C,E,I,M,C,C,C,C,G,K,A,C,C,C,C,A,C,C,A,A,A,C,A,C,G,E,C,G,C,A,C,A,uG,I,E,E,C,C,K,E,E,E,C,C,I,G,O,U,E,A,W,G,C,A,A,a,C,C,C,C,C,C,C,C,C,K,C,E,E,E,A,C,I,C,A,C,A,C,A,C,C,C,C,A,I,A,C,M,E,C,O,I,C,C,C,C,A,C,A,A,Y,E,C,M,C,E,E,U,A,E,I,C,K,C,I,C,O,C,A,C,A,C,A,E,Y,C,a,qF,I,E,E,C,C,K,E,E,I,A,C,C,K,M,I,E,W,C,a,C,K,C,I,C,C,K,E,Q,C,C,m8N,C,A,oE,C,A,C,A,M,C,Q,E,C,O,A,I,E,E,C,G,I,C,A,C,C,A,C,C,C,A,A,E,G,C,E,C,O,0F,I,E,E,C,C,M,E,E,I,A,C,C,K,M,I,E,Y,C,a,C,K,C,I,C,C,K,E,O,E,Q,C,C,suL,C,A,gW,C,A,oE,C,A,C,A,M,C,Q,E,C,O,I,E,A,I,E,E,E,C,C,A,C,A,C,C,C,A,A,E,G,C,E,C,O,2F,I,E,E,C,C,M,E,E,I,A,C,C,K,M,I,E,Y,C,a,C,K,C,I,C,C,K,E,O,E,Q,C,C,47O,C,A,kW,C,A,oE,C,A,C,A,M,C,Q,E,C,O,I,E,A,I,E,E,E,C,C,A,C,A,C,C,C,A,A,E,G,C,E,C,O,2F,I,E,E,C,C,I,I,E,E,C,C,K,E,E,E,C,C,C,O,E,C,C,mrE,C,ssG,C,4uD,C,olB,C,4J,C,0G,C,W,C,C,A,E,I,C,A,E,O,E,C,A,E,M,C,E,E,O,A,E,C,E,E,W,A,E,G,C,A,A,C,C,C,M,E,C,E,G,G,G,E,Y,A,E,I,U,C,G,C,A,A,C,C,C,M,I,G,E,E,E,C,E,O,A,E,I,E,C,C,A,C,A,E,C,A,C,C,A,I,K,E,C,E,I,A,E,E,C,A,C,G,I,C,C,C,C,C,C,E,E,I,C,C,E,C,C,I,E,C,C,A,C,C,C,A,E,C,C,E,A,C,C,A,I,C,E,C,E,E,E,A,C,C,A,A,C,A,G,G,A,A,C,C,K,C,C,A,C,C,E,A,C,A,G,C,C,E,C,G,C,C,C,E,E,C,C,C,C,A,C,G,C,C,E,C,G,C,C,C,E,E,C,C,C,C,A,C,G,C,C,E,C,G,C,C,C,C,E,C,G,C,C,E,C,G,C,C,C,A,C,C,E,C,G,C,C,E,C,G,C,C,C,C,E,C,G,C,C,E,C,G,C,C,C,A,C,C,E,C,G,C,C,E,C,G,C,C,C,C,E,C,G,C,C,E,C,G,C,C,C,A,C,C,E,C,G,C,C,E,C,G,C,C,C,C,E,C,G,C,C,E,C,G,C,C,C,A,I,I,E,C,C,E,C,C,C,C,G,C,C,E,C,C,C,C,C,E,C,C,C,A,C,G,I,E,C,C,E,A,C,C,E,I,C,G,E,C,A,G,C,E,E,A,C,A,I,I,C,C,C,C,C,C,E,C,E,C,A,C,I,C,C,A,O,sF,C,A,O,C,C,C,E,C,C,C,C,A,A,E,E,E,C,G,C,C,A,E,E,E,C,G,C,A,C,A,C,E,C,A,C,E,C,C,A,E,E,E,C,C,G,C,A,C,C,A,G,C,C,A,A,E,I,C,C,C,I,A,C,A,A,C,A,C,C,E,I,C,A,C,Q,A,C,C,C,A,C,C,M,C,A,C,C,C,C,A,E,C,A,C,A,C,C,A,C,A,E,E,C,C,A,C,C,C,A,E,C,E,C,A,C,C,C,sB,C,E,E,C,A,C,G,C,C,E,G,M,a,C,E,E,C,A,C,G,C,C,C,C,G,C,E,C,A,C,A,G,C,C,A,C,C,G,C,C,C,C,G,C,C,A,C,C,G,C,C,E,A,C,C,C,A,Q,4D,E,C,G,E,E,A,E,E,I,C,C,G,C,C,I,C,C,A,M,A,K,C,yC,C,C,A,O,E,E,C,C,A,G,C,A,C,C,A,C,G,A,C,C,K,M,I,E,Q,C,a,C,K,C,I,C,A,C,A,A,O,C,C,C,C,I,E,G,C,K,C,C,A,C,C,E,c,A,E,G,C,C,C,E,E,C,E,G,C,C,oB,E,E,C,C,C,M,C,G,C,C,A,C,C,A,A,C,A,A,E,U,C,C,C,C,O,I,K,E,A,C,E,C,A,C,C,C,E,C,C,C,C,O,E,I,C,C,gB,C,A,C,A,A,I,C,C,C,C,O,E,G,C,C,I,C,A,G,C,C,C,C,Q,E,C,O,I,E,A,I,E,E,E,C,C,A,C,A,C,C,C,A,A,E,G,C,E,C,O,2F,I,E,E,C,C,I,I,E,E,C,C,K,E,E,E,C,C,C,O,E,C,C,K,C,y5J,C,8lI,C,i8B,C,koC,C,ya,C,gH,C,+E,C,C,A,E,I,C,A,E,O,I,G,A,E,E,E,E,C,M,E,I,E,C,C,A,C,A,G,A,E,E,K,C,C,E,E,G,C,E,A,C,C,A,A,C,G,I,C,C,C,C,C,C,E,E,I,C,C,E,E,C,G,C,E,E,A,C,A,I,I,C,C,C,C,C,C,E,C,E,C,A,A,I,C,G,C,E,G,A,C,E,E,mE,C,A,O,C,C,C,C,C,C,C,C,G,E,C,C,C,E,A,E,C,C,E,C,A,G,C,C,E,C,E,E,A,E,A,C,E,C,C,A,C,E,E,Y,A,E,I,U,C,C,G,C,C,I,A,C,C,A,G,C,C,A,I,A,C,C,A,G,C,C,C,C,A,C,A,E,I,C,C,E,A,C,A,C,A,C,A,A,E,I,E,A,C,A,A,Q,4D,E,C,C,E,E,E,A,E,E,I,C,C,G,C,C,I,C,C,A,M,A,K,C,uC,C,C,A,O,E,E,C,C,A,G,C,A,C,C,A,C,G,A,C,C,K,M,I,E,Q,C,a,C,K,C,I,C,A,C,A,A,O,C,C,C,C,I,E,G,C,K,C,C,A,C,C,E,c,A,E,G,C,C,C,E,E,C,E,G,C,C,oB,E,E,C,C,C,M,C,G,C,C,A,C,C,A,A,C,A,A,E,U,C,C,C,C,O,I,K,E,A,C,E,C,A,C,C,C,G,C,Q,E,C,O,I,E,A,I,E,E,E,C,C,A,C,A,C,C,C,A,A,E,G,C,E,C,O,2F,I,E,E,C,C,K,E,E,I,A,C,C,K,M,I,E,W,C,a,C,K,C,I,C,C,K,E,Q,C,C,w9O,C,A,oE,C,A,C,A,M,C,Q,E,C,O,I,E,A,I,E,E,E,C,C,A,C,A,C,C,C,A,A,E,G,C,E,C,O,2F,I,E,E,C,C,K,E,E,I,A,C,C,K,M,I,E,W,C,a,C,K,C,I,C,C,K,E,Q,C,C,ozO,C,A,oE,C,A,C,A,M,C,Q,E,C,O,A,I,E,E,E,E,I,C,C,A,C,A,C,C,C,A,A,E,G,C,E,C,O,2F,I,E,E,C,C,I,I,E,E,C,C,K,E,E,E,C,C,C,O,E,E,ggM,C,A,E,C,K,C,A,I,C,K,C,I,C,C,A,E,C,G,E,C,oE,C,K,C,oE,C,C,A,E,G,+D,C,A,S,E,C,E,G,A,C,G,E,C,C,E,C,G,I,C,C,E,C,A,G,C,E,E,C,A,E,C,A,C,A,I,G,C,C,C,C,C,C,C,I,C,C,E,C,C,I,C,C,A,K,uB,C,A,O,C,C,C,C,C,C,C,C,C,A,E,C,E,C,E,C,A,G,C,C,A,G,C,E,G,I,C,C,C,A,C,A,G,C,C,C,C,G,C,E,G,I,C,C,C,C,C,C,C,C,C,C,C,C,A,G,O,G,E,C,G,C,E,C,C,C,C,A,A,I,I,C,C,E,C,C,C,C,A,C,E,C,A,C,C,C,C,C,E,G,I,C,A,6lD,A,C,A,I,C,E,C,A,C,C,A,C,A,C,C,E,C,A,C,E,C,C,A,A,C,C,I,C,C,A,E,E,Y,A,E,I,U,C,K,A,A,C,C,C,A,A,C,A,E,E,E,A,C,C,E,I,C,C,G,C,C,I,C,C,E,C,C,E,C,C,E,G,A,K,C,C,mB,E,E,I,a,C,C,C,A,O,C,C,E,C,E,C,A,C,A,I,A,C,C,A,C,A,C,A,C,I,E,M,I,E,Q,C,Y,C,C,C,K,C,K,C,E,C,A,I,C,C,C,C,C,C,C,I,E,E,C,G,C,E,I,C,C,A,M,C,E,E,c,A,E,G,C,C,C,E,E,C,E,G,C,C,oB,E,E,C,C,C,M,C,G,C,C,A,C,C,A,A,C,A,A,E,U,C,C,C,C,O,E,I,C,E,I,C,C,O,C,E,C,A,C,C,C,E,C,C,C,C,M,C,E,E,C,C,E,G,C,gB,C,G,C,C,A,K,C,E,C,A,C,A,A,M,C,Q,C,C,C,C,O,I,E,A,C,C,E,G,C,C,A,E,C,I,A,E,E,C,C,A,A,C,C,E,A,C,A,C,A,E,C,K,C,O,8F,I,E,E,C,C,Q,E,E,C,C,Q,E,E,C,C,O,E,E,C,C,Q,E,E,C,C,Q,E,E,C,C,Q,E,E,C,C,Q,E,E,C,C,Q,E,E,C,C,Q,E,S,C,C,E,C,E,M,C,Q,E,C,E,C,E,M,C,Q,E,C,E,C,E,M,C,Q,E,C,E,C,E,M,C,Q,E,C,E,C,E,M,C,Q,E,C,E,C,E,M,C,Q,E,C,E,C,E,M,C,Q,E,C,E,C,E,M,C,Q,E,C,K,C,E,M,C,Q,C,I,C,C,K,C,E,M,C,Q,C,I,C,C,C,oJ,I,E,E,C,C,C,O,O,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,I,E,E,C,C,Q,O,c,C,E,S,C,Y,E,I,W,O,E,M,C,G,A,I,E,E,C,C,K,E,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,I,E,E,C,C,M,E,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,I,E,E,C,C,E,M,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,+lG,I,E,E,C,C,C,O,O,c,C,E,U,C,W,G,I,W,O,E,O,C,G,A,I,E,E,C,C,E,M,O,c,C,E,sB,C,Y,E,I,W,O,E,mB,C,G,A,O,c,C,E,sB,C,Y,E,I,W,O,E,mB,C,G,A,O,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,O,c,C,E,sB,C,Y,E,I,W,O,E,mB,C,G,A,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,O,c,C,E,gB,C,W,G,I,W,O,E,a,C,G,A,O,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,O,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,O,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,oB,C,Y,E,I,W,O,E,iB,C,G,A,O,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,O,c,C,E,U,C,Y,E,I,W,O,E,O,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,S,C,W,G,I,W,O,E,M,C,G,A,O,c,C,E,yB,C,Y,E,I,W,O,E,sB,C,G,A,O,c,C,E,Q,C,Y,E,I,W,O,E,K,C,G,A,I,E,E,C,C,M,E,O,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,O,c,C,E,iB,C,W,G,I,W,O,E,c,C,G,A,O,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,O,c,C,E,oB,C,Y,E,I,W,O,E,iB,C,G,A,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,I,E,E,C,C,Q,A,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,O,c,C,E,I,C,Y,E,I,W,O,E,C,C,G,A,O,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,O,c,C,E,c,C,W,G,I,W,O,E,W,C,G,A,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,I,E,E,C,C,O,C,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,W,C,W,G,I,W,O,E,Q,C,G,A,O,c,C,E,kB,C,Y,E,I,W,O,E,e,C,G,A,O,c,C,E,uB,C,Y,E,I,W,O,E,oB,C,G,A,O,c,C,E,6B,C,Y,E,I,W,O,E,0B,C,G,A,O,c,C,E,8B,C,Y,E,I,W,O,E,2B,C,G,A,O,c,C,E,8B,C,W,G,I,W,O,E,2B,C,G,A,O,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,O,c,C,E,oB,C,Y,E,I,W,O,E,iB,C,G,A,I,E,E,C,C,K,G,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,O,c,C,E,S,C,W,G,I,W,O,E,M,C,G,A,O,c,C,E,S,C,Y,E,I,W,O,E,M,C,G,A,O,c,C,E,S,C,Y,E,I,W,O,E,M,C,G,A,O,c,C,E,S,C,Y,E,I,W,O,E,M,C,G,A,O,c,C,E,a,C,W,G,I,W,O,E,U,C,G,A,O,c,C,E,O,C,Y,E,I,W,O,E,I,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,O,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,I,E,E,C,C,G,K,O,c,C,E,K,C,Y,E,I,W,O,E,E,C,G,A,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,O,c,C,E,oB,C,Y,E,I,W,O,E,iB,C,G,A,O,c,C,E,sB,C,Y,E,I,W,O,E,mB,C,G,A,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,0B,C,Y,E,I,W,O,E,uB,C,G,A,O,c,C,E,uB,C,W,G,I,W,O,E,oB,C,G,A,O,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,O,c,C,E,kB,C,W,G,I,W,O,E,e,C,G,A,I,E,E,C,C,O,C,M,c,C,E,qB,C,Y,E,I,W,O,E,kB,C,G,A,O,c,C,E,Q,C,Y,E,I,W,O,E,K,C,G,A,O,c,C,E,U,C,Y,E,I,W,O,E,O,C,G,A,O,c,C,E,M,C,Y,E,I,W,O,E,G,C,G,A,O,c,C,E,qB,C,Y,E,I,W,O,E,kB,C,G,A,O,c,C,E,sB,C,Y,E,I,W,O,E,mB,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,O,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,O,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,O,c,C,E,qB,C,Y,E,I,W,O,E,kB,C,G,A,O,c,C,E,kB,C,Y,E,I,W,O,E,e,C,G,A,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,O,c,C,E,kB,C,W,G,I,W,O,E,e,C,G,A,O,c,C,E,kB,C,Y,E,I,W,O,E,e,C,G,A,O,c,C,E,e,C,W,G,I,W,O,E,Y,C,G,A,O,c,C,E,qB,C,Y,E,I,W,O,E,kB,C,G,A,O,c,C,E,qB,C,Y,E,I,W,O,E,kB,C,G,A,O,c,C,E,qB,C,Y,E,I,W,O,E,kB,C,G,A,O,c,C,E,oB,C,Y,E,I,W,O,E,iB,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,0B,C,Y,E,I,W,O,E,uB,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,oB,C,Y,E,I,W,O,E,iB,C,G,A,O,c,C,E,oB,C,W,G,I,W,O,E,iB,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,oB,C,W,G,I,W,O,E,iB,C,G,A,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,U,C,Y,E,I,W,O,E,O,C,G,A,O,c,C,E,Y,C,W,G,I,W,O,E,S,C,G,A,O,c,C,E,kB,C,Y,E,I,W,O,E,e,C,G,A,O,c,C,E,uB,C,W,G,I,W,O,E,oB,C,G,A,O,c,C,E,+B,C,W,G,I,W,O,E,4B,C,G,A,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,O,c,C,E,0B,C,W,G,I,W,O,E,uB,C,G,A,O,c,C,E,wB,C,Y,E,I,W,O,E,qB,C,G,A,O,c,C,E,wB,C,Y,E,I,W,O,E,qB,C,G,A,O,c,C,E,0B,C,Y,E,I,W,O,E,uB,C,G,A,O,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,O,c,C,E,sB,C,Y,E,I,W,O,E,mB,C,G,A,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,sB,C,Y,E,I,W,O,E,mB,C,G,A,I,E,E,C,C,Q,E,K,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,O,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,I,E,E,C,C,I,G,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,S,C,Y,E,I,W,O,E,M,C,G,A,O,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,O,c,C,E,Y,C,W,G,I,W,O,E,S,C,G,A,O,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,U,C,W,G,I,W,O,E,O,C,G,A,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,c,C,W,G,I,W,O,E,W,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,O,c,C,E,oB,C,Y,E,I,W,O,E,iB,C,G,A,O,c,C,E,S,C,Y,E,I,W,O,E,M,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,sB,C,Y,E,I,W,O,E,mB,C,G,A,O,c,C,E,kB,C,Y,E,I,W,O,E,e,C,G,A,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,O,c,C,E,Y,C,W,G,I,W,O,E,S,C,G,A,O,c,C,E,kB,C,Y,E,I,W,O,E,e,C,G,A,O,c,C,E,U,C,Y,E,I,W,O,E,O,C,G,A,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,O,c,C,E,oB,C,Y,E,I,W,O,E,iB,C,G,A,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,O,c,C,E,U,C,Y,E,I,W,O,E,O,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,O,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,O,c,C,E,U,C,W,G,I,W,O,E,O,C,G,A,O,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,O,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,O,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,O,c,C,E,S,C,W,G,I,W,O,E,M,C,G,A,O,c,C,E,O,C,Y,E,I,W,O,E,I,C,G,A,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,O,c,C,E,Y,C,W,G,I,W,O,E,S,C,G,A,O,c,C,E,S,C,Y,E,I,W,O,E,M,C,G,A,I,E,E,C,C,K,G,O,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,O,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,O,c,C,E,S,C,Y,E,I,W,O,E,M,C,G,A,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,wB,C,Y,E,I,W,O,E,qB,C,G,A,O,c,C,E,kB,C,Y,E,I,W,O,E,e,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,uB,C,Y,E,I,W,O,E,oB,C,G,A,O,c,C,E,0B,C,Y,E,I,W,O,E,uB,C,G,A,O,c,C,E,sB,C,W,G,I,W,O,E,mB,C,G,A,O,c,C,E,sB,C,Y,E,I,W,O,E,mB,C,G,A,O,c,C,E,0B,C,Y,E,I,W,O,E,uB,C,G,A,I,E,E,C,C,Q,A,O,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,O,c,C,E,S,C,Y,E,I,W,O,E,M,C,G,A,O,c,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,O,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,O,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,C,qD,2D,G,M,C,E,A,O,K,C,E,C,C,S,E,Y,C,E,C,C,Q,S,yBCXjB,OAAO,cAAc,CAAC,EAAS,aAAc,CAAE,OAAO,CAAK,GAC3D,EAAQ,UAAU,CAAG,EAAQ,WAAW,CAAG,EAAQ,aAAa,CAAG,KAAK,EACxE,IAAM,EAAA,EAAA,CAAA,CAAA,QACF,EAAsB,KACtB,EAAoB,KACpB,EAAmB,KACvB,GAAI,CAEA,EAAsB,EAAS,MAAM,CAAC,KAAK,CAAC,aAAa,CAEzD,EAAoB,EAAS,MAAM,CAAC,KAAK,CAAC,WAAW,CAErD,EAAmB,EAAS,MAAM,CAAC,KAAK,CAAC,UAAU,AACvD,CACA,MAAO,EAAI,CACP,EAAsB,EAAS,MAAM,CAAC,aAAa,CACnD,EAAoB,EAAS,MAAM,CAAC,WAAW,CAC/C,EAAmB,EAAS,MAAM,CAAC,UAAU,AACjD,CACA,EAAQ,aAAa,CAAG,EACxB,EAAQ,WAAW,CAAG,EACtB,EAAQ,UAAU,CAAG,iCCrBrB,OAAO,cAAc,CAAC,EAAS,aAAc,CAAE,OAAO,CAAK,GAC3D,EAAQ,aAAa,CAAG,EAAQ,SAAS,CAAG,EAAQ,cAAc,CAAG,EAAQ,gBAAgB,CAAG,KAAK,EACrG,EAAQ,gBAAgB,CAAG,CACvB,YACA,SACA,SACA,QACA,OACH,CACD,EAAQ,cAAc,CAAG,CACrB,WACA,qBACA,uBACH,CAWD,EAAQ,SAAS,CAPjB,EAOoB,IAPd,AACF,YAAY,CAAI,CAAE,CAAQ,CAAE,CAAQ,CAAE,CAClC,IAAI,CAAC,IAAI,CAAG,EACZ,IAAI,CAAC,QAAQ,CAAG,EAChB,IAAI,CAAC,QAAQ,CAAG,CACpB,CACJ,EAMA,AAAC,SAAU,CAAa,EAEpB,EAAc,WAAD,IAAmB,CAAG,mBAEnC,EAAc,WAAD,GAAkB,CAAG,kBAElC,EAAc,WAAD,IAAmB,CAAG,0DAEnC,EAAc,WAAD,IAAmB,CAAG,0DAEnC,EAAc,WAAD,GAAkB,CAAG,wDAElC,EAAc,WAAD,IAAmB,CAAG,mBAEnC,EAAc,WAAD,AAAe,CAAG,oCAE/B,EAAc,WAAD,EAAiB,CAAG,+DAEjC,EAAc,WAAD,UAAyB,CAAG,4BAEzC,EAAc,WAAD,MAAqB,CAAG,mDAErC,EAAc,WAAD,QAAuB,CAAG,uBAEvC,EAAc,WAAD,YAA2B,CAAG,2BAE3C,EAAc,WAAD,IAAmB,CAAG,8BACvC,CAAC,CAAkB,CAAhB,CAAwB,aAAa,GAAK,CAAD,CAAS,aAAa,CAAG,EAAC,CAAC,+G,E,mB,C,E,I,A,a,C,E,E,C,A,W,E,E,G,C,A,C,c,E,E,G,C,A,E,W,A,E,O,I,C,I,C,M,E,I,C,Q,C,A,C,G,C,A,Q,I,C,C,A,G,E,M,I,G,I,C,O,C,E,I,C,M,C,I,E,E,E,C,C,C,c,E,E,C,A,C,C,S,C,C,C,C,G,C,I,C,W,E,C,I,C,O,C,C,K,A,K,C,iD,C,C,A,I,E,C,G,U,C,G,G,C,A,C,G,C,C,C,C,C,C,E,C,K,C,C,I,I,C,C,E,C,O,C,e,C,E,C,O,C,C,C,C,C,I,C,G,C,E,C,K,C,C,C,C,I,C,A,C,C,C,A,C,M,C,C,C,A,C,gF,E,I,C,E,K,E,A,C,E,C,G,I,C,C,C,C,C,C,E,G,G,C,C,E,C,A,C,C,C,C,C,C,C,A,O,C,C,G,C,uG,I,E,E,C,C,G,K,E,gB,C,E,I,A,a,A,C,E,E,C,W,C,G,E,C,C,C,c,E,C,E,E,C,C,E,E,C,C,G,C,A,I,G,C,C,A,C,I,G,G,E,C,I,C,O,C,E,I,C,G,C,O,E,E,E,C,C,C,c,E,G,A,C,A,A,C,U,C,C,C,C,G,C,I,C,W,E,C,I,C,O,C,C,K,A,K,C,iD,C,C,A,I,E,I,A,C,O,C,W,C,G,G,A,C,C,A,I,E,G,E,I,E,A,A,K,C,kD,C,C,A,I,E,C,G,U,C,G,G,C,A,C,G,C,C,C,C,C,C,E,C,K,C,C,E,C,A,C,C,C,C,C,C,C,C,C,C,A,M,C,E,E,I,A,E,G,C,C,C,A,A,C,A,C,2G,I,E,E,C,C,Q,E,E,C,C,G,I,G,I,c,C,E,I,A,a,C,C,E,C,G,C,W,E,E,G,C,A,C,I,C,E,C,A,I,C,O,C,I,E,mB,C,C,C,E,C,O,C,W,C,C,I,C,W,E,E,E,C,C,C,I,C,S,C,A,O,A,A,G,I,C,O,C,I,E,gB,C,C,C,E,C,O,C,W,C,C,I,C,W,E,E,E,C,C,C,I,C,M,C,A,O,A,A,C,A,W,C,C,C,C,G,C,I,C,W,C,C,K,A,K,C,gD,C,C,A,O,I,C,O,C,W,C,E,C,C,E,C,C,6E,E,G,C,I,C,I,E,E,O,A,C,A,C,A,C,E,G,C,A,E,A,A,M,A,C,A,C,E,A,A,C,K,C,C,O,E,A,E,C,A,C,A,C,A,A,G,E,C,A,K,C,C,E,A,E,C,C,C,E,A,C,C,C,A,K,C,E,E,C,G,C,C,A,C,A,C,A,C,A,E,G,C,E,I,G,A,C,C,C,A,E,O,C,C,C,C,A,C,A,C,A,C,E,G,C,E,I,G,A,C,C,C,A,E,O,C,C,C,C,A,C,A,C,A,C,E,I,C,E,K,E,A,C,C,C,C,C,O,C,E,C,C,C,G,E,C,C,A,C,A,C,A,E,I,C,E,K,E,A,C,C,C,C,C,O,C,E,E,C,C,C,A,C,G,C,A,C,A,C,E,S,C,M,C,S,E,E,O,A,C,E,G,C,E,I,I,E,O,C,E,Q,C,C,C,E,I,C,K,C,C,C,G,C,A,C,A,C,E,gB,C,gB,C,A,E,a,C,S,C,E,O,E,S,C,C,C,E,C,E,C,E,gB,E,C,E,E,gB,A,C,C,+E,I,E,E,C,C,E,M,S,E,C,C,C,C,C,E,I,G,K,G,K,E,I,U,C,E,C,C,K,G,C,I,G,C,C,C,C,E,C,C,C,C,G,C,A,C,A,C,C,E,C,C,C,C,G,C,A,C,A,C,C,A,C,C,O,E,C,C,C,C,C,E,I,G,K,G,C,I,E,I,U,C,E,C,C,K,G,K,G,C,C,C,C,E,C,C,C,C,G,C,A,C,A,C,C,E,C,C,C,C,G,C,A,C,A,C,C,A,C,C,O,E,C,C,C,E,I,G,K,G,I,I,C,C,C,C,E,E,E,A,C,A,C,C,E,C,C,E,A,E,C,A,C,C,E,C,C,E,A,C,C,A,C,C,E,C,C,A,C,A,A,C,Q,E,C,C,C,E,K,E,K,G,C,I,G,C,C,C,C,C,E,E,E,A,C,A,C,C,E,C,C,E,A,E,C,A,C,C,E,C,C,E,A,C,C,A,C,C,E,E,A,C,C,E,C,A,C,A,A,S,E,C,C,C,E,I,G,K,G,C,G,G,C,E,C,C,E,C,C,E,A,E,C,A,C,C,E,C,C,E,A,E,C,A,C,C,E,C,C,E,A,C,C,A,C,C,E,A,C,A,A,G,M,E,C,C,C,E,K,E,K,G,C,I,G,C,C,C,C,C,E,C,C,E,A,E,C,A,C,C,E,C,C,E,A,E,C,A,C,C,E,C,C,E,A,C,C,A,C,C,E,A,C,G,C,A,C,A,A,S,E,C,C,C,C,C,E,I,G,K,G,K,E,I,U,C,E,C,C,K,G,C,I,G,C,C,C,C,E,C,C,C,C,G,C,C,C,A,C,C,E,C,C,C,C,G,C,C,C,A,C,C,E,C,C,C,C,G,C,A,C,A,C,C,E,C,C,C,C,G,C,A,C,A,C,C,A,C,C,O,E,C,C,C,C,C,E,I,G,K,G,C,I,E,I,U,C,E,C,C,K,G,C,G,I,C,C,C,C,E,C,C,C,C,G,C,A,C,A,C,C,E,C,C,C,C,G,C,A,C,A,C,C,E,C,C,C,C,G,C,C,C,A,C,C,E,C,C,C,C,G,C,C,C,A,C,C,A,C,C,O,E,C,C,C,C,C,E,I,G,K,G,C,I,E,I,U,C,E,C,C,K,G,C,I,G,C,C,E,E,G,M,E,G,C,C,E,C,E,E,C,C,C,C,C,A,C,E,C,C,C,A,C,C,A,C,A,C,A,C,C,O,E,C,C,C,C,C,E,I,G,K,G,C,G,G,I,U,C,E,C,C,K,G,C,I,G,C,C,E,I,C,A,C,E,C,E,A,E,C,C,A,C,E,M,E,G,C,C,E,C,C,C,C,C,A,C,A,C,A,C,C,A,W,C,E,O,A,C,C,C,E,A,M,C,K,G,K,G,C,C,C,C,C,E,C,C,E,A,C,C,A,C,C,E,E,A,C,C,C,E,C,C,E,A,C,A,C,E,Y,C,E,O,A,C,C,C,E,C,M,A,K,G,K,G,C,C,C,C,C,E,C,C,E,A,C,C,A,C,C,E,E,A,C,C,E,C,A,C,A,C,E,W,C,E,O,A,C,C,C,E,A,M,C,K,G,C,I,G,C,C,C,C,C,E,C,C,E,A,C,C,A,C,C,E,A,C,E,E,C,C,E,A,C,A,C,E,Y,C,E,O,A,C,C,C,E,C,M,A,K,G,C,I,G,C,C,C,C,C,E,C,C,E,A,C,C,A,C,C,E,A,C,G,C,A,C,A,C,E,a,C,E,E,U,E,C,E,E,S,C,G,C,E,E,U,E,C,E,E,S,C,C,C,E,E,Q,I,C,E,E,S,E,C,E,E,Q,I,C,E,E,S,I,C,E,E,U,E,C,E,E,S,C,G,C,E,E,U,E,C,E,E,S,C,C,C,E,O,A,C,C,C,E,A,K,C,E,C,I,E,C,E,I,E,A,E,E,G,A,E,A,C,C,A,A,C,C,E,C,A,C,C,A,C,C,K,W,C,E,A,E,A,C,E,C,E,C,C,A,W,A,C,A,C,A,E,Y,C,E,O,A,C,C,C,E,C,M,A,K,G,C,I,G,C,C,A,E,S,C,E,A,E,A,C,E,A,E,C,C,A,C,A,C,C,A,C,A,C,A,C,A,E,A,W,C,E,O,A,C,C,C,E,A,K,C,E,C,G,I,C,C,I,E,A,E,E,G,A,G,C,A,C,E,A,E,S,C,E,E,E,C,A,C,C,A,C,C,A,A,C,E,C,E,C,C,A,W,A,C,A,C,A,E,Y,C,E,O,A,C,C,C,E,C,I,E,C,C,I,G,C,C,I,E,A,E,E,G,A,G,C,C,A,E,A,E,S,C,E,E,E,C,A,C,C,A,C,A,C,A,C,A,A,E,a,C,E,E,U,E,C,E,E,S,C,G,C,E,E,U,E,C,E,E,S,C,A,C,E,O,A,C,C,C,C,A,C,E,G,A,K,G,C,I,G,C,C,E,C,E,C,C,C,C,I,A,K,C,oD,C,C,A,G,E,C,C,E,G,A,G,C,E,I,E,A,A,K,C,wD,C,C,A,I,I,E,C,C,A,E,A,C,A,C,A,C,C,E,C,C,E,C,C,C,A,C,C,E,C,E,C,A,A,G,C,C,C,A,C,C,E,C,C,C,A,G,C,A,O,C,C,C,E,C,C,Q,C,E,O,A,C,C,C,C,A,C,E,G,A,K,G,C,I,G,C,C,E,C,E,C,C,C,C,I,A,K,C,oD,C,C,A,G,E,C,C,E,G,A,G,C,E,I,E,A,A,K,C,wD,C,C,A,I,I,E,C,C,A,E,A,C,A,C,A,C,C,E,C,C,E,A,E,C,C,A,C,E,C,A,C,E,C,C,C,A,C,C,E,C,C,C,A,G,C,A,O,C,C,C,E,C,C,S,C,E,O,A,C,C,C,C,C,A,C,C,E,E,C,K,G,C,I,E,I,U,C,E,E,C,C,G,E,G,C,I,G,C,C,E,C,E,C,C,C,C,I,A,K,C,qD,C,C,A,G,C,E,a,C,G,E,C,E,C,A,K,C,sC,C,C,A,I,I,E,C,A,C,A,C,C,E,C,C,E,C,C,C,A,C,C,E,C,E,C,A,A,C,C,C,C,C,E,E,C,A,C,E,A,C,E,A,G,C,A,O,C,C,C,A,C,C,W,C,E,O,A,C,C,C,C,C,A,C,C,E,E,C,K,G,C,I,E,I,U,C,E,E,C,C,G,E,G,K,G,C,C,E,C,E,C,C,C,C,I,A,K,C,qD,C,C,A,G,C,E,a,C,G,E,C,E,C,A,K,C,sC,C,C,A,I,I,E,C,A,C,A,C,C,E,C,C,E,A,E,C,C,A,C,E,C,A,C,A,C,C,C,C,E,E,C,A,C,E,A,C,E,A,G,C,A,O,C,C,C,A,C,C,a,C,E,O,A,C,C,C,E,E,K,C,I,G,K,G,C,C,A,I,A,Q,C,E,G,G,C,E,G,O,C,E,G,O,C,C,A,U,C,E,C,C,E,A,C,C,W,C,E,O,A,C,C,C,E,E,K,C,I,G,C,I,E,C,E,A,I,A,Q,C,E,G,G,C,E,G,O,C,E,G,O,C,C,A,U,C,G,E,C,A,C,A,C,C,A,a,C,E,O,A,C,C,C,E,E,K,C,I,G,C,I,G,C,C,A,I,A,Q,C,E,G,G,C,E,G,O,C,E,G,O,C,C,A,U,C,E,C,C,E,A,C,C,W,C,E,O,A,C,C,C,E,E,K,C,I,G,C,I,G,C,C,A,I,A,Q,C,E,G,G,C,E,G,O,C,E,G,O,C,C,A,U,C,G,E,C,A,C,A,C,C,A,c,C,E,O,A,C,C,C,C,C,E,C,M,A,K,G,K,E,I,U,C,E,C,C,K,G,C,I,G,C,C,A,I,A,Q,C,E,C,K,C,E,C,S,C,E,C,S,C,C,A,U,C,E,G,C,A,C,A,C,A,A,C,A,C,c,C,E,O,A,C,C,C,C,C,E,C,M,A,K,G,C,I,E,I,U,C,E,C,C,K,G,C,G,I,C,C,A,I,A,Q,C,E,C,K,C,E,C,S,C,E,C,S,C,C,A,U,C,E,G,C,C,C,C,A,C,A,C,A,A,C,C,c,C,E,O,A,C,C,C,C,C,E,C,M,A,K,G,C,G,G,I,U,C,E,C,C,K,G,C,I,G,C,C,A,I,A,Q,C,E,C,K,C,E,C,S,C,E,C,S,C,C,A,U,C,E,G,C,A,C,A,C,A,A,C,A,C,c,C,E,O,A,C,C,C,C,C,E,C,M,A,K,G,C,I,E,I,U,C,E,C,C,K,G,C,G,I,C,C,A,I,A,Q,C,E,C,K,C,E,C,S,C,E,C,S,C,C,A,U,C,E,G,C,C,C,C,A,C,A,C,A,C,iL,I,E,E,C,C,G,K,E,E,C,C,K,E,E,E,C,C,G,K,S,E,C,C,E,E,G,gB,E,O,E,E,S,C,E,C,A,E,C,C,C,gB,C,I,E,kB,C,C,C,A,W,C,E,E,Q,I,C,E,O,A,E,E,E,M,W,E,I,E,C,C,C,C,G,C,C,A,C,A,C,C,C,C,Y,A,E,G,A,C,C,I,C,E,E,I,A,E,G,A,C,A,C,A,C,G,C,A,E,U,sD,C,A,S,E,C,C,E,C,C,E,C,C,A,mB,E,G,E,K,C,C,C,C,C,K,A,K,C,mC,C,C,A,G,E,K,C,C,G,C,C,K,A,K,C,kC,C,C,A,I,E,C,C,C,A,E,E,I,C,C,C,A,E,G,C,C,E,C,E,K,C,C,A,C,A,E,C,A,I,E,C,C,I,C,I,A,C,G,C,E,G,C,E,C,A,C,A,C,C,I,C,C,C,C,C,C,E,C,K,E,E,C,C,C,C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","ignoreList":[0,2,3,4,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35]}