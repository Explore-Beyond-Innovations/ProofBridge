{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///C:/code_base/hackathons/ProofBridge/apps/frontend/proof-bridge/components/shared/AntConfigProvider.tsx"],"sourcesContent":["\"use client\"\r\nimport React from \"react\"\r\nimport { ConfigProvider, theme } from \"antd\"\r\nimport { AntdRegistry } from \"@ant-design/nextjs-registry\"\r\n\r\nexport const AntConfigProvider = ({\r\n  children,\r\n}: {\r\n  children: React.ReactNode\r\n}) => {\r\n  return (\r\n    <AntdRegistry>\r\n      <ConfigProvider\r\n        theme={{\r\n          token: {\r\n            colorPrimary: \"#c3ff49\",\r\n            fontFamily: \"var(--font-sequel-sans)\",\r\n            colorText: \"#fdfdff\",\r\n          },\r\n          algorithm: theme.darkAlgorithm,\r\n          components: {\r\n            Button: { primaryColor: \"#0b090a\" },\r\n            Input: { colorBgContainer: \"transparent\" },\r\n            DatePicker: { colorBgContainer: \"transparent\" },\r\n          },\r\n        }}\r\n      >\r\n        {children}\r\n      </ConfigProvider>\r\n    </AntdRegistry>\r\n  )\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;AAAA;AACA;AAAA;AAHA;;;;AAKO,MAAM,oBAAoB,CAAC,EAChC,QAAQ,EAGT;IACC,qBACE,6WAAC,0UAAY;kBACX,cAAA,6WAAC,uVAAc;YACb,OAAO;gBACL,OAAO;oBACL,cAAc;oBACd,YAAY;oBACZ,WAAW;gBACb;gBACA,WAAW,wSAAK,CAAC,aAAa;gBAC9B,YAAY;oBACV,QAAQ;wBAAE,cAAc;oBAAU;oBAClC,OAAO;wBAAE,kBAAkB;oBAAc;oBACzC,YAAY;wBAAE,kBAAkB;oBAAc;gBAChD;YACF;sBAEC;;;;;;;;;;;AAIT","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///C:/code_base/hackathons/ProofBridge/apps/frontend/proof-bridge/components/providers/TanstackProvider.tsx"],"sourcesContent":["\"use client\"\r\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\"\r\n\r\nimport React from \"react\"\r\n\r\nconst client = new QueryClient()\r\n\r\nexport const TanstackQueryProvider = ({\r\n  children,\r\n}: {\r\n  children?: React.ReactNode\r\n}) => {\r\n  return <QueryClientProvider client={client}>{children}</QueryClientProvider>\r\n}\r\n"],"names":[],"mappings":";;;;;AACA;AAAA;AADA;;;AAKA,MAAM,SAAS,IAAI,qQAAW;AAEvB,MAAM,wBAAwB,CAAC,EACpC,QAAQ,EAGT;IACC,qBAAO,6WAAC,6SAAmB;QAAC,QAAQ;kBAAS;;;;;;AAC/C","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///C:/code_base/hackathons/ProofBridge/apps/frontend/proof-bridge/utils/wagmi-config.ts"],"sourcesContent":["import { createConfig } from \"wagmi\"\r\nimport { hederaTestnet, sepolia } from \"viem/chains\"\r\nimport { http } from \"viem\"\r\n\r\nexport const config = createConfig({\r\n  chains: [hederaTestnet, sepolia],\r\n\r\n  transports: {\r\n    [hederaTestnet.id]: http(),\r\n    [sepolia.id]: http(),\r\n  },\r\n})\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;AACA;;;;AAEO,MAAM,SAAS,IAAA,wRAAY,EAAC;IACjC,QAAQ;QAAC,mSAAa;QAAE,uRAAO;KAAC;IAEhC,YAAY;QACV,CAAC,mSAAa,CAAC,EAAE,CAAC,EAAE,IAAA,iRAAI;QACxB,CAAC,uRAAO,CAAC,EAAE,CAAC,EAAE,IAAA,iRAAI;IACpB;AACF","debugId":null}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///C:/code_base/hackathons/ProofBridge/apps/frontend/proof-bridge/components/providers/Wagmi.tsx"],"sourcesContent":["\"use client\"\r\nimport { config } from \"@/utils/wagmi-config\"\r\nimport React from \"react\"\r\nimport { WagmiProvider } from \"wagmi\"\r\n\r\nexport const Wagmi = ({ children }: { children?: React.ReactNode }) => {\r\n  return <WagmiProvider config={config}>{children}</WagmiProvider>\r\n}\r\n"],"names":[],"mappings":";;;;;AACA;AAEA;AAHA;;;;AAKO,MAAM,QAAQ,CAAC,EAAE,QAAQ,EAAkC;IAChE,qBAAO,6WAAC,yQAAa;QAAC,QAAQ,yKAAM;kBAAG;;;;;;AACzC","debugId":null}},
    {"offset": {"line": 238, "column": 0}, "map": {"version":3,"sources":["file:///C:/code_base/hackathons/ProofBridge/apps/frontend/proof-bridge/components/providers/RainbowKit.tsx"],"sourcesContent":["\"use client\"\r\nimport {\r\n  createAuthenticationAdapter,\r\n  darkTheme,\r\n  RainbowKitAuthenticationProvider,\r\n  RainbowKitProvider,\r\n} from \"@rainbow-me/rainbowkit\"\r\nimport React, { useMemo } from \"react\"\r\nimport { SiweMessage } from \"siwe\"\r\nimport { useAccount } from \"wagmi\"\r\nimport Cookies from \"js-cookie\"\r\n\r\nfunction useAuthenticationAdapter() {\r\n  // If the user is logged in but the account is different (e.g. they changed account in Metamask), log them out and reload the page.\r\n  const account = useAccount()\r\n\r\n  return useMemo(() => {\r\n    return createAuthenticationAdapter({\r\n      getNonce: async () => {\r\n        const res = await fetch(\r\n          \"https://proofbridge.onrender.com/v1/auth/challenge\",\r\n          {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n              address: account.address,\r\n            }),\r\n          }\r\n        )\r\n        const data = await res.json()\r\n        return data.nonce\r\n      },\r\n      createMessage: ({ nonce, address, chainId }) => {\r\n        return new SiweMessage({\r\n          domain: \"proof-bridge.vercel.app\",\r\n          address,\r\n          statement: \"Sign in with Ethereum to the app.\",\r\n          uri: \"https://proof-bridge.vercel.app\",\r\n          version: \"1\",\r\n          chainId,\r\n          nonce,\r\n        }).prepareMessage()\r\n      },\r\n\r\n      verify: async ({ message, signature }) => {\r\n        const loginRes = await fetch(\r\n          \"https://proofbridge.onrender.com/v1/auth/login\",\r\n          {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ message, signature }),\r\n          }\r\n        )\r\n        const data = await loginRes.json()\r\n        Cookies.set(\"auth_token\", data.tokens.access)\r\n        Cookies.set(\"refresh_token\", data.tokens.refresh)\r\n        window.location.reload()\r\n        return Boolean(loginRes.ok)\r\n      },\r\n      signOut: async () => {\r\n        // await fetch(\"/api/logout\")\r\n        Cookies.remove(\"auth_token\")\r\n        Cookies.remove(\"refresh_token\")\r\n        window.location.reload()\r\n      },\r\n    })\r\n  }, [account])\r\n}\r\n\r\nexport const RainbowKit = ({ children }: { children: React.ReactNode }) => {\r\n  const adapter = useAuthenticationAdapter()\r\n  const token = Cookies.get(\"auth_token\")\r\n\r\n  return (\r\n    <RainbowKitAuthenticationProvider\r\n      adapter={adapter}\r\n      status={token ? \"authenticated\" : \"unauthenticated\"}\r\n    >\r\n      <RainbowKitProvider\r\n        theme={darkTheme({\r\n          accentColor: \"#c3ff49\",\r\n          accentColorForeground: \"#000\",\r\n        })}\r\n      >\r\n        {children}\r\n      </RainbowKitProvider>\r\n    </RainbowKitAuthenticationProvider>\r\n  )\r\n}\r\n"],"names":[],"mappings":";;;;;AACA;AAAA;AAMA;AACA;AACA;AACA;AAVA;;;;;;;AAYA,SAAS;IACP,mIAAmI;IACnI,MAAM,UAAU,IAAA,kRAAU;IAE1B,OAAO,IAAA,+UAAO,EAAC;QACb,OAAO,IAAA,uTAA2B,EAAC;YACjC,UAAU;gBACR,MAAM,MAAM,MAAM,MAChB,sDACA;oBACE,QAAQ;oBACR,SAAS;wBAAE,gBAAgB;oBAAmB;oBAC9C,MAAM,KAAK,SAAS,CAAC;wBACnB,SAAS,QAAQ,OAAO;oBAC1B;gBACF;gBAEF,MAAM,OAAO,MAAM,IAAI,IAAI;gBAC3B,OAAO,KAAK,KAAK;YACnB;YACA,eAAe,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE;gBACzC,OAAO,IAAI,+PAAW,CAAC;oBACrB,QAAQ;oBACR;oBACA,WAAW;oBACX,KAAK;oBACL,SAAS;oBACT;oBACA;gBACF,GAAG,cAAc;YACnB;YAEA,QAAQ,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE;gBACnC,MAAM,WAAW,MAAM,MACrB,kDACA;oBACE,QAAQ;oBACR,SAAS;wBAAE,gBAAgB;oBAAmB;oBAC9C,MAAM,KAAK,SAAS,CAAC;wBAAE;wBAAS;oBAAU;gBAC5C;gBAEF,MAAM,OAAO,MAAM,SAAS,IAAI;gBAChC,yNAAO,CAAC,GAAG,CAAC,cAAc,KAAK,MAAM,CAAC,MAAM;gBAC5C,yNAAO,CAAC,GAAG,CAAC,iBAAiB,KAAK,MAAM,CAAC,OAAO;gBAChD,OAAO,QAAQ,CAAC,MAAM;gBACtB,OAAO,QAAQ,SAAS,EAAE;YAC5B;YACA,SAAS;gBACP,6BAA6B;gBAC7B,yNAAO,CAAC,MAAM,CAAC;gBACf,yNAAO,CAAC,MAAM,CAAC;gBACf,OAAO,QAAQ,CAAC,MAAM;YACxB;QACF;IACF,GAAG;QAAC;KAAQ;AACd;AAEO,MAAM,aAAa,CAAC,EAAE,QAAQ,EAAiC;IACpE,MAAM,UAAU;IAChB,MAAM,QAAQ,yNAAO,CAAC,GAAG,CAAC;IAE1B,qBACE,6WAAC,4TAAgC;QAC/B,SAAS;QACT,QAAQ,QAAQ,kBAAkB;kBAElC,cAAA,6WAAC,8SAAkB;YACjB,OAAO,IAAA,iSAAS,EAAC;gBACf,aAAa;gBACb,uBAAuB;YACzB;sBAEC;;;;;;;;;;;AAIT","debugId":null}},
    {"offset": {"line": 340, "column": 0}, "map": {"version":3,"sources":["file:///C:/code_base/hackathons/ProofBridge/apps/frontend/proof-bridge/components/ui/sonner.tsx"],"sourcesContent":["\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, ToasterProps } from \"sonner\"\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={\"dark\"}\n      className=\"toaster group\"\n      style={\n        {\n          \"--normal-bg\": \"var(--popover)\",\n          \"--normal-text\": \"var(--popover-foreground)\",\n          \"--normal-border\": \"var(--border)\",\n        } as React.CSSProperties\n      }\n      toastOptions={{\n        classNames: {\n          error: \"!bg-red-500 !text-white !border-none\",\n          success: \"!bg-primary !border-none\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAHA;;;;AAKA,MAAM,UAAU,CAAC,EAAE,GAAG,OAAqB;IACzC,MAAM,EAAE,QAAQ,QAAQ,EAAE,GAAG,IAAA,qQAAQ;IAErC,qBACE,6WAAC,mRAAM;QACL,OAAO;QACP,WAAU;QACV,OACE;YACE,eAAe;YACf,iBAAiB;YACjB,mBAAmB;QACrB;QAEF,cAAc;YACZ,YAAY;gBACV,OAAO;gBACP,SAAS;YACX;QACF;QACC,GAAG,KAAK;;;;;;AAGf","debugId":null}}]
}