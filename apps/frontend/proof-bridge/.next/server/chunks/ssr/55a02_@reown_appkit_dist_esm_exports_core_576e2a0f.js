module.exports=[144070,a=>{"use strict";a.s(["AppKit",()=>av,"createAppKit",()=>aw],144070),a.s(["createAppKit",()=>aw],430358);var b=a.i(473404),c=a.i(397417),d=a.i(29173),e=a.i(239118),f=a.i(691447),g=a.i(728407),h=a.i(428431),i=a.i(425156);let j={validateCaipAddress(a){if(a.split(":")?.length!==3)throw Error("Invalid CAIP Address");return a},parseCaipAddress(a){let b=a.split(":");if(3!==b.length)throw Error(`Invalid CAIP-10 address: ${a}`);let[c,d,e]=b;if(!c||!d||!e)throw Error(`Invalid CAIP-10 address: ${a}`);return{chainNamespace:c,chainId:d,address:e}},parseCaipNetworkId(a){let b=a.split(":");if(2!==b.length)throw Error(`Invalid CAIP-2 network id: ${a}`);let[c,d]=b;if(!c||!d)throw Error(`Invalid CAIP-2 network id: ${a}`);return{chainNamespace:c,chainId:d}}};var k=a.i(875252),l=a.i(305492),m=a.i(727445),n=a.i(331308),o=a.i(405184),p=a.i(231019),q=a.i(371818),r=a.i(448232);let s={convertEVMChainIdToCoinType(a){if(a>=0x80000000)throw Error("Invalid chainId");return(0x80000000|a)>>>0}};var t=a.i(675708),u=a.i(458889),v=a.i(440223);let w=(0,q.proxy)({suggestions:[],loading:!1}),x=(0,u.withErrorBoundary)({state:w,subscribe:a=>(0,q.subscribe)(w,()=>a(w)),subscribeKey:(a,b)=>(0,r.subscribeKey)(w,a,b),async resolveName(a){try{return await n.BlockchainApiController.lookupEnsName(a)}catch(a){throw Error(a?.reasons?.[0]?.description||"Error resolving name")}},async isNameRegistered(a){try{return await n.BlockchainApiController.lookupEnsName(a),!0}catch{return!1}},async getSuggestions(a){try{return w.loading=!0,w.suggestions=[],w.suggestions=(await n.BlockchainApiController.getEnsNameSuggestions(a)).suggestions.map(a=>({...a,name:a.name}))||[],w.suggestions}catch(a){throw Error(x.parseEnsApiError(a,"Error fetching name suggestions"))}finally{w.loading=!1}},async getNamesForAddress(a){try{if(!o.ChainController.state.activeCaipNetwork)return[];let b=t.StorageUtil.getEnsFromCacheForAddress(a);if(b)return b;let c=await n.BlockchainApiController.reverseLookupEnsName({address:a});return t.StorageUtil.updateEnsCache({address:a,ens:c,timestamp:Date.now()}),c}catch(a){throw Error(x.parseEnsApiError(a,"Error fetching names for address"))}},async registerName(a){let e=o.ChainController.state.activeCaipNetwork;if(!e)throw Error("Network not found");let f=b.AccountController.state.address,g=d.ConnectorController.getAuthConnector();if(!f||!g)throw Error("Address or auth connector not found");w.loading=!0;try{let d=JSON.stringify({name:a,attributes:{},timestamp:Math.floor(Date.now()/1e3)});v.RouterController.pushTransactionStack({onCancel(){v.RouterController.replace("RegisterAccountName")}});let g=await c.ConnectionController.signMessage(d);w.loading=!1;let h=e.id;if(!h)throw Error("Network not found");let i=s.convertEVMChainIdToCoinType(Number(h));await n.BlockchainApiController.registerEnsName({coinType:i,address:f,signature:g,message:d}),b.AccountController.setProfileName(a,e.chainNamespace),v.RouterController.replace("RegisterAccountNameSuccess")}catch(c){let b=x.parseEnsApiError(c,`Error registering name ${a}`);throw v.RouterController.replace("RegisterAccountName"),Error(b)}finally{w.loading=!1}},validateName:a=>/^[a-zA-Z0-9-]{4,}$/u.test(a),parseEnsApiError:(a,b)=>a?.reasons?.[0]?.description||b});var y=a.i(811719),z=a.i(979573);let A={id:"2b92315d-eab7-5bef-84fa-089a131333f5",name:"USD Coin",symbol:"USDC",networks:[{name:"ethereum-mainnet",display_name:"Ethereum",chain_id:"1",contract_address:"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"},{name:"polygon-mainnet",display_name:"Polygon",chain_id:"137",contract_address:"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"}]},B={id:"USD",payment_method_limits:[{id:"card",min:"10.00",max:"7500.00"},{id:"ach_bank_account",min:"10.00",max:"25000.00"}]},C={providers:p.ONRAMP_PROVIDERS,selectedProvider:null,error:null,purchaseCurrency:A,paymentCurrency:B,purchaseCurrencies:[A],paymentCurrencies:[],quotesLoading:!1},D=(0,q.proxy)(C),E=(0,u.withErrorBoundary)({state:D,subscribe:a=>(0,q.subscribe)(D,()=>a(D)),subscribeKey:(a,b)=>(0,r.subscribeKey)(D,a,b),setSelectedProvider(a){if(a&&"meld"===a.name){let c=o.ChainController.state.activeChain===h.ConstantsUtil.CHAIN.SOLANA?"SOL":"USDC",d=b.AccountController.state.address??"",e=new URL(a.url);e.searchParams.append("publicKey",p.MELD_PUBLIC_KEY),e.searchParams.append("destinationCurrencyCode",c),e.searchParams.append("walletAddress",d),e.searchParams.append("externalCustomerId",f.OptionsController.state.projectId),D.selectedProvider={...a,url:e.toString()}}else D.selectedProvider=a},setOnrampProviders(a){Array.isArray(a)&&a.every(a=>"string"==typeof a)?D.providers=p.ONRAMP_PROVIDERS.filter(b=>a.includes(b.name)):D.providers=[]},setPurchaseCurrency(a){D.purchaseCurrency=a},setPaymentCurrency(a){D.paymentCurrency=a},setPurchaseAmount(a){E.state.purchaseAmount=a},setPaymentAmount(a){E.state.paymentAmount=a},async getAvailableCurrencies(){let a=await n.BlockchainApiController.getOnrampOptions();D.purchaseCurrencies=a.purchaseCurrencies,D.paymentCurrencies=a.paymentCurrencies,D.paymentCurrency=a.paymentCurrencies[0]||B,D.purchaseCurrency=a.purchaseCurrencies[0]||A,await l.ApiController.fetchCurrencyImages(a.paymentCurrencies.map(a=>a.id)),await l.ApiController.fetchTokenImages(a.purchaseCurrencies.map(a=>a.symbol))},async getQuote(){D.quotesLoading=!0;try{let a=await n.BlockchainApiController.getOnrampQuote({purchaseCurrency:D.purchaseCurrency,paymentCurrency:D.paymentCurrency,amount:D.paymentAmount?.toString()||"0",network:D.purchaseCurrency?.symbol});return D.quotesLoading=!1,D.purchaseAmount=Number(a?.purchaseAmount.amount),a}catch(a){return D.error=a.message,D.quotesLoading=!1,null}finally{D.quotesLoading=!1}},resetState(){D.selectedProvider=null,D.error=null,D.purchaseCurrency=A,D.paymentCurrency=B,D.purchaseCurrencies=[A],D.paymentCurrencies=[],D.paymentAmount=void 0,D.purchaseAmount=void 0,D.quotesLoading=!1}});var F=a.i(959971),G=a.i(295071),H=a.i(343760),I=a.i(442198),J=a.i(359266);function K(a,b){return d.ConnectorController.getConnectorId(a)===b}a.i(107877),a.i(337409);var L=a.i(28459);a.i(24470);var M=a.i(275019),N=a.i(548888),O=a.i(816527),P=a.i(696370),Q=a.i(175774);function R(a,b={}){let{key:c="fallback",name:d="Fallback",rank:e=!1,shouldThrow:f=S,retryCount:g,retryDelay:h}=b;return({chain:b,pollingInterval:i=4e3,timeout:j,...k})=>{let l=a,m=()=>{},n=(0,Q.createTransport)({key:c,name:d,async request({method:a,params:c}){let d,e=async(g=0)=>{let h=l[g]({...k,chain:b,retryCount:0,timeout:j});try{let b=await h.request({method:a,params:c});return m({method:a,params:c,response:b,transport:h,status:"success"}),b}catch(i){if(m({error:i,method:a,params:c,transport:h,status:"error"}),f(i)||g===l.length-1||!(d??=l.slice(g+1).some(c=>{let{include:d,exclude:e}=c({chain:b}).config.methods||{};return d?d.includes(a):!e||!e.includes(a)})))throw i;return e(g+1)}};return e()},retryCount:g,retryDelay:h,type:"fallback"},{onResponse:a=>m=a,transports:l.map(a=>a({chain:b,retryCount:0}))});if(e){let a="object"==typeof e?e:{};!function({chain:a,interval:b=4e3,onTransports:c,ping:d,sampleCount:e=10,timeout:f=1e3,transports:g,weights:h={}}){let{stability:i=.7,latency:j=.3}=h,k=[],l=async()=>{let h=await Promise.all(g.map(async b=>{let c,e,g=b({chain:a,retryCount:0,timeout:f}),h=Date.now();try{await (d?d({transport:g}):g.request({method:"net_listening"})),e=1}catch{e=0}finally{c=Date.now()}return{latency:c-h,success:e}}));k.push(h),k.length>e&&k.shift();let m=Math.max(...k.map(a=>Math.max(...a.map(({latency:a})=>a))));c(g.map((a,b)=>{let c=k.map(a=>a[b].latency),d=c.reduce((a,b)=>a+b,0)/c.length,e=k.map(a=>a[b].success),f=e.reduce((a,b)=>a+b,0)/e.length;return 0===f?[0,b]:[j*(1-d/m)+i*f,b]}).sort((a,b)=>b[0]-a[0]).map(([,a])=>g[a])),await (0,P.wait)(b),l()};l()}({chain:b,interval:a.interval??i,onTransports:a=>l=a,ping:a.ping,sampleCount:a.sampleCount,timeout:a.timeout,transports:l,weights:a.weights})}return n}}function S(a){return!!("code"in a&&"number"==typeof a.code&&(a.code===O.TransactionRejectedRpcError.code||a.code===O.UserRejectedRequestError.code||N.ExecutionRevertedError.nodeMessage.test(a.message)||5e3===a.code))}var T=a.i(56686),U=a.i(316589);let V={ConnectorExplorerIds:{[h.ConstantsUtil.CONNECTOR_ID.COINBASE]:"fd20dc426fb37566d803205b19bbc1d4096b248ac04548e3cfb6b3a38bd033aa",[h.ConstantsUtil.CONNECTOR_ID.COINBASE_SDK]:"fd20dc426fb37566d803205b19bbc1d4096b248ac04548e3cfb6b3a38bd033aa",[h.ConstantsUtil.CONNECTOR_ID.SAFE]:"225affb176778569276e484e1b92637ad061b01e13a048b35a9d280c3b58970f",[h.ConstantsUtil.CONNECTOR_ID.LEDGER]:"19177a98252e07ddfc9af2083ba8e07ef627cb6103467ffebb3f8f4205fd7927",[h.ConstantsUtil.CONNECTOR_ID.OKX]:"971e689d0a5be527bac79629b4ee9b925e82208e5168b733496a09c0faed0709",[U.ConstantsUtil.METMASK_CONNECTOR_NAME]:"c57ca95b47569778a828d19178114f4db188b89b763c899ba0be274e97267d96",[U.ConstantsUtil.TRUST_CONNECTOR_NAME]:"4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0",[U.ConstantsUtil.SOLFLARE_CONNECTOR_NAME]:"1ca0bdd4747578705b1939af023d120677c64fe6ca76add81fda36e350605e79",[U.ConstantsUtil.PHANTOM_CONNECTOR_NAME]:"a797aa35c0fadbfc1a53e7f675162ed5226968b44a19ee3d24385c64d1d3c393",[U.ConstantsUtil.COIN98_CONNECTOR_NAME]:"2a3c89040ac3b723a1972a33a125b1db11e258a6975d3a61252cd64e6ea5ea01",[U.ConstantsUtil.MAGIC_EDEN_CONNECTOR_NAME]:"8b830a2b724a9c3fbab63af6f55ed29c9dfa8a55e732dc88c80a196a2ba136c6",[U.ConstantsUtil.BACKPACK_CONNECTOR_NAME]:"2bd8c14e035c2d48f184aaa168559e86b0e3433228d3c4075900a221785019b0",[U.ConstantsUtil.BITGET_CONNECTOR_NAME]:"38f5d18bd8522c244bdd70cb4a68e0e718865155811c043f052fb9f1c51de662",[U.ConstantsUtil.FRONTIER_CONNECTOR_NAME]:"85db431492aa2e8672e93f4ea7acf10c88b97b867b0d373107af63dc4880f041",[U.ConstantsUtil.XVERSE_CONNECTOR_NAME]:"2a87d74ae02e10bdd1f51f7ce6c4e1cc53cd5f2c0b6b5ad0d7b3007d2b13de7b",[U.ConstantsUtil.LEATHER_CONNECTOR_NAME]:"483afe1df1df63daf313109971ff3ef8356ddf1cc4e45877d205eee0b7893a13"},NetworkImageIds:{1:"ba0ba0cd-17c6-4806-ad93-f9d174f17900",42161:"3bff954d-5cb0-47a0-9a23-d20192e74600",43114:"30c46e53-e989-45fb-4549-be3bd4eb3b00",56:"93564157-2e8e-4ce7-81df-b264dbee9b00",250:"06b26297-fe0c-4733-5d6b-ffa5498aac00",10:"ab9c186a-c52f-464b-2906-ca59d760a400",137:"41d04d42-da3b-4453-8506-668cc0727900",5e3:"e86fae9b-b770-4eea-e520-150e12c81100",295:"6a97d510-cac8-4e58-c7ce-e8681b044c00",0xaa36a7:"e909ea0a-f92a-4512-c8fc-748044ea6800",84532:"a18a7ecd-e307-4360-4746-283182228e00",1301:"4eeea7ef-0014-4649-5d1d-07271a80f600",130:"2257980a-3463-48c6-cbac-a42d2a956e00",10143:"0a728e83-bacb-46db-7844-948f05434900",100:"02b53f6a-e3d4-479e-1cb4-21178987d100",9001:"f926ff41-260d-4028-635e-91913fc28e00",324:"b310f07f-4ef7-49f3-7073-2a0a39685800",314:"5a73b3dd-af74-424e-cae0-0de859ee9400",4689:"34e68754-e536-40da-c153-6ef2e7188a00",1088:"3897a66d-40b9-4833-162f-a2c90531c900",1284:"161038da-44ae-4ec7-1208-0ea569454b00",1285:"f1d73bb6-5450-4e18-38f7-fb6484264a00",7777777:"845c60df-d429-4991-e687-91ae45791600",42220:"ab781bbc-ccc6-418d-d32d-789b15da1f00",8453:"7289c336-3981-4081-c5f4-efc26ac64a00",0x4e454152:"3ff73439-a619-4894-9262-4470c773a100",2020:"b8101fc0-9c19-4b6f-ec65-f6dfff106e00",2021:"b8101fc0-9c19-4b6f-ec65-f6dfff106e00",80094:"e329c2c9-59b0-4a02-83e4-212ff3779900",2741:"fc2427d1-5af9-4a9c-8da5-6f94627cd900","5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp":"a1b58899-f671-4276-6a5e-56ca5bd59700","4uhcVJyU9pJkvQyS88uRDiswHXSCkY3z":"a1b58899-f671-4276-6a5e-56ca5bd59700",EtWTRABZaYq6iMfeYKouRu166VU2xqa1:"a1b58899-f671-4276-6a5e-56ca5bd59700","000000000019d6689c085ae165831e93":"0b4838db-0161-4ffe-022d-532bf03dba00","000000000933ea01ad0ee984209779ba":"39354064-d79b-420b-065d-f980c4b78200"},ConnectorImageIds:{[h.ConstantsUtil.CONNECTOR_ID.COINBASE]:"0c2840c3-5b04-4c44-9661-fbd4b49e1800",[h.ConstantsUtil.CONNECTOR_ID.COINBASE_SDK]:"0c2840c3-5b04-4c44-9661-fbd4b49e1800",[h.ConstantsUtil.CONNECTOR_ID.SAFE]:"461db637-8616-43ce-035a-d89b8a1d5800",[h.ConstantsUtil.CONNECTOR_ID.LEDGER]:"54a1aa77-d202-4f8d-0fb2-5d2bb6db0300",[h.ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT]:"ef1a1fcf-7fe8-4d69-bd6d-fda1345b4400",[h.ConstantsUtil.CONNECTOR_ID.INJECTED]:"07ba87ed-43aa-4adf-4540-9e6a2b9cae00"},ConnectorNamesMap:{[h.ConstantsUtil.CONNECTOR_ID.INJECTED]:"Browser Wallet",[h.ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT]:"WalletConnect",[h.ConstantsUtil.CONNECTOR_ID.COINBASE]:"Coinbase",[h.ConstantsUtil.CONNECTOR_ID.COINBASE_SDK]:"Coinbase",[h.ConstantsUtil.CONNECTOR_ID.LEDGER]:"Ledger",[h.ConstantsUtil.CONNECTOR_ID.SAFE]:"Safe"},ConnectorTypesMap:{[h.ConstantsUtil.CONNECTOR_ID.INJECTED]:"INJECTED",[h.ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT]:"WALLET_CONNECT",[h.ConstantsUtil.CONNECTOR_ID.EIP6963]:"ANNOUNCED",[h.ConstantsUtil.CONNECTOR_ID.AUTH]:"AUTH"},WalletConnectRpcChainIds:[1,5,0xaa36a7,10,420,42161,421613,137,80001,42220,0x4e454152,0x4e454153,56,97,43114,43113,100,8453,84531,7777777,999,324,280]};function W(a,b){let c=new URL("https://rpc.walletconnect.org/v1/");return c.searchParams.set("chainId",a),c.searchParams.set("projectId",b),c.toString()}let X=["near:mainnet","solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp","eip155:1101","eip155:56","eip155:42161","eip155:7777777","eip155:59144","eip155:324","solana:EtWTRABZaYq6iMfeYKouRu166VU2xqa1","eip155:5000","solana:4sgjmw1sunhzsxgspuhpqldx6wiyjntz","eip155:80084","eip155:5003","eip155:100","eip155:8453","eip155:42220","eip155:1313161555","eip155:17000","eip155:1","eip155:300","eip155:1313161554","eip155:1329","eip155:84532","eip155:421614","eip155:11155111","eip155:8217","eip155:43114","solana:4uhcVJyU9pJkvQyS88uRDiswHXSCkY3z","eip155:999999999","eip155:11155420","eip155:80002","eip155:97","eip155:43113","eip155:137","eip155:10","eip155:1301","bip122:000000000019d6689c085ae165831e93","bip122:000000000933ea01ad0ee984209779ba"],Y={extendRpcUrlWithProjectId(a,b){let c=!1;try{c="rpc.walletconnect.org"===new URL(a).host}catch(a){c=!1}if(c){let c=new URL(a);return c.searchParams.has("projectId")||c.searchParams.set("projectId",b),c.toString()}return a},isCaipNetwork:a=>"chainNamespace"in a&&"caipNetworkId"in a,getChainNamespace(a){return this.isCaipNetwork(a)?a.chainNamespace:h.ConstantsUtil.CHAIN.EVM},getCaipNetworkId(a){return this.isCaipNetwork(a)?a.caipNetworkId:`${h.ConstantsUtil.CHAIN.EVM}:${a.id}`},getDefaultRpcUrl(a,b,c){let d=a.rpcUrls?.default?.http?.[0];return X.includes(b)?W(b,c):d||""},extendCaipNetwork(a,{customNetworkImageUrls:b,projectId:c,customRpcUrls:d}){let e=this.getChainNamespace(a),f=this.getCaipNetworkId(a),g=a.rpcUrls.default.http?.[0],h=this.getDefaultRpcUrl(a,f,c),i=a?.rpcUrls?.chainDefault?.http?.[0]||g,j=d?.[f]?.map(a=>a.url)||[],k=[...j,h],l=[...j];return i&&!l.includes(i)&&l.push(i),{...a,chainNamespace:e,caipNetworkId:f,assets:{imageId:V.NetworkImageIds[a.id],imageUrl:b?.[a.id]},rpcUrls:{...a.rpcUrls,default:{http:k},chainDefault:{http:l}}}},extendCaipNetworks:(a,{customNetworkImageUrls:b,projectId:c,customRpcUrls:d})=>a.map(a=>Y.extendCaipNetwork(a,{customNetworkImageUrls:b,customRpcUrls:d,projectId:c})),getViemTransport(a,b,c){let d=[];return c?.forEach(a=>{d.push((0,T.http)(a.url,a.config))}),X.includes(a.caipNetworkId)&&d.push((0,T.http)(W(a.caipNetworkId,b),{fetchOptions:{headers:{"Content-Type":"text/plain"}}})),a?.rpcUrls?.default?.http?.forEach(a=>{d.push((0,T.http)(a))}),R(d)},extendWagmiTransports(a,b,c){if(X.includes(a.caipNetworkId)){let d=this.getDefaultRpcUrl(a,a.caipNetworkId,b);return R([c,(0,T.http)(d)])}return c},getUnsupportedNetwork:a=>({id:a.split(":")[1],caipNetworkId:a,name:h.ConstantsUtil.UNSUPPORTED_NETWORK_NAME,chainNamespace:a.split(":")[0],nativeCurrency:{name:"",decimals:0,symbol:""},rpcUrls:{default:{http:[]}}}),getCaipNetworkFromStorage(a){let b=t.StorageUtil.getActiveCaipNetworkId(),c=o.ChainController.getAllRequestedCaipNetworks(),d=Array.from(o.ChainController.state.chains?.keys()||[]),e=b?.split(":")[0],f=!!e&&d.includes(e),g=c?.find(a=>a.caipNetworkId===b);return f&&!g&&b?this.getUnsupportedNetwork(b):g||a||c?.[0]}},Z=(new AbortController,{UniversalProviderErrors:{UNAUTHORIZED_DOMAIN_NOT_ALLOWED:{message:"Unauthorized: origin not allowed",alertErrorKey:"INVALID_APP_CONFIGURATION"},JWT_VALIDATION_ERROR:{message:"JWT validation error: JWT Token is not yet valid",alertErrorKey:"JWT_TOKEN_NOT_VALID"},INVALID_KEY:{message:"Unauthorized: invalid key",alertErrorKey:"INVALID_PROJECT_ID"}},ALERT_ERRORS:{SWITCH_NETWORK_NOT_FOUND:{shortMessage:"Network Not Found",longMessage:"Network not found - please make sure it is included in 'networks' array in createAppKit function"},INVALID_APP_CONFIGURATION:{shortMessage:"Invalid App Configuration",longMessage:()=>"Origin unknown not found on Allowlist - update configuration on cloud.reown.com"},IFRAME_LOAD_FAILED:{shortMessage:"Network Error - Could not load embedded wallet",longMessage:()=>"There was an issue loading the embedded wallet. Please try again later."},IFRAME_REQUEST_TIMEOUT:{shortMessage:"Embedded Wallet Request Timed Out",longMessage:()=>"There was an issue doing the request to the embedded wallet. Please try again later."},UNVERIFIED_DOMAIN:{shortMessage:"Invalid App Configuration",longMessage:()=>"There was an issue loading the embedded wallet. Please verify that your domain is allowed at cloud.reown.com"},JWT_TOKEN_NOT_VALID:{shortMessage:"Session Expired",longMessage:"Invalid session found on UniversalProvider - please check your time settings and connect again"},INVALID_PROJECT_ID:{shortMessage:"Invalid App Configuration",longMessage:"Invalid Project ID - update configuration"},PROJECT_ID_NOT_CONFIGURED:{shortMessage:"Project ID Not Configured",longMessage:"Project ID Not Configured - update configuration on cloud.reown.com"}}});var $=a.i(35068),_=a.i(513536);let aa={createLogger(a,b="error"){let c=(0,_.getDefaultLoggerOptions)({level:b}),{logger:d}=(0,_.generatePlatformLogger)({opts:c});return d.error=(...b)=>{for(let c of b)if(c instanceof Error)return void a(c,...b);a(void 0,...b)},d}},ab={eip155:void 0,solana:void 0,polkadot:void 0,bip122:void 0,cosmos:void 0},ac=(0,q.proxy)({providers:{...ab},providerIds:{...ab}}),ad={state:ac,subscribeKey:(a,b)=>(0,r.subscribeKey)(ac,a,b),subscribe:a=>(0,q.subscribe)(ac,()=>{a(ac)}),subscribeProviders:a=>(0,q.subscribe)(ac.providers,()=>a(ac.providers)),setProvider(a,b){b&&(ac.providers[a]=(0,q.ref)(b))},getProvider:a=>ac.providers[a],setProviderId(a,b){b&&(ac.providerIds[a]=b)},getProviderId(a){if(a)return ac.providerIds[a]},reset(){ac.providers={...ab},ac.providerIds={...ab}},resetChain(a){ac.providers[a]=void 0,ac.providerIds[a]=void 0}};var ae=a.i(403332),af=a.i(590923);let ag={ERROR_CODE_UNRECOGNIZED_CHAIN_ID:4902,ERROR_CODE_DEFAULT:5e3,ERROR_INVALID_CHAIN_ID:32603,DEFAULT_ALLOWED_ANCESTORS:["http://localhost:*","https://*.pages.dev","https://*.vercel.app","https://*.ngrok-free.app","https://secure-mobile.walletconnect.com","https://secure-mobile.walletconnect.org"]};function ah(a){return{formatters:void 0,fees:void 0,serializers:void 0,...a}}let ai=ah({id:"5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp",name:"Solana",network:"solana-mainnet",nativeCurrency:{name:"Solana",symbol:"SOL",decimals:9},rpcUrls:{default:{http:["https://rpc.walletconnect.org/v1"]}},blockExplorers:{default:{name:"Solscan",url:"https://solscan.io"}},testnet:!1,chainNamespace:"solana",caipNetworkId:"solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp",deprecatedCaipNetworkId:"solana:4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZ"}),aj=ah({id:"EtWTRABZaYq6iMfeYKouRu166VU2xqa1",name:"Solana Devnet",network:"solana-devnet",nativeCurrency:{name:"Solana",symbol:"SOL",decimals:9},rpcUrls:{default:{http:["https://rpc.walletconnect.org/v1"]}},blockExplorers:{default:{name:"Solscan",url:"https://solscan.io"}},testnet:!0,chainNamespace:"solana",caipNetworkId:"solana:EtWTRABZaYq6iMfeYKouRu166VU2xqa1",deprecatedCaipNetworkId:"solana:8E9rvCKLFQia2Y35HXjjpWzj8weVo44K"});ah({id:"4uhcVJyU9pJkvQyS88uRDiswHXSCkY3z",name:"Solana Testnet",network:"solana-testnet",nativeCurrency:{name:"Solana",symbol:"SOL",decimals:9},rpcUrls:{default:{http:["https://rpc.walletconnect.org/v1"]}},blockExplorers:{default:{name:"Solscan",url:"https://solscan.io"}},testnet:!0,chainNamespace:"solana",caipNetworkId:"solana:4uhcVJyU9pJkvQyS88uRDiswHXSCkY3z"}),ah({id:"000000000019d6689c085ae165831e93",caipNetworkId:"bip122:000000000019d6689c085ae165831e93",chainNamespace:"bip122",name:"Bitcoin",nativeCurrency:{name:"Bitcoin",symbol:"BTC",decimals:8},rpcUrls:{default:{http:["https://rpc.walletconnect.org/v1"]}}}),ah({id:"000000000933ea01ad0ee984209779ba",caipNetworkId:"bip122:000000000933ea01ad0ee984209779ba",chainNamespace:"bip122",name:"Bitcoin Testnet",nativeCurrency:{name:"Bitcoin",symbol:"BTC",decimals:8},rpcUrls:{default:{http:["https://rpc.walletconnect.org/v1"]}},testnet:!0});let ak={solana:["solana_signMessage","solana_signTransaction","solana_requestAccounts","solana_getAccounts","solana_signAllTransactions","solana_signAndSendTransaction"],eip155:["eth_accounts","eth_requestAccounts","eth_sendRawTransaction","eth_sign","eth_signTransaction","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","eth_sendTransaction","personal_sign","wallet_switchEthereumChain","wallet_addEthereumChain","wallet_getPermissions","wallet_requestPermissions","wallet_registerOnboarding","wallet_watchAsset","wallet_scanQRCode","wallet_getCallsStatus","wallet_showCallsStatus","wallet_sendCalls","wallet_getCapabilities","wallet_grantPermissions","wallet_revokePermissions","wallet_getAssets"],bip122:["sendTransfer","signMessage","signPsbt","getAccountAddresses"]},al={getMethodsByChainNamespace:a=>ak[a]||[],createDefaultNamespace(a){return{methods:this.getMethodsByChainNamespace(a),events:["accountsChanged","chainChanged"],chains:[],rpcMap:{}}},applyNamespaceOverrides(a,b){if(!b)return{...a};let c={...a},d=new Set;if(b.methods&&Object.keys(b.methods).forEach(a=>d.add(a)),b.chains&&Object.keys(b.chains).forEach(a=>d.add(a)),b.events&&Object.keys(b.events).forEach(a=>d.add(a)),b.rpcMap&&Object.keys(b.rpcMap).forEach(a=>{let[b]=a.split(":");b&&d.add(b)}),d.forEach(a=>{c[a]||(c[a]=this.createDefaultNamespace(a))}),b.methods&&Object.entries(b.methods).forEach(([a,b])=>{c[a]&&(c[a].methods=b)}),b.chains&&Object.entries(b.chains).forEach(([a,b])=>{c[a]&&(c[a].chains=b)}),b.events&&Object.entries(b.events).forEach(([a,b])=>{c[a]&&(c[a].events=b)}),b.rpcMap){let a=new Set;Object.entries(b.rpcMap).forEach(([b,d])=>{let[e,f]=b.split(":");e&&f&&c[e]&&(c[e].rpcMap||(c[e].rpcMap={}),a.has(e)||(c[e].rpcMap={},a.add(e)),c[e].rpcMap[f]=d)})}return c},createNamespaces(a,b){let c=a.reduce((a,b)=>{let{id:c,chainNamespace:d,rpcUrls:e}=b,f=e.default.http[0];a[d]||(a[d]=this.createDefaultNamespace(d));let g=`${d}:${c}`,h=a[d];switch(h.chains.push(g),g){case ai.caipNetworkId:h.chains.push(ai.deprecatedCaipNetworkId);break;case aj.caipNetworkId:h.chains.push(aj.deprecatedCaipNetworkId)}return h?.rpcMap&&f&&(h.rpcMap[c]=f),a},{});return this.applyNamespaceOverrides(c,b)},resolveReownName:async a=>{let b=await x.resolveName(a),c=Object.values(b?.addresses)||[];return c[0]?.address||!1},getChainsFromNamespaces:(a={})=>Object.values(a).flatMap(a=>Array.from(new Set([...a.chains||[],...a.accounts.map(a=>{let[b,c]=a.split(":");return`${b}:${c}`})]))),isSessionEventData:a=>"object"==typeof a&&null!==a&&"id"in a&&"topic"in a&&"params"in a&&"object"==typeof a.params&&null!==a.params&&"chainId"in a.params&&"event"in a.params&&"object"==typeof a.params.event&&null!==a.params.event,isOriginAllowed(a,b,c){for(let d of[...b,...c])if(d.includes("*")){let b=d.replace(/[.*+?^${}()|[\]\\]/gu,"\\$&");if(RegExp(`^${b.replace(/\\\*/gu,".*")}$`,"u").test(a))return!0}else try{if(new URL(d).origin===a)return!0}catch(b){if(d===a)return!0}return!1}};class am{constructor({provider:a,namespace:b}){this.id=h.ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT,this.name=V.ConnectorNamesMap[h.ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT],this.type="WALLET_CONNECT",this.imageId=V.ConnectorImageIds[h.ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT],this.getCaipNetworks=o.ChainController.getCaipNetworks.bind(o.ChainController),this.caipNetworks=this.getCaipNetworks(),this.provider=a,this.chain=b}get chains(){return this.getCaipNetworks()}async connectWalletConnect(){if(!await this.authenticate()){let a=this.getCaipNetworks(),b=f.OptionsController.state.universalProviderConfigOverride,c=al.createNamespaces(a,b);await this.provider.connect({optionalNamespaces:c})}return{clientId:await this.provider.client.core.crypto.getClientId(),session:this.provider.session}}async disconnect(){await this.provider.disconnect()}async authenticate(){let a=this.chains.map(a=>a.caipNetworkId);return G.SIWXUtil.universalProviderAuthenticate({universalProvider:this.provider,chains:a,methods:an})}}let an=["eth_accounts","eth_requestAccounts","eth_sendRawTransaction","eth_sign","eth_signTransaction","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","eth_sendTransaction","personal_sign","wallet_switchEthereumChain","wallet_addEthereumChain","wallet_getPermissions","wallet_requestPermissions","wallet_registerOnboarding","wallet_watchAsset","wallet_scanQRCode","wallet_getCallsStatus","wallet_sendCalls","wallet_getCapabilities","wallet_grantPermissions","wallet_revokePermissions","wallet_getAssets"];class ao{constructor(a){this.availableConnectors=[],this.eventListeners=new Map,this.getCaipNetworks=a=>o.ChainController.getCaipNetworks(a),a&&this.construct(a)}construct(a){this.projectId=a.projectId,this.namespace=a.namespace,this.adapterType=a.adapterType}get connectors(){return this.availableConnectors}get networks(){return this.getCaipNetworks(this.namespace)}setAuthProvider(a){this.addConnector({id:h.ConstantsUtil.CONNECTOR_ID.AUTH,type:"AUTH",name:h.ConstantsUtil.CONNECTOR_NAMES.AUTH,provider:a,imageId:V.ConnectorImageIds[h.ConstantsUtil.CONNECTOR_ID.AUTH],chain:this.namespace,chains:[]})}addConnector(...a){let b=new Set;this.availableConnectors=[...a,...this.availableConnectors].filter(a=>!b.has(a.id)&&(b.add(a.id),!0)),this.emit("connectors",this.availableConnectors)}setStatus(a,c){b.AccountController.setStatus(a,c)}on(a,b){this.eventListeners.has(a)||this.eventListeners.set(a,new Set),this.eventListeners.get(a)?.add(b)}off(a,b){let c=this.eventListeners.get(a);c&&c.delete(b)}removeAllEventListeners(){this.eventListeners.forEach(a=>{a.clear()})}emit(a,b){let c=this.eventListeners.get(a);c&&c.forEach(a=>a(b))}async connectWalletConnect(a){let b=this.getWalletConnectConnector();return{clientId:(await b.connectWalletConnect()).clientId}}async switchNetwork(a){let{caipNetwork:c,providerType:d}=a;if(!a.provider)return;let e="provider"in a.provider?a.provider.provider:a.provider;if("WALLET_CONNECT"===d)return void e.setDefaultChain(c.caipNetworkId);if(e&&"AUTH"===d){let a=b.AccountController.state.preferredAccountTypes?.[c.chainNamespace];await e.switchNetwork(c.caipNetworkId);let d=await e.getUser({chainId:c.caipNetworkId,preferredAccountType:a});this.emit("switchNetwork",d)}}getWalletConnectConnector(){let a=this.connectors.find(a=>a instanceof am);if(!a)throw Error("WalletConnectConnector not found");return a}}class ap extends ao{setUniversalProvider(a){this.addConnector(new am({provider:a,caipNetworks:this.getCaipNetworks(),namespace:this.namespace}))}async connect(a){return Promise.resolve({id:"WALLET_CONNECT",type:"WALLET_CONNECT",chainId:Number(a.chainId),provider:this.provider,address:""})}async disconnect(){try{let a=this.getWalletConnectConnector();await a.disconnect()}catch(a){console.warn("UniversalAdapter:disconnect - error",a)}}async getAccounts({namespace:a}){let b=this.provider;return Promise.resolve({accounts:(b?.session?.namespaces?.[a]?.accounts?.map(a=>{let[,,b]=a.split(":");return b}).filter((a,b,c)=>c.indexOf(a)===b)||[]).map(b=>e.CoreHelperUtil.createAccount(a,b,"bip122"===a?"payment":"eoa"))})}async syncConnectors(){return Promise.resolve()}async getBalance(a){if(!(a.caipNetwork&&p.ConstantsUtil.BALANCE_SUPPORTED_CHAINS.includes(a.caipNetwork?.chainNamespace))||a.caipNetwork?.testnet)return{balance:"0.00",symbol:a.caipNetwork?.nativeCurrency.symbol||""};if(b.AccountController.state.balanceLoading&&a.chainId===o.ChainController.state.activeCaipNetwork?.id)return{balance:b.AccountController.state.balance||"0.00",symbol:b.AccountController.state.balanceSymbol||""};let c=(await b.AccountController.fetchTokenBalance()).find(b=>b.chainId===`${a.caipNetwork?.chainNamespace}:${a.chainId}`&&b.symbol===a.caipNetwork?.nativeCurrency.symbol);return{balance:c?.quantity.numeric||"0.00",symbol:c?.symbol||a.caipNetwork?.nativeCurrency.symbol||""}}async signMessage(a){let{provider:b,message:c,address:d}=a;if(!b)throw Error("UniversalAdapter:signMessage - provider is undefined");return{signature:o.ChainController.state.activeCaipNetwork?.chainNamespace===h.ConstantsUtil.CHAIN.SOLANA?(await b.request({method:"solana_signMessage",params:{message:ae.default.encode(new TextEncoder().encode(c)),pubkey:d}},o.ChainController.state.activeCaipNetwork?.caipNetworkId)).signature:await b.request({method:"personal_sign",params:[c,d]},o.ChainController.state.activeCaipNetwork?.caipNetworkId)}}async estimateGas(){return Promise.resolve({gas:BigInt(0)})}async sendTransaction(){return Promise.resolve({hash:""})}walletGetAssets(a){return Promise.resolve({})}async writeContract(){return Promise.resolve({hash:""})}parseUnits(){return 0n}formatUnits(){return"0"}async getCapabilities(){return Promise.resolve({})}async grantPermissions(){return Promise.resolve({})}async revokePermissions(){return Promise.resolve("0x")}async syncConnection(){return Promise.resolve({id:"WALLET_CONNECT",type:"WALLET_CONNECT",chainId:1,provider:this.provider,address:""})}async switchNetwork(a){let{caipNetwork:b}=a,c=this.getWalletConnectConnector();if(b.chainNamespace===h.ConstantsUtil.CHAIN.EVM)try{await c.provider?.request({method:"wallet_switchEthereumChain",params:[{chainId:(0,af.toHex)(b.id)}]})}catch(a){if(a.code===ag.ERROR_CODE_UNRECOGNIZED_CHAIN_ID||a.code===ag.ERROR_INVALID_CHAIN_ID||a.code===ag.ERROR_CODE_DEFAULT||a?.data?.originalError?.code===ag.ERROR_CODE_UNRECOGNIZED_CHAIN_ID)try{await c.provider?.request({method:"wallet_addEthereumChain",params:[{chainId:(0,af.toHex)(b.id),rpcUrls:[b?.rpcUrls.chainDefault?.http],chainName:b.name,nativeCurrency:b.nativeCurrency,blockExplorerUrls:[b.blockExplorers?.default.url]}]})}catch(a){throw Error("Chain is not supported")}}c.provider.setDefaultChain(b.caipNetworkId)}getWalletConnectProvider(){let a=this.connectors.find(a=>"WALLET_CONNECT"===a.type);return a?.provider}}let aq=["email","socials","swaps","onramp","activity","reownBranding"],ar={email:{apiFeatureName:"social_login",localFeatureName:"email",returnType:!1,isLegacy:!1,isAvailableOnBasic:!1,processApi:a=>{if(!a?.config)return!1;let b=a.config;return!!a.isEnabled&&b.includes("email")},processFallback:a=>void 0===a?p.ConstantsUtil.DEFAULT_REMOTE_FEATURES.email:!!a},socials:{apiFeatureName:"social_login",localFeatureName:"socials",returnType:!1,isLegacy:!1,isAvailableOnBasic:!1,processApi:a=>{if(!a?.config)return!1;let b=a.config;return!!a.isEnabled&&b.length>0&&b.filter(a=>"email"!==a)},processFallback:a=>void 0===a?p.ConstantsUtil.DEFAULT_REMOTE_FEATURES.socials:"boolean"==typeof a?!!a&&p.ConstantsUtil.DEFAULT_REMOTE_FEATURES.socials:a},swaps:{apiFeatureName:"swap",localFeatureName:"swaps",returnType:!1,isLegacy:!1,isAvailableOnBasic:!1,processApi:a=>{if(!a?.config)return!1;let b=a.config;return!!a.isEnabled&&b.length>0&&b},processFallback:a=>void 0===a?p.ConstantsUtil.DEFAULT_REMOTE_FEATURES.swaps:"boolean"==typeof a?!!a&&p.ConstantsUtil.DEFAULT_REMOTE_FEATURES.swaps:a},onramp:{apiFeatureName:"onramp",localFeatureName:"onramp",returnType:!1,isLegacy:!1,isAvailableOnBasic:!1,processApi:a=>{if(!a?.config)return!1;let b=a.config;return!!a.isEnabled&&b.length>0&&b},processFallback:a=>void 0===a?p.ConstantsUtil.DEFAULT_REMOTE_FEATURES.onramp:"boolean"==typeof a?!!a&&p.ConstantsUtil.DEFAULT_REMOTE_FEATURES.onramp:a},activity:{apiFeatureName:"activity",localFeatureName:"history",returnType:!1,isLegacy:!0,isAvailableOnBasic:!1,processApi:a=>!!a.isEnabled,processFallback:a=>void 0===a?p.ConstantsUtil.DEFAULT_REMOTE_FEATURES.activity:!!a},reownBranding:{apiFeatureName:"reown_branding",localFeatureName:"reownBranding",returnType:!1,isLegacy:!1,isAvailableOnBasic:!1,processApi:a=>!!a.isEnabled,processFallback:a=>void 0===a?p.ConstantsUtil.DEFAULT_REMOTE_FEATURES.reownBranding:!!a}},as={localSettingsOverridden:new Set,getApiConfig:(a,b)=>b?.find(b=>b.id===a),addWarning(a,b){if(void 0!==a){let a=ar[b],c=a.isLegacy?`"features.${a.localFeatureName}" (now "${b}")`:`"features.${b}"`;this.localSettingsOverridden.add(c)}},processFeature(a,b,c,d,e){let f=ar[a],g=b[f.localFeatureName];if(e&&!f.isAvailableOnBasic)return!1;if(d){let b=this.getApiConfig(f.apiFeatureName,c);return b?.config===null?this.processFallbackFeature(a,g):!!b?.config&&(void 0!==g&&this.addWarning(g,a),this.processApiFeature(a,b))}return this.processFallbackFeature(a,g)},processApiFeature:(a,b)=>ar[a].processApi(b),processFallbackFeature:(a,b)=>ar[a].processFallback(b),async fetchRemoteFeatures(a){let b=a.basic??!1,c=a.features||{};this.localSettingsOverridden.clear();let d=null,e=!1;try{e=null!=(d=await l.ApiController.fetchProjectConfig())}catch(a){console.warn("[Reown Config] Failed to fetch remote project configuration. Using local/default values.",a)}let f=e&&!b?p.ConstantsUtil.DEFAULT_REMOTE_FEATURES:p.ConstantsUtil.DEFAULT_REMOTE_FEATURES_DISABLED;try{for(let a of aq){let g=this.processFeature(a,c,d,e,b);Object.assign(f,{[a]:g})}}catch(a){return console.warn("[Reown Config] Failed to process the configuration from Cloud. Using default values.",a),p.ConstantsUtil.DEFAULT_REMOTE_FEATURES}if(e&&this.localSettingsOverridden.size>0){let a=`Your local configuration for ${Array.from(this.localSettingsOverridden).join(", ")} was ignored because a remote configuration was successfully fetched. Please manage these features via your project dashboard on dashboard.reown.com.`;k.AlertController.open({shortMessage:"Local configuration ignored",longMessage:`[Reown Config Notice] ${a}`},"warning")}return f}};class at{constructor(a){this.chainNamespaces=[],this.remoteFeatures={},this.reportedAlertErrors={},this.getCaipNetwork=(a,b)=>{if(a){let c=o.ChainController.getNetworkData(a)?.requestedCaipNetworks?.find(a=>a.id===b);if(c)return c;let d=o.ChainController.getNetworkData(a)?.caipNetwork;if(d)return d;let e=o.ChainController.getRequestedCaipNetworks(a);return e.filter(b=>b.chainNamespace===a)?.[0]}return o.ChainController.state.activeCaipNetwork||this.defaultCaipNetwork},this.getCaipNetworkId=()=>{let a=this.getCaipNetwork();if(a)return a.id},this.getCaipNetworks=a=>o.ChainController.getCaipNetworks(a),this.getActiveChainNamespace=()=>o.ChainController.state.activeChain,this.setRequestedCaipNetworks=(a,b)=>{o.ChainController.setRequestedCaipNetworks(a,b)},this.getApprovedCaipNetworkIds=()=>o.ChainController.getAllApprovedCaipNetworkIds(),this.getCaipAddress=a=>o.ChainController.state.activeChain!==a&&a?o.ChainController.getAccountProp("caipAddress",a):o.ChainController.state.activeCaipAddress,this.setClientId=a=>{n.BlockchainApiController.setClientId(a)},this.getProvider=a=>ad.getProvider(a),this.getProviderType=a=>ad.getProviderId(a),this.getPreferredAccountType=a=>b.AccountController.state.preferredAccountTypes?.[a],this.setCaipAddress=(a,c)=>{b.AccountController.setCaipAddress(a,c),a&&f.OptionsController.state.enableEmbedded&&this.close()},this.setBalance=(a,c,d)=>{b.AccountController.setBalance(a,c,d)},this.setProfileName=(a,c)=>{b.AccountController.setProfileName(a,c)},this.setProfileImage=(a,c)=>{b.AccountController.setProfileImage(a,c)},this.setUser=(a,c)=>{b.AccountController.setUser(a,c)},this.resetAccount=a=>{b.AccountController.resetAccount(a)},this.setCaipNetwork=a=>{o.ChainController.setActiveCaipNetwork(a)},this.setCaipNetworkOfNamespace=(a,b)=>{o.ChainController.setChainNetworkData(b,{caipNetwork:a})},this.setAllAccounts=(a,c)=>{b.AccountController.setAllAccounts(a,c),f.OptionsController.setHasMultipleAddresses(a?.length>1)},this.setStatus=(a,c)=>{b.AccountController.setStatus(a,c),d.ConnectorController.isConnected()?t.StorageUtil.setConnectionStatus("connected"):t.StorageUtil.setConnectionStatus("disconnected")},this.getAddressByChainNamespace=a=>o.ChainController.getAccountProp("address",a),this.setConnectors=a=>{let b=[...d.ConnectorController.state.allConnectors,...a];d.ConnectorController.setConnectors(b)},this.setConnections=(a,b)=>{c.ConnectionController.setConnections(a,b)},this.fetchIdentity=a=>n.BlockchainApiController.fetchIdentity(a),this.getReownName=a=>x.getNamesForAddress(a),this.getConnectors=()=>d.ConnectorController.getConnectors(),this.getConnectorImage=a=>m.AssetUtil.getConnectorImage(a),this.setConnectedWalletInfo=(a,c)=>{let d=ad.getProviderId(c),e=a?{...a,type:d}:void 0;b.AccountController.setConnectedWalletInfo(e,c)},this.getIsConnectedState=()=>!!o.ChainController.state.activeCaipAddress,this.addAddressLabel=(a,c,d)=>{b.AccountController.addAddressLabel(a,c,d)},this.removeAddressLabel=(a,c)=>{b.AccountController.removeAddressLabel(a,c)},this.getAddress=a=>o.ChainController.state.activeChain!==a&&a?o.ChainController.getAccountProp("address",a):b.AccountController.state.address,this.setApprovedCaipNetworksData=a=>o.ChainController.setApprovedCaipNetworksData(a),this.resetNetwork=a=>{o.ChainController.resetNetwork(a)},this.addConnector=a=>{d.ConnectorController.addConnector(a)},this.resetWcConnection=()=>{c.ConnectionController.resetWcConnection()},this.setAddressExplorerUrl=(a,c)=>{b.AccountController.setAddressExplorerUrl(a,c)},this.setSmartAccountDeployed=(a,c)=>{b.AccountController.setSmartAccountDeployed(a,c)},this.setSmartAccountEnabledNetworks=(a,b)=>{o.ChainController.setSmartAccountEnabledNetworks(a,b)},this.setPreferredAccountType=(a,c)=>{b.AccountController.setPreferredAccountType(a,c)},this.setEIP6963Enabled=a=>{f.OptionsController.setEIP6963Enabled(a)},this.handleUnsafeRPCRequest=()=>{this.isOpen()?this.isTransactionStackEmpty()||this.redirect("ApproveTransaction"):this.open({view:"ApproveTransaction"})},this.options=a,this.version=a.sdkVersion,this.caipNetworks=this.extendCaipNetworks(a),this.chainNamespaces=this.getChainNamespacesSet(a.adapters,this.caipNetworks),this.defaultCaipNetwork=this.extendDefaultCaipNetwork(a),this.chainAdapters=this.createAdapters(a.adapters),this.readyPromise=this.initialize(a)}getChainNamespacesSet(a,b){let c=a?.map(a=>a.namespace).filter(a=>!!a);return c?.length?[...new Set(c)]:[...new Set(b?.map(a=>a.chainNamespace))]}async initialize(a){this.initializeProjectSettings(a),this.initControllers(a),await this.initChainAdapters(),this.sendInitializeEvent(a),await this.syncExistingConnection(),this.remoteFeatures=await as.fetchRemoteFeatures(a),f.OptionsController.setRemoteFeatures(this.remoteFeatures),this.remoteFeatures.onramp&&E.setOnrampProviders(this.remoteFeatures.onramp),(f.OptionsController.state.remoteFeatures?.email||Array.isArray(f.OptionsController.state.remoteFeatures?.socials)&&f.OptionsController.state.remoteFeatures?.socials.length>0)&&await this.checkAllowedOrigins()}async checkAllowedOrigins(){let a=await l.ApiController.fetchAllowedOrigins();if(a&&e.CoreHelperUtil.isClient()){let b=window.location.origin;al.isOriginAllowed(b,a,ag.DEFAULT_ALLOWED_ANCESTORS)||k.AlertController.open(Z.ALERT_ERRORS.INVALID_APP_CONFIGURATION,"error")}else k.AlertController.open(Z.ALERT_ERRORS.PROJECT_ID_NOT_CONFIGURED,"error")}sendInitializeEvent(a){let{...b}=a;delete b.adapters,delete b.universalProvider,y.EventsController.sendEvent({type:"track",event:"INITIALIZE",properties:{...b,networks:a.networks.map(a=>a.id),siweConfig:{options:a.siweConfig?.options||{}}}})}initControllers(a){this.initializeOptionsController(a),this.initializeChainController(a),this.initializeThemeController(a),this.initializeConnectionController(a),this.initializeConnectorController()}initializeThemeController(a){a.themeMode&&J.ThemeController.setThemeMode(a.themeMode),a.themeVariables&&J.ThemeController.setThemeVariables(a.themeVariables)}initializeChainController(a){if(!this.connectionControllerClient||!this.networkControllerClient)throw Error("ConnectionControllerClient and NetworkControllerClient must be set");o.ChainController.initialize(a.adapters??[],this.caipNetworks,{connectionControllerClient:this.connectionControllerClient,networkControllerClient:this.networkControllerClient});let b=this.getDefaultNetwork();b&&o.ChainController.setActiveCaipNetwork(b)}initializeConnectionController(a){c.ConnectionController.setWcBasic(a.basic??!1)}initializeConnectorController(){d.ConnectorController.initialize(this.chainNamespaces)}initializeProjectSettings(a){f.OptionsController.setProjectId(a.projectId),f.OptionsController.setSdkVersion(a.sdkVersion)}initializeOptionsController(a){f.OptionsController.setDebug(!1!==a.debug),f.OptionsController.setEnableWalletConnect(!1!==a.enableWalletConnect),f.OptionsController.setEnableWalletGuide(!1!==a.enableWalletGuide),f.OptionsController.setEnableWallets(!1!==a.enableWallets),f.OptionsController.setEIP6963Enabled(!1!==a.enableEIP6963),f.OptionsController.setEnableNetworkSwitch(!1!==a.enableNetworkSwitch),f.OptionsController.setEnableAuthLogger(!1!==a.enableAuthLogger),f.OptionsController.setCustomRpcUrls(a.customRpcUrls),f.OptionsController.setEnableEmbedded(a.enableEmbedded),f.OptionsController.setAllWallets(a.allWallets),f.OptionsController.setIncludeWalletIds(a.includeWalletIds),f.OptionsController.setExcludeWalletIds(a.excludeWalletIds),f.OptionsController.setFeaturedWalletIds(a.featuredWalletIds),f.OptionsController.setTokens(a.tokens),f.OptionsController.setTermsConditionsUrl(a.termsConditionsUrl),f.OptionsController.setPrivacyPolicyUrl(a.privacyPolicyUrl),f.OptionsController.setCustomWallets(a.customWallets),f.OptionsController.setFeatures(a.features),f.OptionsController.setAllowUnsupportedChain(a.allowUnsupportedChain),f.OptionsController.setUniversalProviderConfigOverride(a.universalProviderConfigOverride),f.OptionsController.setPreferUniversalLinks(a.experimental_preferUniversalLinks),f.OptionsController.setDefaultAccountTypes(a.defaultAccountTypes);let c=t.StorageUtil.getPreferredAccountTypes()||{},d={...f.OptionsController.state.defaultAccountTypes,...c};b.AccountController.setPreferredAccountTypes(d);let e=this.getDefaultMetaData();if(!a.metadata&&e&&(a.metadata=e),f.OptionsController.setMetadata(a.metadata),f.OptionsController.setDisableAppend(a.disableAppend),f.OptionsController.setEnableEmbedded(a.enableEmbedded),f.OptionsController.setSIWX(a.siwx),!a.projectId)return void k.AlertController.open(Z.ALERT_ERRORS.PROJECT_ID_NOT_CONFIGURED,"error");if(a.adapters?.find(a=>a.namespace===h.ConstantsUtil.CHAIN.EVM)&&a.siweConfig){if(a.siwx)throw Error("Cannot set both `siweConfig` and `siwx` options");f.OptionsController.setSIWX(a.siweConfig.mapToSIWX())}}getDefaultMetaData(){return e.CoreHelperUtil.isClient()?{name:document.getElementsByTagName("title")?.[0]?.textContent||"",description:document.querySelector('meta[property="og:description"]')?.content||"",url:window.location.origin,icons:[document.querySelector('link[rel~="icon"]')?.href||""]}:null}setUnsupportedNetwork(a){let b=this.getActiveChainNamespace();if(b){let c=Y.getUnsupportedNetwork(`${b}:${a}`);o.ChainController.setActiveCaipNetwork(c)}}getDefaultNetwork(){return Y.getCaipNetworkFromStorage(this.defaultCaipNetwork)}extendCaipNetwork(a,b){return Y.extendCaipNetwork(a,{customNetworkImageUrls:b.chainImages,projectId:b.projectId})}extendCaipNetworks(a){return Y.extendCaipNetworks(a.networks,{customNetworkImageUrls:a.chainImages,customRpcUrls:a.customRpcUrls,projectId:a.projectId})}extendDefaultCaipNetwork(a){let b=a.networks.find(b=>b.id===a.defaultNetwork?.id);return b?Y.extendCaipNetwork(b,{customNetworkImageUrls:a.chainImages,customRpcUrls:a.customRpcUrls,projectId:a.projectId}):void 0}async disconnectNamespace(a){try{let b=this.getAdapter(a),c=ad.getProvider(a),e=ad.getProviderId(a),{caipAddress:f}=o.ChainController.getAccountData(a)||{};this.setLoading(!0,a),f&&b?.disconnect&&await b.disconnect({provider:c,providerType:e}),t.StorageUtil.removeConnectedNamespace(a),ad.resetChain(a),this.setUser(void 0,a),this.setStatus("disconnected",a),this.setConnectedWalletInfo(void 0,a),d.ConnectorController.removeConnectorId(a),o.ChainController.resetAccount(a),o.ChainController.resetNetwork(a),this.setLoading(!1,a)}catch(b){throw this.setLoading(!1,a),Error(`Failed to disconnect chain ${a}: ${b.message}`)}}createClients(){this.connectionControllerClient={connectWalletConnect:async()=>{let a=o.ChainController.state.activeChain,b=this.getAdapter(a),c=this.getCaipNetwork(a)?.id;if(!b)throw Error("Adapter not found");let e=await b.connectWalletConnect(c);this.close(),this.setClientId(e?.clientId||null),t.StorageUtil.setConnectedNamespaces([...o.ChainController.state.chains.keys()]),this.chainNamespaces.forEach(a=>{d.ConnectorController.setConnectorId(U.ConstantsUtil.CONNECTOR_TYPE_WALLET_CONNECT,a)}),await this.syncWalletConnectAccount()},connectExternal:async({id:a,info:c,type:d,provider:e,chain:f,caipNetwork:g,socialUri:h})=>{let i=o.ChainController.state.activeChain,j=f||i,k=this.getAdapter(j);if(f&&f!==i&&!g){let a=this.getCaipNetworks().find(a=>a.chainNamespace===f);a&&this.setCaipNetwork(a)}if(!k)throw Error("Adapter not found");let l=this.getCaipNetwork(j),m=await k.connect({id:a,info:c,type:d,provider:e,socialUri:h,chainId:g?.id||l?.id,rpcUrl:g?.rpcUrls?.default?.http?.[0]||l?.rpcUrls?.default?.http?.[0]});if(!m)return;t.StorageUtil.addConnectedNamespace(j),this.syncProvider({...m,chainNamespace:j});let n=b.AccountController.state.allAccounts,{accounts:p}=n?.length>0?{accounts:[...n]}:await k.getAccounts({namespace:j,id:a});this.setAllAccounts(p,j),this.setStatus("connected",j),this.syncConnectedWalletInfo(j)},reconnectExternal:async({id:a,info:b,type:c,provider:d})=>{let e=o.ChainController.state.activeChain,f=this.getAdapter(e);f?.reconnect&&(await f?.reconnect({id:a,info:b,type:c,provider:d,chainId:this.getCaipNetwork()?.id}),t.StorageUtil.addConnectedNamespace(e),this.syncConnectedWalletInfo(e))},disconnect:async a=>{let b=function(a){let b=Array.from(o.ChainController.state.chains.keys()),c=[];return a?(c.push([a,o.ChainController.state.chains.get(a)]),K(a,h.ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT)?b.forEach(b=>{b!==a&&K(b,h.ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT)&&c.push([b,o.ChainController.state.chains.get(b)])}):K(a,h.ConstantsUtil.CONNECTOR_ID.AUTH)&&b.forEach(b=>{b!==a&&K(b,h.ConstantsUtil.CONNECTOR_ID.AUTH)&&c.push([b,o.ChainController.state.chains.get(b)])})):c=Array.from(o.ChainController.state.chains.entries()),c}(a);try{let e=await Promise.allSettled(b.map(async([a])=>this.disconnectNamespace(a)));H.SendController.resetSend(),c.ConnectionController.resetWcConnection(),await G.SIWXUtil.clearSessions(),d.ConnectorController.setFilterByNamespace(void 0);let f=e.filter(a=>"rejected"===a.status);if(f.length>0)throw Error(f.map(a=>a.reason.message).join(", "));t.StorageUtil.deleteConnectedSocialProvider(),y.EventsController.sendEvent({type:"track",event:"DISCONNECT_SUCCESS",properties:{namespace:a||"all"}})}catch(a){throw Error(`Failed to disconnect chains: ${a.message}`)}},checkInstalled:a=>a?a.some(a=>!!window.ethereum?.[String(a)]):!!window.ethereum,signMessage:async a=>{let c=this.getAdapter(o.ChainController.state.activeChain),d=await c?.signMessage({message:a,address:b.AccountController.state.address,provider:ad.getProvider(o.ChainController.state.activeChain)});return d?.signature||""},sendTransaction:async a=>{let b=a.chainNamespace;if(p.ConstantsUtil.SEND_SUPPORTED_NAMESPACES.includes(b)){let c=this.getAdapter(o.ChainController.state.activeChain),d=ad.getProvider(b),e=await c?.sendTransaction({...a,caipNetwork:this.getCaipNetwork(),provider:d});return e?.hash||""}return""},estimateGas:async a=>{if(a.chainNamespace===h.ConstantsUtil.CHAIN.EVM){let b=this.getAdapter(o.ChainController.state.activeChain),c=ad.getProvider(o.ChainController.state.activeChain),d=this.getCaipNetwork();if(!d)throw Error("CaipNetwork is undefined");let e=await b?.estimateGas({...a,provider:c,caipNetwork:d});return e?.gas||0n}return 0n},getEnsAvatar:async()=>(await this.syncIdentity({address:b.AccountController.state.address,chainId:Number(this.getCaipNetwork()?.id),chainNamespace:o.ChainController.state.activeChain}),b.AccountController.state.profileImage||!1),getEnsAddress:async a=>await al.resolveReownName(a),writeContract:async a=>{let b=this.getAdapter(o.ChainController.state.activeChain),c=this.getCaipNetwork(),d=this.getCaipAddress(),e=ad.getProvider(o.ChainController.state.activeChain);if(!c||!d)throw Error("CaipNetwork or CaipAddress is undefined");let f=await b?.writeContract({...a,caipNetwork:c,provider:e,caipAddress:d});return f?.hash},parseUnits:(a,b)=>{let c=this.getAdapter(o.ChainController.state.activeChain);return c?.parseUnits({value:a,decimals:b})??0n},formatUnits:(a,b)=>{let c=this.getAdapter(o.ChainController.state.activeChain);return c?.formatUnits({value:a,decimals:b})??"0"},getCapabilities:async a=>{let b=this.getAdapter(o.ChainController.state.activeChain);return await b?.getCapabilities(a)},grantPermissions:async a=>{let b=this.getAdapter(o.ChainController.state.activeChain);return await b?.grantPermissions(a)},revokePermissions:async a=>{let b=this.getAdapter(o.ChainController.state.activeChain);return b?.revokePermissions?await b.revokePermissions(a):"0x"},walletGetAssets:async a=>{let b=this.getAdapter(o.ChainController.state.activeChain);return await b?.walletGetAssets(a)??{}},updateBalance:a=>{let c=this.getCaipNetwork(a);c&&b.AccountController.state.address&&this.updateNativeBalance(b.AccountController.state.address,c?.id,a)}},this.networkControllerClient={switchCaipNetwork:async a=>await this.switchCaipNetwork(a),getApprovedCaipNetworksData:async()=>this.getApprovedCaipNetworksData()},c.ConnectionController.setClient(this.connectionControllerClient)}getApprovedCaipNetworksData(){if(ad.getProviderId(o.ChainController.state.activeChain)===U.ConstantsUtil.CONNECTOR_TYPE_WALLET_CONNECT){let a=this.universalProvider?.session?.namespaces;return{supportsAllNetworks:this.universalProvider?.session?.peer?.metadata.name==="MetaMask Wallet",approvedCaipNetworkIds:this.getChainsFromNamespaces(a)}}return{supportsAllNetworks:!0,approvedCaipNetworkIds:[]}}async switchCaipNetwork(a){if(!a)return;let b=a.chainNamespace;if(this.getAddressByChainNamespace(a.chainNamespace)){let c=ad.getProvider(b),d=ad.getProviderId(b);if(a.chainNamespace===o.ChainController.state.activeChain){let e=this.getAdapter(b);await e?.switchNetwork({caipNetwork:a,provider:c,providerType:d})}else if(this.setCaipNetwork(a),d===U.ConstantsUtil.CONNECTOR_TYPE_WALLET_CONNECT)this.syncWalletConnectAccount();else{let c=this.getAddressByChainNamespace(b);c&&this.syncAccount({address:c,chainId:a.id,chainNamespace:b})}}else this.setCaipNetwork(a)}getChainsFromNamespaces(a={}){return Object.values(a).flatMap(a=>Array.from(new Set([...a.chains||[],...a.accounts.map(a=>{let{chainId:b,chainNamespace:c}=j.parseCaipAddress(a);return`${c}:${b}`})])))}createAdapters(a){return this.createClients(),this.chainNamespaces.reduce((b,c)=>{let d=a?.find(a=>a.namespace===c);return d?(d.construct({namespace:c,projectId:this.options?.projectId,networks:this.getCaipNetworks()}),b[c]=d):b[c]=new ap({namespace:c,networks:this.getCaipNetworks()}),b},{})}async initChainAdapter(a){this.onConnectors(a),this.listenAdapter(a),await this.chainAdapters?.[a].syncConnectors(this.options,this),await this.createUniversalProviderForAdapter(a)}async initChainAdapters(){await Promise.all(this.chainNamespaces.map(async a=>{await this.initChainAdapter(a)}))}onConnectors(a){let b=this.getAdapter(a);b?.on("connectors",this.setConnectors.bind(this))}listenAdapter(a){let c=this.getAdapter(a);if(!c)return;let d=t.StorageUtil.getConnectionStatus();"connected"===d?this.setStatus("connecting",a):("disconnected"===d&&t.StorageUtil.clearAddressCache(),this.setStatus(d,a)),c.on("switchNetwork",({address:b,chainId:c})=>{let d=this.getCaipNetworks().find(a=>a.id===c||a.caipNetworkId===c),e=o.ChainController.state.activeChain===a,f=o.ChainController.getAccountProp("address",a);if(d){let c=e&&b?b:f;c&&this.syncAccount({address:c,chainId:d.id,chainNamespace:a})}else this.setUnsupportedNetwork(c)}),c.on("disconnect",this.disconnect.bind(this,a)),c.on("connections",b=>{this.setConnections(b,a)}),c.on("pendingTransactions",()=>{let a=b.AccountController.state.address,c=o.ChainController.state.activeCaipNetwork;a&&c?.id&&this.updateNativeBalance(a,c.id,c.chainNamespace)}),c.on("accountChanged",({address:b,chainId:c})=>{let d=o.ChainController.state.activeChain===a;d&&c?this.syncAccount({address:b,chainId:c,chainNamespace:a}):d&&o.ChainController.state.activeCaipNetwork?.id?this.syncAccount({address:b,chainId:o.ChainController.state.activeCaipNetwork?.id,chainNamespace:a}):this.syncAccountInfo(b,c,a),this.syncAllAccounts(a)})}async createUniversalProviderForAdapter(a){await this.getUniversalProvider(),this.universalProvider&&this.chainAdapters?.[a]?.setUniversalProvider?.(this.universalProvider)}async syncExistingConnection(){await Promise.allSettled(this.chainNamespaces.map(a=>this.syncNamespaceConnection(a)))}async syncNamespaceConnection(a){try{a===h.ConstantsUtil.CHAIN.EVM&&e.CoreHelperUtil.isSafeApp()&&d.ConnectorController.setConnectorId(h.ConstantsUtil.CONNECTOR_ID.SAFE,a);let b=d.ConnectorController.getConnectorId(a);switch(this.setStatus("connecting",a),b){case h.ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT:await this.syncWalletConnectAccount();break;case h.ConstantsUtil.CONNECTOR_ID.AUTH:break;default:await this.syncAdapterConnection(a)}}catch(b){console.warn("AppKit couldn't sync existing connection",b),this.setStatus("disconnected",a)}}async syncAdapterConnection(a){let b=this.getAdapter(a),c=d.ConnectorController.getConnectorId(a),f=this.getCaipNetwork(a),g=d.ConnectorController.getConnectors(a).find(a=>a.id===c);try{if(!b||!g)throw Error(`Adapter or connector not found for namespace ${a}`);if(!f?.id)throw Error("CaipNetwork not found");let c=await b?.syncConnection({namespace:a,id:g.id,chainId:f.id,rpcUrl:f?.rpcUrls?.default?.http?.[0]});if(c){let d=await b?.getAccounts({namespace:a,id:g.id});d&&d.accounts.length>0?this.setAllAccounts(d.accounts,a):this.setAllAccounts([e.CoreHelperUtil.createAccount(a,c.address,"eoa")],a),this.syncProvider({...c,chainNamespace:a}),await this.syncAccount({...c,chainNamespace:a}),this.setStatus("connected",a)}else this.setStatus("disconnected",a)}catch(b){this.setStatus("disconnected",a)}}async syncWalletConnectAccount(){let a=this.chainNamespaces.map(async a=>{let b=this.getAdapter(a),c=this.universalProvider?.session?.namespaces?.[a]?.accounts||[],e=o.ChainController.state.activeCaipNetwork?.id,f=c.find(a=>{let{chainId:b}=j.parseCaipAddress(a);return b===e?.toString()})||c[0];if(f){let c=j.validateCaipAddress(f),{chainId:e,address:g}=j.parseCaipAddress(c);if(ad.setProviderId(a,U.ConstantsUtil.CONNECTOR_TYPE_WALLET_CONNECT),this.caipNetworks&&o.ChainController.state.activeCaipNetwork&&b?.namespace!==h.ConstantsUtil.CHAIN.EVM){let c=b?.getWalletConnectProvider({caipNetworks:this.getCaipNetworks(),provider:this.universalProvider,activeCaipNetwork:o.ChainController.state.activeCaipNetwork});ad.setProvider(a,c)}else ad.setProvider(a,this.universalProvider);d.ConnectorController.setConnectorId(h.ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT,a),t.StorageUtil.addConnectedNamespace(a),this.syncWalletConnectAccounts(a),await this.syncAccount({address:g,chainId:e,chainNamespace:a})}else this.setStatus("disconnected",a);this.syncConnectedWalletInfo(a),await o.ChainController.setApprovedCaipNetworksData(a)});await Promise.all(a)}syncWalletConnectAccounts(a){let b=this.universalProvider?.session?.namespaces?.[a]?.accounts?.map(a=>{let{address:b}=j.parseCaipAddress(a);return b}).filter((a,b,c)=>c.indexOf(a)===b);b&&this.setAllAccounts(b.map(b=>e.CoreHelperUtil.createAccount(a,b,"bip122"===a?"payment":"eoa")),a)}syncProvider({type:a,provider:b,id:c,chainNamespace:e}){ad.setProviderId(e,a),ad.setProvider(e,b),d.ConnectorController.setConnectorId(c,e)}async syncAllAccounts(a){let b=d.ConnectorController.getConnectorId(a);if(!b)return;let c=this.getAdapter(a),e=await c?.getAccounts({namespace:a,id:b});e&&e.accounts.length>0&&this.setAllAccounts(e.accounts,a)}async syncAccount(a){let c=a.chainNamespace===o.ChainController.state.activeChain,d=o.ChainController.getCaipNetworkByNamespace(a.chainNamespace,a.chainId),{address:e,chainId:g,chainNamespace:i}=a,{chainId:k}=t.StorageUtil.getActiveNetworkProps(),l=g||k,m=o.ChainController.state.activeCaipNetwork?.name===h.ConstantsUtil.UNSUPPORTED_NETWORK_NAME,n=o.ChainController.getNetworkProp("supportsAllNetworks",i);if(this.setStatus("connected",i),(!m||n)&&l){let a=this.getCaipNetworks().find(a=>a.id.toString()===l.toString()),g=this.getCaipNetworks().find(a=>a.chainNamespace===i);if(!n&&!a&&!g){let b=this.getApprovedCaipNetworkIds()||[],c=b.find(a=>j.parseCaipNetworkId(a)?.chainId===l.toString()),d=b.find(a=>j.parseCaipNetworkId(a)?.chainNamespace===i);a=this.getCaipNetworks().find(a=>a.caipNetworkId===c),g=this.getCaipNetworks().find(a=>a.caipNetworkId===d||"deprecatedCaipNetworkId"in a&&a.deprecatedCaipNetworkId===d)}let k=a||g;k?.chainNamespace===o.ChainController.state.activeChain?f.OptionsController.state.enableNetworkSwitch&&!f.OptionsController.state.allowUnsupportedChain&&o.ChainController.state.activeCaipNetwork?.name===h.ConstantsUtil.UNSUPPORTED_NETWORK_NAME?o.ChainController.showUnsupportedChainUI():this.setCaipNetwork(k):!c&&d&&this.setCaipNetworkOfNamespace(d,i),this.syncConnectedWalletInfo(i),$.HelpersUtil.isLowerCaseMatch(e,b.AccountController.state.address)||this.syncAccountInfo(e,k?.id,i),c?await this.syncBalance({address:e,chainId:k?.id,chainNamespace:i}):await this.syncBalance({address:e,chainId:d?.id,chainNamespace:i})}}async syncAccountInfo(a,b,c){let d=this.getCaipAddress(c),e=b||d?.split(":")[1];if(!e)return;let f=`${c}:${e}:${a}`;this.setCaipAddress(f,c),await this.syncIdentity({address:a,chainId:e,chainNamespace:c})}async syncReownName(a,b){try{let c=await this.getReownName(a);if(c[0]){let a=c[0];this.setProfileName(a.name,b)}else this.setProfileName(null,b)}catch{this.setProfileName(null,b)}}syncConnectedWalletInfo(a){let b=d.ConnectorController.getConnectorId(a),c=ad.getProviderId(a);if(c===U.ConstantsUtil.CONNECTOR_TYPE_ANNOUNCED||c===U.ConstantsUtil.CONNECTOR_TYPE_INJECTED){if(b){let c=this.getConnectors().find(a=>a.id===b);if(c){let{info:b,name:d,imageUrl:e}=c,f=e||this.getConnectorImage(c);this.setConnectedWalletInfo({name:d,icon:f,...b},a)}}}else if(c===U.ConstantsUtil.CONNECTOR_TYPE_WALLET_CONNECT){let b=ad.getProvider(a);b?.session&&this.setConnectedWalletInfo({...b.session.peer.metadata,name:b.session.peer.metadata.name,icon:b.session.peer.metadata.icons?.[0]},a)}else if(b&&b===h.ConstantsUtil.CONNECTOR_ID.COINBASE){let b=this.getConnectors().find(a=>a.id===h.ConstantsUtil.CONNECTOR_ID.COINBASE);this.setConnectedWalletInfo({name:"Coinbase Wallet",icon:this.getConnectorImage(b)},a)}}async syncBalance(a){i.NetworkUtil.getNetworksByNamespace(this.getCaipNetworks(),a.chainNamespace).find(b=>b.id.toString()===a.chainId?.toString())&&a.chainId&&await this.updateNativeBalance(a.address,a.chainId,a.chainNamespace)}async ready(){await this.readyPromise}async updateNativeBalance(a,b,c){let d=this.getAdapter(c),e=o.ChainController.getCaipNetworkByNamespace(c,b);if(d){let f=await d.getBalance({address:a,chainId:b,caipNetwork:e,tokens:this.options.tokens});return this.setBalance(f.balance,f.symbol,c),f}}async initializeUniversalAdapter(){let a=aa.createLogger((a,...b)=>{a&&this.handleAlertError(a),console.error(...b)}),b={projectId:this.options?.projectId,metadata:{name:this.options?.metadata?this.options?.metadata.name:"",description:this.options?.metadata?this.options?.metadata.description:"",url:this.options?.metadata?this.options?.metadata.url:"",icons:this.options?.metadata?this.options?.metadata.icons:[""]},logger:a};f.OptionsController.setManualWCControl(!!this.options?.manualWCControl),this.universalProvider=this.options.universalProvider??await g.default.init(b),this.listenWalletConnect()}listenWalletConnect(){this.universalProvider&&(this.universalProvider.on("display_uri",a=>{c.ConnectionController.setUri(a)}),this.universalProvider.on("connect",c.ConnectionController.finalizeWcConnection),this.universalProvider.on("disconnect",()=>{this.chainNamespaces.forEach(a=>{this.resetAccount(a)}),c.ConnectionController.resetWcConnection()}),this.universalProvider.on("chainChanged",a=>{let b=this.getCaipNetworks().find(b=>b.id==a),c=this.getCaipNetwork();if(!b)return void this.setUnsupportedNetwork(a);c?.id!==b?.id&&this.setCaipNetwork(b)}),this.universalProvider.on("session_event",a=>{if(al.isSessionEventData(a)){let{name:b,data:c}=a.params.event;"accountsChanged"===b&&Array.isArray(c)&&e.CoreHelperUtil.isCaipAddress(c[0])&&this.syncAccount(j.parseCaipAddress(c[0]))}}))}createUniversalProvider(){return!this.universalProviderInitPromise&&e.CoreHelperUtil.isClient()&&this.options?.projectId&&(this.universalProviderInitPromise=this.initializeUniversalAdapter()),this.universalProviderInitPromise}async getUniversalProvider(){if(!this.universalProvider)try{await this.createUniversalProvider()}catch(a){y.EventsController.sendEvent({type:"error",event:"INTERNAL_SDK_ERROR",properties:{errorType:"UniversalProviderInitError",errorMessage:a instanceof Error?a.message:"Unknown",uncaught:!1}}),console.error("AppKit:getUniversalProvider - Cannot create provider",a)}return this.universalProvider}handleAlertError(a){let[b,c]=Object.entries(Z.UniversalProviderErrors).find(([,{message:b}])=>a.message.includes(b))??[],{message:d,alertErrorKey:e}=c??{};if(b&&d&&!this.reportedAlertErrors[b]){let a=Z.ALERT_ERRORS[e];a&&(k.AlertController.open(a,"error"),this.reportedAlertErrors[b]=!0)}}getAdapter(a){if(a)return this.chainAdapters?.[a]}createAdapter(a){if(!a)return;let b=a.namespace;b&&(this.createClients(),a.namespace=b,a.construct({namespace:b,projectId:this.options?.projectId,networks:this.getCaipNetworks()}),this.chainNamespaces.includes(b)||this.chainNamespaces.push(b),this.chainAdapters&&(this.chainAdapters[b]=a))}async open(a){return(await this.injectModalUi(),a?.uri&&c.ConnectionController.setUri(a.uri),a?.arguments&&a?.view==="Swap")?z.ModalController.open({...a,data:{swap:a.arguments}}):z.ModalController.open(a)}async close(){await this.injectModalUi(),z.ModalController.close()}setLoading(a,b){z.ModalController.setLoading(a,b)}async disconnect(a){await c.ConnectionController.disconnect(a)}getSIWX(){return f.OptionsController.state.siwx}getError(){return""}getChainId(){return o.ChainController.state.activeCaipNetwork?.id}async switchNetwork(a){let b=this.getCaipNetworks().find(b=>b.id===a.id);if(!b)return void k.AlertController.open(Z.ALERT_ERRORS.SWITCH_NETWORK_NOT_FOUND,"error");await o.ChainController.switchActiveNetwork(b)}getWalletProvider(){return o.ChainController.state.activeChain?ad.state.providers[o.ChainController.state.activeChain]:null}getWalletProviderType(){return ad.getProviderId(o.ChainController.state.activeChain)}subscribeProviders(a){return ad.subscribeProviders(a)}getThemeMode(){return J.ThemeController.state.themeMode}getThemeVariables(){return J.ThemeController.state.themeVariables}setThemeMode(a){J.ThemeController.setThemeMode(a),(0,M.setColorTheme)(J.ThemeController.state.themeMode)}setTermsConditionsUrl(a){f.OptionsController.setTermsConditionsUrl(a)}setPrivacyPolicyUrl(a){f.OptionsController.setPrivacyPolicyUrl(a)}setThemeVariables(a){J.ThemeController.setThemeVariables(a),(0,M.setThemeVariables)(J.ThemeController.state.themeVariables)}subscribeTheme(a){return J.ThemeController.subscribe(a)}getWalletInfo(){return b.AccountController.state.connectedWalletInfo}getAccount(a){let b=d.ConnectorController.getAuthConnector(a),c=o.ChainController.getAccountData(a),f=o.ChainController.state.activeChain,g=t.StorageUtil.getConnectedConnectorId(a||f);if(c)return{allAccounts:c.allAccounts,caipAddress:c.caipAddress,address:e.CoreHelperUtil.getPlainAddress(c.caipAddress),isConnected:!!c.caipAddress,status:c.status,embeddedWalletInfo:b&&g===h.ConstantsUtil.CONNECTOR_ID.AUTH?{user:c.user?{...c.user,username:t.StorageUtil.getConnectedSocialUsername()}:void 0,authProvider:c.socialProvider||"email",accountType:c.preferredAccountTypes?.[a||f],isSmartAccountDeployed:!!c.smartAccountDeployed}:void 0}}subscribeAccount(a,b){let c=()=>{let c=this.getAccount(b);c&&a(c)};b?o.ChainController.subscribeChainProp("accountState",c,b):o.ChainController.subscribe(c),d.ConnectorController.subscribe(c)}subscribeNetwork(a){return o.ChainController.subscribe(({activeCaipNetwork:b})=>{a({caipNetwork:b,chainId:b?.id,caipNetworkId:b?.caipNetworkId})})}subscribeWalletInfo(a){return b.AccountController.subscribeKey("connectedWalletInfo",a)}subscribeShouldUpdateToAddress(a){b.AccountController.subscribeKey("shouldUpdateToAddress",a)}subscribeCaipNetworkChange(a){o.ChainController.subscribeKey("activeCaipNetwork",a)}getState(){return F.PublicStateController.state}subscribeState(a){return F.PublicStateController.subscribe(a)}showErrorMessage(a){I.SnackController.showError(a)}showSuccessMessage(a){I.SnackController.showSuccess(a)}getEvent(){return{...y.EventsController.state}}subscribeEvents(a){return y.EventsController.subscribe(a)}replace(a){v.RouterController.replace(a)}redirect(a){v.RouterController.push(a)}popTransactionStack(a){v.RouterController.popTransactionStack(a)}isOpen(){return z.ModalController.state.open}isTransactionStackEmpty(){return 0===v.RouterController.state.transactionStack.length}static getInstance(){return this.instance}updateFeatures(a){f.OptionsController.setFeatures(a)}updateRemoteFeatures(a){f.OptionsController.setRemoteFeatures(a)}updateOptions(a){let b={...f.OptionsController.state||{},...a};f.OptionsController.setOptions(b)}setConnectMethodsOrder(a){f.OptionsController.setConnectMethodsOrder(a)}setWalletFeaturesOrder(a){f.OptionsController.setWalletFeaturesOrder(a)}setCollapseWallets(a){f.OptionsController.setCollapseWallets(a)}setSocialsOrder(a){f.OptionsController.setSocialsOrder(a)}getConnectMethodsOrder(){return L.WalletUtil.getConnectOrderMethod(f.OptionsController.state.features,d.ConnectorController.getConnectors())}addNetwork(a,b){if(this.chainAdapters&&!this.chainAdapters[a])throw Error(`Adapter for namespace ${a} doesn't exist`);let c=this.extendCaipNetwork(b,this.options);this.getCaipNetworks().find(a=>a.id===c.id)||o.ChainController.addNetwork(c)}removeNetwork(a,b){if(this.chainAdapters&&!this.chainAdapters[a])throw Error(`Adapter for namespace ${a} doesn't exist`);this.getCaipNetworks().find(a=>a.id===b)&&o.ChainController.removeNetwork(a,b)}}let au=!1;class av extends at{async open(a){d.ConnectorController.isConnected()||await super.open(a)}async close(){await super.close(),this.options.manualWCControl&&c.ConnectionController.finalizeWcConnection()}async syncIdentity(a){return Promise.resolve()}async syncBalance(a){return Promise.resolve()}async injectModalUi(){if(!au&&e.CoreHelperUtil.isClient()){if(await a.A(515429),await a.A(916999),!document.querySelector("w3m-modal")){let a=document.createElement("w3m-modal");f.OptionsController.state.disableAppend||f.OptionsController.state.enableEmbedded||document.body.insertAdjacentElement("beforeend",a)}au=!0}}}function aw(a){return new av({...a,basic:!0,sdkVersion:"html-core-1.7.8"})}a.i(430358)}];

//# sourceMappingURL=55a02_%40reown_appkit_dist_esm_exports_core_576e2a0f.js.map