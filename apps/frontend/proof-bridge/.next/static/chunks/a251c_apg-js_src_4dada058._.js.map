{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":["file:///C:/code_base/hackathons/ProofBridge/node_modules/.pnpm/apg-js%404.4.0/node_modules/apg-js/src/apg-lib/identifiers.js"],"sourcesContent":["/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module exposes a list of named identifiers, shared across the parser generator\n// and the parsers that are generated.\n\nmodule.exports = {\n  // Identifies the operator type. Used by the generator\n  // to indicate operator types in the grammar object.\n  // Used by the [parser](./parser.html) when interpreting the grammar object.\n  /* the original ABNF operators */\n  ALT: 1 /* alternation */,\n  CAT: 2 /* concatenation */,\n  REP: 3 /* repetition */,\n  RNM: 4 /* rule name */,\n  TRG: 5 /* terminal range */,\n  TBS: 6 /* terminal binary string, case sensitive */,\n  TLS: 7 /* terminal literal string, case insensitive */,\n  /* the super set, SABNF operators */\n  UDT: 11 /* user-defined terminal */,\n  AND: 12 /* positive look ahead */,\n  NOT: 13 /* negative look ahead */,\n  BKR: 14 /* back reference to a previously matched rule name */,\n  BKA: 15 /* positive look behind */,\n  BKN: 16 /* negative look behind */,\n  ABG: 17 /* anchor - begin of string */,\n  AEN: 18 /* anchor - end of string */,\n  // Used by the parser and the user's `RNM` and `UDT` callback functions.\n  // Identifies the parser state as it traverses the parse tree nodes.\n  // - *ACTIVE* - indicates the downward direction through the parse tree node.\n  // - *MATCH* - indicates the upward direction and a phrase, of length \\> 0, has been successfully matched\n  // - *EMPTY* - indicates the upward direction and a phrase, of length = 0, has been successfully matched\n  // - *NOMATCH* - indicates the upward direction and the parser failed to match any phrase at all\n  ACTIVE: 100,\n  MATCH: 101,\n  EMPTY: 102,\n  NOMATCH: 103,\n  // Used by [`AST` translator](./ast.html) (semantic analysis) and the user's callback functions\n  // to indicate the direction of flow through the `AST` nodes.\n  // - *SEM_PRE* - indicates the downward (pre-branch) direction through the `AST` node.\n  // - *SEM_POST* - indicates the upward (post-branch) direction through the `AST` node.\n  SEM_PRE: 200,\n  SEM_POST: 201,\n  // Used by the user's callback functions to indicate to the `AST` translator (semantic analysis) how to proceed.\n  // - *SEM_OK* - normal return value\n  // - *SEM_SKIP* - if a callback function returns this value from the SEM_PRE state,\n  // the translator will skip processing all `AST` nodes in the branch below the current node.\n  // Ignored if returned from the SEM_POST state.\n  SEM_OK: 300,\n  SEM_SKIP: 301,\n  // Used in attribute generation to distinguish the necessary attribute categories.\n  // - *ATTR_N* - non-recursive\n  // - *ATTR_R* - recursive\n  // - *ATTR_MR* - belongs to a mutually-recursive set\n  ATTR_N: 400,\n  ATTR_R: 401,\n  ATTR_MR: 402,\n  // Look around values indicate whether the parser is in look ahead or look behind mode.\n  // Used by the tracing facility to indicate the look around mode in the trace records display.\n  // - *LOOKAROUND_NONE* - the parser is in normal parsing mode\n  // - *LOOKAROUND_AHEAD* - the parse is in look-ahead mode, phrase matching for operator `AND(&)` or `NOT(!)`\n  // - *LOOKAROUND_BEHIND* - the parse is in look-behind mode, phrase matching for operator `BKA(&&)` or `BKN(!!)`\n  LOOKAROUND_NONE: 500,\n  LOOKAROUND_AHEAD: 501,\n  LOOKAROUND_BEHIND: 502,\n  // Back reference rule mode indicators\n  // - *BKR_MODE_UM* - the back reference is using universal mode\n  // - *BKR_MODE_PM* - the back reference is using parent frame mode\n  // - *BKR_MODE_CS* - the back reference is using case-sensitive phrase matching\n  // - *BKR_MODE_CI* - the back reference is using case-insensitive phrase matching\n  BKR_MODE_UM: 601,\n  BKR_MODE_PM: 602,\n  BKR_MODE_CS: 603,\n  BKR_MODE_CI: 604,\n};\n"],"names":[],"mappings":"AAAA;;;uFAGuF,GACvF,sFAAsF;AACtF,sCAAsC;AAEtC,OAAO,OAAO,GAAG;IACf,sDAAsD;IACtD,oDAAoD;IACpD,4EAA4E;IAC5E,+BAA+B,GAC/B,KAAK,EAAE,eAAe;IACtB,KAAK,EAAE,iBAAiB;IACxB,KAAK,EAAE,cAAc;IACrB,KAAK,EAAE,aAAa;IACpB,KAAK,EAAE,kBAAkB;IACzB,KAAK,EAAE,0CAA0C;IACjD,KAAK,EAAE,6CAA6C;IACpD,kCAAkC,GAClC,KAAK,GAAG,yBAAyB;IACjC,KAAK,GAAG,uBAAuB;IAC/B,KAAK,GAAG,uBAAuB;IAC/B,KAAK,GAAG,oDAAoD;IAC5D,KAAK,GAAG,wBAAwB;IAChC,KAAK,GAAG,wBAAwB;IAChC,KAAK,GAAG,4BAA4B;IACpC,KAAK,GAAG,0BAA0B;IAClC,wEAAwE;IACxE,oEAAoE;IACpE,6EAA6E;IAC7E,yGAAyG;IACzG,wGAAwG;IACxG,gGAAgG;IAChG,QAAQ;IACR,OAAO;IACP,OAAO;IACP,SAAS;IACT,+FAA+F;IAC/F,6DAA6D;IAC7D,sFAAsF;IACtF,sFAAsF;IACtF,SAAS;IACT,UAAU;IACV,gHAAgH;IAChH,mCAAmC;IACnC,mFAAmF;IACnF,4FAA4F;IAC5F,+CAA+C;IAC/C,QAAQ;IACR,UAAU;IACV,kFAAkF;IAClF,6BAA6B;IAC7B,yBAAyB;IACzB,oDAAoD;IACpD,QAAQ;IACR,QAAQ;IACR,SAAS;IACT,uFAAuF;IACvF,8FAA8F;IAC9F,6DAA6D;IAC7D,4GAA4G;IAC5G,gHAAgH;IAChH,iBAAiB;IACjB,kBAAkB;IAClB,mBAAmB;IACnB,sCAAsC;IACtC,+DAA+D;IAC/D,kEAAkE;IAClE,+EAA+E;IAC/E,iFAAiF;IACjF,aAAa;IACb,aAAa;IACb,aAAa;IACb,aAAa;AACf","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///C:/code_base/hackathons/ProofBridge/node_modules/.pnpm/apg-js%404.4.0/node_modules/apg-js/src/apg-lib/style.js"],"sourcesContent":["module.exports = {\n\n  // Generated by apglib/style.js \n  CLASS_MONOSPACE: 'apg-mono',\n  CLASS_ACTIVE: 'apg-active',\n  CLASS_EMPTY: 'apg-empty',\n  CLASS_MATCH: 'apg-match',\n  CLASS_NOMATCH: 'apg-nomatch',\n  CLASS_LOOKAHEAD: 'apg-lh-match',\n  CLASS_LOOKBEHIND: 'apg-lb-match',\n  CLASS_REMAINDER: 'apg-remainder',\n  CLASS_CTRLCHAR: 'apg-ctrl-char',\n  CLASS_LINEEND: 'apg-line-end',\n  CLASS_ERROR: 'apg-error',\n  CLASS_PHRASE: 'apg-phrase',\n  CLASS_EMPTYPHRASE: 'apg-empty-phrase',\n  CLASS_STATE: 'apg-state',\n  CLASS_STATS: 'apg-stats',\n  CLASS_TRACE: 'apg-trace',\n  CLASS_GRAMMAR: 'apg-grammar',\n  CLASS_RULES: 'apg-rules',\n  CLASS_RULESLINK: 'apg-rules-link',\n  CLASS_ATTRIBUTES: 'apg-attrs',\n}\n"],"names":[],"mappings":"AAAA,OAAO,OAAO,GAAG;IAEf,gCAAgC;IAChC,iBAAiB;IACjB,cAAc;IACd,aAAa;IACb,aAAa;IACb,eAAe;IACf,iBAAiB;IACjB,kBAAkB;IAClB,iBAAiB;IACjB,gBAAgB;IAChB,eAAe;IACf,aAAa;IACb,cAAc;IACd,mBAAmB;IACnB,aAAa;IACb,aAAa;IACb,aAAa;IACb,eAAe;IACf,aAAa;IACb,iBAAiB;IACjB,kBAAkB;AACpB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///C:/code_base/hackathons/ProofBridge/node_modules/.pnpm/apg-js%404.4.0/node_modules/apg-js/src/apg-conv-api/transformers.js"],"sourcesContent":["/* eslint-disable prefer-destructuring */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-bitwise */\n/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module contains the actual encoding and decoding algorithms.\n// Throws \"RangeError\" exceptions on characters or bytes out of range for the given encoding.\n\n'use strict;';\n\nconst { Buffer } = require('buffer');\n\n/* decoding error codes */\nconst NON_SHORTEST = 0xfffffffc;\nconst TRAILING = 0xfffffffd;\nconst RANGE = 0xfffffffe;\nconst ILL_FORMED = 0xffffffff;\n\n/* mask[n] = 2**n - 1, ie. mask[n] = n bits on. e.g. mask[6] = %b111111 */\nconst mask = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023];\n\n/* ascii[n] = 'HH', where 0xHH = n, eg. ascii[254] = 'FE' */\nconst ascii = [\n  '00',\n  '01',\n  '02',\n  '03',\n  '04',\n  '05',\n  '06',\n  '07',\n  '08',\n  '09',\n  '0A',\n  '0B',\n  '0C',\n  '0D',\n  '0E',\n  '0F',\n  '10',\n  '11',\n  '12',\n  '13',\n  '14',\n  '15',\n  '16',\n  '17',\n  '18',\n  '19',\n  '1A',\n  '1B',\n  '1C',\n  '1D',\n  '1E',\n  '1F',\n  '20',\n  '21',\n  '22',\n  '23',\n  '24',\n  '25',\n  '26',\n  '27',\n  '28',\n  '29',\n  '2A',\n  '2B',\n  '2C',\n  '2D',\n  '2E',\n  '2F',\n  '30',\n  '31',\n  '32',\n  '33',\n  '34',\n  '35',\n  '36',\n  '37',\n  '38',\n  '39',\n  '3A',\n  '3B',\n  '3C',\n  '3D',\n  '3E',\n  '3F',\n  '40',\n  '41',\n  '42',\n  '43',\n  '44',\n  '45',\n  '46',\n  '47',\n  '48',\n  '49',\n  '4A',\n  '4B',\n  '4C',\n  '4D',\n  '4E',\n  '4F',\n  '50',\n  '51',\n  '52',\n  '53',\n  '54',\n  '55',\n  '56',\n  '57',\n  '58',\n  '59',\n  '5A',\n  '5B',\n  '5C',\n  '5D',\n  '5E',\n  '5F',\n  '60',\n  '61',\n  '62',\n  '63',\n  '64',\n  '65',\n  '66',\n  '67',\n  '68',\n  '69',\n  '6A',\n  '6B',\n  '6C',\n  '6D',\n  '6E',\n  '6F',\n  '70',\n  '71',\n  '72',\n  '73',\n  '74',\n  '75',\n  '76',\n  '77',\n  '78',\n  '79',\n  '7A',\n  '7B',\n  '7C',\n  '7D',\n  '7E',\n  '7F',\n  '80',\n  '81',\n  '82',\n  '83',\n  '84',\n  '85',\n  '86',\n  '87',\n  '88',\n  '89',\n  '8A',\n  '8B',\n  '8C',\n  '8D',\n  '8E',\n  '8F',\n  '90',\n  '91',\n  '92',\n  '93',\n  '94',\n  '95',\n  '96',\n  '97',\n  '98',\n  '99',\n  '9A',\n  '9B',\n  '9C',\n  '9D',\n  '9E',\n  '9F',\n  'A0',\n  'A1',\n  'A2',\n  'A3',\n  'A4',\n  'A5',\n  'A6',\n  'A7',\n  'A8',\n  'A9',\n  'AA',\n  'AB',\n  'AC',\n  'AD',\n  'AE',\n  'AF',\n  'B0',\n  'B1',\n  'B2',\n  'B3',\n  'B4',\n  'B5',\n  'B6',\n  'B7',\n  'B8',\n  'B9',\n  'BA',\n  'BB',\n  'BC',\n  'BD',\n  'BE',\n  'BF',\n  'C0',\n  'C1',\n  'C2',\n  'C3',\n  'C4',\n  'C5',\n  'C6',\n  'C7',\n  'C8',\n  'C9',\n  'CA',\n  'CB',\n  'CC',\n  'CD',\n  'CE',\n  'CF',\n  'D0',\n  'D1',\n  'D2',\n  'D3',\n  'D4',\n  'D5',\n  'D6',\n  'D7',\n  'D8',\n  'D9',\n  'DA',\n  'DB',\n  'DC',\n  'DD',\n  'DE',\n  'DF',\n  'E0',\n  'E1',\n  'E2',\n  'E3',\n  'E4',\n  'E5',\n  'E6',\n  'E7',\n  'E8',\n  'E9',\n  'EA',\n  'EB',\n  'EC',\n  'ED',\n  'EE',\n  'EF',\n  'F0',\n  'F1',\n  'F2',\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'FA',\n  'FB',\n  'FC',\n  'FD',\n  'FE',\n  'FF',\n];\n\n/* vector of base 64 characters */\nconst base64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='.split('');\n\n/* vector of base 64 character codes */\nconst base64codes = [];\nbase64chars.forEach((char) => {\n  base64codes.push(char.charCodeAt(0));\n});\n\n// The UTF8 algorithms.\nexports.utf8 = {\n  encode(chars) {\n    const bytes = [];\n    chars.forEach((char) => {\n      if (char >= 0 && char <= 0x7f) {\n        bytes.push(char);\n      } else if (char <= 0x7ff) {\n        bytes.push(0xc0 + ((char >> 6) & mask[5]));\n        bytes.push(0x80 + (char & mask[6]));\n      } else if (char < 0xd800 || (char > 0xdfff && char <= 0xffff)) {\n        bytes.push(0xe0 + ((char >> 12) & mask[4]));\n        bytes.push(0x80 + ((char >> 6) & mask[6]));\n        bytes.push(0x80 + (char & mask[6]));\n      } else if (char >= 0x10000 && char <= 0x10ffff) {\n        const u = (char >> 16) & mask[5];\n        bytes.push(0xf0 + (u >> 2));\n        bytes.push(0x80 + ((u & mask[2]) << 4) + ((char >> 12) & mask[4]));\n        bytes.push(0x80 + ((char >> 6) & mask[6]));\n        bytes.push(0x80 + (char & mask[6]));\n      } else {\n        throw new RangeError(`utf8.encode: character out of range: char: ${char}`);\n      }\n    });\n    return Buffer.from(bytes);\n  },\n  decode(buf, bom) {\n    /* bytes functions return error for non-shortest forms & values out of range */\n    function bytes2(b1, b2) {\n      /* U+0080..U+07FF */\n      /* 00000000 00000yyy yyxxxxxx | 110yyyyy 10xxxxxx */\n      if ((b2 & 0xc0) !== 0x80) {\n        return TRAILING;\n      }\n      const x = ((b1 & mask[5]) << 6) + (b2 & mask[6]);\n      if (x < 0x80) {\n        return NON_SHORTEST;\n      }\n      return x;\n    }\n    function bytes3(b1, b2, b3) {\n      /* U+0800..U+FFFF */\n      /* 00000000 zzzzyyyy yyxxxxxx | 1110zzzz 10yyyyyy 10xxxxxx */\n      if ((b3 & 0xc0) !== 0x80 || (b2 & 0xc0) !== 0x80) {\n        return TRAILING;\n      }\n      const x = ((b1 & mask[4]) << 12) + ((b2 & mask[6]) << 6) + (b3 & mask[6]);\n      if (x < 0x800) {\n        return NON_SHORTEST;\n      }\n      if (x >= 0xd800 && x <= 0xdfff) {\n        return RANGE;\n      }\n      return x;\n    }\n    function bytes4(b1, b2, b3, b4) {\n      /* U+10000..U+10FFFF */\n      /* 000uuuuu zzzzyyyy yyxxxxxx | 11110uuu 10uuzzzz 10yyyyyy 10xxxxxx */\n      if ((b4 & 0xc0) !== 0x80 || (b3 & 0xc0) !== 0x80 || (b2 & 0xc0) !== 0x80) {\n        return TRAILING;\n      }\n      const x =\n        ((((b1 & mask[3]) << 2) + ((b2 >> 4) & mask[2])) << 16) +\n        ((b2 & mask[4]) << 12) +\n        ((b3 & mask[6]) << 6) +\n        (b4 & mask[6]);\n      if (x < 0x10000) {\n        return NON_SHORTEST;\n      }\n      if (x > 0x10ffff) {\n        return RANGE;\n      }\n      return x;\n    }\n    let c;\n    let b1;\n    let i1;\n    let i2;\n    let i3;\n    let inc;\n    const len = buf.length;\n    let i = bom ? 3 : 0;\n    const chars = [];\n    while (i < len) {\n      b1 = buf[i];\n      c = ILL_FORMED;\n      const TRUE = true;\n      while (TRUE) {\n        if (b1 >= 0 && b1 <= 0x7f) {\n          /* U+0000..U+007F 00..7F */\n          c = b1;\n          inc = 1;\n          break;\n        }\n        i1 = i + 1;\n        if (i1 < len && b1 >= 0xc2 && b1 <= 0xdf) {\n          /* U+0080..U+07FF C2..DF 80..BF */\n          c = bytes2(b1, buf[i1]);\n          inc = 2;\n          break;\n        }\n        i2 = i + 2;\n        if (i2 < len && b1 >= 0xe0 && b1 <= 0xef) {\n          /* U+0800..U+FFFF */\n          c = bytes3(b1, buf[i1], buf[i2]);\n          inc = 3;\n          break;\n        }\n        i3 = i + 3;\n        if (i3 < len && b1 >= 0xf0 && b1 <= 0xf4) {\n          /* U+10000..U+10FFFF */\n          c = bytes4(b1, buf[i1], buf[i2], buf[i3]);\n          inc = 4;\n          break;\n        }\n        /* if we fall through to here, it is an ill-formed sequence */\n        break;\n      }\n      if (c > 0x10ffff) {\n        const at = `byte[${i}]`;\n        if (c === ILL_FORMED) {\n          throw new RangeError(`utf8.decode: ill-formed UTF8 byte sequence found at: ${at}`);\n        }\n        if (c === TRAILING) {\n          throw new RangeError(`utf8.decode: illegal trailing byte found at: ${at}`);\n        }\n        if (c === RANGE) {\n          throw new RangeError(`utf8.decode: code point out of range found at: ${at}`);\n        }\n        if (c === NON_SHORTEST) {\n          throw new RangeError(`utf8.decode: non-shortest form found at: ${at}`);\n        }\n        throw new RangeError(`utf8.decode: unrecognized error found at: ${at}`);\n      }\n      chars.push(c);\n      i += inc;\n    }\n    return chars;\n  },\n};\n\n// The UTF16BE algorithms.\nexports.utf16be = {\n  encode(chars) {\n    const bytes = [];\n    let char;\n    let h;\n    let l;\n    for (let i = 0; i < chars.length; i += 1) {\n      char = chars[i];\n      if ((char >= 0 && char <= 0xd7ff) || (char >= 0xe000 && char <= 0xffff)) {\n        bytes.push((char >> 8) & mask[8]);\n        bytes.push(char & mask[8]);\n      } else if (char >= 0x10000 && char <= 0x10ffff) {\n        l = char - 0x10000;\n        h = 0xd800 + (l >> 10);\n        l = 0xdc00 + (l & mask[10]);\n        bytes.push((h >> 8) & mask[8]);\n        bytes.push(h & mask[8]);\n        bytes.push((l >> 8) & mask[8]);\n        bytes.push(l & mask[8]);\n      } else {\n        throw new RangeError(`utf16be.encode: UTF16BE value out of range: char[${i}]: ${char}`);\n      }\n    }\n    return Buffer.from(bytes);\n  },\n  decode(buf, bom) {\n    /* assumes caller has insured that buf is a Buffer of bytes */\n    if (buf.length % 2 > 0) {\n      throw new RangeError(`utf16be.decode: data length must be even multiple of 2: length: ${buf.length}`);\n    }\n    const chars = [];\n    const len = buf.length;\n    let i = bom ? 2 : 0;\n    let j = 0;\n    let c;\n    let inc;\n    let i1;\n    let i3;\n    let high;\n    let low;\n    while (i < len) {\n      const TRUE = true;\n      while (TRUE) {\n        i1 = i + 1;\n        if (i1 < len) {\n          high = (buf[i] << 8) + buf[i1];\n          if (high < 0xd800 || high > 0xdfff) {\n            c = high;\n            inc = 2;\n            break;\n          }\n          i3 = i + 3;\n          if (i3 < len) {\n            low = (buf[i + 2] << 8) + buf[i3];\n            if (high <= 0xdbff && low >= 0xdc00 && low <= 0xdfff) {\n              c = 0x10000 + ((high - 0xd800) << 10) + (low - 0xdc00);\n              inc = 4;\n              break;\n            }\n          }\n        }\n        /* if we fall through to here, it is an ill-formed sequence */\n        throw new RangeError(`utf16be.decode: ill-formed UTF16BE byte sequence found: byte[${i}]`);\n      }\n      chars[j++] = c;\n      i += inc;\n    }\n    return chars;\n  },\n};\n\n// The UTF16LE algorithms.\nexports.utf16le = {\n  encode(chars) {\n    const bytes = [];\n    let char;\n    let h;\n    let l;\n    for (let i = 0; i < chars.length; i += 1) {\n      char = chars[i];\n      if ((char >= 0 && char <= 0xd7ff) || (char >= 0xe000 && char <= 0xffff)) {\n        bytes.push(char & mask[8]);\n        bytes.push((char >> 8) & mask[8]);\n      } else if (char >= 0x10000 && char <= 0x10ffff) {\n        l = char - 0x10000;\n        h = 0xd800 + (l >> 10);\n        l = 0xdc00 + (l & mask[10]);\n        bytes.push(h & mask[8]);\n        bytes.push((h >> 8) & mask[8]);\n        bytes.push(l & mask[8]);\n        bytes.push((l >> 8) & mask[8]);\n      } else {\n        throw new RangeError(`utf16le.encode: UTF16LE value out of range: char[${i}]: ${char}`);\n      }\n    }\n    return Buffer.from(bytes);\n  },\n  decode(buf, bom) {\n    /* assumes caller has insured that buf is a Buffer of bytes */\n    if (buf.length % 2 > 0) {\n      throw new RangeError(`utf16le.decode: data length must be even multiple of 2: length: ${buf.length}`);\n    }\n    const chars = [];\n    const len = buf.length;\n    let i = bom ? 2 : 0;\n    let j = 0;\n    let c;\n    let inc;\n    let i1;\n    let i3;\n    let high;\n    let low;\n    while (i < len) {\n      const TRUE = true;\n      while (TRUE) {\n        i1 = i + 1;\n        if (i1 < len) {\n          high = (buf[i1] << 8) + buf[i];\n          if (high < 0xd800 || high > 0xdfff) {\n            c = high;\n            inc = 2;\n            break;\n          }\n          i3 = i + 3;\n          if (i3 < len) {\n            low = (buf[i3] << 8) + buf[i + 2];\n            if (high <= 0xdbff && low >= 0xdc00 && low <= 0xdfff) {\n              c = 0x10000 + ((high - 0xd800) << 10) + (low - 0xdc00);\n              inc = 4;\n              break;\n            }\n          }\n        }\n        /* if we fall through to here, it is an ill-formed sequence */\n        throw new RangeError(`utf16le.decode: ill-formed UTF16LE byte sequence found: byte[${i}]`);\n      }\n      chars[j++] = c;\n      i += inc;\n    }\n    return chars;\n  },\n};\n\n// The UTF32BE algorithms.\nexports.utf32be = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 4);\n    let i = 0;\n    chars.forEach((char) => {\n      if ((char >= 0xd800 && char <= 0xdfff) || char > 0x10ffff) {\n        throw new RangeError(`utf32be.encode: UTF32BE character code out of range: char[${i / 4}]: ${char}`);\n      }\n      buf[i++] = (char >> 24) & mask[8];\n      buf[i++] = (char >> 16) & mask[8];\n      buf[i++] = (char >> 8) & mask[8];\n      buf[i++] = char & mask[8];\n    });\n    return buf;\n  },\n  decode(buf, bom) {\n    /* caller to insure buf is a Buffer of bytes */\n    if (buf.length % 4 > 0) {\n      throw new RangeError(`utf32be.decode: UTF32BE byte length must be even multiple of 4: length: ${buf.length}`);\n    }\n    const chars = [];\n    let i = bom ? 4 : 0;\n    for (; i < buf.length; i += 4) {\n      const char = (buf[i] << 24) + (buf[i + 1] << 16) + (buf[i + 2] << 8) + buf[i + 3];\n      if ((char >= 0xd800 && char <= 0xdfff) || char > 0x10ffff) {\n        throw new RangeError(`utf32be.decode: UTF32BE character code out of range: char[${i / 4}]: ${char}`);\n      }\n      chars.push(char);\n    }\n    return chars;\n  },\n};\n\n// The UTF32LE algorithms.\nexports.utf32le = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 4);\n    let i = 0;\n    chars.forEach((char) => {\n      if ((char >= 0xd800 && char <= 0xdfff) || char > 0x10ffff) {\n        throw new RangeError(`utf32le.encode: UTF32LE character code out of range: char[${i / 4}]: ${char}`);\n      }\n      buf[i++] = char & mask[8];\n      buf[i++] = (char >> 8) & mask[8];\n      buf[i++] = (char >> 16) & mask[8];\n      buf[i++] = (char >> 24) & mask[8];\n    });\n    return buf;\n  },\n  decode(buf, bom) {\n    /* caller to insure buf is a Buffer of bytes */\n    if (buf.length % 4 > 0) {\n      throw new RangeError(`utf32be.decode: UTF32LE byte length must be even multiple of 4: length: ${buf.length}`);\n    }\n    const chars = [];\n    let i = bom ? 4 : 0;\n    for (; i < buf.length; i += 4) {\n      const char = (buf[i + 3] << 24) + (buf[i + 2] << 16) + (buf[i + 1] << 8) + buf[i];\n      if ((char >= 0xd800 && char <= 0xdfff) || char > 0x10ffff) {\n        throw new RangeError(`utf32le.encode: UTF32LE character code out of range: char[${i / 4}]: ${char}`);\n      }\n      chars.push(char);\n    }\n    return chars;\n  },\n};\n\n// The UINT7 algorithms. ASCII or 7-bit unsigned integers.\nexports.uint7 = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length);\n    for (let i = 0; i < chars.length; i += 1) {\n      if (chars[i] > 0x7f) {\n        throw new RangeError(`uint7.encode: UINT7 character code out of range: char[${i}]: ${chars[i]}`);\n      }\n      buf[i] = chars[i];\n    }\n    return buf;\n  },\n  decode(buf) {\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 1) {\n      if (buf[i] > 0x7f) {\n        throw new RangeError(`uint7.decode: UINT7 character code out of range: byte[${i}]: ${buf[i]}`);\n      }\n      chars[i] = buf[i];\n    }\n    return chars;\n  },\n};\n\n// The UINT8 algorithms. BINARY, Latin 1 or 8-bit unsigned integers.\nexports.uint8 = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length);\n    for (let i = 0; i < chars.length; i += 1) {\n      if (chars[i] > 0xff) {\n        throw new RangeError(`uint8.encode: UINT8 character code out of range: char[${i}]: ${chars[i]}`);\n      }\n      buf[i] = chars[i];\n    }\n    return buf;\n  },\n  decode(buf) {\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 1) {\n      chars[i] = buf[i];\n    }\n    return chars;\n  },\n};\n\n// The UINT16BE algorithms. Big-endian 16-bit unsigned integers.\nexports.uint16be = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 2);\n    let i = 0;\n    chars.forEach((char) => {\n      if (char > 0xffff) {\n        throw new RangeError(`uint16be.encode: UINT16BE character code out of range: char[${i / 2}]: ${char}`);\n      }\n      buf[i++] = (char >> 8) & mask[8];\n      buf[i++] = char & mask[8];\n    });\n    return buf;\n  },\n  decode(buf) {\n    if (buf.length % 2 > 0) {\n      throw new RangeError(`uint16be.decode: UINT16BE byte length must be even multiple of 2: length: ${buf.length}`);\n    }\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 2) {\n      chars.push((buf[i] << 8) + buf[i + 1]);\n    }\n    return chars;\n  },\n};\n\n// The UINT16LE algorithms. Little-endian 16-bit unsigned integers.\nexports.uint16le = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 2);\n    let i = 0;\n    chars.forEach((char) => {\n      if (char > 0xffff) {\n        throw new RangeError(`uint16le.encode: UINT16LE character code out of range: char[${i / 2}]: ${char}`);\n      }\n      buf[i++] = char & mask[8];\n      buf[i++] = (char >> 8) & mask[8];\n    });\n    return buf;\n  },\n  decode(buf) {\n    if (buf.length % 2 > 0) {\n      throw new RangeError(`uint16le.decode: UINT16LE byte length must be even multiple of 2: length: ${buf.length}`);\n    }\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 2) {\n      chars.push((buf[i + 1] << 8) + buf[i]);\n    }\n    return chars;\n  },\n};\n\n// The UINT32BE algorithms. Big-endian 32-bit unsigned integers.\nexports.uint32be = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 4);\n    let i = 0;\n    chars.forEach((char) => {\n      buf[i++] = (char >> 24) & mask[8];\n      buf[i++] = (char >> 16) & mask[8];\n      buf[i++] = (char >> 8) & mask[8];\n      buf[i++] = char & mask[8];\n    });\n    return buf;\n  },\n  decode(buf) {\n    if (buf.length % 4 > 0) {\n      throw new RangeError(`uint32be.decode: UINT32BE byte length must be even multiple of 4: length: ${buf.length}`);\n    }\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 4) {\n      chars.push((buf[i] << 24) + (buf[i + 1] << 16) + (buf[i + 2] << 8) + buf[i + 3]);\n    }\n    return chars;\n  },\n};\n\n// The UINT32LE algorithms. Little-endian 32-bit unsigned integers.\nexports.uint32le = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 4);\n    let i = 0;\n    chars.forEach((char) => {\n      buf[i++] = char & mask[8];\n      buf[i++] = (char >> 8) & mask[8];\n      buf[i++] = (char >> 16) & mask[8];\n      buf[i++] = (char >> 24) & mask[8];\n    });\n    return buf;\n  },\n  decode(buf) {\n    /* caller to insure buf is a Buffer of bytes */\n    if (buf.length % 4 > 0) {\n      throw new RangeError(`uint32le.decode: UINT32LE byte length must be even multiple of 4: length: ${buf.length}`);\n    }\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 4) {\n      chars.push((buf[i + 3] << 24) + (buf[i + 2] << 16) + (buf[i + 1] << 8) + buf[i]);\n    }\n    return chars;\n  },\n};\n\n// The STRING algorithms. Converts JavaScript strings to Array of 32-bit integers and vice versa.\n// Uses the node.js Buffer's native \"utf16le\" capabilites.\nexports.string = {\n  encode(chars) {\n    return exports.utf16le.encode(chars).toString('utf16le');\n  },\n  decode(str) {\n    return exports.utf16le.decode(Buffer.from(str, 'utf16le'), 0);\n  },\n};\n\n// The ESCAPED algorithms.\n// Note that ESCAPED format contains only ASCII characters.\n// The characters are always in the form of a Buffer of bytes.\nexports.escaped = {\n  // Encodes an Array of 32-bit integers into ESCAPED format.\n  encode(chars) {\n    const bytes = [];\n    for (let i = 0; i < chars.length; i += 1) {\n      const char = chars[i];\n      if (char === 96) {\n        bytes.push(char);\n        bytes.push(char);\n      } else if (char === 10) {\n        bytes.push(char);\n      } else if (char >= 32 && char <= 126) {\n        bytes.push(char);\n      } else {\n        let str = '';\n        if (char >= 0 && char <= 31) {\n          str += `\\`x${ascii[char]}`;\n        } else if (char >= 127 && char <= 255) {\n          str += `\\`x${ascii[char]}`;\n        } else if (char >= 0x100 && char <= 0xffff) {\n          str += `\\`u${ascii[(char >> 8) & mask[8]]}${ascii[char & mask[8]]}`;\n        } else if (char >= 0x10000 && char <= 0xffffffff) {\n          str += '`u{';\n          const digit = (char >> 24) & mask[8];\n          if (digit > 0) {\n            str += ascii[digit];\n          }\n          str += `${ascii[(char >> 16) & mask[8]] + ascii[(char >> 8) & mask[8]] + ascii[char & mask[8]]}}`;\n        } else {\n          throw new Error('escape.encode(char): char > 0xffffffff not allowed');\n        }\n        const buf = Buffer.from(str);\n        buf.forEach((b) => {\n          bytes.push(b);\n        });\n      }\n    }\n    return Buffer.from(bytes);\n  },\n  // Decodes ESCAPED format from a Buffer of bytes to an Array of 32-bit integers.\n  decode(buf) {\n    function isHex(hex) {\n      if ((hex >= 48 && hex <= 57) || (hex >= 65 && hex <= 70) || (hex >= 97 && hex <= 102)) {\n        return true;\n      }\n      return false;\n    }\n    function getx(i, len, bufArg) {\n      const ret = { char: null, nexti: i + 2, error: true };\n      if (i + 1 < len) {\n        if (isHex(bufArg[i]) && isHex(bufArg[i + 1])) {\n          const str = String.fromCodePoint(bufArg[i], bufArg[i + 1]);\n          ret.char = parseInt(str, 16);\n          if (!Number.isNaN(ret.char)) {\n            ret.error = false;\n          }\n        }\n      }\n      return ret;\n    }\n    function getu(i, len, bufArg) {\n      const ret = { char: null, nexti: i + 4, error: true };\n      if (i + 3 < len) {\n        if (isHex(bufArg[i]) && isHex(bufArg[i + 1]) && isHex(bufArg[i + 2]) && isHex(bufArg[i + 3])) {\n          const str = String.fromCodePoint(bufArg[i], bufArg[i + 1], bufArg[i + 2], bufArg[i + 3]);\n          ret.char = parseInt(str, 16);\n          if (!Number.isNaN(ret.char)) {\n            ret.error = false;\n          }\n        }\n      }\n      return ret;\n    }\n    function getU(i, len, bufArg) {\n      const ret = { char: null, nexti: i + 4, error: true };\n      let str = '';\n      while (i < len && isHex(bufArg[i])) {\n        str += String.fromCodePoint(bufArg[i]);\n        // eslint-disable-next-line no-param-reassign\n        i += 1;\n      }\n      ret.char = parseInt(str, 16);\n      if (bufArg[i] === 125 && !Number.isNaN(ret.char)) {\n        ret.error = false;\n      }\n      ret.nexti = i + 1;\n      return ret;\n    }\n    const chars = [];\n    const len = buf.length;\n    let i1;\n    let ret;\n    let error;\n    let i = 0;\n    while (i < len) {\n      const TRUE = true;\n      while (TRUE) {\n        error = true;\n        if (buf[i] !== 96) {\n          /* unescaped character */\n          chars.push(buf[i]);\n          i += 1;\n          error = false;\n          break;\n        }\n        i1 = i + 1;\n        if (i1 >= len) {\n          break;\n        }\n        if (buf[i1] === 96) {\n          /* escaped grave accent */\n          chars.push(96);\n          i += 2;\n          error = false;\n          break;\n        }\n        if (buf[i1] === 120) {\n          ret = getx(i1 + 1, len, buf);\n          if (ret.error) {\n            break;\n          }\n          /* escaped hex */\n          chars.push(ret.char);\n          i = ret.nexti;\n          error = false;\n          break;\n        }\n        if (buf[i1] === 117) {\n          if (buf[i1 + 1] === 123) {\n            ret = getU(i1 + 2, len, buf);\n            if (ret.error) {\n              break;\n            }\n            /* escaped utf-32 */\n            chars.push(ret.char);\n            i = ret.nexti;\n            error = false;\n            break;\n          }\n          ret = getu(i1 + 1, len, buf);\n          if (ret.error) {\n            break;\n          }\n          /* escaped utf-16 */\n          chars.push(ret.char);\n          i = ret.nexti;\n          error = false;\n          break;\n        }\n        break;\n      }\n      if (error) {\n        throw new Error(`escaped.decode: ill-formed escape sequence at buf[${i}]`);\n      }\n    }\n    return chars;\n  },\n};\n\n// The line end conversion algorigthms.\nconst CR = 13;\nconst LF = 10;\nexports.lineEnds = {\n  crlf(chars) {\n    const lfchars = [];\n    let i = 0;\n    while (i < chars.length) {\n      switch (chars[i]) {\n        case CR:\n          if (i + 1 < chars.length && chars[i + 1] === LF) {\n            i += 2;\n          } else {\n            i += 1;\n          }\n          lfchars.push(CR);\n          lfchars.push(LF);\n          break;\n        case LF:\n          lfchars.push(CR);\n          lfchars.push(LF);\n          i += 1;\n          break;\n        default:\n          lfchars.push(chars[i]);\n          i += 1;\n          break;\n      }\n    }\n    if (lfchars.length > 0 && lfchars[lfchars.length - 1] !== LF) {\n      lfchars.push(CR);\n      lfchars.push(LF);\n    }\n    return lfchars;\n  },\n  lf(chars) {\n    const lfchars = [];\n    let i = 0;\n    while (i < chars.length) {\n      switch (chars[i]) {\n        case CR:\n          if (i + 1 < chars.length && chars[i + 1] === LF) {\n            i += 2;\n          } else {\n            i += 1;\n          }\n          lfchars.push(LF);\n          break;\n        case LF:\n          lfchars.push(LF);\n          i += 1;\n          break;\n        default:\n          lfchars.push(chars[i]);\n          i += 1;\n          break;\n      }\n    }\n    if (lfchars.length > 0 && lfchars[lfchars.length - 1] !== LF) {\n      lfchars.push(LF);\n    }\n    return lfchars;\n  },\n};\n\n// The base 64 algorithms.\nexports.base64 = {\n  encode(buf) {\n    if (buf.length === 0) {\n      return Buffer.alloc(0);\n    }\n    let i;\n    let j;\n    let n;\n    let tail = buf.length % 3;\n    tail = tail > 0 ? 3 - tail : 0;\n    let units = (buf.length + tail) / 3;\n    const base64 = Buffer.alloc(units * 4);\n    if (tail > 0) {\n      units -= 1;\n    }\n    i = 0;\n    j = 0;\n    for (let u = 0; u < units; u += 1) {\n      n = buf[i++] << 16;\n      n += buf[i++] << 8;\n      n += buf[i++];\n      base64[j++] = base64codes[(n >> 18) & mask[6]];\n      base64[j++] = base64codes[(n >> 12) & mask[6]];\n      base64[j++] = base64codes[(n >> 6) & mask[6]];\n      base64[j++] = base64codes[n & mask[6]];\n    }\n    if (tail === 0) {\n      return base64;\n    }\n    if (tail === 1) {\n      n = buf[i++] << 16;\n      n += buf[i] << 8;\n      base64[j++] = base64codes[(n >> 18) & mask[6]];\n      base64[j++] = base64codes[(n >> 12) & mask[6]];\n      base64[j++] = base64codes[(n >> 6) & mask[6]];\n      base64[j] = base64codes[64];\n      return base64;\n    }\n    if (tail === 2) {\n      n = buf[i] << 16;\n      base64[j++] = base64codes[(n >> 18) & mask[6]];\n      base64[j++] = base64codes[(n >> 12) & mask[6]];\n      base64[j++] = base64codes[64];\n      base64[j] = base64codes[64];\n      return base64;\n    }\n    return undefined;\n  },\n  decode(codes) {\n    /* remove white space and ctrl characters, validate & translate characters */\n    function validate(buf) {\n      const chars = [];\n      let tail = 0;\n      for (let i = 0; i < buf.length; i += 1) {\n        const char = buf[i];\n        const TRUE = true;\n        while (TRUE) {\n          if (char === 32 || char === 9 || char === 10 || char === 13) {\n            break;\n          }\n          if (char >= 65 && char <= 90) {\n            chars.push(char - 65);\n            break;\n          }\n          if (char >= 97 && char <= 122) {\n            chars.push(char - 71);\n            break;\n          }\n          if (char >= 48 && char <= 57) {\n            chars.push(char + 4);\n            break;\n          }\n          if (char === 43) {\n            chars.push(62);\n            break;\n          }\n          if (char === 47) {\n            chars.push(63);\n            break;\n          }\n          if (char === 61) {\n            chars.push(64);\n            tail += 1;\n            break;\n          }\n          /* invalid character */\n          throw new RangeError(`base64.decode: invalid character buf[${i}]: ${char}`);\n        }\n      }\n      /* validate length */\n      if (chars.length % 4 > 0) {\n        throw new RangeError(`base64.decode: string length not integral multiple of 4: ${chars.length}`);\n      }\n      /* validate tail */\n      switch (tail) {\n        case 0:\n          break;\n        case 1:\n          if (chars[chars.length - 1] !== 64) {\n            throw new RangeError('base64.decode: one tail character found: not last character');\n          }\n          break;\n        case 2:\n          if (chars[chars.length - 1] !== 64 || chars[chars.length - 2] !== 64) {\n            throw new RangeError('base64.decode: two tail characters found: not last characters');\n          }\n          break;\n        default:\n          throw new RangeError(`base64.decode: more than two tail characters found: ${tail}`);\n      }\n      return { tail, buf: Buffer.from(chars) };\n    }\n\n    if (codes.length === 0) {\n      return Buffer.alloc(0);\n    }\n    const val = validate(codes);\n    const { tail } = val;\n    const base64 = val.buf;\n    let i;\n    let j;\n    let n;\n    let units = base64.length / 4;\n    const buf = Buffer.alloc(units * 3 - tail);\n    if (tail > 0) {\n      units -= 1;\n    }\n    j = 0;\n    i = 0;\n    for (let u = 0; u < units; u += 1) {\n      n = base64[i++] << 18;\n      n += base64[i++] << 12;\n      n += base64[i++] << 6;\n      n += base64[i++];\n      buf[j++] = (n >> 16) & mask[8];\n      buf[j++] = (n >> 8) & mask[8];\n      buf[j++] = n & mask[8];\n    }\n    if (tail === 1) {\n      n = base64[i++] << 18;\n      n += base64[i++] << 12;\n      n += base64[i] << 6;\n      buf[j++] = (n >> 16) & mask[8];\n      buf[j] = (n >> 8) & mask[8];\n    }\n    if (tail === 2) {\n      n = base64[i++] << 18;\n      n += base64[i++] << 12;\n      buf[j] = (n >> 16) & mask[8];\n    }\n    return buf;\n  },\n  // Converts a base 64 Buffer of bytes to a JavaScript string with line breaks.\n  toString(buf) {\n    if (buf.length % 4 > 0) {\n      throw new RangeError(`base64.toString: input buffer length not multiple of 4: ${buf.length}`);\n    }\n    let str = '';\n    let lineLen = 0;\n    function buildLine(c1, c2, c3, c4) {\n      switch (lineLen) {\n        case 76:\n          str += `\\r\\n${c1}${c2}${c3}${c4}`;\n          lineLen = 4;\n          break;\n        case 75:\n          str += `${c1}\\r\\n${c2}${c3}${c4}`;\n          lineLen = 3;\n          break;\n        case 74:\n          str += `${c1 + c2}\\r\\n${c3}${c4}`;\n          lineLen = 2;\n          break;\n        case 73:\n          str += `${c1 + c2 + c3}\\r\\n${c4}`;\n          lineLen = 1;\n          break;\n        default:\n          str += c1 + c2 + c3 + c4;\n          lineLen += 4;\n          break;\n      }\n    }\n    function validate(c) {\n      if (c >= 65 && c <= 90) {\n        return true;\n      }\n      if (c >= 97 && c <= 122) {\n        return true;\n      }\n      if (c >= 48 && c <= 57) {\n        return true;\n      }\n      if (c === 43) {\n        return true;\n      }\n      if (c === 47) {\n        return true;\n      }\n      if (c === 61) {\n        return true;\n      }\n      return false;\n    }\n    for (let i = 0; i < buf.length; i += 4) {\n      for (let j = i; j < i + 4; j += 1) {\n        if (!validate(buf[j])) {\n          throw new RangeError(`base64.toString: buf[${j}]: ${buf[j]} : not valid base64 character code`);\n        }\n      }\n      buildLine(\n        String.fromCharCode(buf[i]),\n        String.fromCharCode(buf[i + 1]),\n        String.fromCharCode(buf[i + 2]),\n        String.fromCharCode(buf[i + 3])\n      );\n    }\n    return str;\n  },\n};\n"],"names":[],"mappings":"AAAA,uCAAuC,GACvC,8BAA8B,GAC9B,6BAA6B,GAC7B;;;uFAGuF,GACvF,oEAAoE;AACpE,6FAA6F;AAI7F,MAAM,EAAE,MAAM,EAAE;AAEhB,wBAAwB,GACxB,MAAM,eAAe;AACrB,MAAM,WAAW;AACjB,MAAM,QAAQ;AACd,MAAM,aAAa;AAEnB,wEAAwE,GACxE,MAAM,OAAO;IAAC;IAAG;IAAG;IAAG;IAAG;IAAI;IAAI;IAAI;IAAK;IAAK;IAAK;CAAK;AAE1D,0DAA0D,GAC1D,MAAM,QAAQ;IACZ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;I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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1316, "column": 0}, "map": {"version":3,"sources":["file:///C:/code_base/hackathons/ProofBridge/node_modules/.pnpm/apg-js%404.4.0/node_modules/apg-js/src/apg-conv-api/converter.js"],"sourcesContent":["/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module exposes the public encoding, decoding and conversion functions.\n// Its private functions provide the disassembling and interpetation of the source and destination encoding types.\n// In the case of Unicode encodings, private functions determine the presence of Byte Order Marks (BOMs), if any.\n//\n// Throws \"TypeError\" exceptions on input errors.\n//\n\n'use strict;';\n\nconst { Buffer } = require('buffer');\n\nconst trans = require('./transformers');\n\n/* types */\nconst UTF8 = 'UTF8';\nconst UTF16 = 'UTF16';\nconst UTF16BE = 'UTF16BE';\nconst UTF16LE = 'UTF16LE';\nconst UTF32 = 'UTF32';\nconst UTF32BE = 'UTF32BE';\nconst UTF32LE = 'UTF32LE';\nconst UINT7 = 'UINT7';\nconst ASCII = 'ASCII';\nconst BINARY = 'BINARY';\nconst UINT8 = 'UINT8';\nconst UINT16 = 'UINT16';\nconst UINT16LE = 'UINT16LE';\nconst UINT16BE = 'UINT16BE';\nconst UINT32 = 'UINT32';\nconst UINT32LE = 'UINT32LE';\nconst UINT32BE = 'UINT32BE';\nconst ESCAPED = 'ESCAPED';\nconst STRING = 'STRING';\n\n/* private functions */\n// Find the UTF8 BOM, if any.\nconst bom8 = function bom8(src) {\n  src.type = UTF8;\n  const buf = src.data;\n  src.bom = 0;\n  if (buf.length >= 3) {\n    if (buf[0] === 0xef && buf[1] === 0xbb && buf[2] === 0xbf) {\n      src.bom = 3;\n    }\n  }\n};\n// Find the UTF16 BOM, if any, and determine the UTF16 type.\n// Defaults to UTF16BE.\n// Throws TypeError exception if BOM does not match the specified type.\nconst bom16 = function bom16(src) {\n  const buf = src.data;\n  src.bom = 0;\n  switch (src.type) {\n    case UTF16:\n      src.type = UTF16BE;\n      if (buf.length >= 2) {\n        if (buf[0] === 0xfe && buf[1] === 0xff) {\n          src.bom = 2;\n        } else if (buf[0] === 0xff && buf[1] === 0xfe) {\n          src.type = UTF16LE;\n          src.bom = 2;\n        }\n      }\n      break;\n    case UTF16BE:\n      src.type = UTF16BE;\n      if (buf.length >= 2) {\n        if (buf[0] === 0xfe && buf[1] === 0xff) {\n          src.bom = 2;\n        } else if (buf[0] === 0xff && buf[1] === 0xfe) {\n          throw new TypeError(`src type: \"${UTF16BE}\" specified but BOM is for \"${UTF16LE}\"`);\n        }\n      }\n      break;\n    case UTF16LE:\n      src.type = UTF16LE;\n      if (buf.length >= 0) {\n        if (buf[0] === 0xfe && buf[1] === 0xff) {\n          throw new TypeError(`src type: \"${UTF16LE}\" specified but BOM is for \"${UTF16BE}\"`);\n        } else if (buf[0] === 0xff && buf[1] === 0xfe) {\n          src.bom = 2;\n        }\n      }\n      break;\n    default:\n      throw new TypeError(`UTF16 BOM: src type \"${src.type}\" unrecognized`);\n  }\n};\n// Find the UTF32 BOM, if any, and determine the UTF32 type.\n// Defaults to UTF32BE.\n// Throws exception if BOM does not match the specified type.\nconst bom32 = function bom32(src) {\n  const buf = src.data;\n  src.bom = 0;\n  switch (src.type) {\n    case UTF32:\n      src.type = UTF32BE;\n      if (buf.length >= 4) {\n        if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0xfe && buf[3] === 0xff) {\n          src.bom = 4;\n        }\n        if (buf[0] === 0xff && buf[1] === 0xfe && buf[2] === 0 && buf[3] === 0) {\n          src.type = UTF32LE;\n          src.bom = 4;\n        }\n      }\n      break;\n    case UTF32BE:\n      src.type = UTF32BE;\n      if (buf.length >= 4) {\n        if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0xfe && buf[3] === 0xff) {\n          src.bom = 4;\n        }\n        if (buf[0] === 0xff && buf[1] === 0xfe && buf[2] === 0 && buf[3] === 0) {\n          throw new TypeError(`src type: ${UTF32BE} specified but BOM is for ${UTF32LE}\"`);\n        }\n      }\n      break;\n    case UTF32LE:\n      src.type = UTF32LE;\n      if (buf.length >= 4) {\n        if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0xfe && buf[3] === 0xff) {\n          throw new TypeError(`src type: \"${UTF32LE}\" specified but BOM is for \"${UTF32BE}\"`);\n        }\n        if (buf[0] === 0xff && buf[1] === 0xfe && buf[2] === 0 && buf[3] === 0) {\n          src.bom = 4;\n        }\n      }\n      break;\n    default:\n      throw new TypeError(`UTF32 BOM: src type \"${src.type}\" unrecognized`);\n  }\n};\n// Validates the source encoding type and matching data.\n// If the BASE64: prefix is present, the base 64 decoding is done here as the initial step.\n// - For type STRING, data must be a JavaScript string.\n// - For type BASE64:*, data may be a string or Buffer.\n// - For all other types, data must be a Buffer.\n// - The BASE64: prefix is not allowed for type STRING.\nconst validateSrc = function validateSrc(type, data) {\n  function getType(typeArg) {\n    const ret = {\n      type: '',\n      base64: false,\n    };\n    const rx = /^(base64:)?([a-zA-Z0-9]+)$/i;\n    const result = rx.exec(typeArg);\n    if (result) {\n      if (result[2]) {\n        ret.type = result[2].toUpperCase();\n      }\n      if (result[1]) {\n        ret.base64 = true;\n      }\n    }\n    return ret;\n  }\n  const ret = getType(type.toUpperCase());\n  if (ret.base64) {\n    /* handle base 64 */\n    if (ret.type === STRING) {\n      throw new TypeError(`type: \"${type} \"BASE64:\" prefix not allowed with type ${STRING}`);\n    }\n    if (Buffer.isBuffer(data)) {\n      ret.data = trans.base64.decode(data);\n    } else if (typeof data === 'string') {\n      const buf = Buffer.from(data, 'ascii');\n      ret.data = trans.base64.decode(buf);\n    } else {\n      throw new TypeError(`type: \"${type} unrecognized data type: typeof(data): ${typeof data}`);\n    }\n  } else {\n    ret.data = data;\n  }\n  switch (ret.type) {\n    case UTF8:\n      bom8(ret);\n      break;\n    case UTF16:\n    case UTF16BE:\n    case UTF16LE:\n      bom16(ret);\n      break;\n    case UTF32:\n    case UTF32BE:\n    case UTF32LE:\n      bom32(ret);\n      break;\n    case UINT16:\n      ret.type = UINT16BE;\n      break;\n    case UINT32:\n      ret.type = UINT32BE;\n      break;\n    case ASCII:\n      ret.type = UINT7;\n      break;\n    case BINARY:\n      ret.type = UINT8;\n      break;\n    case UINT7:\n    case UINT8:\n    case UINT16LE:\n    case UINT16BE:\n    case UINT32LE:\n    case UINT32BE:\n    case STRING:\n    case ESCAPED:\n      break;\n    default:\n      throw new TypeError(`type: \"${type}\" not recognized`);\n  }\n  if (ret.type === STRING) {\n    if (typeof ret.data !== 'string') {\n      throw new TypeError(`type: \"${type}\" but data is not a string`);\n    }\n  } else if (!Buffer.isBuffer(ret.data)) {\n    throw new TypeError(`type: \"${type}\" but data is not a Buffer`);\n  }\n  return ret;\n};\n// Disassembles and validates the destination type.\n// `chars` must be an Array of integers.\n// The :BASE64 suffix is not allowed for type STRING.\nconst validateDst = function validateDst(type, chars) {\n  function getType(typeArg) {\n    let fix;\n    let rem;\n    const ret = {\n      crlf: false,\n      lf: false,\n      base64: false,\n      type: '',\n    };\n    /* prefix, if any */\n    const TRUE = true;\n    while (TRUE) {\n      rem = typeArg;\n      fix = typeArg.slice(0, 5);\n      if (fix === 'CRLF:') {\n        ret.crlf = true;\n        rem = typeArg.slice(5);\n        break;\n      }\n      fix = typeArg.slice(0, 3);\n      if (fix === 'LF:') {\n        ret.lf = true;\n        rem = typeArg.slice(3);\n        break;\n      }\n      break;\n    }\n    /* suffix, if any */\n    fix = rem.split(':');\n    if (fix.length === 1) {\n      // eslint-disable-next-line prefer-destructuring\n      ret.type = fix[0];\n    } else if (fix.length === 2 && fix[1] === 'BASE64') {\n      ret.base64 = true;\n      // eslint-disable-next-line prefer-destructuring\n      ret.type = fix[0];\n    }\n    return ret;\n  }\n  if (!Array.isArray(chars)) {\n    throw new TypeError(`dst chars: not array: \"${typeof chars}`);\n  }\n  if (typeof type !== 'string') {\n    throw new TypeError(`dst type: not string: \"${typeof type}`);\n  }\n  const ret = getType(type.toUpperCase());\n  switch (ret.type) {\n    case UTF8:\n    case UTF16BE:\n    case UTF16LE:\n    case UTF32BE:\n    case UTF32LE:\n    case UINT7:\n    case UINT8:\n    case UINT16LE:\n    case UINT16BE:\n    case UINT32LE:\n    case UINT32BE:\n    case ESCAPED:\n      break;\n    case STRING:\n      if (ret.base64) {\n        throw new TypeError(`\":BASE64\" suffix not allowed with type ${STRING}`);\n      }\n      break;\n    case ASCII:\n      ret.type = UINT7;\n      break;\n    case BINARY:\n      ret.type = UINT8;\n      break;\n    case UTF16:\n      ret.type = UTF16BE;\n      break;\n    case UTF32:\n      ret.type = UTF32BE;\n      break;\n    case UINT16:\n      ret.type = UINT16BE;\n      break;\n    case UINT32:\n      ret.type = UINT32BE;\n      break;\n    default:\n      throw new TypeError(`dst type unrecognized: \"${type}\" : must have form [crlf:|lf:]type[:base64]`);\n  }\n  return ret;\n};\n// Select and call the requested encoding function.\nconst encode = function encode(type, chars) {\n  switch (type) {\n    case UTF8:\n      return trans.utf8.encode(chars);\n    case UTF16BE:\n      return trans.utf16be.encode(chars);\n    case UTF16LE:\n      return trans.utf16le.encode(chars);\n    case UTF32BE:\n      return trans.utf32be.encode(chars);\n    case UTF32LE:\n      return trans.utf32le.encode(chars);\n    case UINT7:\n      return trans.uint7.encode(chars);\n    case UINT8:\n      return trans.uint8.encode(chars);\n    case UINT16BE:\n      return trans.uint16be.encode(chars);\n    case UINT16LE:\n      return trans.uint16le.encode(chars);\n    case UINT32BE:\n      return trans.uint32be.encode(chars);\n    case UINT32LE:\n      return trans.uint32le.encode(chars);\n    case STRING:\n      return trans.string.encode(chars);\n    case ESCAPED:\n      return trans.escaped.encode(chars);\n    default:\n      throw new TypeError(`encode type \"${type}\" not recognized`);\n  }\n};\n// Select and call the requested decoding function.\n// `src` contains BOM information as well as the source type and data.\nconst decode = function decode(src) {\n  switch (src.type) {\n    case UTF8:\n      return trans.utf8.decode(src.data, src.bom);\n    case UTF16LE:\n      return trans.utf16le.decode(src.data, src.bom);\n    case UTF16BE:\n      return trans.utf16be.decode(src.data, src.bom);\n    case UTF32BE:\n      return trans.utf32be.decode(src.data, src.bom);\n    case UTF32LE:\n      return trans.utf32le.decode(src.data, src.bom);\n    case UINT7:\n      return trans.uint7.decode(src.data);\n    case UINT8:\n      return trans.uint8.decode(src.data);\n    case UINT16BE:\n      return trans.uint16be.decode(src.data);\n    case UINT16LE:\n      return trans.uint16le.decode(src.data);\n    case UINT32BE:\n      return trans.uint32be.decode(src.data);\n    case UINT32LE:\n      return trans.uint32le.decode(src.data);\n    case STRING:\n      return trans.string.decode(src.data);\n    case ESCAPED:\n      return trans.escaped.decode(src.data);\n    default:\n      throw new TypeError(`decode type \"${src.type}\" not recognized`);\n  }\n};\n\n// The public decoding function. Returns an array of integers.\nexports.decode = function exportsDecode(type, data) {\n  const src = validateSrc(type, data);\n  return decode(src);\n};\n// The public encoding function. Returns a Buffer-typed byte array.\nexports.encode = function exportsEncode(type, chars) {\n  let c;\n  let buf;\n  const dst = validateDst(type, chars);\n  if (dst.crlf) {\n    /* prefix with CRLF line end conversion, don't contaminate caller's chars array */\n    c = trans.lineEnds.crlf(chars);\n    buf = encode(dst.type, c);\n  } else if (dst.lf) {\n    /* prefix with LF line end conversion, don't contaminate caller's chars array */\n    c = trans.lineEnds.lf(chars);\n    buf = encode(dst.type, c);\n  } else {\n    buf = encode(dst.type, chars);\n  }\n  if (dst.base64) {\n    /* post base 64 encoding */\n    buf = trans.base64.encode(buf);\n  }\n  return buf;\n};\n// Converts data of type `srcType` to data of type `dstType`.\n// `srcData` may be a JavaScript String, or node.js Buffer, depending on the corresponding type.\nconst convert = function convert(srcType, srcData, dstType) {\n  return exports.encode(dstType, exports.decode(srcType, srcData));\n};\nexports.convert = convert;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1721, "column": 0}, "map": {"version":3,"sources":["file:///C:/code_base/hackathons/ProofBridge/node_modules/.pnpm/apg-js%404.4.0/node_modules/apg-js/src/apg-lib/emitcss.js"],"sourcesContent":["// This module has been developed programmatically in the `apg-lib` build process.\n// It is used to build web pages programatically on the fly without the need for <script> or <style> tags.\n\nmodule.exports = function emittcss(){\nreturn '/* This file automatically generated by jsonToless() and LESS. */\\n.apg-mono {\\n  font-family: monospace;\\n}\\n.apg-active {\\n  font-weight: bold;\\n  color: #000000;\\n}\\n.apg-match {\\n  font-weight: bold;\\n  color: #264BFF;\\n}\\n.apg-empty {\\n  font-weight: bold;\\n  color: #0fbd0f;\\n}\\n.apg-nomatch {\\n  font-weight: bold;\\n  color: #FF4000;\\n}\\n.apg-lh-match {\\n  font-weight: bold;\\n  color: #1A97BA;\\n}\\n.apg-lb-match {\\n  font-weight: bold;\\n  color: #5F1687;\\n}\\n.apg-remainder {\\n  font-weight: bold;\\n  color: #999999;\\n}\\n.apg-ctrl-char {\\n  font-weight: bolder;\\n  font-style: italic;\\n  font-size: 0.6em;\\n}\\n.apg-line-end {\\n  font-weight: bold;\\n  color: #000000;\\n}\\n.apg-error {\\n  font-weight: bold;\\n  color: #FF4000;\\n}\\n.apg-phrase {\\n  color: #000000;\\n  background-color: #8caae6;\\n}\\n.apg-empty-phrase {\\n  color: #0fbd0f;\\n}\\ntable.apg-state {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: left;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-state th,\\ntable.apg-state td {\\n  text-align: left;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-state th:nth-last-child(2),\\ntable.apg-state td:nth-last-child(2) {\\n  text-align: right;\\n}\\ntable.apg-state caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-stats {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-stats th,\\ntable.apg-stats td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-stats caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-trace {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-trace caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-trace th,\\ntable.apg-trace td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-trace th:last-child,\\ntable.apg-trace th:nth-last-child(2),\\ntable.apg-trace td:last-child,\\ntable.apg-trace td:nth-last-child(2) {\\n  text-align: left;\\n}\\ntable.apg-grammar {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-grammar caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-grammar th,\\ntable.apg-grammar td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-grammar th:last-child,\\ntable.apg-grammar td:last-child {\\n  text-align: left;\\n}\\ntable.apg-rules {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-rules caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-rules th,\\ntable.apg-rules td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-rules a {\\n  color: #003399 !important;\\n}\\ntable.apg-rules a:hover {\\n  color: #8caae6 !important;\\n}\\ntable.apg-attrs {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: center;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-attrs caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-attrs th,\\ntable.apg-attrs td {\\n  text-align: center;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-attrs th:nth-child(1),\\ntable.apg-attrs th:nth-child(2),\\ntable.apg-attrs th:nth-child(3) {\\n  text-align: right;\\n}\\ntable.apg-attrs td:nth-child(1),\\ntable.apg-attrs td:nth-child(2),\\ntable.apg-attrs td:nth-child(3) {\\n  text-align: right;\\n}\\ntable.apg-attrs a {\\n  color: #003399 !important;\\n}\\ntable.apg-attrs a:hover {\\n  color: #8caae6 !important;\\n}\\n';\n}\n"],"names":[],"mappings":"AAAA,kFAAkF;AAClF,0GAA0G;AAE1G,OAAO,OAAO,GAAG,SAAS;IAC1B,OAAO;AACP","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1729, "column": 0}, "map": {"version":3,"sources":["file:///C:/code_base/hackathons/ProofBridge/node_modules/.pnpm/apg-js%404.4.0/node_modules/apg-js/src/apg-lib/utilities.js"],"sourcesContent":["/* eslint-disable func-names */\n/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module exports a variety of utility functions that support\n// [`apg`](https://github.com/ldthomas/apg-js2), [`apg-lib`](https://github.com/ldthomas/apg-js2-lib)\n// and the generated parser applications.\n\nconst style = require('./style');\nconst converter = require('../apg-conv-api/converter');\nconst emitCss = require('./emitcss');\nconst id = require('./identifiers');\n\nconst thisFileName = 'utilities.js: ';\n\n/* translate (implied) phrase beginning character and length to actual first and last character indexes */\n/* used by multiple phrase handling functions */\nconst getBounds = function (length, begArg, len) {\n  let end;\n  let beg = begArg;\n  const TRUE = true;\n  while (TRUE) {\n    if (length <= 0) {\n      beg = 0;\n      end = 0;\n      break;\n    }\n    if (typeof beg !== 'number') {\n      beg = 0;\n      end = length;\n      break;\n    }\n    if (beg >= length) {\n      beg = length;\n      end = length;\n      break;\n    }\n    if (typeof len !== 'number') {\n      end = length;\n      break;\n    }\n    end = beg + len;\n    if (end > length) {\n      end = length;\n      break;\n    }\n    break;\n  }\n  return {\n    beg,\n    end,\n  };\n};\n// Generates a complete, minimal HTML5 page, inserting the user's HTML text on the page.\n// - *html* - the page text in HTML format\n// - *title* - the HTML page `<title>` - defaults to `htmlToPage`.\nexports.htmlToPage = function (html, titleArg) {\n  let title;\n  if (typeof html !== 'string') {\n    throw new Error(`${thisFileName}htmlToPage: input HTML is not a string`);\n  }\n  if (typeof titleArg !== 'string') {\n    title = 'htmlToPage';\n  } else {\n    title = titleArg;\n  }\n  let page = '';\n  page += '<!DOCTYPE html>\\n';\n  page += '<html lang=\"en\">\\n';\n  page += '<head>\\n';\n  page += '<meta charset=\"utf-8\">\\n';\n  page += `<title>${title}</title>\\n`;\n  page += '<style>\\n';\n  page += emitCss();\n  page += '</style>\\n';\n  page += '</head>\\n<body>\\n';\n  page += `<p>${new Date()}</p>\\n`;\n  page += html;\n  page += '</body>\\n</html>\\n';\n  return page;\n};\n// Formats the returned object from `parser.parse()`\n// into an HTML table.\n// ```\n// return {\n//   success : sysData.success,\n//   state : sysData.state,\n//   length : charsLength,\n//   matched : sysData.phraseLength,\n//   maxMatched : maxMatched,\n//   maxTreeDepth : maxTreeDepth,\n//   nodeHits : nodeHits,\n//   inputLength : chars.length,\n//   subBegin : charsBegin,\n//   subEnd : charsEnd,\n//   subLength : charsLength\n// };\n// ```\nexports.parserResultToHtml = function (result, caption) {\n  let cap = null;\n  if (typeof caption === 'string' && caption !== '') {\n    cap = caption;\n  }\n  let success;\n  let state;\n  if (result.success === true) {\n    success = `<span class=\"${style.CLASS_MATCH}\">true</span>`;\n  } else {\n    success = `<span class=\"${style.CLASS_NOMATCH}\">false</span>`;\n  }\n  if (result.state === id.EMPTY) {\n    state = `<span class=\"${style.CLASS_EMPTY}\">EMPTY</span>`;\n  } else if (result.state === id.MATCH) {\n    state = `<span class=\"${style.CLASS_MATCH}\">MATCH</span>`;\n  } else if (result.state === id.NOMATCH) {\n    state = `<span class=\"${style.CLASS_NOMATCH}\">NOMATCH</span>`;\n  } else {\n    state = `<span class=\"${style.CLASS_NOMATCH}\">unrecognized</span>`;\n  }\n  let html = '';\n  html += `<table class=\"${style.CLASS_STATE}\">\\n`;\n  if (cap) {\n    html += `<caption>${cap}</caption>\\n`;\n  }\n  html += '<tr><th>state item</th><th>value</th><th>description</th></tr>\\n';\n  html += `<tr><td>parser success</td><td>${success}</td>\\n`;\n  html += `<td><span class=\"${style.CLASS_MATCH}\">true</span> if the parse succeeded,\\n`;\n  html += ` <span class=\"${style.CLASS_NOMATCH}\">false</span> otherwise`;\n  html += '<br><i>NOTE: for success, entire string must be matched</i></td></tr>\\n';\n  html += `<tr><td>parser state</td><td>${state}</td>\\n`;\n  html += `<td><span class=\"${style.CLASS_EMPTY}\">EMPTY</span>, `;\n  html += `<span class=\"${style.CLASS_MATCH}\">MATCH</span> or \\n`;\n  html += `<span class=\"${style.CLASS_NOMATCH}\">NOMATCH</span></td></tr>\\n`;\n  html += `<tr><td>string length</td><td>${result.length}</td><td>length of the input (sub)string</td></tr>\\n`;\n  html += `<tr><td>matched length</td><td>${result.matched}</td><td>number of input string characters matched</td></tr>\\n`;\n  html += `<tr><td>max matched</td><td>${result.maxMatched}</td><td>maximum number of input string characters matched</td></tr>\\n`;\n  html += `<tr><td>max tree depth</td><td>${result.maxTreeDepth}</td><td>maximum depth of the parse tree reached</td></tr>\\n`;\n  html += `<tr><td>node hits</td><td>${result.nodeHits}</td><td>number of parse tree node hits (opcode function calls)</td></tr>\\n`;\n  html += `<tr><td>input length</td><td>${result.inputLength}</td><td>length of full input string</td></tr>\\n`;\n  html += `<tr><td>sub-string begin</td><td>${result.subBegin}</td><td>sub-string first character index</td></tr>\\n`;\n  html += `<tr><td>sub-string end</td><td>${result.subEnd}</td><td>sub-string end-of-string index</td></tr>\\n`;\n  html += `<tr><td>sub-string length</td><td>${result.subLength}</td><td>sub-string length</td></tr>\\n`;\n  html += '</table>\\n';\n  return html;\n};\n// Translates a sub-array of integer character codes into a string.\n// Very useful in callback functions to translate the matched phrases into strings.\nexports.charsToString = function (chars, phraseIndex, phraseLength) {\n  let beg;\n  let end;\n  if (typeof phraseIndex === 'number') {\n    if (phraseIndex >= chars.length) {\n      return '';\n    }\n    beg = phraseIndex < 0 ? 0 : phraseIndex;\n  } else {\n    beg = 0;\n  }\n  if (typeof phraseLength === 'number') {\n    if (phraseLength <= 0) {\n      return '';\n    }\n    end = phraseLength > chars.length - beg ? chars.length : beg + phraseLength;\n  } else {\n    end = chars.length;\n  }\n  if (beg < end) {\n    return converter.encode('UTF16LE', chars.slice(beg, end)).toString('utf16le');\n  }\n  return '';\n};\n// Translates a string into an array of integer character codes.\nexports.stringToChars = function (string) {\n  return converter.decode('STRING', string);\n};\n// Translates an opcode identifier into a human-readable string.\nexports.opcodeToString = function (type) {\n  let ret = 'unknown';\n  switch (type) {\n    case id.ALT:\n      ret = 'ALT';\n      break;\n    case id.CAT:\n      ret = 'CAT';\n      break;\n    case id.RNM:\n      ret = 'RNM';\n      break;\n    case id.UDT:\n      ret = 'UDT';\n      break;\n    case id.AND:\n      ret = 'AND';\n      break;\n    case id.NOT:\n      ret = 'NOT';\n      break;\n    case id.REP:\n      ret = 'REP';\n      break;\n    case id.TRG:\n      ret = 'TRG';\n      break;\n    case id.TBS:\n      ret = 'TBS';\n      break;\n    case id.TLS:\n      ret = 'TLS';\n      break;\n    case id.BKR:\n      ret = 'BKR';\n      break;\n    case id.BKA:\n      ret = 'BKA';\n      break;\n    case id.BKN:\n      ret = 'BKN';\n      break;\n    case id.ABG:\n      ret = 'ABG';\n      break;\n    case id.AEN:\n      ret = 'AEN';\n      break;\n    default:\n      throw new Error('unrecognized opcode');\n  }\n  return ret;\n};\n// Translates an state identifier into a human-readable string.\nexports.stateToString = function (state) {\n  let ret = 'unknown';\n  switch (state) {\n    case id.ACTIVE:\n      ret = 'ACTIVE';\n      break;\n    case id.MATCH:\n      ret = 'MATCH';\n      break;\n    case id.EMPTY:\n      ret = 'EMPTY';\n      break;\n    case id.NOMATCH:\n      ret = 'NOMATCH';\n      break;\n    default:\n      throw new Error('unrecognized state');\n  }\n  return ret;\n};\n// Array which translates all 128, 7-bit ASCII character codes to their respective HTML format.\nexports.asciiChars = [\n  'NUL',\n  'SOH',\n  'STX',\n  'ETX',\n  'EOT',\n  'ENQ',\n  'ACK',\n  'BEL',\n  'BS',\n  'TAB',\n  'LF',\n  'VT',\n  'FF',\n  'CR',\n  'SO',\n  'SI',\n  'DLE',\n  'DC1',\n  'DC2',\n  'DC3',\n  'DC4',\n  'NAK',\n  'SYN',\n  'ETB',\n  'CAN',\n  'EM',\n  'SUB',\n  'ESC',\n  'FS',\n  'GS',\n  'RS',\n  'US',\n  '&nbsp;',\n  '!',\n  '&#34;',\n  '#',\n  '$',\n  '%',\n  '&#38;',\n  '&#39;',\n  '(',\n  ')',\n  '*',\n  '+',\n  ',',\n  '-',\n  '.',\n  '/',\n  '0',\n  '1',\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  ':',\n  ';',\n  '&#60;',\n  '=',\n  '&#62;',\n  '?',\n  '@',\n  'A',\n  'B',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z',\n  '[',\n  '&#92;',\n  ']',\n  '^',\n  '_',\n  '`',\n  'a',\n  'b',\n  'c',\n  'd',\n  'e',\n  'f',\n  'g',\n  'h',\n  'i',\n  'j',\n  'k',\n  'l',\n  'm',\n  'n',\n  'o',\n  'p',\n  'q',\n  'r',\n  's',\n  't',\n  'u',\n  'v',\n  'w',\n  'x',\n  'y',\n  'z',\n  '{',\n  '|',\n  '}',\n  '~',\n  'DEL',\n];\n// Translates a single character to hexadecimal with leading zeros for 2, 4, or 8 digit display.\nexports.charToHex = function (char) {\n  let ch = char.toString(16).toUpperCase();\n  switch (ch.length) {\n    case 1:\n    case 3:\n    case 7:\n      ch = `0${ch}`;\n      break;\n    case 2:\n    case 6:\n      ch = `00${ch}`;\n      break;\n    case 4:\n      break;\n    case 5:\n      ch = `000${ch}`;\n      break;\n    default:\n      throw new Error('unrecognized option');\n  }\n  return ch;\n};\n// Translates a sub-array of character codes to decimal display format.\nexports.charsToDec = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToDec: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  if (bounds.end > bounds.beg) {\n    ret += chars[bounds.beg];\n    for (let i = bounds.beg + 1; i < bounds.end; i += 1) {\n      ret += `,${chars[i]}`;\n    }\n  }\n  return ret;\n};\n// Translates a sub-array of character codes to hexadecimal display format.\nexports.charsToHex = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToHex: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  if (bounds.end > bounds.beg) {\n    ret += `\\\\x${exports.charToHex(chars[bounds.beg])}`;\n    for (let i = bounds.beg + 1; i < bounds.end; i += 1) {\n      ret += `,\\\\x${exports.charToHex(chars[i])}`;\n    }\n  }\n  return ret;\n};\nexports.charsToHtmlEntities = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToHex: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  if (bounds.end > bounds.beg) {\n    for (let i = bounds.beg; i < bounds.end; i += 1) {\n      ret += `&#x${chars[i].toString(16)};`;\n    }\n  }\n  return ret;\n};\n// Translates a sub-array of character codes to Unicode display format.\nfunction isUnicode(char) {\n  if (char >= 0xd800 && char <= 0xdfff) {\n    return false;\n  }\n  if (char > 0x10ffff) {\n    return false;\n  }\n  return true;\n}\nexports.charsToUnicode = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToUnicode: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  if (bounds.end > bounds.beg) {\n    for (let i = bounds.beg; i < bounds.end; i += 1) {\n      if (isUnicode(chars[i])) {\n        ret += `&#${chars[i]};`;\n      } else {\n        ret += ` U+${exports.charToHex(chars[i])}`;\n      }\n    }\n  }\n  return ret;\n};\n// Translates a sub-array of character codes to JavaScript Unicode display format (`\\uXXXX`).\nexports.charsToJsUnicode = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToJsUnicode: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  if (bounds.end > bounds.beg) {\n    ret += `\\\\u${exports.charToHex(chars[bounds.beg])}`;\n    for (let i = bounds.beg + 1; i < bounds.end; i += 1) {\n      ret += `,\\\\u${exports.charToHex(chars[i])}`;\n    }\n  }\n  return ret;\n};\n// Translates a sub-array of character codes to printing ASCII character display format.\nexports.charsToAscii = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToAscii: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  for (let i = bounds.beg; i < bounds.end; i += 1) {\n    const char = chars[i];\n    if (char >= 32 && char <= 126) {\n      ret += String.fromCharCode(char);\n    } else {\n      ret += `\\\\x${exports.charToHex(char)}`;\n    }\n  }\n  return ret;\n};\n// Translates a sub-array of character codes to HTML display format.\nexports.charsToAsciiHtml = function (chars, beg, len) {\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToAsciiHtml: input must be an array of integers`);\n  }\n  let html = '';\n  let char;\n  const bounds = getBounds(chars.length, beg, len);\n  for (let i = bounds.beg; i < bounds.end; i += 1) {\n    char = chars[i];\n    if (char < 32 || char === 127) {\n      /* control characters */\n      html += `<span class=\"${style.CLASS_CTRLCHAR}\">${exports.asciiChars[char]}</span>`;\n    } else if (char > 127) {\n      /* non-ASCII */\n      html += `<span class=\"${style.CLASS_CTRLCHAR}\">U+${exports.charToHex(char)}</span>`;\n    } else {\n      /* printing ASCII, 32 <= char <= 126 */\n      html += exports.asciiChars[char];\n    }\n  }\n  return html;\n};\n// Translates a JavaScript string to HTML display format.\nexports.stringToAsciiHtml = function (str) {\n  const chars = converter.decode('STRING', str);\n  return this.charsToAsciiHtml(chars);\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2257, "column": 0}, "map": {"version":3,"sources":["file:///C:/code_base/hackathons/ProofBridge/node_modules/.pnpm/apg-js%404.4.0/node_modules/apg-js/src/apg-lib/ast.js"],"sourcesContent":["/* eslint-disable guard-for-in */\n/* eslint-disable no-restricted-syntax */\n/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module is used by the parser to build an [Abstract Syntax Tree](https://en.wikipedia.org/wiki/Abstract_syntax_tree) (AST).\n// The AST can be thought of as a subset of the full parse tree.\n// Each node of the AST holds the phrase that was matched at the corresponding, named parse tree node.\n// It is built as the parser successfully matches phrases to the rule names\n// (`RNM` operators) and `UDT`s as it parses an input string.\n// The user controls which `RNM` or `UDT` names to keep on the AST.\n// The user can also associate callback functions with some or all of the retained\n// AST nodes to be used to translate the node phrases. That is, associate semantic\n// actions to the matched phrases.\n// Translating the AST rather that attempting to apply semantic actions during\n// the parsing process, has the advantage that there is no backtracking and that the phrases\n// are known while traversing down tree as will as up.\n//\n// Let `ast` be an `ast.js` object. To identify a node to be kept on the AST:\n// ```\n// ast.callbacks[\"rulename\"] = true; (all nodes default to false)\n// ```\n// To associate a callback function with a node:\n// ```\n// ast.callbacks[\"rulename\"] = fn\n// ```\n// `rulename` is any `RNM` or `UDT` name defined by the associated grammar\n// and `fn` is a user-written callback function.\n// (See [`apg-examples`](https://github.com/ldthomas/apg-js2-examples/tree/master/ast) for examples of how to create an AST,\n// define the nodes and callback functions and attach it to a parser.)\nmodule.exports = function exportsAst() {\n  const id = require('./identifiers');\n  const utils = require('./utilities');\n\n  const thisFileName = 'ast.js: ';\n  const that = this;\n  let rules = null;\n  let udts = null;\n  let chars = null;\n  let nodeCount = 0;\n  const nodesDefined = [];\n  const nodeCallbacks = [];\n  const stack = [];\n  const records = [];\n  this.callbacks = [];\n  this.astObject = 'astObject';\n  /* called by the parser to initialize the AST with the rules, UDTs and the input characters */\n  this.init = function init(rulesIn, udtsIn, charsIn) {\n    stack.length = 0;\n    records.length = 0;\n    nodesDefined.length = 0;\n    nodeCount = 0;\n    rules = rulesIn;\n    udts = udtsIn;\n    chars = charsIn;\n    let i;\n    const list = [];\n    for (i = 0; i < rules.length; i += 1) {\n      list.push(rules[i].lower);\n    }\n    for (i = 0; i < udts.length; i += 1) {\n      list.push(udts[i].lower);\n    }\n    nodeCount = rules.length + udts.length;\n    for (i = 0; i < nodeCount; i += 1) {\n      nodesDefined[i] = false;\n      nodeCallbacks[i] = null;\n    }\n    for (const index in that.callbacks) {\n      const lower = index.toLowerCase();\n      i = list.indexOf(lower);\n      if (i < 0) {\n        throw new Error(`${thisFileName}init: node '${index}' not a rule or udt name`);\n      }\n      if (typeof that.callbacks[index] === 'function') {\n        nodesDefined[i] = true;\n        nodeCallbacks[i] = that.callbacks[index];\n      }\n      if (that.callbacks[index] === true) {\n        nodesDefined[i] = true;\n      }\n    }\n  };\n  /* AST node definitions - called by the parser's `RNM` operator */\n  this.ruleDefined = function ruleDefined(index) {\n    return nodesDefined[index] !== false;\n  };\n  /* AST node definitions - called by the parser's `UDT` operator */\n  this.udtDefined = function udtDefined(index) {\n    return nodesDefined[rules.length + index] !== false;\n  };\n  /* called by the parser's `RNM` & `UDT` operators */\n  /* builds a record for the downward traversal of the node */\n  this.down = function down(callbackIndex, name) {\n    const thisIndex = records.length;\n    stack.push(thisIndex);\n    records.push({\n      name,\n      thisIndex,\n      thatIndex: null,\n      state: id.SEM_PRE,\n      callbackIndex,\n      phraseIndex: null,\n      phraseLength: null,\n      stack: stack.length,\n    });\n    return thisIndex;\n  };\n  /* called by the parser's `RNM` & `UDT` operators */\n  /* builds a record for the upward traversal of the node */\n  this.up = function up(callbackIndex, name, phraseIndex, phraseLength) {\n    const thisIndex = records.length;\n    const thatIndex = stack.pop();\n    records.push({\n      name,\n      thisIndex,\n      thatIndex,\n      state: id.SEM_POST,\n      callbackIndex,\n      phraseIndex,\n      phraseLength,\n      stack: stack.length,\n    });\n    records[thatIndex].thatIndex = thisIndex;\n    records[thatIndex].phraseIndex = phraseIndex;\n    records[thatIndex].phraseLength = phraseLength;\n    return thisIndex;\n  };\n  // Called by the user to translate the AST.\n  // Translate means to associate or apply some semantic action to the\n  // phrases that were syntactically matched to the AST nodes according\n  // to the defining grammar.\n  // ```\n  // data - optional user-defined data\n  //        passed to the callback functions by the translator\n  // ```\n  this.translate = function translate(data) {\n    let ret;\n    let callback;\n    let record;\n    for (let i = 0; i < records.length; i += 1) {\n      record = records[i];\n      callback = nodeCallbacks[record.callbackIndex];\n      if (record.state === id.SEM_PRE) {\n        if (callback !== null) {\n          ret = callback(id.SEM_PRE, chars, record.phraseIndex, record.phraseLength, data);\n          if (ret === id.SEM_SKIP) {\n            i = record.thatIndex;\n          }\n        }\n      } else if (callback !== null) {\n        callback(id.SEM_POST, chars, record.phraseIndex, record.phraseLength, data);\n      }\n    }\n  };\n  /* called by the parser to reset the length of the records array */\n  /* necessary on backtracking */\n  this.setLength = function setLength(length) {\n    records.length = length;\n    if (length > 0) {\n      stack.length = records[length - 1].stack;\n    } else {\n      stack.length = 0;\n    }\n  };\n  /* called by the parser to get the length of the records array */\n  this.getLength = function getLength() {\n    return records.length;\n  };\n  /* helper for XML display */\n  function indent(n) {\n    let ret = '';\n    for (let i = 0; i < n; i += 1) {\n      ret += ' ';\n    }\n    return ret;\n  }\n  // Generate an `XML` version of the AST.\n  // Useful if you want to use a special or favorite XML parser to translate the\n  // AST.\n  // ```\n  // mode - the display mode of the captured phrases\n  //      - default mode is \"ascii\"\n  //      - can be: \"ascii\"\n  //                \"decimal\"\n  //                \"hexadecimal\"\n  //                \"unicode\"\n  // ```\n  this.toXml = function toSml(modeArg) {\n    let display = utils.charsToDec;\n    let caption = 'decimal integer character codes';\n    if (typeof modeArg === 'string' && modeArg.length >= 3) {\n      const mode = modeArg.slice(0, 3).toLowerCase();\n      if (mode === 'asc') {\n        display = utils.charsToAscii;\n        caption = 'ASCII for printing characters, hex for non-printing';\n      } else if (mode === 'hex') {\n        display = utils.charsToHex;\n        caption = 'hexadecimal integer character codes';\n      } else if (mode === 'uni') {\n        display = utils.charsToUnicode;\n        caption = 'Unicode UTF-32 integer character codes';\n      }\n    }\n    let xml = '';\n    let depth = 0;\n    xml += '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n';\n    xml += `<root nodes=\"${records.length / 2}\" characters=\"${chars.length}\">\\n`;\n    xml += `<!-- input string, ${caption} -->\\n`;\n    xml += indent(depth + 2);\n    xml += display(chars);\n    xml += '\\n';\n    records.forEach((rec) => {\n      if (rec.state === id.SEM_PRE) {\n        depth += 1;\n        xml += indent(depth);\n        xml += `<node name=\"${rec.name}\" index=\"${rec.phraseIndex}\" length=\"${rec.phraseLength}\">\\n`;\n        xml += indent(depth + 2);\n        xml += display(chars, rec.phraseIndex, rec.phraseLength);\n        xml += '\\n';\n      } else {\n        xml += indent(depth);\n        xml += `</node><!-- name=\"${rec.name}\" -->\\n`;\n        depth -= 1;\n      }\n    });\n\n    xml += '</root>\\n';\n    return xml;\n  };\n  /* generate a JavaScript object version of the AST */\n  /* for the phrase-matching engine apg-exp */\n  this.phrases = function phrases() {\n    const obj = {};\n    let i;\n    let record;\n    for (i = 0; i < records.length; i += 1) {\n      record = records[i];\n      if (record.state === id.SEM_PRE) {\n        if (!Array.isArray(obj[record.name])) {\n          obj[record.name] = [];\n        }\n        obj[record.name].push({\n          index: record.phraseIndex,\n          length: record.phraseLength,\n        });\n      }\n    }\n    return obj;\n  };\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2494, "column": 0}, "map": {"version":3,"sources":["file:///C:/code_base/hackathons/ProofBridge/node_modules/.pnpm/apg-js%404.4.0/node_modules/apg-js/src/apg-lib/circular-buffer.js"],"sourcesContent":["/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module acts as a \"circular buffer\". It is used to keep track\n// only the last N records in an array of records. If more than N records\n// are saved, each additional record overwrites the previously oldest record.\n// This module deals only with the record indexes and does not save\n// any actual records. It is used by [`trace.js`](./trace.html) for limiting the number of\n// trace records saved.\nmodule.exports = function exportsCircularBuffer() {\n  'use strict;';\n\n  const thisFileName = 'circular-buffer.js: ';\n  let itemIndex = -1;\n  let maxListSize = 0;\n  // Initialize buffer.<br>\n  // *size* is `maxListSize`, the maximum number of records saved before overwriting begins.\n  this.init = function init(size) {\n    if (typeof size !== 'number' || size <= 0) {\n      throw new Error(`${thisFileName}init: circular buffer size must an integer > 0`);\n    }\n    maxListSize = Math.ceil(size);\n    itemIndex = -1;\n  };\n  // Call this to increment the number of records collected.<br>\n  // Returns the array index number to store the next record in.\n  this.increment = function increment() {\n    itemIndex += 1;\n    return (itemIndex + maxListSize) % maxListSize;\n  };\n  // Returns `maxListSize` - the maximum number of records to keep in the buffer.\n  this.maxSize = function maxSize() {\n    return maxListSize;\n  };\n  // Returns the highest number of items saved.<br>\n  // (The number of items is the actual number of records processed\n  // even though only `maxListSize` records are actually retained.)\n  this.items = function items() {\n    return itemIndex + 1;\n  };\n  // Returns the record number associated with this item index.\n  this.getListIndex = function getListIndex(item) {\n    if (itemIndex === -1) {\n      return -1;\n    }\n    if (item < 0 || item > itemIndex) {\n      return -1;\n    }\n    if (itemIndex - item >= maxListSize) {\n      return -1;\n    }\n    return (item + maxListSize) % maxListSize;\n  };\n  // The iterator over the circular buffer.\n  // The user's function, `fn`, will be called with arguments `fn(listIndex, itemIndex)`\n  // where `listIndex` is the saved record index and `itemIndex` is the actual item index.\n  this.forEach = function forEach(fn) {\n    if (itemIndex === -1) {\n      /* no records have been collected */\n      return;\n    }\n    if (itemIndex < maxListSize) {\n      /* fewer than maxListSize records have been collected - number of items = number of records */\n      for (let i = 0; i <= itemIndex; i += 1) {\n        fn(i, i);\n      }\n      return;\n    }\n    /* start with the oldest record saved and finish with the most recent record saved */\n    for (let i = itemIndex - maxListSize + 1; i <= itemIndex; i += 1) {\n      const listIndex = (i + maxListSize) % maxListSize;\n      fn(listIndex, i);\n    }\n  };\n};\n"],"names":[],"mappings":"AAAA;;;uFAGuF,GACvF,oEAAoE;AACpE,yEAAyE;AACzE,6EAA6E;AAC7E,mEAAmE;AACnE,0FAA0F;AAC1F,uBAAuB;AACvB,OAAO,OAAO,GAAG,SAAS;IACxB;IAEA,MAAM,eAAe;IACrB,IAAI,YAAY,CAAC;IACjB,IAAI,cAAc;IAClB,yBAAyB;IACzB,0FAA0F;IAC1F,IAAI,CAAC,IAAI,GAAG,SAAS,KAAK,IAAI;QAC5B,IAAI,OAAO,SAAS,YAAY,QAAQ,GAAG;YACzC,MAAM,IAAI,MAAM,AAAC,GAAe,OAAb,cAAa;QAClC;QACA,cAAc,KAAK,IAAI,CAAC;QACxB,YAAY,CAAC;IACf;IACA,8DAA8D;IAC9D,8DAA8D;IAC9D,IAAI,CAAC,SAAS,GAAG,SAAS;QACxB,aAAa;QACb,OAAO,CAAC,YAAY,WAAW,IAAI;IACrC;IACA,+EAA+E;IAC/E,IAAI,CAAC,OAAO,GAAG,SAAS;QACtB,OAAO;IACT;IACA,iDAAiD;IACjD,iEAAiE;IACjE,iEAAiE;IACjE,IAAI,CAAC,KAAK,GAAG,SAAS;QACpB,OAAO,YAAY;IACrB;IACA,6DAA6D;IAC7D,IAAI,CAAC,YAAY,GAAG,SAAS,aAAa,IAAI;QAC5C,IAAI,cAAc,CAAC,GAAG;YACpB,OAAO,CAAC;QACV;QACA,IAAI,OAAO,KAAK,OAAO,WAAW;YAChC,OAAO,CAAC;QACV;QACA,IAAI,YAAY,QAAQ,aAAa;YACnC,OAAO,CAAC;QACV;QACA,OAAO,CAAC,OAAO,WAAW,IAAI;IAChC;IACA,yCAAyC;IACzC,sFAAsF;IACtF,wFAAwF;IACxF,IAAI,CAAC,OAAO,GAAG,SAAS,QAAQ,EAAE;QAChC,IAAI,cAAc,CAAC,GAAG;YACpB,kCAAkC,GAClC;QACF;QACA,IAAI,YAAY,aAAa;YAC3B,4FAA4F,GAC5F,IAAK,IAAI,IAAI,GAAG,KAAK,WAAW,KAAK,EAAG;gBACtC,GAAG,GAAG;YACR;YACA;QACF;QACA,mFAAmF,GACnF,IAAK,IAAI,IAAI,YAAY,cAAc,GAAG,KAAK,WAAW,KAAK,EAAG;YAChE,MAAM,YAAY,CAAC,IAAI,WAAW,IAAI;YACtC,GAAG,WAAW;QAChB;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2568, "column": 0}, "map": {"version":3,"sources":["file:///C:/code_base/hackathons/ProofBridge/node_modules/.pnpm/apg-js%404.4.0/node_modules/apg-js/src/apg-lib/parser.js"],"sourcesContent":["/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable new-cap */\n/* eslint-disable guard-for-in */\n/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This is the primary object of `apg-lib`. Calling its `parse()` member function\n// walks the parse tree of opcodes, matching phrases from the input string as it goes.\n// The working code for all of the operators, `ALT`, `CAT`, etc. is in this module.\nmodule.exports = function parser() {\n  const id = require('./identifiers');\n  const utils = require('./utilities');\n\n  const thisFileName = 'parser.js: ';\n  const thisThis = this;\n  let opExecute;\n  this.ast = null;\n  this.stats = null;\n  this.trace = null;\n  this.callbacks = [];\n  let opcodes = null;\n  let chars = null;\n  let charsBegin;\n  let charsLength;\n  let charsEnd;\n  let lookAround;\n  let treeDepth = 0;\n  let maxTreeDepth = 0;\n  let nodeHits = 0;\n  let ruleCallbacks = null;\n  let udtCallbacks = null;\n  let rules = null;\n  let udts = null;\n  let syntaxData = null;\n  let maxMatched = 0;\n  let limitTreeDepth = Infinity;\n  let limitNodeHits = Infinity;\n  // Evaluates any given rule. This can be called from the syntax callback\n  // functions to evaluate any rule in the grammar's rule list. Great caution\n  // should be used. Use of this function will alter the language that the\n  // parser accepts.\n  const evaluateRule = function evaluateRule(ruleIndex, phraseIndex, sysData) {\n    const functionName = `${thisFileName}evaluateRule(): `;\n    if (ruleIndex >= rules.length) {\n      throw new Error(`${functionName}rule index: ${ruleIndex} out of range`);\n    }\n    if (phraseIndex >= charsEnd) {\n      throw new Error(`${functionName}phrase index: ${phraseIndex} out of range`);\n    }\n    const { length } = opcodes;\n    opcodes.push({\n      type: id.RNM,\n      index: ruleIndex,\n    });\n    opExecute(length, phraseIndex, sysData);\n    opcodes.pop();\n  };\n  // Evaluates any given UDT. This can be called from the syntax callback\n  // functions to evaluate any UDT in the grammar's UDT list. Great caution\n  // should be used. Use of this function will alter the language that the\n  // parser accepts.\n  const evaluateUdt = function (udtIndex, phraseIndex, sysData) {\n    const functionName = `${thisFileName}evaluateUdt(): `;\n    if (udtIndex >= udts.length) {\n      throw new Error(`${functionName}udt index: ${udtIndex} out of range`);\n    }\n    if (phraseIndex >= charsEnd) {\n      throw new Error(`${functionName}phrase index: ${phraseIndex} out of range`);\n    }\n    const { length } = opcodes;\n    opcodes.push({\n      type: id.UDT,\n      empty: udts[udtIndex].empty,\n      index: udtIndex,\n    });\n    opExecute(length, phraseIndex, sysData);\n    opcodes.pop();\n  };\n  /* Clears this object of any/all data that has been initialized or added to it. */\n  /* Called by parse() on initialization, allowing this object to be re-used for multiple parsing calls. */\n  const clear = function () {\n    treeDepth = 0;\n    maxTreeDepth = 0;\n    nodeHits = 0;\n    maxMatched = 0;\n    lookAround = [\n      {\n        lookAround: id.LOOKAROUND_NONE,\n        anchor: 0,\n        charsEnd: 0,\n        charsLength: 0,\n      },\n    ];\n    rules = null;\n    udts = null;\n    chars = null;\n    charsBegin = 0;\n    charsLength = 0;\n    charsEnd = 0;\n    ruleCallbacks = null;\n    udtCallbacks = null;\n    syntaxData = null;\n    opcodes = null;\n  };\n  /* object for maintaining a stack of back reference frames */\n  const backRef = function () {\n    const stack = [];\n    const init = function () {\n      const obj = {};\n      rules.forEach((rule) => {\n        if (rule.isBkr) {\n          obj[rule.lower] = null;\n        }\n      });\n      if (udts.length > 0) {\n        udts.forEach((udt) => {\n          if (udt.isBkr) {\n            obj[udt.lower] = null;\n          }\n        });\n      }\n      stack.push(obj);\n    };\n    const copy = function () {\n      const top = stack[stack.length - 1];\n      const obj = {};\n      /* // eslint-disable-next-line no-restricted-syntax */\n      for (const name in top) {\n        obj[name] = top[name];\n      }\n      return obj;\n    };\n    this.push = function push() {\n      stack.push(copy());\n    };\n    this.pop = function pop(lengthArg) {\n      let length = lengthArg;\n      if (!length) {\n        length = stack.length - 1;\n      }\n      if (length < 1 || length > stack.length) {\n        throw new Error(`${thisFileName}backRef.pop(): bad length: ${length}`);\n      }\n      stack.length = length;\n      return stack[stack.length - 1];\n    };\n    this.length = function length() {\n      return stack.length;\n    };\n    this.savePhrase = function savePhrase(name, index, length) {\n      stack[stack.length - 1][name] = {\n        phraseIndex: index,\n        phraseLength: length,\n      };\n    };\n    this.getPhrase = function (name) {\n      return stack[stack.length - 1][name];\n    };\n    /* constructor */\n    init();\n  };\n  // The system data structure that relays system information to and from the rule and UDT callback functions.\n  // - *state* - the state of the parser, ACTIVE, MATCH, EMPTY or NOMATCH (see the `identifiers` object in\n  // [`apg-lib`](https://github.com/ldthomas/apg-js2-lib))\n  // - *phraseLength* - the number of characters matched if the state is MATCHED or EMPTY\n  // - *lookaround* - the top of the stack holds the current look around state,\n  // LOOKAROUND_NONE, LOOKAROUND_AHEAD or LOOKAROUND_BEHIND,\n  // - *uFrame* - the \"universal\" back reference frame.\n  // Holds the last matched phrase for each of the back referenced rules and UDTs.\n  // - *pFrame* - the stack of \"parent\" back reference frames.\n  // Holds the matched phrase from the parent frame of each back referenced rules and UDTs.\n  // - *evaluateRule* - a reference to this object's `evaluateRule()` function.\n  // Can be called from a callback function (use with extreme caution!)\n  // - *evaluateUdt* - a reference to this object's `evaluateUdt()` function.\n  // Can be called from a callback function (use with extreme caution!)\n  const systemData = function systemData() {\n    const thisData = this;\n    this.state = id.ACTIVE;\n    this.phraseLength = 0;\n    this.ruleIndex = 0;\n    this.udtIndex = 0;\n    this.lookAround = lookAround[lookAround.length - 1];\n    this.uFrame = new backRef();\n    this.pFrame = new backRef();\n    this.evaluateRule = evaluateRule;\n    this.evaluateUdt = evaluateUdt;\n    /* refresh the parser state for the next operation */\n    this.refresh = function refresh() {\n      thisData.state = id.ACTIVE;\n      thisData.phraseLength = 0;\n      thisData.lookAround = lookAround[lookAround.length - 1];\n    };\n  };\n  /* some look around helper functions */\n  const lookAroundValue = function lookAroundValue() {\n    return lookAround[lookAround.length - 1];\n  };\n  /* return true if parser is in look around (ahead or behind) state */\n  const inLookAround = function inLookAround() {\n    return lookAround.length > 1;\n  };\n  /* return true if parser is in look behind state */\n  const inLookBehind = function () {\n    return lookAround[lookAround.length - 1].lookAround === id.LOOKAROUND_BEHIND;\n  };\n  /* called by parse() to initialize the AST object, if one has been defined */\n  const initializeAst = function () {\n    const functionName = `${thisFileName}initializeAst(): `;\n    const TRUE = true;\n    while (TRUE) {\n      if (thisThis.ast === undefined) {\n        thisThis.ast = null;\n        break;\n      }\n      if (thisThis.ast === null) {\n        break;\n      }\n      if (thisThis.ast.astObject !== 'astObject') {\n        throw new Error(`${functionName}ast object not recognized`);\n      }\n      break;\n    }\n    if (thisThis.ast !== null) {\n      thisThis.ast.init(rules, udts, chars);\n    }\n  };\n  /* called by parse() to initialize the trace object, if one has been defined */\n  const initializeTrace = function () {\n    const functionName = `${thisFileName}initializeTrace(): `;\n    const TRUE = true;\n    while (TRUE) {\n      if (thisThis.trace === undefined) {\n        thisThis.trace = null;\n        break;\n      }\n      if (thisThis.trace === null) {\n        break;\n      }\n      if (thisThis.trace.traceObject !== 'traceObject') {\n        throw new Error(`${functionName}trace object not recognized`);\n      }\n      break;\n    }\n    if (thisThis.trace !== null) {\n      thisThis.trace.init(rules, udts, chars);\n    }\n  };\n  /* called by parse() to initialize the statistics object, if one has been defined */\n  const initializeStats = function () {\n    const functionName = `${thisFileName}initializeStats(): `;\n    const TRUE = true;\n    while (TRUE) {\n      if (thisThis.stats === undefined) {\n        thisThis.stats = null;\n        break;\n      }\n      if (thisThis.stats === null) {\n        break;\n      }\n      if (thisThis.stats.statsObject !== 'statsObject') {\n        throw new Error(`${functionName}stats object not recognized`);\n      }\n      break;\n    }\n    if (thisThis.stats !== null) {\n      thisThis.stats.init(rules, udts);\n    }\n  };\n  /* called by parse() to initialize the rules & udts from the grammar object */\n  /* (the grammar object generated previously by apg) */\n  const initializeGrammar = function (grammar) {\n    const functionName = `${thisFileName}initializeGrammar(): `;\n    if (!grammar) {\n      throw new Error(`${functionName}grammar object undefined`);\n    }\n    if (grammar.grammarObject !== 'grammarObject') {\n      throw new Error(`${functionName}bad grammar object`);\n    }\n    rules = grammar.rules;\n    udts = grammar.udts;\n  };\n  /* called by parse() to initialize the start rule */\n  const initializeStartRule = function (startRule) {\n    const functionName = `${thisFileName}initializeStartRule(): `;\n    let start = null;\n    if (typeof startRule === 'number') {\n      if (startRule >= rules.length) {\n        throw new Error(`${functionName}start rule index too large: max: ${rules.length}: index: ${startRule}`);\n      }\n      start = startRule;\n    } else if (typeof startRule === 'string') {\n      const lower = startRule.toLowerCase();\n      for (let i = 0; i < rules.length; i += 1) {\n        if (lower === rules[i].lower) {\n          start = rules[i].index;\n          break;\n        }\n      }\n      if (start === null) {\n        throw new Error(`${functionName}start rule name '${startRule}' not recognized`);\n      }\n    } else {\n      throw new Error(`${functionName}type of start rule '${typeof startRule}' not recognized`);\n    }\n    return start;\n  };\n  /* called by parse() to initialize the array of characters codes representing the input string */\n  const initializeInputChars = function initializeInputChars(inputArg, begArg, lenArg) {\n    const functionName = `${thisFileName}initializeInputChars(): `;\n    /* varify and normalize input */\n    let input = inputArg;\n    let beg = begArg;\n    let len = lenArg;\n    if (input === undefined) {\n      throw new Error(`${functionName}input string is undefined`);\n    }\n    if (input === null) {\n      throw new Error(`${functionName}input string is null`);\n    }\n    if (typeof input === 'string') {\n      input = utils.stringToChars(input);\n    } else if (!Array.isArray(input)) {\n      throw new Error(`${functionName}input string is not a string or array`);\n    }\n    if (input.length > 0) {\n      if (typeof input[0] !== 'number') {\n        throw new Error(`${functionName}input string not an array of integers`);\n      }\n    }\n    /* verify and normalize beginning index */\n    if (typeof beg !== 'number') {\n      beg = 0;\n    } else {\n      beg = Math.floor(beg);\n      if (beg < 0 || beg > input.length) {\n        throw new Error(`${functionName}input beginning index out of range: ${beg}`);\n      }\n    }\n    /* verify and normalize input length */\n    if (typeof len !== 'number') {\n      len = input.length - beg;\n    } else {\n      len = Math.floor(len);\n      if (len < 0 || len > input.length - beg) {\n        throw new Error(`${functionName}input length out of range: ${len}`);\n      }\n    }\n    chars = input;\n    charsBegin = beg;\n    charsLength = len;\n    charsEnd = charsBegin + charsLength;\n  };\n  /* called by parse() to initialize the user-written, syntax callback functions, if any */\n  const initializeCallbacks = function () {\n    const functionName = `${thisFileName}initializeCallbacks(): `;\n    let i;\n    ruleCallbacks = [];\n    udtCallbacks = [];\n    for (i = 0; i < rules.length; i += 1) {\n      ruleCallbacks[i] = null;\n    }\n    for (i = 0; i < udts.length; i += 1) {\n      udtCallbacks[i] = null;\n    }\n    let func;\n    const list = [];\n    for (i = 0; i < rules.length; i += 1) {\n      list.push(rules[i].lower);\n    }\n    for (i = 0; i < udts.length; i += 1) {\n      list.push(udts[i].lower);\n    }\n    for (const index in thisThis.callbacks) {\n      i = list.indexOf(index.toLowerCase());\n      if (i < 0) {\n        throw new Error(`${functionName}syntax callback '${index}' not a rule or udt name`);\n      }\n      func = thisThis.callbacks[index];\n      if (!func) {\n        func = null;\n      }\n      if (typeof func === 'function' || func === null) {\n        if (i < rules.length) {\n          ruleCallbacks[i] = func;\n        } else {\n          udtCallbacks[i - rules.length] = func;\n        }\n      } else {\n        throw new Error(\n          `${functionName}syntax callback[${index}] must be function reference or 'false' (false/null/undefined/etc.)`\n        );\n      }\n    }\n    /* make sure all udts have been defined - the parser can't work without them */\n    for (i = 0; i < udts.length; i += 1) {\n      if (udtCallbacks[i] === null) {\n        throw new Error(\n          `${functionName}all UDT callbacks must be defined. UDT callback[${udts[i].lower}] not a function reference`\n        );\n      }\n    }\n  };\n  // Set the maximum parse tree depth allowed. The default is `Infinity`.\n  // A limit is not normally needed, but can be used to protect against an\n  // exponentual or \"catastrophically backtracking\" grammar.\n  // <ul>\n  // <li>\n  // depth - max allowed parse tree depth. An exception is thrown if exceeded.\n  // </li>\n  // </ul>\n  this.setMaxTreeDepth = function (depth) {\n    if (typeof depth !== 'number') {\n      throw new Error(`parser: max tree depth must be integer > 0: ${depth}`);\n    }\n    limitTreeDepth = Math.floor(depth);\n    if (limitTreeDepth <= 0) {\n      throw new Error(`parser: max tree depth must be integer > 0: ${depth}`);\n    }\n  };\n  // Set the maximum number of node hits (parser unit steps or opcode function calls) allowed.\n  // The default is `Infinity`.\n  // A limit is not normally needed, but can be used to protect against an\n  // exponentual or \"catastrophically backtracking\" grammar.\n  // <ul>\n  // <li>\n  // hits - maximum number of node hits or parser unit steps allowed.\n  // An exception thrown if exceeded.\n  // </li>\n  // </ul>\n  this.setMaxNodeHits = function (hits) {\n    if (typeof hits !== 'number') {\n      throw new Error(`parser: max node hits must be integer > 0: ${hits}`);\n    }\n    limitNodeHits = Math.floor(hits);\n    if (limitNodeHits <= 0) {\n      throw new Error(`parser: max node hits must be integer > 0: ${hits}`);\n    }\n  };\n  /* the main parser function */\n  const privateParse = function (grammar, startRuleArg, callbackData) {\n    let success;\n    const functionName = `${thisFileName}parse(): `;\n    initializeGrammar(grammar);\n    const startRule = initializeStartRule(startRuleArg);\n    initializeCallbacks();\n    initializeTrace();\n    initializeStats();\n    initializeAst();\n    const sysData = new systemData();\n    if (!(callbackData === undefined || callbackData === null)) {\n      syntaxData = callbackData;\n    }\n    /* create a dummy opcode for the start rule */\n    opcodes = [\n      {\n        type: id.RNM,\n        index: startRule,\n      },\n    ];\n    /* execute the start rule */\n    opExecute(0, charsBegin, sysData);\n    opcodes = null;\n    /* test and return the sysData */\n    switch (sysData.state) {\n      case id.ACTIVE:\n        throw new Error(`${functionName}final state should never be 'ACTIVE'`);\n      case id.NOMATCH:\n        success = false;\n        break;\n      case id.EMPTY:\n      case id.MATCH:\n        if (sysData.phraseLength === charsLength) {\n          success = true;\n        } else {\n          success = false;\n        }\n        break;\n      default:\n        throw new Error('unrecognized state');\n    }\n    return {\n      success,\n      state: sysData.state,\n      length: charsLength,\n      matched: sysData.phraseLength,\n      maxMatched,\n      maxTreeDepth,\n      nodeHits,\n      inputLength: chars.length,\n      subBegin: charsBegin,\n      subEnd: charsEnd,\n      subLength: charsLength,\n    };\n  };\n\n  // This form allows parsing of a sub-string of the full input string.\n  // <ul>\n  // <li>*inputIndex* - index of the first character in the sub-string</li>\n  // <li>*inputLength* - length of the sub-string</li>\n  // </ul>\n  // All other parameters as for the above function `parse()`.\n  this.parseSubstring = function parseSubstring(grammar, startRule, inputChars, inputIndex, inputLength, callbackData) {\n    clear();\n    initializeInputChars(inputChars, inputIndex, inputLength);\n    return privateParse(grammar, startRule, callbackData);\n  };\n  // This is the main function, called to parse an input string.\n  // <ul>\n  // <li>*grammar* - an instantiated grammar object - the output of `apg` for a\n  // specific SABNF grammar</li>\n  // <li>*startRule* - the rule name or rule index to be used as the root of the\n  // parse tree. This is usually the first rule, index = 0, of the grammar\n  // but can be any rule defined in the above grammar object.</li>\n  // <li>*inputChars* - the input string. Can be a string or an array of integer character codes representing the\n  // string.</li>\n  // <li>*callbackData* - user-defined data object to be passed to the user's\n  // callback functions.\n  // This is not used by the parser in any way, merely passed on to the user.\n  // May be `null` or omitted.</li>\n  // </ul>\n  this.parse = function parse(grammar, startRule, inputChars, callbackData) {\n    clear();\n    initializeInputChars(inputChars, 0, inputChars.length);\n    return privateParse(grammar, startRule, callbackData);\n  };\n  // The `ALT` operator.<br>\n  // Executes its child nodes, from left to right, until it finds a match.\n  // Fails if *all* of its child nodes fail.\n  const opALT = function (opIndex, phraseIndex, sysData) {\n    const op = opcodes[opIndex];\n    for (let i = 0; i < op.children.length; i += 1) {\n      opExecute(op.children[i], phraseIndex, sysData);\n      if (sysData.state !== id.NOMATCH) {\n        break;\n      }\n    }\n  };\n  // The `CAT` operator.<br>\n  // Executes all of its child nodes, from left to right,\n  // concatenating the matched phrases.\n  // Fails if *any* child nodes fail.\n  const opCAT = function (opIndex, phraseIndex, sysData) {\n    let success;\n    let astLength;\n    let catCharIndex;\n    let catPhrase;\n    const op = opcodes[opIndex];\n    const ulen = sysData.uFrame.length();\n    const plen = sysData.pFrame.length();\n    if (thisThis.ast) {\n      astLength = thisThis.ast.getLength();\n    }\n    success = true;\n    catCharIndex = phraseIndex;\n    catPhrase = 0;\n    for (let i = 0; i < op.children.length; i += 1) {\n      opExecute(op.children[i], catCharIndex, sysData);\n      if (sysData.state === id.NOMATCH) {\n        success = false;\n        break;\n      } else {\n        catCharIndex += sysData.phraseLength;\n        catPhrase += sysData.phraseLength;\n      }\n    }\n    if (success) {\n      sysData.state = catPhrase === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = catPhrase;\n    } else {\n      sysData.state = id.NOMATCH;\n      sysData.phraseLength = 0;\n      /* reset the back referencing frames on failure */\n      sysData.uFrame.pop(ulen);\n      sysData.pFrame.pop(plen);\n      if (thisThis.ast) {\n        thisThis.ast.setLength(astLength);\n      }\n    }\n  };\n  // The `REP` operator.<br>\n  // Repeatedly executes its single child node,\n  // concatenating each of the matched phrases found.\n  // The number of repetitions executed and its final sysData depends\n  // on its `min` & `max` repetition values.\n  const opREP = function (opIndex, phraseIndex, sysData) {\n    let astLength;\n    let repCharIndex;\n    let repPhrase;\n    let repCount;\n    const op = opcodes[opIndex];\n    if (op.max === 0) {\n      // this is an empty-string acceptor\n      // deprecated: use the TLS empty string operator, \"\", instead\n      sysData.state = id.EMPTY;\n      sysData.phraseLength = 0;\n      return;\n    }\n    repCharIndex = phraseIndex;\n    repPhrase = 0;\n    repCount = 0;\n    const ulen = sysData.uFrame.length();\n    const plen = sysData.pFrame.length();\n    if (thisThis.ast) {\n      astLength = thisThis.ast.getLength();\n    }\n    const TRUE = true;\n    while (TRUE) {\n      if (repCharIndex >= charsEnd) {\n        /* exit on end of input string */\n        break;\n      }\n      opExecute(opIndex + 1, repCharIndex, sysData);\n      if (sysData.state === id.NOMATCH) {\n        /* always end if the child node fails */\n        break;\n      }\n      if (sysData.state === id.EMPTY) {\n        /* REP always succeeds when the child node returns an empty phrase */\n        /* this may not seem obvious, but that's the way it works out */\n        break;\n      }\n      repCount += 1;\n      repPhrase += sysData.phraseLength;\n      repCharIndex += sysData.phraseLength;\n      if (repCount === op.max) {\n        /* end on maxed out reps */\n        break;\n      }\n    }\n    /* evaluate the match count according to the min, max values */\n    if (sysData.state === id.EMPTY) {\n      sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = repPhrase;\n    } else if (repCount >= op.min) {\n      sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = repPhrase;\n    } else {\n      sysData.state = id.NOMATCH;\n      sysData.phraseLength = 0;\n      /* reset the back referencing frames on failure */\n      sysData.uFrame.pop(ulen);\n      sysData.pFrame.pop(plen);\n      if (thisThis.ast) {\n        thisThis.ast.setLength(astLength);\n      }\n    }\n  };\n  // Validate the callback function's returned sysData values.\n  // It's the user's responsibility to get them right\n  // but `RNM` fails if not.\n  const validateRnmCallbackResult = function (rule, sysData, charsLeft, down) {\n    if (sysData.phraseLength > charsLeft) {\n      let str = `${thisFileName}opRNM(${rule.name}): callback function error: `;\n      str += `sysData.phraseLength: ${sysData.phraseLength}`;\n      str += ` must be <= remaining chars: ${charsLeft}`;\n      throw new Error(str);\n    }\n    switch (sysData.state) {\n      case id.ACTIVE:\n        if (down !== true) {\n          throw new Error(\n            `${thisFileName}opRNM(${rule.name}): callback function return error. ACTIVE state not allowed.`\n          );\n        }\n        break;\n      case id.EMPTY:\n        sysData.phraseLength = 0;\n        break;\n      case id.MATCH:\n        if (sysData.phraseLength === 0) {\n          sysData.state = id.EMPTY;\n        }\n        break;\n      case id.NOMATCH:\n        sysData.phraseLength = 0;\n        break;\n      default:\n        throw new Error(\n          `${thisFileName}opRNM(${rule.name}): callback function return error. Unrecognized return state: ${sysData.state}`\n        );\n    }\n  };\n  // The `RNM` operator.<br>\n  // This operator will acts as a root node for a parse tree branch below and\n  // returns the matched phrase to its parent.\n  // However, its larger responsibility is handling user-defined callback functions, back references and `AST` nodes.\n  // Note that the `AST` is a separate object, but `RNM` calls its functions to create its nodes.\n  // See [`ast.js`](./ast.html) for usage.\n  const opRNM = function (opIndex, phraseIndex, sysData) {\n    let astLength;\n    let astDefined;\n    let savedOpcodes;\n    let ulen;\n    let plen;\n    let saveFrame;\n    const op = opcodes[opIndex];\n    const rule = rules[op.index];\n    const callback = ruleCallbacks[rule.index];\n    const notLookAround = !inLookAround();\n    /* ignore AST and back references in lookaround */\n    if (notLookAround) {\n      /* begin AST and back references */\n      astDefined = thisThis.ast && thisThis.ast.ruleDefined(op.index);\n      if (astDefined) {\n        astLength = thisThis.ast.getLength();\n        thisThis.ast.down(op.index, rules[op.index].name);\n      }\n      ulen = sysData.uFrame.length();\n      plen = sysData.pFrame.length();\n      sysData.uFrame.push();\n      sysData.pFrame.push();\n      saveFrame = sysData.pFrame;\n      sysData.pFrame = new backRef();\n    }\n    if (callback === null) {\n      /* no callback - just execute the rule */\n      savedOpcodes = opcodes;\n      opcodes = rule.opcodes;\n      opExecute(0, phraseIndex, sysData);\n      opcodes = savedOpcodes;\n    } else {\n      /* call user's callback */\n      const charsLeft = charsEnd - phraseIndex;\n      sysData.ruleIndex = rule.index;\n      callback(sysData, chars, phraseIndex, syntaxData);\n      validateRnmCallbackResult(rule, sysData, charsLeft, true);\n      if (sysData.state === id.ACTIVE) {\n        savedOpcodes = opcodes;\n        opcodes = rule.opcodes;\n        opExecute(0, phraseIndex, sysData);\n        opcodes = savedOpcodes;\n        sysData.ruleIndex = rule.index;\n        callback(sysData, chars, phraseIndex, syntaxData);\n        validateRnmCallbackResult(rule, sysData, charsLeft, false);\n      } /* implied else clause: just accept the callback sysData - RNM acting as UDT */\n    }\n    if (notLookAround) {\n      /* end AST */\n      if (astDefined) {\n        if (sysData.state === id.NOMATCH) {\n          thisThis.ast.setLength(astLength);\n        } else {\n          thisThis.ast.up(op.index, rule.name, phraseIndex, sysData.phraseLength);\n        }\n      }\n      /* end back reference */\n      sysData.pFrame = saveFrame;\n      if (sysData.state === id.NOMATCH) {\n        sysData.uFrame.pop(ulen);\n        sysData.pFrame.pop(plen);\n      } else if (rule.isBkr) {\n        /* save phrase on both the parent and universal frames */\n        /* BKR operator will decide which to use later */\n        sysData.pFrame.savePhrase(rule.lower, phraseIndex, sysData.phraseLength);\n        sysData.uFrame.savePhrase(rule.lower, phraseIndex, sysData.phraseLength);\n      }\n    }\n  };\n  // Validate the callback function's returned sysData values.\n  // It's the user's responsibility to get it right but `UDT` fails if not.\n  const validateUdtCallbackResult = function (udt, sysData, charsLeft) {\n    if (sysData.phraseLength > charsLeft) {\n      let str = `${thisFileName}opUDT(${udt.name}): callback function error: `;\n      str += `sysData.phraseLength: ${sysData.phraseLength}`;\n      str += ` must be <= remaining chars: ${charsLeft}`;\n      throw new Error(str);\n    }\n    switch (sysData.state) {\n      case id.ACTIVE:\n        throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. ACTIVE state not allowed.`);\n      case id.EMPTY:\n        if (udt.empty === false) {\n          throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. May not return EMPTY.`);\n        } else {\n          sysData.phraseLength = 0;\n        }\n        break;\n      case id.MATCH:\n        if (sysData.phraseLength === 0) {\n          if (udt.empty === false) {\n            throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. May not return EMPTY.`);\n          } else {\n            sysData.state = id.EMPTY;\n          }\n        }\n        break;\n      case id.NOMATCH:\n        sysData.phraseLength = 0;\n        break;\n      default:\n        throw new Error(\n          `${thisFileName}opUDT(${udt.name}): callback function return error. Unrecognized return state: ${sysData.state}`\n        );\n    }\n  };\n  // The `UDT` operator.<br>\n  // Simply calls the user's callback function, but operates like `RNM` with regard to the `AST`\n  // and back referencing.\n  // There is some ambiguity here. `UDT`s act as terminals for phrase recognition but as named rules\n  // for `AST` nodes and back referencing.\n  // See [`ast.js`](./ast.html) for usage.\n  const opUDT = function (opIndex, phraseIndex, sysData) {\n    let astLength;\n    let astIndex;\n    let astDefined;\n    let ulen;\n    let plen;\n    let saveFrame;\n    const op = opcodes[opIndex];\n    const udt = udts[op.index];\n    sysData.UdtIndex = udt.index;\n\n    const notLookAround = !inLookAround();\n    /* ignore AST and back references in lookaround */\n    if (notLookAround) {\n      /* begin AST and back reference */\n      astDefined = thisThis.ast && thisThis.ast.udtDefined(op.index);\n      if (astDefined) {\n        astIndex = rules.length + op.index;\n        astLength = thisThis.ast.getLength();\n        thisThis.ast.down(astIndex, udt.name);\n      }\n      /* NOTE: push and pop of the back reference frame is normally not necessary */\n      /* only in the case that the UDT calls evaluateRule() or evaluateUdt() */\n      ulen = sysData.uFrame.length();\n      plen = sysData.pFrame.length();\n      sysData.uFrame.push();\n      sysData.pFrame.push();\n      saveFrame = sysData.pFrame;\n      sysData.pFrame = new backRef();\n    }\n    /* call the UDT */\n    const charsLeft = charsEnd - phraseIndex;\n    udtCallbacks[op.index](sysData, chars, phraseIndex, syntaxData);\n    validateUdtCallbackResult(udt, sysData, charsLeft);\n    if (notLookAround) {\n      /* end AST */\n      if (astDefined) {\n        if (sysData.state === id.NOMATCH) {\n          thisThis.ast.setLength(astLength);\n        } else {\n          thisThis.ast.up(astIndex, udt.name, phraseIndex, sysData.phraseLength);\n        }\n      }\n      /* end back reference */\n      sysData.pFrame = saveFrame;\n      if (sysData.state === id.NOMATCH) {\n        sysData.uFrame.pop(ulen);\n        sysData.pFrame.pop(plen);\n      } else if (udt.isBkr) {\n        /* save phrase on both the parent and universal frames */\n        /* BKR operator will decide which to use later */\n        sysData.pFrame.savePhrase(udt.lower, phraseIndex, sysData.phraseLength);\n        sysData.uFrame.savePhrase(udt.lower, phraseIndex, sysData.phraseLength);\n      }\n    }\n  };\n  // The `AND` operator.<br>\n  // This is the positive `look ahead` operator.\n  // Executes its single child node, returning the EMPTY state\n  // if it succeedsand NOMATCH if it fails.\n  // *Always* backtracks on any matched phrase and returns EMPTY on success.\n  const opAND = function (opIndex, phraseIndex, sysData) {\n    lookAround.push({\n      lookAround: id.LOOKAROUND_AHEAD,\n      anchor: phraseIndex,\n      charsEnd,\n      charsLength,\n    });\n    charsEnd = chars.length;\n    charsLength = chars.length - charsBegin;\n    opExecute(opIndex + 1, phraseIndex, sysData);\n    const pop = lookAround.pop();\n    charsEnd = pop.charsEnd;\n    charsLength = pop.charsLength;\n    sysData.phraseLength = 0;\n    switch (sysData.state) {\n      case id.EMPTY:\n        sysData.state = id.EMPTY;\n        break;\n      case id.MATCH:\n        sysData.state = id.EMPTY;\n        break;\n      case id.NOMATCH:\n        sysData.state = id.NOMATCH;\n        break;\n      default:\n        throw new Error(`opAND: invalid state ${sysData.state}`);\n    }\n  };\n  // The `NOT` operator.<br>\n  // This is the negative `look ahead` operator.\n  // Executes its single child node, returning the EMPTY state\n  // if it *fails* and NOMATCH if it succeeds.\n  // *Always* backtracks on any matched phrase and returns EMPTY\n  // on success (failure of its child node).\n  const opNOT = function (opIndex, phraseIndex, sysData) {\n    lookAround.push({\n      lookAround: id.LOOKAROUND_AHEAD,\n      anchor: phraseIndex,\n      charsEnd,\n      charsLength,\n    });\n    charsEnd = chars.length;\n    charsLength = chars.length - charsBegin;\n    opExecute(opIndex + 1, phraseIndex, sysData);\n    const pop = lookAround.pop();\n    charsEnd = pop.charsEnd;\n    charsLength = pop.charsLength;\n    sysData.phraseLength = 0;\n    switch (sysData.state) {\n      case id.EMPTY:\n      case id.MATCH:\n        sysData.state = id.NOMATCH;\n        break;\n      case id.NOMATCH:\n        sysData.state = id.EMPTY;\n        break;\n      default:\n        throw new Error(`opNOT: invalid state ${sysData.state}`);\n    }\n  };\n  // The `TRG` operator.<br>\n  // Succeeds if the single first character of the phrase is\n  // within the `min - max` range.\n  const opTRG = function (opIndex, phraseIndex, sysData) {\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    if (phraseIndex < charsEnd) {\n      if (op.min <= chars[phraseIndex] && chars[phraseIndex] <= op.max) {\n        sysData.state = id.MATCH;\n        sysData.phraseLength = 1;\n      }\n    }\n  };\n  // The `TBS` operator.<br>\n  // Matches its pre-defined phrase against the input string.\n  // All characters must match exactly.\n  // Case-sensitive literal strings (`'string'` & `%s\"string\"`) are translated to `TBS`\n  // operators by `apg`.\n  // Phrase length of zero is not allowed.\n  // Empty phrases can only be defined with `TLS` operators.\n  const opTBS = function (opIndex, phraseIndex, sysData) {\n    let i;\n    const op = opcodes[opIndex];\n    const len = op.string.length;\n    sysData.state = id.NOMATCH;\n    if (phraseIndex + len <= charsEnd) {\n      for (i = 0; i < len; i += 1) {\n        if (chars[phraseIndex + i] !== op.string[i]) {\n          return;\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    } /* implied else NOMATCH */\n  };\n  // The `TLS` operator.<br>\n  // Matches its pre-defined phrase against the input string.\n  // A case-insensitive match is attempted for ASCII alphbetical characters.\n  // `TLS` is the only operator that explicitly allows empty phrases.\n  // `apg` will fail for empty `TBS`, case-sensitive strings (`''`) or\n  // zero repetitions (`0*0RuleName` or `0RuleName`).\n  const opTLS = function (opIndex, phraseIndex, sysData) {\n    let i;\n    let code;\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    const len = op.string.length;\n    if (len === 0) {\n      /* EMPTY match allowed for TLS */\n      sysData.state = id.EMPTY;\n      return;\n    }\n    if (phraseIndex + len <= charsEnd) {\n      for (i = 0; i < len; i += 1) {\n        code = chars[phraseIndex + i];\n        if (code >= 65 && code <= 90) {\n          code += 32;\n        }\n        if (code !== op.string[i]) {\n          return;\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    } /* implied else NOMATCH */\n  };\n  // The `ABG` operator.<br>\n  // This is an \"anchor\" for the beginning of the string, similar to the familiar regex `^` anchor.\n  // An anchor matches a position rather than a phrase.\n  // Returns EMPTY if `phraseIndex` is 0, NOMATCH otherwise.\n  const opABG = function (opIndex, phraseIndex, sysData) {\n    sysData.state = id.NOMATCH;\n    sysData.phraseLength = 0;\n    sysData.state = phraseIndex === 0 ? id.EMPTY : id.NOMATCH;\n  };\n  // The `AEN` operator.<br>\n  // This is an \"anchor\" for the end of the string, similar to the familiar regex `$` anchor.\n  // An anchor matches a position rather than a phrase.\n  // Returns EMPTY if `phraseIndex` equals the input string length, NOMATCH otherwise.\n  const opAEN = function (opIndex, phraseIndex, sysData) {\n    sysData.state = id.NOMATCH;\n    sysData.phraseLength = 0;\n    sysData.state = phraseIndex === chars.length ? id.EMPTY : id.NOMATCH;\n  };\n  // The `BKR` operator.<br>\n  // The back reference operator.\n  // Matches the last matched phrase of the named rule or UDT against the input string.\n  // For ASCII alphbetical characters the match may be case sensitive (`%s`) or insensitive (`%i`),\n  // depending on the back reference definition.\n  // For `universal` mode (`%u`) matches the last phrase found anywhere in the grammar.\n  // For `parent frame` mode (`%p`) matches the last phrase found in the parent rule only.\n  const opBKR = function (opIndex, phraseIndex, sysData) {\n    let i;\n    let code;\n    let lmcode;\n    let lower;\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    if (op.index < rules.length) {\n      lower = rules[op.index].lower;\n    } else {\n      lower = udts[op.index - rules.length].lower;\n    }\n    const frame = op.bkrMode === id.BKR_MODE_PM ? sysData.pFrame.getPhrase(lower) : sysData.uFrame.getPhrase(lower);\n    const insensitive = op.bkrCase === id.BKR_MODE_CI;\n    if (frame === null) {\n      return;\n    }\n    const lmIndex = frame.phraseIndex;\n    const len = frame.phraseLength;\n    if (len === 0) {\n      sysData.state = id.EMPTY;\n      return;\n    }\n    if (phraseIndex + len <= charsEnd) {\n      if (insensitive) {\n        /* case-insensitive match */\n        for (i = 0; i < len; i += 1) {\n          code = chars[phraseIndex + i];\n          lmcode = chars[lmIndex + i];\n          if (code >= 65 && code <= 90) {\n            code += 32;\n          }\n          if (lmcode >= 65 && lmcode <= 90) {\n            lmcode += 32;\n          }\n          if (code !== lmcode) {\n            return;\n          }\n        }\n        sysData.state = id.MATCH;\n        sysData.phraseLength = len;\n      } else {\n        /* case-sensitive match */\n        for (i = 0; i < len; i += 1) {\n          code = chars[phraseIndex + i];\n          lmcode = chars[lmIndex + i];\n          if (code !== lmcode) {\n            return;\n          }\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    }\n  };\n  // The `BKA` operator.<br>\n  // This is the positive `look behind` operator.\n  // It's child node is parsed right-to-left.\n  // Returns the EMPTY state if a match is found, NOMATCH otherwise.\n  // Like the look ahead operators, it always backtracks to `phraseIndex`.\n  const opBKA = function (opIndex, phraseIndex, sysData) {\n    lookAround.push({\n      lookAround: id.LOOKAROUND_BEHIND,\n      anchor: phraseIndex,\n    });\n    opExecute(opIndex + 1, phraseIndex, sysData);\n    lookAround.pop();\n    sysData.phraseLength = 0;\n    switch (sysData.state) {\n      case id.EMPTY:\n        sysData.state = id.EMPTY;\n        break;\n      case id.MATCH:\n        sysData.state = id.EMPTY;\n        break;\n      case id.NOMATCH:\n        sysData.state = id.NOMATCH;\n        break;\n      default:\n        throw new Error(`opBKA: invalid state ${sysData.state}`);\n    }\n  };\n  // The `BKN` operator.<br>\n  // This is the negative `look behind` operator.\n  // It's child node is parsed right-to-left.\n  // Returns the EMPTY state if a match is *not* found, NOMATCH otherwise.\n  // Like the look ahead operators, it always backtracks to `phraseIndex`.\n  const opBKN = function (opIndex, phraseIndex, sysData) {\n    // let op;\n    // op = opcodes[opIndex];\n    lookAround.push({\n      lookAround: id.LOOKAROUND_BEHIND,\n      anchor: phraseIndex,\n    });\n    opExecute(opIndex + 1, phraseIndex, sysData);\n    lookAround.pop();\n    sysData.phraseLength = 0;\n    switch (sysData.state) {\n      case id.EMPTY:\n      case id.MATCH:\n        sysData.state = id.NOMATCH;\n        break;\n      case id.NOMATCH:\n        sysData.state = id.EMPTY;\n        break;\n      default:\n        throw new Error(`opBKN: invalid state ${sysData.state}`);\n    }\n  };\n  // The right-to-left `CAT` operator.<br>\n  // Called for `CAT` operators when in look behind mode.\n  // Calls its child nodes from right to left concatenating matched phrases right to left.\n  const opCATBehind = function (opIndex, phraseIndex, sysData) {\n    let success;\n    let astLength;\n    let catCharIndex;\n    let catMatched;\n    const op = opcodes[opIndex];\n    const ulen = sysData.uFrame.length();\n    const plen = sysData.pFrame.length();\n    if (thisThis.ast) {\n      astLength = thisThis.ast.getLength();\n    }\n    success = true;\n    catCharIndex = phraseIndex;\n    catMatched = 0;\n    // catPhrase = 0;\n    for (let i = op.children.length - 1; i >= 0; i -= 1) {\n      opExecute(op.children[i], catCharIndex, sysData);\n      catCharIndex -= sysData.phraseLength;\n      catMatched += sysData.phraseLength;\n      // catPhrase += sysData.phraseLength;\n      if (sysData.state === id.NOMATCH) {\n        success = false;\n        break;\n      }\n    }\n    if (success) {\n      sysData.state = catMatched === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = catMatched;\n    } else {\n      sysData.state = id.NOMATCH;\n      sysData.phraseLength = 0;\n      sysData.uFrame.pop(ulen);\n      sysData.pFrame.pop(plen);\n      if (thisThis.ast) {\n        thisThis.ast.setLength(astLength);\n      }\n    }\n  };\n  // The right-to-left `REP` operator.<br>\n  // Called for `REP` operators in look behind mode.\n  // Makes repeated calls to its child node, concatenating matched phrases right to left.\n  const opREPBehind = function (opIndex, phraseIndex, sysData) {\n    let astLength;\n    let repCharIndex;\n    let repPhrase;\n    let repCount;\n    const op = opcodes[opIndex];\n    repCharIndex = phraseIndex;\n    repPhrase = 0;\n    repCount = 0;\n    const ulen = sysData.uFrame.length();\n    const plen = sysData.pFrame.length();\n    if (thisThis.ast) {\n      astLength = thisThis.ast.getLength();\n    }\n    const TRUE = true;\n    while (TRUE) {\n      if (repCharIndex <= 0) {\n        /* exit on end of input string */\n        break;\n      }\n      opExecute(opIndex + 1, repCharIndex, sysData);\n      if (sysData.state === id.NOMATCH) {\n        /* always end if the child node fails */\n        break;\n      }\n      if (sysData.state === id.EMPTY) {\n        /* REP always succeeds when the child node returns an empty phrase */\n        /* this may not seem obvious, but that's the way it works out */\n        break;\n      }\n      repCount += 1;\n      repPhrase += sysData.phraseLength;\n      repCharIndex -= sysData.phraseLength;\n      if (repCount === op.max) {\n        /* end on maxed out reps */\n        break;\n      }\n    }\n    /* evaluate the match count according to the min, max values */\n    if (sysData.state === id.EMPTY) {\n      sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = repPhrase;\n    } else if (repCount >= op.min) {\n      sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = repPhrase;\n    } else {\n      sysData.state = id.NOMATCH;\n      sysData.phraseLength = 0;\n      sysData.uFrame.pop(ulen);\n      sysData.pFrame.pop(plen);\n      if (thisThis.ast) {\n        thisThis.ast.setLength(astLength);\n      }\n    }\n  };\n  // The right-to-left `TRG` operator.<br>\n  // Called for `TRG` operators in look behind mode.\n  // Matches a single character at `phraseIndex - 1` to the `min` - `max` range.\n  const opTRGBehind = function (opIndex, phraseIndex, sysData) {\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    sysData.phraseLength = 0;\n    if (phraseIndex > 0) {\n      const char = chars[phraseIndex - 1];\n      if (op.min <= char && char <= op.max) {\n        sysData.state = id.MATCH;\n        sysData.phraseLength = 1;\n      }\n    }\n  };\n  // The right-to-left `TBS` operator.<br>\n  // Called for `TBS` operators in look behind mode.\n  // Matches the `TBS` phrase to the left of `phraseIndex`.\n  const opTBSBehind = function (opIndex, phraseIndex, sysData) {\n    let i;\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    const len = op.string.length;\n    const beg = phraseIndex - len;\n    if (beg >= 0) {\n      for (i = 0; i < len; i += 1) {\n        if (chars[beg + i] !== op.string[i]) {\n          return;\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    }\n  };\n  // The right-to-left `TLS` operator.<br>\n  // Called for `TLS` operators in look behind mode.\n  // Matches the `TLS` phrase to the left of `phraseIndex`.\n  const opTLSBehind = function (opIndex, phraseIndex, sysData) {\n    let char;\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    const len = op.string.length;\n    if (len === 0) {\n      /* EMPTY match allowed for TLS */\n      sysData.state = id.EMPTY;\n      return;\n    }\n    const beg = phraseIndex - len;\n    if (beg >= 0) {\n      for (let i = 0; i < len; i += 1) {\n        char = chars[beg + i];\n        if (char >= 65 && char <= 90) {\n          char += 32;\n        }\n        if (char !== op.string[i]) {\n          return;\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    }\n  };\n  // The right-to-left back reference operator.<br>\n  // Matches the back referenced phrase to the left of `phraseIndex`.\n  const opBKRBehind = function (opIndex, phraseIndex, sysData) {\n    let i;\n    let code;\n    let lmcode;\n    let lower;\n    const op = opcodes[opIndex];\n    /* NOMATCH default */\n    sysData.state = id.NOMATCH;\n    sysData.phraseLength = 0;\n    if (op.index < rules.length) {\n      lower = rules[op.index].lower;\n    } else {\n      lower = udts[op.index - rules.length].lower;\n    }\n    const frame = op.bkrMode === id.BKR_MODE_PM ? sysData.pFrame.getPhrase(lower) : sysData.uFrame.getPhrase(lower);\n    const insensitive = op.bkrCase === id.BKR_MODE_CI;\n    if (frame === null) {\n      return;\n    }\n    const lmIndex = frame.phraseIndex;\n    const len = frame.phraseLength;\n    if (len === 0) {\n      sysData.state = id.EMPTY;\n      sysData.phraseLength = 0;\n      return;\n    }\n    const beg = phraseIndex - len;\n    if (beg >= 0) {\n      if (insensitive) {\n        /* case-insensitive match */\n        for (i = 0; i < len; i += 1) {\n          code = chars[beg + i];\n          lmcode = chars[lmIndex + i];\n          if (code >= 65 && code <= 90) {\n            code += 32;\n          }\n          if (lmcode >= 65 && lmcode <= 90) {\n            lmcode += 32;\n          }\n          if (code !== lmcode) {\n            return;\n          }\n        }\n        sysData.state = id.MATCH;\n        sysData.phraseLength = len;\n      } else {\n        /* case-sensitive match */\n        for (i = 0; i < len; i += 1) {\n          code = chars[beg + i];\n          lmcode = chars[lmIndex + i];\n          if (code !== lmcode) {\n            return;\n          }\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    }\n  };\n  // Generalized execution function.<br>\n  // Having a single, generalized function, allows a single location\n  // for tracing and statistics gathering functions to be called.\n  // Tracing and statistics are handled in separate objects.\n  // However, the parser calls their API to build the object data records.\n  // See [`trace.js`](./trace.html) and [`stats.js`](./stats.html) for their\n  // usage.\n  opExecute = function opExecuteFunc(opIndex, phraseIndex, sysData) {\n    let ret = true;\n    const op = opcodes[opIndex];\n    nodeHits += 1;\n    if (nodeHits > limitNodeHits) {\n      throw new Error(`parser: maximum number of node hits exceeded: ${limitNodeHits}`);\n    }\n    treeDepth += 1;\n    if (treeDepth > maxTreeDepth) {\n      maxTreeDepth = treeDepth;\n      if (maxTreeDepth > limitTreeDepth) {\n        throw new Error(`parser: maximum parse tree depth exceeded: ${limitTreeDepth}`);\n      }\n    }\n    sysData.refresh();\n    if (thisThis.trace !== null) {\n      /* collect the trace record for down the parse tree */\n      const lk = lookAroundValue();\n      thisThis.trace.down(op, sysData.state, phraseIndex, sysData.phraseLength, lk.anchor, lk.lookAround);\n    }\n    if (inLookBehind()) {\n      switch (op.type) {\n        case id.ALT:\n          opALT(opIndex, phraseIndex, sysData);\n          break;\n        case id.CAT:\n          opCATBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.REP:\n          opREPBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.RNM:\n          opRNM(opIndex, phraseIndex, sysData);\n          break;\n        case id.UDT:\n          opUDT(opIndex, phraseIndex, sysData);\n          break;\n        case id.AND:\n          opAND(opIndex, phraseIndex, sysData);\n          break;\n        case id.NOT:\n          opNOT(opIndex, phraseIndex, sysData);\n          break;\n        case id.TRG:\n          opTRGBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.TBS:\n          opTBSBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.TLS:\n          opTLSBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKR:\n          opBKRBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKA:\n          opBKA(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKN:\n          opBKN(opIndex, phraseIndex, sysData);\n          break;\n        case id.ABG:\n          opABG(opIndex, phraseIndex, sysData);\n          break;\n        case id.AEN:\n          opAEN(opIndex, phraseIndex, sysData);\n          break;\n        default:\n          ret = false;\n          break;\n      }\n    } else {\n      switch (op.type) {\n        case id.ALT:\n          opALT(opIndex, phraseIndex, sysData);\n          break;\n        case id.CAT:\n          opCAT(opIndex, phraseIndex, sysData);\n          break;\n        case id.REP:\n          opREP(opIndex, phraseIndex, sysData);\n          break;\n        case id.RNM:\n          opRNM(opIndex, phraseIndex, sysData);\n          break;\n        case id.UDT:\n          opUDT(opIndex, phraseIndex, sysData);\n          break;\n        case id.AND:\n          opAND(opIndex, phraseIndex, sysData);\n          break;\n        case id.NOT:\n          opNOT(opIndex, phraseIndex, sysData);\n          break;\n        case id.TRG:\n          opTRG(opIndex, phraseIndex, sysData);\n          break;\n        case id.TBS:\n          opTBS(opIndex, phraseIndex, sysData);\n          break;\n        case id.TLS:\n          opTLS(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKR:\n          opBKR(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKA:\n          opBKA(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKN:\n          opBKN(opIndex, phraseIndex, sysData);\n          break;\n        case id.ABG:\n          opABG(opIndex, phraseIndex, sysData);\n          break;\n        case id.AEN:\n          opAEN(opIndex, phraseIndex, sysData);\n          break;\n        default:\n          ret = false;\n          break;\n      }\n    }\n    if (!inLookAround() && phraseIndex + sysData.phraseLength > maxMatched) {\n      maxMatched = phraseIndex + sysData.phraseLength;\n    }\n    if (thisThis.stats !== null) {\n      /* collect the statistics */\n      thisThis.stats.collect(op, sysData);\n    }\n    if (thisThis.trace !== null) {\n      /* collect the trace record for up the parse tree */\n      const lk = lookAroundValue();\n      thisThis.trace.up(op, sysData.state, phraseIndex, sysData.phraseLength, lk.anchor, lk.lookAround);\n    }\n    treeDepth -= 1;\n    return ret;\n  };\n};\n"],"names":[],"mappings":"AAAA,6BAA6B,GAC7B,uCAAuC,GACvC,0BAA0B,GAC1B,+BAA+B,GAC/B;;;uFAGuF,GACvF,iFAAiF;AACjF,sFAAsF;AACtF,mFAAmF;AACnF,OAAO,OAAO,GAAG,SAAS;IACxB,MAAM;IACN,MAAM;IAEN,MAAM,eAAe;IACrB,MAAM,WAAW,IAAI;IACrB,IAAI;IACJ,IAAI,CAAC,GAAG,GAAG;IACX,IAAI,CAAC,KAAK,GAAG;IACb,IAAI,CAAC,KAAK,GAAG;IACb,IAAI,CAAC,SAAS,GAAG,EAAE;IACnB,IAAI,UAAU;IACd,IAAI,QAAQ;IACZ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI,YAAY;IAChB,IAAI,eAAe;IACnB,IAAI,WAAW;IACf,IAAI,gBAAgB;IACpB,IAAI,eAAe;IACnB,IAAI,QAAQ;IACZ,IAAI,OAAO;IACX,IAAI,aAAa;IACjB,IAAI,aAAa;IACjB,IAAI,iBAAiB;IACrB,IAAI,gBAAgB;IACpB,wEAAwE;IACxE,2EAA2E;IAC3E,wEAAwE;IACxE,kBAAkB;IAClB,MAAM,eAAe,SAAS,aAAa,SAAS,EAAE,WAAW,EAAE,OAAO;QACxE,MAAM,eAAe,AAAC,GAAe,OAAb,cAAa;QACrC,IAAI,aAAa,MAAM,MAAM,EAAE;YAC7B,MAAM,IAAI,MAAM,AAAC,GAA6B,OAA3B,cAAa,gBAAwB,OAAV,WAAU;QAC1D;QACA,IAAI,eAAe,UAAU;YAC3B,MAAM,IAAI,MAAM,AAAC,GAA+B,OAA7B,cAAa,kBAA4B,OAAZ,aAAY;QAC9D;QACA,MAAM,EAAE,MAAM,EAAE,GAAG;QACnB,QAAQ,IAAI,CAAC;YACX,MAAM,GAAG,GAAG;YACZ,OAAO;QACT;QACA,UAAU,QAAQ,aAAa;QAC/B,QAAQ,GAAG;IACb;IACA,uEAAuE;IACvE,yEAAyE;IACzE,wEAAwE;IACxE,kBAAkB;IAClB,MAAM,cAAc,SAAU,QAAQ,EAAE,WAAW,EAAE,OAAO;QAC1D,MAAM,eAAe,AAAC,GAAe,OAAb,cAAa;QACrC,IAAI,YAAY,KAAK,MAAM,EAAE;YAC3B,MAAM,IAAI,MAAM,AAAC,GAA4B,OAA1B,cAAa,eAAsB,OAAT,UAAS;QACxD;QACA,IAAI,eAAe,UAAU;YAC3B,MAAM,IAAI,MAAM,AAAC,GAA+B,OAA7B,cAAa,kBAA4B,OAAZ,aAAY;QAC9D;QACA,MAAM,EAAE,MAAM,EAAE,GAAG;QACnB,QAAQ,IAAI,CAAC;YACX,MAAM,GAAG,GAAG;YACZ,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK;YAC3B,OAAO;QACT;QACA,UAAU,QAAQ,aAAa;QAC/B,QAAQ,GAAG;IACb;IACA,gFAAgF,GAChF,uGAAuG,GACvG,MAAM,QAAQ;QACZ,YAAY;QACZ,eAAe;QACf,WAAW;QACX,aAAa;QACb,aAAa;YACX;gBACE,YAAY,GAAG,eAAe;gBAC9B,QAAQ;gBACR,UAAU;gBACV,aAAa;YACf;SACD;QACD,QAAQ;QACR,OAAO;QACP,QAAQ;QACR,aAAa;QACb,cAAc;QACd,WAAW;QACX,gBAAgB;QAChB,eAAe;QACf,aAAa;QACb,UAAU;IACZ;IACA,2DAA2D,GAC3D,MAAM,UAAU;QACd,MAAM,QAAQ,EAAE;QAChB,MAAM,OAAO;YACX,MAAM,MAAM,CAAC;YACb,MAAM,OAAO,CAAC,CAAC;gBACb,IAAI,KAAK,KAAK,EAAE;oBACd,GAAG,CAAC,KAAK,KAAK,CAAC,GAAG;gBACpB;YACF;YACA,IAAI,KAAK,MAAM,GAAG,GAAG;gBACnB,KAAK,OAAO,CAAC,CAAC;oBACZ,IAAI,IAAI,KAAK,EAAE;wBACb,GAAG,CAAC,IAAI,KAAK,CAAC,GAAG;oBACnB;gBACF;YACF;YACA,MAAM,IAAI,CAAC;QACb;QACA,MAAM,OAAO;YACX,MAAM,MAAM,KAAK,CAAC,MAAM,MAAM,GAAG,EAAE;YACnC,MAAM,MAAM,CAAC;YACb,oDAAoD,GACpD,IAAK,MAAM,QAAQ,IAAK;gBACtB,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK;YACvB;YACA,OAAO;QACT;QACA,IAAI,CAAC,IAAI,GAAG,SAAS;YACnB,MAAM,IAAI,CAAC;QACb;QACA,IAAI,CAAC,GAAG,GAAG,SAAS,IAAI,SAAS;YAC/B,IAAI,SAAS;YACb,IAAI,CAAC,QAAQ;gBACX,SAAS,MAAM,MAAM,GAAG;YAC1B;YACA,IAAI,SAAS,KAAK,SAAS,MAAM,MAAM,EAAE;gBACvC,MAAM,IAAI,MAAM,AAAC,GAA4C,OAA1C,cAAa,+BAAoC,OAAP;YAC/D;YACA,MAAM,MAAM,GAAG;YACf,OAAO,KAAK,CAAC,MAAM,MAAM,GAAG,EAAE;QAChC;QACA,IAAI,CAAC,MAAM,GAAG,SAAS;YACrB,OAAO,MAAM,MAAM;QACrB;QACA,IAAI,CAAC,UAAU,GAAG,SAAS,WAAW,IAAI,EAAE,KAAK,EAAE,MAAM;YACvD,KAAK,CAAC,MAAM,MAAM,GAAG,EAAE,CAAC,KAAK,GAAG;gBAC9B,aAAa;gBACb,cAAc;YAChB;QACF;QACA,IAAI,CAAC,SAAS,GAAG,SAAU,IAAI;YAC7B,OAAO,KAAK,CAAC,MAAM,MAAM,GAAG,EAAE,CAAC,KAAK;QACtC;QACA,eAAe,GACf;IACF;IACA,4GAA4G;IAC5G,wGAAwG;IACxG,wDAAwD;IACxD,uFAAuF;IACvF,6EAA6E;IAC7E,0DAA0D;IAC1D,qDAAqD;IACrD,gFAAgF;IAChF,4DAA4D;IAC5D,yFAAyF;IACzF,6EAA6E;IAC7E,qEAAqE;IACrE,2EAA2E;IAC3E,qEAAqE;IACrE,MAAM,aAAa,SAAS;QAC1B,MAAM,WAAW,IAAI;QACrB,IAAI,CAAC,KAAK,GAAG,GAAG,MAAM;QACtB,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,WAAW,MAAM,GAAG,EAAE;QACnD,IAAI,CAAC,MAAM,GAAG,IAAI;QAClB,IAAI,CAAC,MAAM,GAAG,IAAI;QAClB,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,WAAW,GAAG;QACnB,mDAAmD,GACnD,IAAI,CAAC,OAAO,GAAG,SAAS;YACtB,SAAS,KAAK,GAAG,GAAG,MAAM;YAC1B,SAAS,YAAY,GAAG;YACxB,SAAS,UAAU,GAAG,UAAU,CAAC,WAAW,MAAM,GAAG,EAAE;QACzD;IACF;IACA,qCAAqC,GACrC,MAAM,kBAAkB,SAAS;QAC/B,OAAO,UAAU,CAAC,WAAW,MAAM,GAAG,EAAE;IAC1C;IACA,mEAAmE,GACnE,MAAM,eAAe,SAAS;QAC5B,OAAO,WAAW,MAAM,GAAG;IAC7B;IACA,iDAAiD,GACjD,MAAM,eAAe;QACnB,OAAO,UAAU,CAAC,WAAW,MAAM,GAAG,EAAE,CAAC,UAAU,KAAK,GAAG,iBAAiB;IAC9E;IACA,2EAA2E,GAC3E,MAAM,gBAAgB;QACpB,MAAM,eAAe,AAAC,GAAe,OAAb,cAAa;QACrC,MAAM,OAAO;QACb,MAAO,KAAM;YACX,IAAI,SAAS,GAAG,KAAK,WAAW;gBAC9B,SAAS,GAAG,GAAG;gBACf;YACF;YACA,IAAI,SAAS,GAAG,KAAK,MAAM;gBACzB;YACF;YACA,IAAI,SAAS,GAAG,CAAC,SAAS,KAAK,aAAa;gBAC1C,MAAM,IAAI,MAAM,AAAC,GAAe,OAAb,cAAa;YAClC;YACA;QACF;QACA,IAAI,SAAS,GAAG,KAAK,MAAM;YACzB,SAAS,GAAG,CAAC,IAAI,CAAC,OAAO,MAAM;QACjC;IACF;IACA,6EAA6E,GAC7E,MAAM,kBAAkB;QACtB,MAAM,eAAe,AAAC,GAAe,OAAb,cAAa;QACrC,MAAM,OAAO;QACb,MAAO,KAAM;YACX,IAAI,SAAS,KAAK,KAAK,WAAW;gBAChC,SAAS,KAAK,GAAG;gBACjB;YACF;YACA,IAAI,SAAS,KAAK,KAAK,MAAM;gBAC3B;YACF;YACA,IAAI,SAAS,KAAK,CAAC,WAAW,KAAK,eAAe;gBAChD,MAAM,IAAI,MAAM,AAAC,GAAe,OAAb,cAAa;YAClC;YACA;QACF;QACA,IAAI,SAAS,KAAK,KAAK,MAAM;YAC3B,SAAS,KAAK,CAAC,IAAI,CAAC,OAAO,MAAM;QACnC;IACF;IACA,kFAAkF,GAClF,MAAM,kBAAkB;QACtB,MAAM,eAAe,AAAC,GAAe,OAAb,cAAa;QACrC,MAAM,OAAO;QACb,MAAO,KAAM;YACX,IAAI,SAAS,KAAK,KAAK,WAAW;gBAChC,SAAS,KAAK,GAAG;gBACjB;YACF;YACA,IAAI,SAAS,KAAK,KAAK,MAAM;gBAC3B;YACF;YACA,IAAI,SAAS,KAAK,CAAC,WAAW,KAAK,eAAe;gBAChD,MAAM,IAAI,MAAM,AAAC,GAAe,OAAb,cAAa;YAClC;YACA;QACF;QACA,IAAI,SAAS,KAAK,KAAK,MAAM;YAC3B,SAAS,KAAK,CAAC,IAAI,CAAC,OAAO;QAC7B;IACF;IACA,4EAA4E,GAC5E,oDAAoD,GACpD,MAAM,oBAAoB,SAAU,OAAO;QACzC,MAAM,eAAe,AAAC,GAAe,OAAb,cAAa;QACrC,IAAI,CAAC,SAAS;YACZ,MAAM,IAAI,MAAM,AAAC,GAAe,OAAb,cAAa;QAClC;QACA,IAAI,QAAQ,aAAa,KAAK,iBAAiB;YAC7C,MAAM,IAAI,MAAM,AAAC,GAAe,OAAb,cAAa;QAClC;QACA,QAAQ,QAAQ,KAAK;QACrB,OAAO,QAAQ,IAAI;IACrB;IACA,kDAAkD,GAClD,MAAM,sBAAsB,SAAU,SAAS;QAC7C,MAAM,eAAe,AAAC,GAAe,OAAb,cAAa;QACrC,IAAI,QAAQ;QACZ,IAAI,OAAO,cAAc,UAAU;YACjC,IAAI,aAAa,MAAM,MAAM,EAAE;gBAC7B,MAAM,IAAI,MAAM,AAAC,GAAkD,OAAhD,cAAa,qCAA2D,OAAxB,MAAM,MAAM,EAAC,aAAqB,OAAV;YAC7F;YACA,QAAQ;QACV,OAAO,IAAI,OAAO,cAAc,UAAU;YACxC,MAAM,QAAQ,UAAU,WAAW;YACnC,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,KAAK,EAAG;gBACxC,IAAI,UAAU,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE;oBAC5B,QAAQ,KAAK,CAAC,EAAE,CAAC,KAAK;oBACtB;gBACF;YACF;YACA,IAAI,UAAU,MAAM;gBAClB,MAAM,IAAI,MAAM,AAAC,GAAkC,OAAhC,cAAa,qBAA6B,OAAV,WAAU;YAC/D;QACF,OAAO;YACL,MAAM,IAAI,MAAM,AAAC,GAAqC,OAAnC,cAAa,wBAAuC,OAAjB,OAAO,WAAU;QACzE;QACA,OAAO;IACT;IACA,+FAA+F,GAC/F,MAAM,uBAAuB,SAAS,qBAAqB,QAAQ,EAAE,MAAM,EAAE,MAAM;QACjF,MAAM,eAAe,AAAC,GAAe,OAAb,cAAa;QACrC,8BAA8B,GAC9B,IAAI,QAAQ;QACZ,IAAI,MAAM;QACV,IAAI,MAAM;QACV,IAAI,UAAU,WAAW;YACvB,MAAM,IAAI,MAAM,AAAC,GAAe,OAAb,cAAa;QAClC;QACA,IAAI,UAAU,MAAM;YAClB,MAAM,IAAI,MAAM,AAAC,GAAe,OAAb,cAAa;QAClC;QACA,IAAI,OAAO,UAAU,UAAU;YAC7B,QAAQ,MAAM,aAAa,CAAC;QAC9B,OAAO,IAAI,CAAC,MAAM,OAAO,CAAC,QAAQ;YAChC,MAAM,IAAI,MAAM,AAAC,GAAe,OAAb,cAAa;QAClC;QACA,IAAI,MAAM,MAAM,GAAG,GAAG;YACpB,IAAI,OAAO,KAAK,CAAC,EAAE,KAAK,UAAU;gBAChC,MAAM,IAAI,MAAM,AAAC,GAAe,OAAb,cAAa;YAClC;QACF;QACA,wCAAwC,GACxC,IAAI,OAAO,QAAQ,UAAU;YAC3B,MAAM;QACR,OAAO;YACL,MAAM,KAAK,KAAK,CAAC;YACjB,IAAI,MAAM,KAAK,MAAM,MAAM,MAAM,EAAE;gBACjC,MAAM,IAAI,MAAM,AAAC,GAAqD,OAAnD,cAAa,wCAA0C,OAAJ;YACxE;QACF;QACA,qCAAqC,GACrC,IAAI,OAAO,QAAQ,UAAU;YAC3B,MAAM,MAAM,MAAM,GAAG;QACvB,OAAO;YACL,MAAM,KAAK,KAAK,CAAC;YACjB,IAAI,MAAM,KAAK,MAAM,MAAM,MAAM,GAAG,KAAK;gBACvC,MAAM,IAAI,MAAM,AAAC,GAA4C,OAA1C,cAAa,+BAAiC,OAAJ;YAC/D;QACF;QACA,QAAQ;QACR,aAAa;QACb,cAAc;QACd,WAAW,aAAa;IAC1B;IACA,uFAAuF,GACvF,MAAM,sBAAsB;QAC1B,MAAM,eAAe,AAAC,GAAe,OAAb,cAAa;QACrC,IAAI;QACJ,gBAAgB,EAAE;QAClB,eAAe,EAAE;QACjB,IAAK,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,KAAK,EAAG;YACpC,aAAa,CAAC,EAAE,GAAG;QACrB;QACA,IAAK,IAAI,GAAG,IAAI,KAAK,MAAM,EAAE,KAAK,EAAG;YACnC,YAAY,CAAC,EAAE,GAAG;QACpB;QACA,IAAI;QACJ,MAAM,OAAO,EAAE;QACf,IAAK,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,KAAK,EAAG;YACpC,KAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK;QAC1B;QACA,IAAK,IAAI,GAAG,IAAI,KAAK,MAAM,EAAE,KAAK,EAAG;YACnC,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK;QACzB;QACA,IAAK,MAAM,SAAS,SAAS,SAAS,CAAE;YACtC,IAAI,KAAK,OAAO,CAAC,MAAM,WAAW;YAClC,IAAI,IAAI,GAAG;gBACT,MAAM,IAAI,MAAM,AAAC,GAAkC,OAAhC,cAAa,qBAAyB,OAAN,OAAM;YAC3D;YACA,OAAO,SAAS,SAAS,CAAC,MAAM;YAChC,IAAI,CAAC,MAAM;gBACT,OAAO;YACT;YACA,IAAI,OAAO,SAAS,cAAc,SAAS,MAAM;gBAC/C,IAAI,IAAI,MAAM,MAAM,EAAE;oBACpB,aAAa,CAAC,EAAE,GAAG;gBACrB,OAAO;oBACL,YAAY,CAAC,IAAI,MAAM,MAAM,CAAC,GAAG;gBACnC;YACF,OAAO;gBACL,MAAM,IAAI,MACR,AAAC,GAAiC,OAA/B,cAAa,oBAAwB,OAAN,OAAM;YAE5C;QACF;QACA,6EAA6E,GAC7E,IAAK,IAAI,GAAG,IAAI,KAAK,MAAM,EAAE,KAAK,EAAG;YACnC,IAAI,YAAY,CAAC,EAAE,KAAK,MAAM;gBAC5B,MAAM,IAAI,MACR,AAAC,GAAiE,OAA/D,cAAa,oDAAgE,OAAd,IAAI,CAAC,EAAE,CAAC,KAAK,EAAC;YAEpF;QACF;IACF;IACA,uEAAuE;IACvE,wEAAwE;IACxE,0DAA0D;IAC1D,OAAO;IACP,OAAO;IACP,4EAA4E;IAC5E,QAAQ;IACR,QAAQ;IACR,IAAI,CAAC,eAAe,GAAG,SAAU,KAAK;QACpC,IAAI,OAAO,UAAU,UAAU;YAC7B,MAAM,IAAI,MAAM,AAAC,+CAAoD,OAAN;QACjE;QACA,iBAAiB,KAAK,KAAK,CAAC;QAC5B,IAAI,kBAAkB,GAAG;YACvB,MAAM,IAAI,MAAM,AAAC,+CAAoD,OAAN;QACjE;IACF;IACA,4FAA4F;IAC5F,6BAA6B;IAC7B,wEAAwE;IACxE,0DAA0D;IAC1D,OAAO;IACP,OAAO;IACP,mEAAmE;IACnE,mCAAmC;IACnC,QAAQ;IACR,QAAQ;IACR,IAAI,CAAC,cAAc,GAAG,SAAU,IAAI;QAClC,IAAI,OAAO,SAAS,UAAU;YAC5B,MAAM,IAAI,MAAM,AAAC,8CAAkD,OAAL;QAChE;QACA,gBAAgB,KAAK,KAAK,CAAC;QAC3B,IAAI,iBAAiB,GAAG;YACtB,MAAM,IAAI,MAAM,AAAC,8CAAkD,OAAL;QAChE;IACF;IACA,4BAA4B,GAC5B,MAAM,eAAe,SAAU,OAAO,EAAE,YAAY,EAAE,YAAY;QAChE,IAAI;QACJ,MAAM,eAAe,AAAC,GAAe,OAAb,cAAa;QACrC,kBAAkB;QAClB,MAAM,YAAY,oBAAoB;QACtC;QACA;QACA;QACA;QACA,MAAM,UAAU,IAAI;QACpB,IAAI,CAAC,CAAC,iBAAiB,aAAa,iBAAiB,IAAI,GAAG;YAC1D,aAAa;QACf;QACA,4CAA4C,GAC5C,UAAU;YACR;gBACE,MAAM,GAAG,GAAG;gBACZ,OAAO;YACT;SACD;QACD,0BAA0B,GAC1B,UAAU,GAAG,YAAY;QACzB,UAAU;QACV,+BAA+B,GAC/B,OAAQ,QAAQ,KAAK;YACnB,KAAK,GAAG,MAAM;gBACZ,MAAM,IAAI,MAAM,AAAC,GAAe,OAAb,cAAa;YAClC,KAAK,GAAG,OAAO;gBACb,UAAU;gBACV;YACF,KAAK,GAAG,KAAK;YACb,KAAK,GAAG,KAAK;gBACX,IAAI,QAAQ,YAAY,KAAK,aAAa;oBACxC,UAAU;gBACZ,OAAO;oBACL,UAAU;gBACZ;gBACA;YACF;gBACE,MAAM,IAAI,MAAM;QACpB;QACA,OAAO;YACL;YACA,OAAO,QAAQ,KAAK;YACpB,QAAQ;YACR,SAAS,QAAQ,YAAY;YAC7B;YACA;YACA;YACA,aAAa,MAAM,MAAM;YACzB,UAAU;YACV,QAAQ;YACR,WAAW;QACb;IACF;IAEA,qEAAqE;IACrE,OAAO;IACP,yEAAyE;IACzE,oDAAoD;IACpD,QAAQ;IACR,4DAA4D;IAC5D,IAAI,CAAC,cAAc,GAAG,SAAS,eAAe,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,WAAW,EAAE,YAAY;QACjH;QACA,qBAAqB,YAAY,YAAY;QAC7C,OAAO,aAAa,SAAS,WAAW;IAC1C;IACA,8DAA8D;IAC9D,OAAO;IACP,6EAA6E;IAC7E,8BAA8B;IAC9B,8EAA8E;IAC9E,wEAAwE;IACxE,gEAAgE;IAChE,+GAA+G;IAC/G,eAAe;IACf,2EAA2E;IAC3E,sBAAsB;IACtB,2EAA2E;IAC3E,iCAAiC;IACjC,QAAQ;IACR,IAAI,CAAC,KAAK,GAAG,SAAS,MAAM,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,YAAY;QACtE;QACA,qBAAqB,YAAY,GAAG,WAAW,MAAM;QACrD,OAAO,aAAa,SAAS,WAAW;IAC1C;IACA,0BAA0B;IAC1B,wEAAwE;IACxE,0CAA0C;IAC1C,MAAM,QAAQ,SAAU,OAAO,EAAE,WAAW,EAAE,OAAO;QACnD,MAAM,KAAK,OAAO,CAAC,QAAQ;QAC3B,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAG;YAC9C,UAAU,GAAG,QAAQ,CAAC,EAAE,EAAE,aAAa;YACvC,IAAI,QAAQ,KAAK,KAAK,GAAG,OAAO,EAAE;gBAChC;YACF;QACF;IACF;IACA,0BAA0B;IAC1B,uDAAuD;IACvD,qCAAqC;IACrC,mCAAmC;IACnC,MAAM,QAAQ,SAAU,OAAO,EAAE,WAAW,EAAE,OAAO;QACnD,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,MAAM,KAAK,OAAO,CAAC,QAAQ;QAC3B,MAAM,OAAO,QAAQ,MAAM,CAAC,MAAM;QAClC,MAAM,OAAO,QAAQ,MAAM,CAAC,MAAM;QAClC,IAAI,SAAS,GAAG,EAAE;YAChB,YAAY,SAAS,GAAG,CAAC,SAAS;QACpC;QACA,UAAU;QACV,eAAe;QACf,YAAY;QACZ,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAG;YAC9C,UAAU,GAAG,QAAQ,CAAC,EAAE,EAAE,cAAc;YACxC,IAAI,QAAQ,KAAK,KAAK,GAAG,OAAO,EAAE;gBAChC,UAAU;gBACV;YACF,OAAO;gBACL,gBAAgB,QAAQ,YAAY;gBACpC,aAAa,QAAQ,YAAY;YACnC;QACF;QACA,IAAI,SAAS;YACX,QAAQ,KAAK,GAAG,cAAc,IAAI,GAAG,KAAK,GAAG,GAAG,KAAK;YACrD,QAAQ,YAAY,GAAG;QACzB,OAAO;YACL,QAAQ,KAAK,GAAG,GAAG,OAAO;YAC1B,QAAQ,YAAY,GAAG;YACvB,gDAAgD,GAChD,QAAQ,MAAM,CAAC,GAAG,CAAC;YACnB,QAAQ,MAAM,CAAC,GAAG,CAAC;YACnB,IAAI,SAAS,GAAG,EAAE;gBAChB,SAAS,GAAG,CAAC,SAAS,CAAC;YACzB;QACF;IACF;IACA,0BAA0B;IAC1B,6CAA6C;IAC7C,mDAAmD;IACnD,mEAAmE;IACnE,0CAA0C;IAC1C,MAAM,QAAQ,SAAU,OAAO,EAAE,WAAW,EAAE,OAAO;QACnD,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,MAAM,KAAK,OAAO,CAAC,QAAQ;QAC3B,IAAI,GAAG,GAAG,KAAK,GAAG;YAChB,mCAAmC;YACnC,6DAA6D;YAC7D,QAAQ,KAAK,GAAG,GAAG,KAAK;YACxB,QAAQ,YAAY,GAAG;YACvB;QACF;QACA,eAAe;QACf,YAAY;QACZ,WAAW;QACX,MAAM,OAAO,QAAQ,MAAM,CAAC,MAAM;QAClC,MAAM,OAAO,QAAQ,MAAM,CAAC,MAAM;QAClC,IAAI,SAAS,GAAG,EAAE;YAChB,YAAY,SAAS,GAAG,CAAC,SAAS;QACpC;QACA,MAAM,OAAO;QACb,MAAO,KAAM;YACX,IAAI,gBAAgB,UAAU;gBAE5B;YACF;YACA,UAAU,UAAU,GAAG,cAAc;YACrC,IAAI,QAAQ,KAAK,KAAK,GAAG,OAAO,EAAE;gBAEhC;YACF;YACA,IAAI,QAAQ,KAAK,KAAK,GAAG,KAAK,EAAE;gBAG9B;YACF;YACA,YAAY;YACZ,aAAa,QAAQ,YAAY;YACjC,gBAAgB,QAAQ,YAAY;YACpC,IAAI,aAAa,GAAG,GAAG,EAAE;gBAEvB;YACF;QACF;QACA,6DAA6D,GAC7D,IAAI,QAAQ,KAAK,KAAK,GAAG,KAAK,EAAE;YAC9B,QAAQ,KAAK,GAAG,cAAc,IAAI,GAAG,KAAK,GAAG,GAAG,KAAK;YACrD,QAAQ,YAAY,GAAG;QACzB,OAAO,IAAI,YAAY,GAAG,GAAG,EAAE;YAC7B,QAAQ,KAAK,GAAG,cAAc,IAAI,GAAG,KAAK,GAAG,GAAG,KAAK;YACrD,QAAQ,YAAY,GAAG;QACzB,OAAO;YACL,QAAQ,KAAK,GAAG,GAAG,OAAO;YAC1B,QAAQ,YAAY,GAAG;YACvB,gDAAgD,GAChD,QAAQ,MAAM,CAAC,GAAG,CAAC;YACnB,QAAQ,MAAM,CAAC,GAAG,CAAC;YACnB,IAAI,SAAS,GAAG,EAAE;gBAChB,SAAS,GAAG,CAAC,SAAS,CAAC;YACzB;QACF;IACF;IACA,4DAA4D;IAC5D,mDAAmD;IACnD,0BAA0B;IAC1B,MAAM,4BAA4B,SAAU,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI;QACxE,IAAI,QAAQ,YAAY,GAAG,WAAW;YACpC,IAAI,MAAM,AAAC,GAAuB,OAArB,cAAa,UAAkB,OAAV,KAAK,IAAI,EAAC;YAC5C,OAAO,AAAC,yBAA6C,OAArB,QAAQ,YAAY;YACpD,OAAO,AAAC,gCAAyC,OAAV;YACvC,MAAM,IAAI,MAAM;QAClB;QACA,OAAQ,QAAQ,KAAK;YACnB,KAAK,GAAG,MAAM;gBACZ,IAAI,SAAS,MAAM;oBACjB,MAAM,IAAI,MACR,AAAC,GAAuB,OAArB,cAAa,UAAkB,OAAV,KAAK,IAAI,EAAC;gBAEtC;gBACA;YACF,KAAK,GAAG,KAAK;gBACX,QAAQ,YAAY,GAAG;gBACvB;YACF,KAAK,GAAG,KAAK;gBACX,IAAI,QAAQ,YAAY,KAAK,GAAG;oBAC9B,QAAQ,KAAK,GAAG,GAAG,KAAK;gBAC1B;gBACA;YACF,KAAK,GAAG,OAAO;gBACb,QAAQ,YAAY,GAAG;gBACvB;YACF;gBACE,MAAM,IAAI,MACR,AAAC,GAAuB,OAArB,cAAa,UAAkF,OAA1E,KAAK,IAAI,EAAC,kEAA8E,OAAd,QAAQ,KAAK;QAErH;IACF;IACA,0BAA0B;IAC1B,2EAA2E;IAC3E,4CAA4C;IAC5C,mHAAmH;IACnH,+FAA+F;IAC/F,wCAAwC;IACxC,MAAM,QAAQ,SAAU,OAAO,EAAE,WAAW,EAAE,OAAO;QACnD,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,MAAM,KAAK,OAAO,CAAC,QAAQ;QAC3B,MAAM,OAAO,KAAK,CAAC,GAAG,KAAK,CAAC;QAC5B,MAAM,WAAW,aAAa,CAAC,KAAK,KAAK,CAAC;QAC1C,MAAM,gBAAgB,CAAC;QACvB,gDAAgD,GAChD,IAAI,eAAe;YACjB,iCAAiC,GACjC,aAAa,SAAS,GAAG,IAAI,SAAS,GAAG,CAAC,WAAW,CAAC,GAAG,KAAK;YAC9D,IAAI,YAAY;gBACd,YAAY,SAAS,GAAG,CAAC,SAAS;gBAClC,SAAS,GAAG,CAAC,IAAI,CAAC,GAAG,KAAK,EAAE,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC,IAAI;YAClD;YACA,OAAO,QAAQ,MAAM,CAAC,MAAM;YAC5B,OAAO,QAAQ,MAAM,CAAC,MAAM;YAC5B,QAAQ,MAAM,CAAC,IAAI;YACnB,QAAQ,MAAM,CAAC,IAAI;YACnB,YAAY,QAAQ,MAAM;YAC1B,QAAQ,MAAM,GAAG,IAAI;QACvB;QACA,IAAI,aAAa,MAAM;YACrB,uCAAuC,GACvC,eAAe;YACf,UAAU,KAAK,OAAO;YACtB,UAAU,GAAG,aAAa;YAC1B,UAAU;QACZ,OAAO;YACL,wBAAwB,GACxB,MAAM,YAAY,WAAW;YAC7B,QAAQ,SAAS,GAAG,KAAK,KAAK;YAC9B,SAAS,SAAS,OAAO,aAAa;YACtC,0BAA0B,MAAM,SAAS,WAAW;YACpD,IAAI,QAAQ,KAAK,KAAK,GAAG,MAAM,EAAE;gBAC/B,eAAe;gBACf,UAAU,KAAK,OAAO;gBACtB,UAAU,GAAG,aAAa;gBAC1B,UAAU;gBACV,QAAQ,SAAS,GAAG,KAAK,KAAK;gBAC9B,SAAS,SAAS,OAAO,aAAa;gBACtC,0BAA0B,MAAM,SAAS,WAAW;YACtD,EAAE,6EAA6E;QACjF;QACA,IAAI,eAAe;YACjB,WAAW,GACX,IAAI,YAAY;gBACd,IAAI,QAAQ,KAAK,KAAK,GAAG,OAAO,EAAE;oBAChC,SAAS,GAAG,CAAC,SAAS,CAAC;gBACzB,OAAO;oBACL,SAAS,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,KAAK,IAAI,EAAE,aAAa,QAAQ,YAAY;gBACxE;YACF;YACA,sBAAsB,GACtB,QAAQ,MAAM,GAAG;YACjB,IAAI,QAAQ,KAAK,KAAK,GAAG,OAAO,EAAE;gBAChC,QAAQ,MAAM,CAAC,GAAG,CAAC;gBACnB,QAAQ,MAAM,CAAC,GAAG,CAAC;YACrB,OAAO,IAAI,KAAK,KAAK,EAAE;gBACrB,uDAAuD,GACvD,+CAA+C,GAC/C,QAAQ,MAAM,CAAC,UAAU,CAAC,KAAK,KAAK,EAAE,aAAa,QAAQ,YAAY;gBACvE,QAAQ,MAAM,CAAC,UAAU,CAAC,KAAK,KAAK,EAAE,aAAa,QAAQ,YAAY;YACzE;QACF;IACF;IACA,4DAA4D;IAC5D,yEAAyE;IACzE,MAAM,4BAA4B,SAAU,GAAG,EAAE,OAAO,EAAE,SAAS;QACjE,IAAI,QAAQ,YAAY,GAAG,WAAW;YACpC,IAAI,MAAM,AAAC,GAAuB,OAArB,cAAa,UAAiB,OAAT,IAAI,IAAI,EAAC;YAC3C,OAAO,AAAC,yBAA6C,OAArB,QAAQ,YAAY;YACpD,OAAO,AAAC,gCAAyC,OAAV;YACvC,MAAM,IAAI,MAAM;QAClB;QACA,OAAQ,QAAQ,KAAK;YACnB,KAAK,GAAG,MAAM;gBACZ,MAAM,IAAI,MAAM,AAAC,GAAuB,OAArB,cAAa,UAAiB,OAAT,IAAI,IAAI,EAAC;YACnD,KAAK,GAAG,KAAK;gBACX,IAAI,IAAI,KAAK,KAAK,OAAO;oBACvB,MAAM,IAAI,MAAM,AAAC,GAAuB,OAArB,cAAa,UAAiB,OAAT,IAAI,IAAI,EAAC;gBACnD,OAAO;oBACL,QAAQ,YAAY,GAAG;gBACzB;gBACA;YACF,KAAK,GAAG,KAAK;gBACX,IAAI,QAAQ,YAAY,KAAK,GAAG;oBAC9B,IAAI,IAAI,KAAK,KAAK,OAAO;wBACvB,MAAM,IAAI,MAAM,AAAC,GAAuB,OAArB,cAAa,UAAiB,OAAT,IAAI,IAAI,EAAC;oBACnD,OAAO;wBACL,QAAQ,KAAK,GAAG,GAAG,KAAK;oBAC1B;gBACF;gBACA;YACF,KAAK,GAAG,OAAO;gBACb,QAAQ,YAAY,GAAG;gBACvB;YACF;gBACE,MAAM,IAAI,MACR,AAAC,GAAuB,OAArB,cAAa,UAAiF,OAAzE,IAAI,IAAI,EAAC,kEAA8E,OAAd,QAAQ,KAAK;QAEpH;IACF;IACA,0BAA0B;IAC1B,8FAA8F;IAC9F,wBAAwB;IACxB,kGAAkG;IAClG,wCAAwC;IACxC,wCAAwC;IACxC,MAAM,QAAQ,SAAU,OAAO,EAAE,WAAW,EAAE,OAAO;QACnD,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,MAAM,KAAK,OAAO,CAAC,QAAQ;QAC3B,MAAM,MAAM,IAAI,CAAC,GAAG,KAAK,CAAC;QAC1B,QAAQ,QAAQ,GAAG,IAAI,KAAK;QAE5B,MAAM,gBAAgB,CAAC;QACvB,gDAAgD,GAChD,IAAI,eAAe;YACjB,gCAAgC,GAChC,aAAa,SAAS,GAAG,IAAI,SAAS,GAAG,CAAC,UAAU,CAAC,GAAG,KAAK;YAC7D,IAAI,YAAY;gBACd,WAAW,MAAM,MAAM,GAAG,GAAG,KAAK;gBAClC,YAAY,SAAS,GAAG,CAAC,SAAS;gBAClC,SAAS,GAAG,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI;YACtC;YACA,4EAA4E,GAC5E,uEAAuE,GACvE,OAAO,QAAQ,MAAM,CAAC,MAAM;YAC5B,OAAO,QAAQ,MAAM,CAAC,MAAM;YAC5B,QAAQ,MAAM,CAAC,IAAI;YACnB,QAAQ,MAAM,CAAC,IAAI;YACnB,YAAY,QAAQ,MAAM;YAC1B,QAAQ,MAAM,GAAG,IAAI;QACvB;QACA,gBAAgB,GAChB,MAAM,YAAY,WAAW;QAC7B,YAAY,CAAC,GAAG,KAAK,CAAC,CAAC,SAAS,OAAO,aAAa;QACpD,0BAA0B,KAAK,SAAS;QACxC,IAAI,eAAe;YACjB,WAAW,GACX,IAAI,YAAY;gBACd,IAAI,QAAQ,KAAK,KAAK,GAAG,OAAO,EAAE;oBAChC,SAAS,GAAG,CAAC,SAAS,CAAC;gBACzB,OAAO;oBACL,SAAS,GAAG,CAAC,EAAE,CAAC,UAAU,IAAI,IAAI,EAAE,aAAa,QAAQ,YAAY;gBACvE;YACF;YACA,sBAAsB,GACtB,QAAQ,MAAM,GAAG;YACjB,IAAI,QAAQ,KAAK,KAAK,GAAG,OAAO,EAAE;gBAChC,QAAQ,MAAM,CAAC,GAAG,CAAC;gBACnB,QAAQ,MAAM,CAAC,GAAG,CAAC;YACrB,OAAO,IAAI,IAAI,KAAK,EAAE;gBACpB,uDAAuD,GACvD,+CAA+C,GAC/C,QAAQ,MAAM,CAAC,UAAU,CAAC,IAAI,KAAK,EAAE,aAAa,QAAQ,YAAY;gBACtE,QAAQ,MAAM,CAAC,UAAU,CAAC,IAAI,KAAK,EAAE,aAAa,QAAQ,YAAY;YACxE;QACF;IACF;IACA,0BAA0B;IAC1B,8CAA8C;IAC9C,4DAA4D;IAC5D,yCAAyC;IACzC,0EAA0E;IAC1E,MAAM,QAAQ,SAAU,OAAO,EAAE,WAAW,EAAE,OAAO;QACnD,WAAW,IAAI,CAAC;YACd,YAAY,GAAG,gBAAgB;YAC/B,QAAQ;YACR;YACA;QACF;QACA,WAAW,MAAM,MAAM;QACvB,cAAc,MAAM,MAAM,GAAG;QAC7B,UAAU,UAAU,GAAG,aAAa;QACpC,MAAM,MAAM,WAAW,GAAG;QAC1B,WAAW,IAAI,QAAQ;QACvB,cAAc,IAAI,WAAW;QAC7B,QAAQ,YAAY,GAAG;QACvB,OAAQ,QAAQ,KAAK;YACnB,KAAK,GAAG,KAAK;gBACX,QAAQ,KAAK,GAAG,GAAG,KAAK;gBACxB;YACF,KAAK,GAAG,KAAK;gBACX,QAAQ,KAAK,GAAG,GAAG,KAAK;gBACxB;YACF,KAAK,GAAG,OAAO;gBACb,QAAQ,KAAK,GAAG,GAAG,OAAO;gBAC1B;YACF;gBACE,MAAM,IAAI,MAAM,AAAC,wBAAqC,OAAd,QAAQ,KAAK;QACzD;IACF;IACA,0BAA0B;IAC1B,8CAA8C;IAC9C,4DAA4D;IAC5D,4CAA4C;IAC5C,8DAA8D;IAC9D,0CAA0C;IAC1C,MAAM,QAAQ,SAAU,OAAO,EAAE,WAAW,EAAE,OAAO;QACnD,WAAW,IAAI,CAAC;YACd,YAAY,GAAG,gBAAgB;YAC/B,QAAQ;YACR;YACA;QACF;QACA,WAAW,MAAM,MAAM;QACvB,cAAc,MAAM,MAAM,GAAG;QAC7B,UAAU,UAAU,GAAG,aAAa;QACpC,MAAM,MAAM,WAAW,GAAG;QAC1B,WAAW,IAAI,QAAQ;QACvB,cAAc,IAAI,WAAW;QAC7B,QAAQ,YAAY,GAAG;QACvB,OAAQ,QAAQ,KAAK;YACnB,KAAK,GAAG,KAAK;YACb,KAAK,GAAG,KAAK;gBACX,QAAQ,KAAK,GAAG,GAAG,OAAO;gBAC1B;YACF,KAAK,GAAG,OAAO;gBACb,QAAQ,KAAK,GAAG,GAAG,KAAK;gBACxB;YACF;gBACE,MAAM,IAAI,MAAM,AAAC,wBAAqC,OAAd,QAAQ,KAAK;QACzD;IACF;IACA,0BAA0B;IAC1B,0DAA0D;IAC1D,gCAAgC;IAChC,MAAM,QAAQ,SAAU,OAAO,EAAE,WAAW,EAAE,OAAO;QACnD,MAAM,KAAK,OAAO,CAAC,QAAQ;QAC3B,QAAQ,KAAK,GAAG,GAAG,OAAO;QAC1B,IAAI,cAAc,UAAU;YAC1B,IAAI,GAAG,GAAG,IAAI,KAAK,CAAC,YAAY,IAAI,KAAK,CAAC,YAAY,IAAI,GAAG,GAAG,EAAE;gBAChE,QAAQ,KAAK,GAAG,GAAG,KAAK;gBACxB,QAAQ,YAAY,GAAG;YACzB;QACF;IACF;IACA,0BAA0B;IAC1B,2DAA2D;IAC3D,qCAAqC;IACrC,qFAAqF;IACrF,sBAAsB;IACtB,wCAAwC;IACxC,0DAA0D;IAC1D,MAAM,QAAQ,SAAU,OAAO,EAAE,WAAW,EAAE,OAAO;QACnD,IAAI;QACJ,MAAM,KAAK,OAAO,CAAC,QAAQ;QAC3B,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM;QAC5B,QAAQ,KAAK,GAAG,GAAG,OAAO;QAC1B,IAAI,cAAc,OAAO,UAAU;YACjC,IAAK,IAAI,GAAG,IAAI,KAAK,KAAK,EAAG;gBAC3B,IAAI,KAAK,CAAC,cAAc,EAAE,KAAK,GAAG,MAAM,CAAC,EAAE,EAAE;oBAC3C;gBACF;YACF;YACA,QAAQ,KAAK,GAAG,GAAG,KAAK;YACxB,QAAQ,YAAY,GAAG;QACzB,EAAE,wBAAwB;IAC5B;IACA,0BAA0B;IAC1B,2DAA2D;IAC3D,0EAA0E;IAC1E,mEAAmE;IACnE,oEAAoE;IACpE,mDAAmD;IACnD,MAAM,QAAQ,SAAU,OAAO,EAAE,WAAW,EAAE,OAAO;QACnD,IAAI;QACJ,IAAI;QACJ,MAAM,KAAK,OAAO,CAAC,QAAQ;QAC3B,QAAQ,KAAK,GAAG,GAAG,OAAO;QAC1B,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM;QAC5B,IAAI,QAAQ,GAAG;YACb,+BAA+B,GAC/B,QAAQ,KAAK,GAAG,GAAG,KAAK;YACxB;QACF;QACA,IAAI,cAAc,OAAO,UAAU;YACjC,IAAK,IAAI,GAAG,IAAI,KAAK,KAAK,EAAG;gBAC3B,OAAO,KAAK,CAAC,cAAc,EAAE;gBAC7B,IAAI,QAAQ,MAAM,QAAQ,IAAI;oBAC5B,QAAQ;gBACV;gBACA,IAAI,SAAS,GAAG,MAAM,CAAC,EAAE,EAAE;oBACzB;gBACF;YACF;YACA,QAAQ,KAAK,GAAG,GAAG,KAAK;YACxB,QAAQ,YAAY,GAAG;QACzB,EAAE,wBAAwB;IAC5B;IACA,0BAA0B;IAC1B,iGAAiG;IACjG,qDAAqD;IACrD,0DAA0D;IAC1D,MAAM,QAAQ,SAAU,OAAO,EAAE,WAAW,EAAE,OAAO;QACnD,QAAQ,KAAK,GAAG,GAAG,OAAO;QAC1B,QAAQ,YAAY,GAAG;QACvB,QAAQ,KAAK,GAAG,gBAAgB,IAAI,GAAG,KAAK,GAAG,GAAG,OAAO;IAC3D;IACA,0BAA0B;IAC1B,2FAA2F;IAC3F,qDAAqD;IACrD,oFAAoF;IACpF,MAAM,QAAQ,SAAU,OAAO,EAAE,WAAW,EAAE,OAAO;QACnD,QAAQ,KAAK,GAAG,GAAG,OAAO;QAC1B,QAAQ,YAAY,GAAG;QACvB,QAAQ,KAAK,GAAG,gBAAgB,MAAM,MAAM,GAAG,GAAG,KAAK,GAAG,GAAG,OAAO;IACtE;IACA,0BAA0B;IAC1B,+BAA+B;IAC/B,qFAAqF;IACrF,iGAAiG;IACjG,8CAA8C;IAC9C,qFAAqF;IACrF,wFAAwF;IACxF,MAAM,QAAQ,SAAU,OAAO,EAAE,WAAW,EAAE,OAAO;QACnD,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,MAAM,KAAK,OAAO,CAAC,QAAQ;QAC3B,QAAQ,KAAK,GAAG,GAAG,OAAO;QAC1B,IAAI,GAAG,KAAK,GAAG,MAAM,MAAM,EAAE;YAC3B,QAAQ,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC,KAAK;QAC/B,OAAO;YACL,QAAQ,IAAI,CAAC,GAAG,KAAK,GAAG,MAAM,MAAM,CAAC,CAAC,KAAK;QAC7C;QACA,MAAM,QAAQ,GAAG,OAAO,KAAK,GAAG,WAAW,GAAG,QAAQ,MAAM,CAAC,SAAS,CAAC,SAAS,QAAQ,MAAM,CAAC,SAAS,CAAC;QACzG,MAAM,cAAc,GAAG,OAAO,KAAK,GAAG,WAAW;QACjD,IAAI,UAAU,MAAM;YAClB;QACF;QACA,MAAM,UAAU,MAAM,WAAW;QACjC,MAAM,MAAM,MAAM,YAAY;QAC9B,IAAI,QAAQ,GAAG;YACb,QAAQ,KAAK,GAAG,GAAG,KAAK;YACxB;QACF;QACA,IAAI,cAAc,OAAO,UAAU;YACjC,IAAI,aAAa;gBACf,0BAA0B,GAC1B,IAAK,IAAI,GAAG,IAAI,KAAK,KAAK,EAAG;oBAC3B,OAAO,KAAK,CAAC,cAAc,EAAE;oBAC7B,SAAS,KAAK,CAAC,UAAU,EAAE;oBAC3B,IAAI,QAAQ,MAAM,QAAQ,IAAI;wBAC5B,QAAQ;oBACV;oBACA,IAAI,UAAU,MAAM,UAAU,IAAI;wBAChC,UAAU;oBACZ;oBACA,IAAI,SAAS,QAAQ;wBACnB;oBACF;gBACF;gBACA,QAAQ,KAAK,GAAG,GAAG,KAAK;gBACxB,QAAQ,YAAY,GAAG;YACzB,OAAO;gBACL,wBAAwB,GACxB,IAAK,IAAI,GAAG,IAAI,KAAK,KAAK,EAAG;oBAC3B,OAAO,KAAK,CAAC,cAAc,EAAE;oBAC7B,SAAS,KAAK,CAAC,UAAU,EAAE;oBAC3B,IAAI,SAAS,QAAQ;wBACnB;oBACF;gBACF;YACF;YACA,QAAQ,KAAK,GAAG,GAAG,KAAK;YACxB,QAAQ,YAAY,GAAG;QACzB;IACF;IACA,0BAA0B;IAC1B,+CAA+C;IAC/C,2CAA2C;IAC3C,kEAAkE;IAClE,wEAAwE;IACxE,MAAM,QAAQ,SAAU,OAAO,EAAE,WAAW,EAAE,OAAO;QACnD,WAAW,IAAI,CAAC;YACd,YAAY,GAAG,iBAAiB;YAChC,QAAQ;QACV;QACA,UAAU,UAAU,GAAG,aAAa;QACpC,WAAW,GAAG;QACd,QAAQ,YAAY,GAAG;QACvB,OAAQ,QAAQ,KAAK;YACnB,KAAK,GAAG,KAAK;gBACX,QAAQ,KAAK,GAAG,GAAG,KAAK;gBACxB;YACF,KAAK,GAAG,KAAK;gBACX,QAAQ,KAAK,GAAG,GAAG,KAAK;gBACxB;YACF,KAAK,GAAG,OAAO;gBACb,QAAQ,KAAK,GAAG,GAAG,OAAO;gBAC1B;YACF;gBACE,MAAM,IAAI,MAAM,AAAC,wBAAqC,OAAd,QAAQ,KAAK;QACzD;IACF;IACA,0BAA0B;IAC1B,+CAA+C;IAC/C,2CAA2C;IAC3C,wEAAwE;IACxE,wEAAwE;IACxE,MAAM,QAAQ,SAAU,OAAO,EAAE,WAAW,EAAE,OAAO;QACnD,UAAU;QACV,yBAAyB;QACzB,WAAW,IAAI,CAAC;YACd,YAAY,GAAG,iBAAiB;YAChC,QAAQ;QACV;QACA,UAAU,UAAU,GAAG,aAAa;QACpC,WAAW,GAAG;QACd,QAAQ,YAAY,GAAG;QACvB,OAAQ,QAAQ,KAAK;YACnB,KAAK,GAAG,KAAK;YACb,KAAK,GAAG,KAAK;gBACX,QAAQ,KAAK,GAAG,GAAG,OAAO;gBAC1B;YACF,KAAK,GAAG,OAAO;gBACb,QAAQ,KAAK,GAAG,GAAG,KAAK;gBACxB;YACF;gBACE,MAAM,IAAI,MAAM,AAAC,wBAAqC,OAAd,QAAQ,KAAK;QACzD;IACF;IACA,wCAAwC;IACxC,uDAAuD;IACvD,wFAAwF;IACxF,MAAM,cAAc,SAAU,OAAO,EAAE,WAAW,EAAE,OAAO;QACzD,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,MAAM,KAAK,OAAO,CAAC,QAAQ;QAC3B,MAAM,OAAO,QAAQ,MAAM,CAAC,MAAM;QAClC,MAAM,OAAO,QAAQ,MAAM,CAAC,MAAM;QAClC,IAAI,SAAS,GAAG,EAAE;YAChB,YAAY,SAAS,GAAG,CAAC,SAAS;QACpC;QACA,UAAU;QACV,eAAe;QACf,aAAa;QACb,iBAAiB;QACjB,IAAK,IAAI,IAAI,GAAG,QAAQ,CAAC,MAAM,GAAG,GAAG,KAAK,GAAG,KAAK,EAAG;YACnD,UAAU,GAAG,QAAQ,CAAC,EAAE,EAAE,cAAc;YACxC,gBAAgB,QAAQ,YAAY;YACpC,cAAc,QAAQ,YAAY;YAClC,qCAAqC;YACrC,IAAI,QAAQ,KAAK,KAAK,GAAG,OAAO,EAAE;gBAChC,UAAU;gBACV;YACF;QACF;QACA,IAAI,SAAS;YACX,QAAQ,KAAK,GAAG,eAAe,IAAI,GAAG,KAAK,GAAG,GAAG,KAAK;YACtD,QAAQ,YAAY,GAAG;QACzB,OAAO;YACL,QAAQ,KAAK,GAAG,GAAG,OAAO;YAC1B,QAAQ,YAAY,GAAG;YACvB,QAAQ,MAAM,CAAC,GAAG,CAAC;YACnB,QAAQ,MAAM,CAAC,GAAG,CAAC;YACnB,IAAI,SAAS,GAAG,EAAE;gBAChB,SAAS,GAAG,CAAC,SAAS,CAAC;YACzB;QACF;IACF;IACA,wCAAwC;IACxC,kDAAkD;IAClD,uFAAuF;IACvF,MAAM,cAAc,SAAU,OAAO,EAAE,WAAW,EAAE,OAAO;QACzD,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,MAAM,KAAK,OAAO,CAAC,QAAQ;QAC3B,eAAe;QACf,YAAY;QACZ,WAAW;QACX,MAAM,OAAO,QAAQ,MAAM,CAAC,MAAM;QAClC,MAAM,OAAO,QAAQ,MAAM,CAAC,MAAM;QAClC,IAAI,SAAS,GAAG,EAAE;YAChB,YAAY,SAAS,GAAG,CAAC,SAAS;QACpC;QACA,MAAM,OAAO;QACb,MAAO,KAAM;YACX,IAAI,gBAAgB,GAAG;gBAErB;YACF;YACA,UAAU,UAAU,GAAG,cAAc;YACrC,IAAI,QAAQ,KAAK,KAAK,GAAG,OAAO,EAAE;gBAEhC;YACF;YACA,IAAI,QAAQ,KAAK,KAAK,GAAG,KAAK,EAAE;gBAG9B;YACF;YACA,YAAY;YACZ,aAAa,QAAQ,YAAY;YACjC,gBAAgB,QAAQ,YAAY;YACpC,IAAI,aAAa,GAAG,GAAG,EAAE;gBAEvB;YACF;QACF;QACA,6DAA6D,GAC7D,IAAI,QAAQ,KAAK,KAAK,GAAG,KAAK,EAAE;YAC9B,QAAQ,KAAK,GAAG,cAAc,IAAI,GAAG,KAAK,GAAG,GAAG,KAAK;YACrD,QAAQ,YAAY,GAAG;QACzB,OAAO,IAAI,YAAY,GAAG,GAAG,EAAE;YAC7B,QAAQ,KAAK,GAAG,cAAc,IAAI,GAAG,KAAK,GAAG,GAAG,KAAK;YACrD,QAAQ,YAAY,GAAG;QACzB,OAAO;YACL,QAAQ,KAAK,GAAG,GAAG,OAAO;YAC1B,QAAQ,YAAY,GAAG;YACvB,QAAQ,MAAM,CAAC,GAAG,CAAC;YACnB,QAAQ,MAAM,CAAC,GAAG,CAAC;YACnB,IAAI,SAAS,GAAG,EAAE;gBAChB,SAAS,GAAG,CAAC,SAAS,CAAC;YACzB;QACF;IACF;IACA,wCAAwC;IACxC,kDAAkD;IAClD,8EAA8E;IAC9E,MAAM,cAAc,SAAU,OAAO,EAAE,WAAW,EAAE,OAAO;QACzD,MAAM,KAAK,OAAO,CAAC,QAAQ;QAC3B,QAAQ,KAAK,GAAG,GAAG,OAAO;QAC1B,QAAQ,YAAY,GAAG;QACvB,IAAI,cAAc,GAAG;YACnB,MAAM,OAAO,KAAK,CAAC,cAAc,EAAE;YACnC,IAAI,GAAG,GAAG,IAAI,QAAQ,QAAQ,GAAG,GAAG,EAAE;gBACpC,QAAQ,KAAK,GAAG,GAAG,KAAK;gBACxB,QAAQ,YAAY,GAAG;YACzB;QACF;IACF;IACA,wCAAwC;IACxC,kDAAkD;IAClD,yDAAyD;IACzD,MAAM,cAAc,SAAU,OAAO,EAAE,WAAW,EAAE,OAAO;QACzD,IAAI;QACJ,MAAM,KAAK,OAAO,CAAC,QAAQ;QAC3B,QAAQ,KAAK,GAAG,GAAG,OAAO;QAC1B,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM;QAC5B,MAAM,MAAM,cAAc;QAC1B,IAAI,OAAO,GAAG;YACZ,IAAK,IAAI,GAAG,IAAI,KAAK,KAAK,EAAG;gBAC3B,IAAI,KAAK,CAAC,MAAM,EAAE,KAAK,GAAG,MAAM,CAAC,EAAE,EAAE;oBACnC;gBACF;YACF;YACA,QAAQ,KAAK,GAAG,GAAG,KAAK;YACxB,QAAQ,YAAY,GAAG;QACzB;IACF;IACA,wCAAwC;IACxC,kDAAkD;IAClD,yDAAyD;IACzD,MAAM,cAAc,SAAU,OAAO,EAAE,WAAW,EAAE,OAAO;QACzD,IAAI;QACJ,MAAM,KAAK,OAAO,CAAC,QAAQ;QAC3B,QAAQ,KAAK,GAAG,GAAG,OAAO;QAC1B,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM;QAC5B,IAAI,QAAQ,GAAG;YACb,+BAA+B,GAC/B,QAAQ,KAAK,GAAG,GAAG,KAAK;YACxB;QACF;QACA,MAAM,MAAM,cAAc;QAC1B,IAAI,OAAO,GAAG;YACZ,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,KAAK,EAAG;gBAC/B,OAAO,KAAK,CAAC,MAAM,EAAE;gBACrB,IAAI,QAAQ,MAAM,QAAQ,IAAI;oBAC5B,QAAQ;gBACV;gBACA,IAAI,SAAS,GAAG,MAAM,CAAC,EAAE,EAAE;oBACzB;gBACF;YACF;YACA,QAAQ,KAAK,GAAG,GAAG,KAAK;YACxB,QAAQ,YAAY,GAAG;QACzB;IACF;IACA,iDAAiD;IACjD,mEAAmE;IACnE,MAAM,cAAc,SAAU,OAAO,EAAE,WAAW,EAAE,OAAO;QACzD,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,MAAM,KAAK,OAAO,CAAC,QAAQ;QAC3B,mBAAmB,GACnB,QAAQ,KAAK,GAAG,GAAG,OAAO;QAC1B,QAAQ,YAAY,GAAG;QACvB,IAAI,GAAG,KAAK,GAAG,MAAM,MAAM,EAAE;YAC3B,QAAQ,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC,KAAK;QAC/B,OAAO;YACL,QAAQ,IAAI,CAAC,GAAG,KAAK,GAAG,MAAM,MAAM,CAAC,CAAC,KAAK;QAC7C;QACA,MAAM,QAAQ,GAAG,OAAO,KAAK,GAAG,WAAW,GAAG,QAAQ,MAAM,CAAC,SAAS,CAAC,SAAS,QAAQ,MAAM,CAAC,SAAS,CAAC;QACzG,MAAM,cAAc,GAAG,OAAO,KAAK,GAAG,WAAW;QACjD,IAAI,UAAU,MAAM;YAClB;QACF;QACA,MAAM,UAAU,MAAM,WAAW;QACjC,MAAM,MAAM,MAAM,YAAY;QAC9B,IAAI,QAAQ,GAAG;YACb,QAAQ,KAAK,GAAG,GAAG,KAAK;YACxB,QAAQ,YAAY,GAAG;YACvB;QACF;QACA,MAAM,MAAM,cAAc;QAC1B,IAAI,OAAO,GAAG;YACZ,IAAI,aAAa;gBACf,0BAA0B,GAC1B,IAAK,IAAI,GAAG,IAAI,KAAK,KAAK,EAAG;oBAC3B,OAAO,KAAK,CAAC,MAAM,EAAE;oBACrB,SAAS,KAAK,CAAC,UAAU,EAAE;oBAC3B,IAAI,QAAQ,MAAM,QAAQ,IAAI;wBAC5B,QAAQ;oBACV;oBACA,IAAI,UAAU,MAAM,UAAU,IAAI;wBAChC,UAAU;oBACZ;oBACA,IAAI,SAAS,QAAQ;wBACnB;oBACF;gBACF;gBACA,QAAQ,KAAK,GAAG,GAAG,KAAK;gBACxB,QAAQ,YAAY,GAAG;YACzB,OAAO;gBACL,wBAAwB,GACxB,IAAK,IAAI,GAAG,IAAI,KAAK,KAAK,EAAG;oBAC3B,OAAO,KAAK,CAAC,MAAM,EAAE;oBACrB,SAAS,KAAK,CAAC,UAAU,EAAE;oBAC3B,IAAI,SAAS,QAAQ;wBACnB;oBACF;gBACF;YACF;YACA,QAAQ,KAAK,GAAG,GAAG,KAAK;YACxB,QAAQ,YAAY,GAAG;QACzB;IACF;IACA,sCAAsC;IACtC,kEAAkE;IAClE,+DAA+D;IAC/D,0DAA0D;IAC1D,wEAAwE;IACxE,0EAA0E;IAC1E,SAAS;IACT,YAAY,SAAS,cAAc,OAAO,EAAE,WAAW,EAAE,OAAO;QAC9D,IAAI,MAAM;QACV,MAAM,KAAK,OAAO,CAAC,QAAQ;QAC3B,YAAY;QACZ,IAAI,WAAW,eAAe;YAC5B,MAAM,IAAI,MAAM,AAAC,iDAA8D,OAAd;QACnE;QACA,aAAa;QACb,IAAI,YAAY,cAAc;YAC5B,eAAe;YACf,IAAI,eAAe,gBAAgB;gBACjC,MAAM,IAAI,MAAM,AAAC,8CAA4D,OAAf;YAChE;QACF;QACA,QAAQ,OAAO;QACf,IAAI,SAAS,KAAK,KAAK,MAAM;YAC3B,oDAAoD,GACpD,MAAM,KAAK;YACX,SAAS,KAAK,CAAC,IAAI,CAAC,IAAI,QAAQ,KAAK,EAAE,aAAa,QAAQ,YAAY,EAAE,GAAG,MAAM,EAAE,GAAG,UAAU;QACpG;QACA,IAAI,gBAAgB;YAClB,OAAQ,GAAG,IAAI;gBACb,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF,KAAK,GAAG,GAAG;oBACT,YAAY,SAAS,aAAa;oBAClC;gBACF,KAAK,GAAG,GAAG;oBACT,YAAY,SAAS,aAAa;oBAClC;gBACF,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF,KAAK,GAAG,GAAG;oBACT,YAAY,SAAS,aAAa;oBAClC;gBACF,KAAK,GAAG,GAAG;oBACT,YAAY,SAAS,aAAa;oBAClC;gBACF,KAAK,GAAG,GAAG;oBACT,YAAY,SAAS,aAAa;oBAClC;gBACF,KAAK,GAAG,GAAG;oBACT,YAAY,SAAS,aAAa;oBAClC;gBACF,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF;oBACE,MAAM;oBACN;YACJ;QACF,OAAO;YACL,OAAQ,GAAG,IAAI;gBACb,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF,KAAK,GAAG,GAAG;oBACT,MAAM,SAAS,aAAa;oBAC5B;gBACF;oBACE,MAAM;oBACN;YACJ;QACF;QACA,IAAI,CAAC,kBAAkB,cAAc,QAAQ,YAAY,GAAG,YAAY;YACtE,aAAa,cAAc,QAAQ,YAAY;QACjD;QACA,IAAI,SAAS,KAAK,KAAK,MAAM;YAC3B,0BAA0B,GAC1B,SAAS,KAAK,CAAC,OAAO,CAAC,IAAI;QAC7B;QACA,IAAI,SAAS,KAAK,KAAK,MAAM;YAC3B,kDAAkD,GAClD,MAAM,KAAK;YACX,SAAS,KAAK,CAAC,EAAE,CAAC,IAAI,QAAQ,KAAK,EAAE,aAAa,QAAQ,YAAY,EAAE,GAAG,MAAM,EAAE,GAAG,UAAU;QAClG;QACA,aAAa;QACb,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3979, "column": 0}, "map": {"version":3,"sources":["file:///C:/code_base/hackathons/ProofBridge/node_modules/.pnpm/apg-js%404.4.0/node_modules/apg-js/src/apg-lib/stats.js"],"sourcesContent":["/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module is the constructor for the statistics gathering object.\n// The statistics are nothing more than keeping a count of the\n// number of times each node in the parse tree is traversed.\n//\n// Counts are collected for each of the individual types of operators.\n// Additionally, counts are collected for each of the individually named\n// `RNM` and `UDT` operators.\nmodule.exports = function statsFunc() {\n  const id = require('./identifiers');\n  const utils = require('./utilities');\n  const style = require('./style');\n\n  const thisFileName = 'stats.js: ';\n  let rules = [];\n  let udts = [];\n  const stats = [];\n  let totals;\n  const ruleStats = [];\n  const udtStats = [];\n  this.statsObject = 'statsObject';\n  const nameId = 'stats';\n  /* `Array.sort()` callback function for sorting `RNM` and `UDT` operators alphabetically by name. */\n  const sortAlpha = function sortAlpha(lhs, rhs) {\n    if (lhs.lower < rhs.lower) {\n      return -1;\n    }\n    if (lhs.lower > rhs.lower) {\n      return 1;\n    }\n    return 0;\n  };\n  /* `Array.sort()` callback function for sorting `RNM` and `UDT` operators by hit count. */\n  const sortHits = function sortHits(lhs, rhs) {\n    if (lhs.total < rhs.total) {\n      return 1;\n    }\n    if (lhs.total > rhs.total) {\n      return -1;\n    }\n    return sortAlpha(lhs, rhs);\n  };\n  /* `Array.sort()` callback function for sorting `RNM` and `UDT` operators by index */\n  /* (in the order in which they appear in the SABNF grammar). */\n  const sortIndex = function sortIndex(lhs, rhs) {\n    if (lhs.index < rhs.index) {\n      return -1;\n    }\n    if (lhs.index > rhs.index) {\n      return 1;\n    }\n    return 0;\n  };\n  const EmptyStat = function EmptyStat() {\n    this.empty = 0;\n    this.match = 0;\n    this.nomatch = 0;\n    this.total = 0;\n  };\n  /* Zero out all stats */\n  const clear = function clear() {\n    stats.length = 0;\n    totals = new EmptyStat();\n    stats[id.ALT] = new EmptyStat();\n    stats[id.CAT] = new EmptyStat();\n    stats[id.REP] = new EmptyStat();\n    stats[id.RNM] = new EmptyStat();\n    stats[id.TRG] = new EmptyStat();\n    stats[id.TBS] = new EmptyStat();\n    stats[id.TLS] = new EmptyStat();\n    stats[id.UDT] = new EmptyStat();\n    stats[id.AND] = new EmptyStat();\n    stats[id.NOT] = new EmptyStat();\n    stats[id.BKR] = new EmptyStat();\n    stats[id.BKA] = new EmptyStat();\n    stats[id.BKN] = new EmptyStat();\n    stats[id.ABG] = new EmptyStat();\n    stats[id.AEN] = new EmptyStat();\n    ruleStats.length = 0;\n    for (let i = 0; i < rules.length; i += 1) {\n      ruleStats.push({\n        empty: 0,\n        match: 0,\n        nomatch: 0,\n        total: 0,\n        name: rules[i].name,\n        lower: rules[i].lower,\n        index: rules[i].index,\n      });\n    }\n    if (udts.length > 0) {\n      udtStats.length = 0;\n      for (let i = 0; i < udts.length; i += 1) {\n        udtStats.push({\n          empty: 0,\n          match: 0,\n          nomatch: 0,\n          total: 0,\n          name: udts[i].name,\n          lower: udts[i].lower,\n          index: udts[i].index,\n        });\n      }\n    }\n  };\n  /* increment the designated operator hit count by one */\n  const incStat = function incStat(stat, state) {\n    stat.total += 1;\n    switch (state) {\n      case id.EMPTY:\n        stat.empty += 1;\n        break;\n      case id.MATCH:\n        stat.match += 1;\n        break;\n      case id.NOMATCH:\n        stat.nomatch += 1;\n        break;\n      default:\n        throw new Error(`${thisFileName}collect(): incStat(): unrecognized state: ${state}`);\n    }\n  };\n  /* helper for toHtml() */\n  const displayRow = function displayRow(name, stat) {\n    let html = '';\n    html += '<tr>';\n    html += `<td class=\"${style.CLASS_ACTIVE}\">${name}</td>`;\n    html += `<td class=\"${style.CLASS_EMPTY}\">${stat.empty}</td>`;\n    html += `<td class=\"${style.CLASS_MATCH}\">${stat.match}</td>`;\n    html += `<td class=\"${style.CLASS_NOMATCH}\">${stat.nomatch}</td>`;\n    html += `<td class=\"${style.CLASS_ACTIVE}\">${stat.total}</td>`;\n    html += '</tr>\\n';\n    return html;\n  };\n  const displayOpsOnly = function displayOpsOnly() {\n    let html = '';\n    html += displayRow('ALT', stats[id.ALT]);\n    html += displayRow('CAT', stats[id.CAT]);\n    html += displayRow('REP', stats[id.REP]);\n    html += displayRow('RNM', stats[id.RNM]);\n    html += displayRow('TRG', stats[id.TRG]);\n    html += displayRow('TBS', stats[id.TBS]);\n    html += displayRow('TLS', stats[id.TLS]);\n    html += displayRow('UDT', stats[id.UDT]);\n    html += displayRow('AND', stats[id.AND]);\n    html += displayRow('NOT', stats[id.NOT]);\n    html += displayRow('BKR', stats[id.BKR]);\n    html += displayRow('BKA', stats[id.BKA]);\n    html += displayRow('BKN', stats[id.BKN]);\n    html += displayRow('ABG', stats[id.ABG]);\n    html += displayRow('AEN', stats[id.AEN]);\n    html += displayRow('totals', totals);\n    return html;\n  };\n  /* helper for toHtml() */\n  const displayRules = function displayRules() {\n    let html = '';\n    html += '<tr><th></th><th></th><th></th><th></th><th></th></tr>\\n';\n    html += '<tr><th>rules</th><th></th><th></th><th></th><th></th></tr>\\n';\n    for (let i = 0; i < rules.length; i += 1) {\n      if (ruleStats[i].total > 0) {\n        html += '<tr>';\n        html += `<td class=\"${style.CLASS_ACTIVE}\">${ruleStats[i].name}</td>`;\n        html += `<td class=\"${style.CLASS_EMPTY}\">${ruleStats[i].empty}</td>`;\n        html += `<td class=\"${style.CLASS_MATCH}\">${ruleStats[i].match}</td>`;\n        html += `<td class=\"${style.CLASS_NOMATCH}\">${ruleStats[i].nomatch}</td>`;\n        html += `<td class=\"${style.CLASS_ACTIVE}\">${ruleStats[i].total}</td>`;\n        html += '</tr>\\n';\n      }\n    }\n    if (udts.length > 0) {\n      html += '<tr><th></th><th></th><th></th><th></th><th></th></tr>\\n';\n      html += '<tr><th>udts</th><th></th><th></th><th></th><th></th></tr>\\n';\n      for (let i = 0; i < udts.length; i += 1) {\n        if (udtStats[i].total > 0) {\n          html += '<tr>';\n          html += `<td class=\"${style.CLASS_ACTIVE}\">${udtStats[i].name}</td>`;\n          html += `<td class=\"${style.CLASS_EMPTY}\">${udtStats[i].empty}</td>`;\n          html += `<td class=\"${style.CLASS_MATCH}\">${udtStats[i].match}</td>`;\n          html += `<td class=\"${style.CLASS_NOMATCH}\">${udtStats[i].nomatch}</td>`;\n          html += `<td class=\"${style.CLASS_ACTIVE}\">${udtStats[i].total}</td>`;\n          html += '</tr>\\n';\n        }\n      }\n    }\n    return html;\n  };\n  /* called only by the parser to validate a stats object */\n  this.validate = function validate(name) {\n    let ret = false;\n    if (typeof name === 'string' && nameId === name) {\n      ret = true;\n    }\n    return ret;\n  };\n  /* no verification of input - only called by parser() */\n  this.init = function init(inputRules, inputUdts) {\n    rules = inputRules;\n    udts = inputUdts;\n    clear();\n  };\n  /* This function is the main interaction with the parser. */\n  /* The parser calls it after each node has been traversed. */\n  this.collect = function collect(op, result) {\n    incStat(totals, result.state, result.phraseLength);\n    incStat(stats[op.type], result.state, result.phraseLength);\n    if (op.type === id.RNM) {\n      incStat(ruleStats[op.index], result.state, result.phraseLength);\n    }\n    if (op.type === id.UDT) {\n      incStat(udtStats[op.index], result.state, result.phraseLength);\n    }\n  };\n  // Display the statistics as an HTML table.\n  // - *type*\n  //   - \"ops\" - (default) display only the total hit counts for all operator types.\n  //   - \"index\" - additionally, display the hit counts for the individual `RNM` and `UDT` operators ordered by index.\n  //   - \"hits\" - additionally, display the hit counts for the individual `RNM` and `UDT` operators by hit count.\n  //   - \"alpha\" - additionally, display the hit counts for the individual `RNM` and `UDT` operators by name alphabetically.\n  // - *caption* - optional caption for the table\n  this.toHtml = function toHtml(type, caption) {\n    let html = '';\n    html += `<table class=\"${style.CLASS_STATS}\">\\n`;\n    if (typeof caption === 'string') {\n      html += `<caption>${caption}</caption>\\n`;\n    }\n    html += `<tr><th class=\"${style.CLASS_ACTIVE}\">ops</th>\\n`;\n    html += `<th class=\"${style.CLASS_EMPTY}\">EMPTY</th>\\n`;\n    html += `<th class=\"${style.CLASS_MATCH}\">MATCH</th>\\n`;\n    html += `<th class=\"${style.CLASS_NOMATCH}\">NOMATCH</th>\\n`;\n    html += `<th class=\"${style.CLASS_ACTIVE}\">totals</th></tr>\\n`;\n    const test = true;\n    while (test) {\n      if (type === undefined) {\n        html += displayOpsOnly();\n        break;\n      }\n      if (type === null) {\n        html += displayOpsOnly();\n        break;\n      }\n      if (type === 'ops') {\n        html += displayOpsOnly();\n        break;\n      }\n      if (type === 'index') {\n        ruleStats.sort(sortIndex);\n        if (udtStats.length > 0) {\n          udtStats.sort(sortIndex);\n        }\n        html += displayOpsOnly();\n        html += displayRules();\n        break;\n      }\n      if (type === 'hits') {\n        ruleStats.sort(sortHits);\n        if (udtStats.length > 0) {\n          udtStats.sort(sortIndex);\n        }\n        html += displayOpsOnly();\n        html += displayRules();\n        break;\n      }\n      if (type === 'alpha') {\n        ruleStats.sort(sortAlpha);\n        if (udtStats.length > 0) {\n          udtStats.sort(sortAlpha);\n        }\n        html += displayOpsOnly();\n        html += displayRules();\n        break;\n      }\n      break;\n    }\n    html += '</table>\\n';\n    return html;\n  };\n  // Display the stats table in a complete HTML5 page.\n  this.toHtmlPage = function toHtmlPage(type, caption, title) {\n    return utils.htmlToPage(this.toHtml(type, caption), title);\n  };\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4253, "column": 0}, "map": {"version":3,"sources":["file:///C:/code_base/hackathons/ProofBridge/node_modules/.pnpm/apg-js%404.4.0/node_modules/apg-js/src/apg-lib/trace.js"],"sourcesContent":["/* eslint-disable func-names */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable guard-for-in */\n/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module provides a means of tracing the parser through the parse tree as it goes.\n// It is the primary debugging facility for debugging both the SABNF grammar syntax\n// and the input strings that are supposed to be valid grammar sentences.\n// It is also a very informative and educational tool for understanding\n// how a parser actually operates for a given language.\n//\n// Tracing is the process of generating and saving a record of information for each passage\n// of the parser through a parse tree node. And since it traverses each node twice, once down the tree\n// and once coming back up, there are two records for each node.\n// This, obviously, has the potential of generating lots of records.\n// And since these records are normally displayed on a web page\n// it is important to have a means to limit the actual number of records generated to\n// probably no more that a few thousand. This is almost always enough to find any errors.\n// The problem is to get the *right* few thousand records.\n// Therefore, this module has a number of ways of limiting and/or filtering, the number and type of records.\n// Considerable effort has been made to make this filtering of the trace output as simple\n// and intuitive as possible.\n//\n// However, the ability to filter the trace records, or for that matter even understand what they are\n// and the information they contain, does require a minimum amount of understanding of the APG parsing\n// method. The parse tree nodes are all represented by APG operators. They break down into two natural groups.\n// - The `RNM` operators and `UDT` operators are named phrases.\n// These are names chosen by the writer of the SABNF grammar to represent special phrases of interest.\n// - All others collect, concatenate and otherwise manipulate various intermediate phrases along the way.\n//\n// There are separate means of filtering which of these operators in each of these two groups get traced.\n// Let `trace` be an instantiated `trace.js` object.\n// Prior to parsing the string, filtering the rules and UDTs can be defined as follows:\n// ```\n// trace.filter.rules[\"rulename\"] = true;\n//     /* trace rule name \"rulename\" */\n// trace.filter.rules[\"udtname\"]  = true;\n//     /* trace UDT name \"udtname\" */\n// trace.filter.rules[\"<ALL>\"]    = true;\n//     /* trace all rules and UDTs (the default) */\n// trace.filter.rules[\"<NONE>\"]   = true;\n//     /* trace no rules or UDTS */\n// ```\n// If any rule or UDT name other than \"&lt;ALL>\" or \"&lt;NONE>\" is specified, all other names are turned off.\n// Therefore, to be selective of rule names, a filter statement is required for each rule/UDT name desired.\n//\n// Filtering of the other operators follows a similar procedure.\n// ```\n// trace.filter.operators[\"TRG\"] = true;\n//     /* trace the terminal range, TRG, operators */\n// trace.filter.operators[\"CAT\"]  = true;\n//     /* trace the concatenations, CAT, operators */\n// trace.filter.operators[\"<ALL>\"]    = true;\n//     /* trace all operators */\n// trace.filter.operators[\"<NONE>\"]   = true;\n//     /* trace no operators (the default) */\n// ```\n// If any operator name other than \"&lt;ALL>\" or \"&lt;NONE>\" is specified, all other names are turned off.\n// Therefore, to be selective of operator names, a filter statement is required for each name desired.\n//\n// There is, additionally, a means for limiting the total number of filtered or saved trace records.\n// See the function, `setMaxRecords(max)` below. This will result in only the last `max` records being saved.\n//\n// (See [`apg-examples`](https://github.com/ldthomas/apg-js-examples) for examples of using `trace.js`.)\nmodule.exports = function exportTrace() {\n  const utils = require('./utilities');\n  const style = require('./style');\n  const circular = new (require('./circular-buffer'))();\n  const id = require('./identifiers');\n\n  const thisFileName = 'trace.js: ';\n  const that = this;\n  const MODE_HEX = 16;\n  const MODE_DEC = 10;\n  const MODE_ASCII = 8;\n  const MODE_UNICODE = 32;\n  const MAX_PHRASE = 80;\n  const MAX_TLS = 5;\n  const records = [];\n  let maxRecords = 5000;\n  let lastRecord = -1;\n  let filteredRecords = 0;\n  let treeDepth = 0;\n  const recordStack = [];\n  let chars = null;\n  let rules = null;\n  let udts = null;\n  const operatorFilter = [];\n  const ruleFilter = [];\n  /* special trace table phrases */\n  const PHRASE_END = `<span class=\"${style.CLASS_LINEEND}\">&bull;</span>`;\n  const PHRASE_CONTINUE = `<span class=\"${style.CLASS_LINEEND}\">&hellip;</span>`;\n  const PHRASE_EMPTY = `<span class=\"${style.CLASS_EMPTY}\">&#120634;</span>`;\n  /* filter the non-RNM & non-UDT operators */\n  const initOperatorFilter = function () {\n    const setOperators = function (set) {\n      operatorFilter[id.ALT] = set;\n      operatorFilter[id.CAT] = set;\n      operatorFilter[id.REP] = set;\n      operatorFilter[id.TLS] = set;\n      operatorFilter[id.TBS] = set;\n      operatorFilter[id.TRG] = set;\n      operatorFilter[id.AND] = set;\n      operatorFilter[id.NOT] = set;\n      operatorFilter[id.BKR] = set;\n      operatorFilter[id.BKA] = set;\n      operatorFilter[id.BKN] = set;\n      operatorFilter[id.ABG] = set;\n      operatorFilter[id.AEN] = set;\n    };\n    let items = 0;\n    // eslint-disable-next-line no-unused-vars\n    for (const name in that.filter.operators) {\n      items += 1;\n    }\n    if (items === 0) {\n      /* case 1: no operators specified: default: do not trace any operators */\n      setOperators(false);\n      return;\n    }\n    for (const name in that.filter.operators) {\n      const upper = name.toUpperCase();\n      if (upper === '<ALL>') {\n        /* case 2: <all> operators specified: trace all operators ignore all other operator commands */\n        setOperators(true);\n        return;\n      }\n      if (upper === '<NONE>') {\n        /* case 3: <none> operators specified: trace NO operators ignore all other operator commands */\n        setOperators(false);\n        return;\n      }\n    }\n    setOperators(false);\n    for (const name in that.filter.operators) {\n      const upper = name.toUpperCase();\n      /* case 4: one or more individual operators specified: trace 'true' operators only */\n      if (upper === 'ALT') {\n        operatorFilter[id.ALT] = that.filter.operators[name] === true;\n      } else if (upper === 'CAT') {\n        operatorFilter[id.CAT] = that.filter.operators[name] === true;\n      } else if (upper === 'REP') {\n        operatorFilter[id.REP] = that.filter.operators[name] === true;\n      } else if (upper === 'AND') {\n        operatorFilter[id.AND] = that.filter.operators[name] === true;\n      } else if (upper === 'NOT') {\n        operatorFilter[id.NOT] = that.filter.operators[name] === true;\n      } else if (upper === 'TLS') {\n        operatorFilter[id.TLS] = that.filter.operators[name] === true;\n      } else if (upper === 'TBS') {\n        operatorFilter[id.TBS] = that.filter.operators[name] === true;\n      } else if (upper === 'TRG') {\n        operatorFilter[id.TRG] = that.filter.operators[name] === true;\n      } else if (upper === 'BKR') {\n        operatorFilter[id.BKR] = that.filter.operators[name] === true;\n      } else if (upper === 'BKA') {\n        operatorFilter[id.BKA] = that.filter.operators[name] === true;\n      } else if (upper === 'BKN') {\n        operatorFilter[id.BKN] = that.filter.operators[name] === true;\n      } else if (upper === 'ABG') {\n        operatorFilter[id.ABG] = that.filter.operators[name] === true;\n      } else if (upper === 'AEN') {\n        operatorFilter[id.AEN] = that.filter.operators[name] === true;\n      } else {\n        throw new Error(\n          `${thisFileName}initOpratorFilter: '${name}' not a valid operator name.` +\n            ` Must be <all>, <none>, alt, cat, rep, tls, tbs, trg, and, not, bkr, bka or bkn`\n        );\n      }\n    }\n  };\n  /* filter the rule and `UDT` named operators */\n  const initRuleFilter = function () {\n    const setRules = function (set) {\n      operatorFilter[id.RNM] = set;\n      operatorFilter[id.UDT] = set;\n      const count = rules.length + udts.length;\n      ruleFilter.length = 0;\n      for (let i = 0; i < count; i += 1) {\n        ruleFilter.push(set);\n      }\n    };\n    let items;\n    let i;\n    const list = [];\n    for (i = 0; i < rules.length; i += 1) {\n      list.push(rules[i].lower);\n    }\n    for (i = 0; i < udts.length; i += 1) {\n      list.push(udts[i].lower);\n    }\n    ruleFilter.length = 0;\n    items = 0;\n    // eslint-disable-next-line no-unused-vars\n    for (const name in that.filter.rules) {\n      items += 1;\n    }\n    if (items === 0) {\n      /* case 1: default to all rules & udts */\n      setRules(true);\n      return;\n    }\n    for (const name in that.filter.rules) {\n      const lower = name.toLowerCase();\n      if (lower === '<all>') {\n        /* case 2: trace all rules ignore all other rule commands */\n        setRules(true);\n        return;\n      }\n      if (lower === '<none>') {\n        /* case 3: trace no rules */\n        setRules(false);\n        return;\n      }\n    }\n    /* case 4: trace only individually specified rules */\n    setRules(false);\n    operatorFilter[id.RNM] = true;\n    operatorFilter[id.UDT] = true;\n    for (const name in that.filter.rules) {\n      const lower = name.toLowerCase();\n      i = list.indexOf(lower);\n      if (i < 0) {\n        throw new Error(`${thisFileName}initRuleFilter: '${name}' not a valid rule or udt name`);\n      }\n      ruleFilter[i] = that.filter.rules[name] === true;\n    }\n  };\n  /* used by other APG components to verify that they have a valid trace object */\n  this.traceObject = 'traceObject';\n  this.filter = {\n    operators: [],\n    rules: [],\n  };\n  // Set the maximum number of records to keep (default = 5000).\n  // Each record number larger than `maxRecords`\n  // will result in deleting the previously oldest record.\n  // - `max`: maximum number of records to retain (default = 5000)\n  // - `last`: last record number to retain, (default = -1 for (unknown) actual last record)\n  this.setMaxRecords = function (max, last) {\n    lastRecord = -1;\n    if (typeof max === 'number' && max > 0) {\n      maxRecords = Math.ceil(max);\n    } else {\n      maxRecords = 0;\n      return;\n    }\n    if (typeof last === 'number') {\n      lastRecord = Math.floor(last);\n      if (lastRecord < 0) {\n        lastRecord = -1;\n      }\n    }\n  };\n  // Returns `maxRecords` to the caller.\n  this.getMaxRecords = function () {\n    return maxRecords;\n  };\n  // Returns `lastRecord` to the caller.\n  this.getLastRecord = function () {\n    return lastRecord;\n  };\n  /* Called only by the `parser.js` object. No verification of input. */\n  this.init = function (rulesIn, udtsIn, charsIn) {\n    records.length = 0;\n    recordStack.length = 0;\n    filteredRecords = 0;\n    treeDepth = 0;\n    chars = charsIn;\n    rules = rulesIn;\n    udts = udtsIn;\n    initOperatorFilter();\n    initRuleFilter();\n    circular.init(maxRecords);\n  };\n  /* returns true if this records passes through the designated filter, false if the record is to be skipped */\n  const filterOps = function (op) {\n    let ret = false;\n    if (op.type === id.RNM) {\n      if (operatorFilter[op.type] && ruleFilter[op.index]) {\n        ret = true;\n      } else {\n        ret = false;\n      }\n    } else if (op.type === id.UDT) {\n      if (operatorFilter[op.type] && ruleFilter[rules.length + op.index]) {\n        ret = true;\n      } else {\n        ret = false;\n      }\n    } else {\n      ret = operatorFilter[op.type];\n    }\n    return ret;\n  };\n  const filterRecords = function (record) {\n    if (lastRecord === -1) {\n      return true;\n    }\n    if (record <= lastRecord) {\n      return true;\n    }\n    return false;\n  };\n  /* Collect the \"down\" record. */\n  this.down = function (op, state, offset, length, anchor, lookAround) {\n    if (filterRecords(filteredRecords) && filterOps(op)) {\n      recordStack.push(filteredRecords);\n      records[circular.increment()] = {\n        dirUp: false,\n        depth: treeDepth,\n        thisLine: filteredRecords,\n        thatLine: undefined,\n        opcode: op,\n        state,\n        phraseIndex: offset,\n        phraseLength: length,\n        lookAnchor: anchor,\n        lookAround,\n      };\n      filteredRecords += 1;\n      treeDepth += 1;\n    }\n  };\n  /* Collect the \"up\" record. */\n  this.up = function (op, state, offset, length, anchor, lookAround) {\n    if (filterRecords(filteredRecords) && filterOps(op)) {\n      const thisLine = filteredRecords;\n      const thatLine = recordStack.pop();\n      const thatRecord = circular.getListIndex(thatLine);\n      if (thatRecord !== -1) {\n        records[thatRecord].thatLine = thisLine;\n      }\n      treeDepth -= 1;\n      records[circular.increment()] = {\n        dirUp: true,\n        depth: treeDepth,\n        thisLine,\n        thatLine,\n        opcode: op,\n        state,\n        phraseIndex: offset,\n        phraseLength: length,\n        lookAnchor: anchor,\n        lookAround,\n      };\n      filteredRecords += 1;\n    }\n  };\n  /* convert the trace records to a tree of nodes */\n  const toTreeObj = function () {\n    /* private helper functions */\n    function nodeOpcode(node, opcode) {\n      let name;\n      let casetype;\n      let modetype;\n      if (opcode) {\n        node.op = { id: opcode.type, name: utils.opcodeToString(opcode.type) };\n        node.opData = undefined;\n        switch (opcode.type) {\n          case id.RNM:\n            node.opData = rules[opcode.index].name;\n            break;\n          case id.UDT:\n            node.opData = udts[opcode.index].name;\n            break;\n          case id.BKR:\n            if (opcode.index < rules.length) {\n              name = rules[opcode.index].name;\n            } else {\n              name = udts[opcode.index - rules.length].name;\n            }\n            casetype = opcode.bkrCase === id.BKR_MODE_CI ? '%i' : '%s';\n            modetype = opcode.bkrMode === id.BKR_MODE_UM ? '%u' : '%p';\n            node.opData = `\\\\\\\\${casetype}${modetype}${name}`;\n            break;\n          case id.TLS:\n            node.opData = [];\n            for (let i = 0; i < opcode.string.length; i += 1) {\n              node.opData.push(opcode.string[i]);\n            }\n            break;\n          case id.TBS:\n            node.opData = [];\n            for (let i = 0; i < opcode.string.length; i += 1) {\n              node.opData.push(opcode.string[i]);\n            }\n            break;\n          case id.TRG:\n            node.opData = [opcode.min, opcode.max];\n            break;\n          case id.REP:\n            node.opData = [opcode.min, opcode.max];\n            break;\n          default:\n            throw new Error('unrecognized opcode');\n        }\n      } else {\n        node.op = { id: undefined, name: undefined };\n        node.opData = undefined;\n      }\n    }\n    function nodePhrase(state, index, length) {\n      if (state === id.MATCH) {\n        return {\n          index,\n          length,\n        };\n      }\n      if (state === id.NOMATCH) {\n        return {\n          index,\n          length: 0,\n        };\n      }\n      if (state === id.EMPTY) {\n        return {\n          index,\n          length: 0,\n        };\n      }\n      return null;\n    }\n    let nodeId = -1;\n    function nodeDown(parent, record, depth) {\n      const node = {\n        // eslint-disable-next-line no-plusplus\n        id: nodeId++,\n        branch: -1,\n        parent,\n        up: false,\n        down: false,\n        depth,\n        children: [],\n      };\n      if (record) {\n        node.down = true;\n        node.state = { id: record.state, name: utils.stateToString(record.state) };\n        node.phrase = null;\n        nodeOpcode(node, record.opcode);\n      } else {\n        node.state = { id: undefined, name: undefined };\n        node.phrase = nodePhrase();\n        nodeOpcode(node, undefined);\n      }\n      return node;\n    }\n    function nodeUp(node, record) {\n      if (record) {\n        node.up = true;\n        node.state = { id: record.state, name: utils.stateToString(record.state) };\n        node.phrase = nodePhrase(record.state, record.phraseIndex, record.phraseLength);\n        if (!node.down) {\n          nodeOpcode(node, record.opcode);\n        }\n      }\n    }\n    /* walk the final tree: label branches and count leaf nodes */\n    let leafNodes = 0;\n    let depth = -1;\n    let branchCount = 1;\n    function walk(node) {\n      depth += 1;\n      node.branch = branchCount;\n      if (depth > treeDepth) {\n        treeDepth = depth;\n      }\n      if (node.children.length === 0) {\n        leafNodes += 1;\n      } else {\n        for (let i = 0; i < node.children.length; i += 1) {\n          if (i > 0) {\n            branchCount += 1;\n          }\n          node.children[i].leftMost = false;\n          node.children[i].rightMost = false;\n          if (node.leftMost) {\n            node.children[i].leftMost = i === 0;\n          }\n          if (node.rightMost) {\n            node.children[i].rightMost = i === node.children.length - 1;\n          }\n          walk(node.children[i]);\n        }\n      }\n      depth -= 1;\n    }\n    function display(node, offset) {\n      let name;\n      const obj = {};\n      obj.id = node.id;\n      obj.branch = node.branch;\n      obj.leftMost = node.leftMost;\n      obj.rightMost = node.rightMost;\n      name = node.state.name ? node.state.name : 'ACTIVE';\n      obj.state = { id: node.state.id, name };\n      name = node.op.name ? node.op.name : '?';\n      obj.op = { id: node.op.id, name };\n      if (typeof node.opData === 'string') {\n        obj.opData = node.opData;\n      } else if (Array.isArray(node.opData)) {\n        obj.opData = [];\n        for (let i = 0; i < node.opData.length; i += 1) {\n          obj.opData[i] = node.opData[i];\n        }\n      } else {\n        obj.opData = undefined;\n      }\n      if (node.phrase) {\n        obj.phrase = { index: node.phrase.index, length: node.phrase.length };\n      } else {\n        obj.phrase = null;\n      }\n      obj.depth = node.depth;\n      obj.children = [];\n      for (let i = 0; i < node.children.length; i += 1) {\n        const c = i !== node.children.length - 1;\n        obj.children[i] = display(node.children[i], offset, c);\n      }\n      return obj;\n    }\n\n    /* construct the tree beginning here */\n    const branch = [];\n    let root;\n    let node;\n    let parent;\n    let record;\n    let firstRecord = true;\n    /* push a dummy node so the root node will have a non-null parent */\n    const dummy = nodeDown(null, null, -1);\n    branch.push(dummy);\n    node = dummy;\n    circular.forEach((lineIndex) => {\n      record = records[lineIndex];\n      if (firstRecord) {\n        firstRecord = false;\n        if (record.depth > 0) {\n          /* push some dummy nodes to fill in for missing records */\n          const num = record.dirUp ? record.depth + 1 : record.depth;\n          for (let i = 0; i < num; i += 1) {\n            parent = node;\n            node = nodeDown(node, null, i);\n            branch.push(node);\n            parent.children.push(node);\n          }\n        }\n      }\n      if (record.dirUp) {\n        /* handle the next record up */\n        node = branch.pop();\n        nodeUp(node, record);\n        node = branch[branch.length - 1];\n      } else {\n        /* handle the next record down */\n        parent = node;\n        node = nodeDown(node, record, record.depth);\n        branch.push(node);\n        parent.children.push(node);\n      }\n    });\n\n    /* if not at root, walk it up to root */\n    while (branch.length > 1) {\n      node = branch.pop();\n      nodeUp(node, null);\n    }\n    /* maybe redundant or paranoid tests: these should never happen */\n    if (dummy.children.length === 0) {\n      throw new Error('trace.toTree(): parse tree has no nodes');\n    }\n    if (branch.length === 0) {\n      throw new Error('trace.toTree(): integrity check: dummy root node disappeared?');\n    }\n\n    /* if no record for start rule: find the pseudo root node (first dummy node above a real node) */\n    root = dummy.children[0];\n    let prev = root;\n    while (root && !root.down && !root.up) {\n      prev = root;\n      root = root.children[0];\n    }\n    root = prev;\n\n    /* walk the tree of nodes: label brances and count leaves */\n    root.leftMost = true;\n    root.rightMost = true;\n    walk(root);\n    root.branch = 0;\n\n    /* generate the exported object */\n    const obj = {};\n    obj.string = [];\n    for (let i = 0; i < chars.length; i += 1) {\n      obj.string[i] = chars[i];\n    }\n    /* generate the exported rule names */\n    obj.rules = [];\n    for (let i = 0; i < rules.length; i += 1) {\n      obj.rules[i] = rules[i].name;\n    }\n    /* generate the exported UDT names */\n    obj.udts = [];\n    for (let i = 0; i < udts.length; i += 1) {\n      obj.udts[i] = udts[i].name;\n    }\n    /* generate the ids */\n    obj.id = {};\n    obj.id.ALT = { id: id.ALT, name: 'ALT' };\n    obj.id.CAT = { id: id.CAT, name: 'CAT' };\n    obj.id.REP = { id: id.REP, name: 'REP' };\n    obj.id.RNM = { id: id.RNM, name: 'RNM' };\n    obj.id.TLS = { id: id.TLS, name: 'TLS' };\n    obj.id.TBS = { id: id.TBS, name: 'TBS' };\n    obj.id.TRG = { id: id.TRG, name: 'TRG' };\n    obj.id.UDT = { id: id.UDT, name: 'UDT' };\n    obj.id.AND = { id: id.AND, name: 'AND' };\n    obj.id.NOT = { id: id.NOT, name: 'NOT' };\n    obj.id.BKR = { id: id.BKR, name: 'BKR' };\n    obj.id.BKA = { id: id.BKA, name: 'BKA' };\n    obj.id.BKN = { id: id.BKN, name: 'BKN' };\n    obj.id.ABG = { id: id.ABG, name: 'ABG' };\n    obj.id.AEN = { id: id.AEN, name: 'AEN' };\n    obj.id.ACTIVE = { id: id.ACTIVE, name: 'ACTIVE' };\n    obj.id.MATCH = { id: id.MATCH, name: 'MATCH' };\n    obj.id.EMPTY = { id: id.EMPTY, name: 'EMPTY' };\n    obj.id.NOMATCH = { id: id.NOMATCH, name: 'NOMATCH' };\n    /* generate the max tree depth */\n    obj.treeDepth = treeDepth;\n    /* generate the number of leaf nodes (branches) */\n    obj.leafNodes = leafNodes;\n    /* generate the types of the left- and right-most branches */\n    let branchesIncomplete;\n    if (root.down) {\n      if (root.up) {\n        branchesIncomplete = 'none';\n      } else {\n        branchesIncomplete = 'right';\n      }\n    } else if (root.up) {\n      branchesIncomplete = 'left';\n    } else {\n      branchesIncomplete = 'both';\n    }\n    obj.branchesIncomplete = branchesIncomplete;\n    obj.tree = display(root, root.depth, false);\n    return obj;\n  };\n  // Returns the trace records as JSON parse tree object.\n  // - stringify: if `true`, the object is 'stringified' before returning, otherwise, the object itself is returned.\n  this.toTree = function (stringify) {\n    const obj = toTreeObj();\n    if (stringify) {\n      return JSON.stringify(obj);\n    }\n    return obj;\n  };\n  // Translate the trace records to HTML format and create a complete HTML page for browser display.\n  this.toHtmlPage = function (mode, caption, title) {\n    return utils.htmlToPage(this.toHtml(mode, caption), title);\n  };\n\n  /* From here on down, these are just helper functions for `toHtml()`. */\n  const htmlHeader = function (mode, caption) {\n    /* open the page */\n    /* write the HTML5 header with table style */\n    /* open the <table> tag */\n    let modeName;\n    switch (mode) {\n      case MODE_HEX:\n        modeName = 'hexadecimal';\n        break;\n      case MODE_DEC:\n        modeName = 'decimal';\n        break;\n      case MODE_ASCII:\n        modeName = 'ASCII';\n        break;\n      case MODE_UNICODE:\n        modeName = 'UNICODE';\n        break;\n      default:\n        throw new Error(`${thisFileName}htmlHeader: unrecognized mode: ${mode}`);\n    }\n    let header = '';\n    header += `<p>display mode: ${modeName}</p>\\n`;\n    header += `<table class=\"${style.CLASS_TRACE}\">\\n`;\n    if (typeof caption === 'string') {\n      header += `<caption>${caption}</caption>`;\n    }\n    return header;\n  };\n  const htmlFooter = function () {\n    let footer = '';\n    /* close the </table> tag */\n    footer += '</table>\\n';\n    /* display a table legend */\n    footer += `<p class=\"${style.CLASS_MONOSPACE}\">legend:<br>\\n`;\n    footer += '(a)&nbsp;-&nbsp;line number<br>\\n';\n    footer += '(b)&nbsp;-&nbsp;matching line number<br>\\n';\n    footer += '(c)&nbsp;-&nbsp;phrase offset<br>\\n';\n    footer += '(d)&nbsp;-&nbsp;phrase length<br>\\n';\n    footer += '(e)&nbsp;-&nbsp;tree depth<br>\\n';\n    footer += '(f)&nbsp;-&nbsp;operator state<br>\\n';\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_ACTIVE}\">&darr;</span>&nbsp;&nbsp;phrase opened<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_MATCH}\">&uarr;M</span> phrase matched<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_EMPTY}\">&uarr;E</span> empty phrase matched<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_NOMATCH}\">&uarr;N</span> phrase not matched<br>\\n`;\n    footer +=\n      'operator&nbsp;-&nbsp;ALT, CAT, REP, RNM, TRG, TLS, TBS<sup>&dagger;</sup>, UDT, AND, NOT, BKA, BKN, BKR, ABG, AEN<sup>&Dagger;</sup><br>\\n';\n    footer += `phrase&nbsp;&nbsp;&nbsp;-&nbsp;up to ${MAX_PHRASE} characters of the phrase being matched<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_MATCH}\">matched characters</span><br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_LOOKAHEAD}\">matched characters in look ahead mode</span><br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_LOOKBEHIND}\">matched characters in look behind mode</span><br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_REMAINDER}\">remainder characters(not yet examined by parser)</span><br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_CTRLCHAR}\">control characters, TAB, LF, CR, etc. (ASCII mode only)</span><br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_EMPTY} empty string<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_END} end of input string<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_CONTINUE} input string display truncated<br>\\n`;\n    footer += '</p>\\n';\n    footer += `<p class=\"${style.CLASS_MONOSPACE}\">\\n`;\n    footer += '<sup>&dagger;</sup>original ABNF operators:<br>\\n';\n    footer += 'ALT - alternation<br>\\n';\n    footer += 'CAT - concatenation<br>\\n';\n    footer += 'REP - repetition<br>\\n';\n    footer += 'RNM - rule name<br>\\n';\n    footer += 'TRG - terminal range<br>\\n';\n    footer += 'TLS - terminal literal string (case insensitive)<br>\\n';\n    footer += 'TBS - terminal binary string (case sensitive)<br>\\n';\n    footer += '<br>\\n';\n    footer += '<sup>&Dagger;</sup>super set SABNF operators:<br>\\n';\n    footer += 'UDT - user-defined terminal<br>\\n';\n    footer += 'AND - positive look ahead<br>\\n';\n    footer += 'NOT - negative look ahead<br>\\n';\n    footer += 'BKA - positive look behind<br>\\n';\n    footer += 'BKN - negative look behind<br>\\n';\n    footer += 'BKR - back reference<br>\\n';\n    footer += 'ABG - anchor - begin of input string<br>\\n';\n    footer += 'AEN - anchor - end of input string<br>\\n';\n    footer += '</p>\\n';\n    return footer;\n  };\n  this.indent = function (depth) {\n    let html = '';\n    for (let i = 0; i < depth; i += 1) {\n      html += '.';\n    }\n    return html;\n  };\n  /* format the TRG operator */\n  const displayTrg = function (mode, op) {\n    let html = '';\n    if (op.type === id.TRG) {\n      if (mode === MODE_HEX || mode === MODE_UNICODE) {\n        let hex = op.min.toString(16).toUpperCase();\n        if (hex.length % 2 !== 0) {\n          hex = `0${hex}`;\n        }\n        html += mode === MODE_HEX ? '%x' : 'U+';\n        html += hex;\n        hex = op.max.toString(16).toUpperCase();\n        if (hex.length % 2 !== 0) {\n          hex = `0${hex}`;\n        }\n        html += `&ndash;${hex}`;\n      } else {\n        html = `%d${op.min.toString(10)}&ndash;${op.max.toString(10)}`;\n      }\n    }\n    return html;\n  };\n  /* format the REP operator */\n  const displayRep = function (mode, op) {\n    let html = '';\n    if (op.type === id.REP) {\n      if (mode === MODE_HEX) {\n        let hex = op.min.toString(16).toUpperCase();\n        if (hex.length % 2 !== 0) {\n          hex = `0${hex}`;\n        }\n        html = `x${hex}`;\n        if (op.max < Infinity) {\n          hex = op.max.toString(16).toUpperCase();\n          if (hex.length % 2 !== 0) {\n            hex = `0${hex}`;\n          }\n        } else {\n          hex = 'inf';\n        }\n        html += `&ndash;${hex}`;\n      } else if (op.max < Infinity) {\n        html = `${op.min.toString(10)}&ndash;${op.max.toString(10)}`;\n      } else {\n        html = `${op.min.toString(10)}&ndash;inf`;\n      }\n    }\n    return html;\n  };\n  /* format the TBS operator */\n  const displayTbs = function (mode, op) {\n    let html = '';\n    if (op.type === id.TBS) {\n      const len = Math.min(op.string.length, MAX_TLS * 2);\n      if (mode === MODE_HEX || mode === MODE_UNICODE) {\n        html += mode === MODE_HEX ? '%x' : 'U+';\n        for (let i = 0; i < len; i += 1) {\n          let hex;\n          if (i > 0) {\n            html += '.';\n          }\n          hex = op.string[i].toString(16).toUpperCase();\n          if (hex.length % 2 !== 0) {\n            hex = `0${hex}`;\n          }\n          html += hex;\n        }\n      } else {\n        html = '%d';\n        for (let i = 0; i < len; i += 1) {\n          if (i > 0) {\n            html += '.';\n          }\n          html += op.string[i].toString(10);\n        }\n      }\n      if (len < op.string.length) {\n        html += PHRASE_CONTINUE;\n      }\n    }\n    return html;\n  };\n  /* format the TLS operator */\n  const displayTls = function (mode, op) {\n    let html = '';\n    if (op.type === id.TLS) {\n      const len = Math.min(op.string.length, MAX_TLS);\n      if (mode === MODE_HEX || mode === MODE_DEC) {\n        let charu;\n        let charl;\n        let base;\n        if (mode === MODE_HEX) {\n          html = '%x';\n          base = 16;\n        } else {\n          html = '%d';\n          base = 10;\n        }\n        for (let i = 0; i < len; i += 1) {\n          if (i > 0) {\n            html += '.';\n          }\n          charl = op.string[i];\n          if (charl >= 97 && charl <= 122) {\n            charu = charl - 32;\n            html += `${charu.toString(base)}/${charl.toString(base)}`.toUpperCase();\n          } else if (charl >= 65 && charl <= 90) {\n            charu = charl;\n            charl += 32;\n            html += `${charu.toString(base)}/${charl.toString(base)}`.toUpperCase();\n          } else {\n            html += charl.toString(base).toUpperCase();\n          }\n        }\n        if (len < op.string.length) {\n          html += PHRASE_CONTINUE;\n        }\n      } else {\n        html = '\"';\n        for (let i = 0; i < len; i += 1) {\n          html += utils.asciiChars[op.string[i]];\n        }\n        if (len < op.string.length) {\n          html += PHRASE_CONTINUE;\n        }\n        html += '\"';\n      }\n    }\n    return html;\n  };\n  const subPhrase = function (mode, charsArg, index, length, prev) {\n    if (length === 0) {\n      return '';\n    }\n    let phrase = '';\n    const comma = prev ? ',' : '';\n    switch (mode) {\n      case MODE_HEX:\n        phrase = comma + utils.charsToHex(charsArg, index, length);\n        break;\n      case MODE_DEC:\n        if (prev) {\n          return `,${utils.charsToDec(charsArg, index, length)}`;\n        }\n        phrase = comma + utils.charsToDec(charsArg, index, length);\n        break;\n      case MODE_UNICODE:\n        phrase = utils.charsToUnicode(charsArg, index, length);\n        break;\n      case MODE_ASCII:\n      default:\n        phrase = utils.charsToAsciiHtml(charsArg, index, length);\n        break;\n    }\n    return phrase;\n  };\n  /* display phrases matched in look-behind mode */\n  const displayBehind = function (mode, charsArg, state, index, length, anchor) {\n    let html = '';\n    let beg1;\n    let len1;\n    let beg2;\n    let len2;\n    let lastchar = PHRASE_END;\n    const spanBehind = `<span class=\"${style.CLASS_LOOKBEHIND}\">`;\n    const spanRemainder = `<span class=\"${style.CLASS_REMAINDER}\">`;\n    const spanend = '</span>';\n    let prev = false;\n    switch (state) {\n      case id.EMPTY:\n        html += PHRASE_EMPTY;\n      /* // eslint-disable-next-line no-fallthrough */\n      case id.NOMATCH:\n      case id.MATCH:\n      case id.ACTIVE:\n        beg1 = index - length;\n        len1 = anchor - beg1;\n        beg2 = anchor;\n        len2 = charsArg.length - beg2;\n        break;\n      default:\n        throw new Error('unrecognized state');\n    }\n    lastchar = PHRASE_END;\n    if (len1 > MAX_PHRASE) {\n      len1 = MAX_PHRASE;\n      lastchar = PHRASE_CONTINUE;\n      len2 = 0;\n    } else if (len1 + len2 > MAX_PHRASE) {\n      lastchar = PHRASE_CONTINUE;\n      len2 = MAX_PHRASE - len1;\n    }\n    if (len1 > 0) {\n      html += spanBehind;\n      html += subPhrase(mode, charsArg, beg1, len1, prev);\n      html += spanend;\n      prev = true;\n    }\n    if (len2 > 0) {\n      html += spanRemainder;\n      html += subPhrase(mode, charsArg, beg2, len2, prev);\n      html += spanend;\n    }\n    return html + lastchar;\n  };\n  const displayForward = function (mode, charsArg, state, index, length, spanAhead) {\n    let html = '';\n    let beg1;\n    let len1;\n    let beg2;\n    let len2;\n    let lastchar = PHRASE_END;\n    const spanRemainder = `<span class=\"${style.CLASS_REMAINDER}\">`;\n    const spanend = '</span>';\n    let prev = false;\n    switch (state) {\n      case id.EMPTY:\n        html += PHRASE_EMPTY;\n      /* // eslint-disable-next-line no-fallthrough */\n      case id.NOMATCH:\n      case id.ACTIVE:\n        beg1 = index;\n        len1 = 0;\n        beg2 = index;\n        len2 = charsArg.length - beg2;\n        break;\n      case id.MATCH:\n        beg1 = index;\n        len1 = length;\n        beg2 = index + len1;\n        len2 = charsArg.length - beg2;\n        break;\n      default:\n        throw new Error('unrecognized state');\n    }\n    lastchar = PHRASE_END;\n    if (len1 > MAX_PHRASE) {\n      len1 = MAX_PHRASE;\n      lastchar = PHRASE_CONTINUE;\n      len2 = 0;\n    } else if (len1 + len2 > MAX_PHRASE) {\n      lastchar = PHRASE_CONTINUE;\n      len2 = MAX_PHRASE - len1;\n    }\n    if (len1 > 0) {\n      html += spanAhead;\n      html += subPhrase(mode, charsArg, beg1, len1, prev);\n      html += spanend;\n      prev = true;\n    }\n    if (len2 > 0) {\n      html += spanRemainder;\n      html += subPhrase(mode, charsArg, beg2, len2, prev);\n      html += spanend;\n    }\n    return html + lastchar;\n  };\n  /* display phrases matched in look-ahead mode */\n  const displayAhead = function (mode, charsArg, state, index, length) {\n    const spanAhead = `<span class=\"${style.CLASS_LOOKAHEAD}\">`;\n    return displayForward(mode, charsArg, state, index, length, spanAhead);\n  };\n  /* display phrases matched in normal parsing mode */\n  const displayNone = function (mode, charsArg, state, index, length) {\n    const spanAhead = `<span class=\"${style.CLASS_MATCH}\">`;\n    return displayForward(mode, charsArg, state, index, length, spanAhead);\n  };\n  /* Returns the filtered records, formatted as an HTML table. */\n  const htmlTable = function (mode) {\n    if (rules === null) {\n      return '';\n    }\n    let html = '';\n    let thisLine;\n    let thatLine;\n    let lookAhead;\n    let lookBehind;\n    let lookAround;\n    let anchor;\n    html += '<tr><th>(a)</th><th>(b)</th><th>(c)</th><th>(d)</th><th>(e)</th><th>(f)</th>';\n    html += '<th>operator</th><th>phrase</th></tr>\\n';\n    circular.forEach((lineIndex) => {\n      const line = records[lineIndex];\n      thisLine = line.thisLine;\n      thatLine = line.thatLine !== undefined ? line.thatLine : '--';\n      lookAhead = false;\n      lookBehind = false;\n      lookAround = false;\n      if (line.lookAround === id.LOOKAROUND_AHEAD) {\n        lookAhead = true;\n        lookAround = true;\n        anchor = line.lookAnchor;\n      }\n      if (line.opcode.type === id.AND || line.opcode.type === id.NOT) {\n        lookAhead = true;\n        lookAround = true;\n        anchor = line.phraseIndex;\n      }\n      if (line.lookAround === id.LOOKAROUND_BEHIND) {\n        lookBehind = true;\n        lookAround = true;\n        anchor = line.lookAnchor;\n      }\n      if (line.opcode.type === id.BKA || line.opcode.type === id.BKN) {\n        lookBehind = true;\n        lookAround = true;\n        anchor = line.phraseIndex;\n      }\n      html += '<tr>';\n      html += `<td>${thisLine}</td><td>${thatLine}</td>`;\n      html += `<td>${line.phraseIndex}</td>`;\n      html += `<td>${line.phraseLength}</td>`;\n      html += `<td>${line.depth}</td>`;\n      html += '<td>';\n      switch (line.state) {\n        case id.ACTIVE:\n          html += `<span class=\"${style.CLASS_ACTIVE}\">&darr;&nbsp;</span>`;\n          break;\n        case id.MATCH:\n          html += `<span class=\"${style.CLASS_MATCH}\">&uarr;M</span>`;\n          break;\n        case id.NOMATCH:\n          html += `<span class=\"${style.CLASS_NOMATCH}\">&uarr;N</span>`;\n          break;\n        case id.EMPTY:\n          html += `<span class=\"${style.CLASS_EMPTY}\">&uarr;E</span>`;\n          break;\n        default:\n          html += `<span class=\"${style.CLASS_ACTIVE}\">--</span>`;\n          break;\n      }\n      html += '</td>';\n      html += '<td>';\n      html += that.indent(line.depth);\n      if (lookAhead) {\n        html += `<span class=\"${style.CLASS_LOOKAHEAD}\">`;\n      } else if (lookBehind) {\n        html += `<span class=\"${style.CLASS_LOOKBEHIND}\">`;\n      }\n      html += utils.opcodeToString(line.opcode.type);\n      if (line.opcode.type === id.RNM) {\n        html += `(${rules[line.opcode.index].name}) `;\n      }\n      if (line.opcode.type === id.BKR) {\n        const casetype = line.opcode.bkrCase === id.BKR_MODE_CI ? '%i' : '%s';\n        const modetype = line.opcode.bkrMode === id.BKR_MODE_UM ? '%u' : '%p';\n        html += `(\\\\${casetype}${modetype}${rules[line.opcode.index].name}) `;\n      }\n      if (line.opcode.type === id.UDT) {\n        html += `(${udts[line.opcode.index].name}) `;\n      }\n      if (line.opcode.type === id.TRG) {\n        html += `(${displayTrg(mode, line.opcode)}) `;\n      }\n      if (line.opcode.type === id.TBS) {\n        html += `(${displayTbs(mode, line.opcode)}) `;\n      }\n      if (line.opcode.type === id.TLS) {\n        html += `(${displayTls(mode, line.opcode)}) `;\n      }\n      if (line.opcode.type === id.REP) {\n        html += `(${displayRep(mode, line.opcode)}) `;\n      }\n      if (lookAround) {\n        html += '</span>';\n      }\n      html += '</td>';\n      html += '<td>';\n      if (lookBehind) {\n        html += displayBehind(mode, chars, line.state, line.phraseIndex, line.phraseLength, anchor);\n      } else if (lookAhead) {\n        html += displayAhead(mode, chars, line.state, line.phraseIndex, line.phraseLength);\n      } else {\n        html += displayNone(mode, chars, line.state, line.phraseIndex, line.phraseLength);\n      }\n      html += '</td></tr>\\n';\n    });\n    html += '<tr><th>(a)</th><th>(b)</th><th>(c)</th><th>(d)</th><th>(e)</th><th>(f)</th>';\n    html += '<th>operator</th><th>phrase</th></tr>\\n';\n    html += '</table>\\n';\n    return html;\n  };\n  // Translate the trace records to HTML format.\n  // - *modearg* - can be `\"ascii\"`, `\"decimal\"`, `\"hexadecimal\"` or `\"unicode\"`.\n  // Determines the format of the string character code display.\n  // - *caption* - optional caption for the HTML table.\n  this.toHtml = function (modearg, caption) {\n    /* writes the trace records as a table in a complete html page */\n    let mode = MODE_ASCII;\n    if (typeof modearg === 'string' && modearg.length >= 3) {\n      const modein = modearg.toLowerCase().slice(0, 3);\n      if (modein === 'hex') {\n        mode = MODE_HEX;\n      } else if (modein === 'dec') {\n        mode = MODE_DEC;\n      } else if (modein === 'uni') {\n        mode = MODE_UNICODE;\n      }\n    }\n    let html = '';\n    html += htmlHeader(mode, caption);\n    html += htmlTable(mode);\n    html += htmlFooter();\n    return html;\n  };\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5433, "column": 0}, "map": {"version":3,"sources":["file:///C:/code_base/hackathons/ProofBridge/node_modules/.pnpm/apg-js%404.4.0/node_modules/apg-js/src/apg-lib/node-exports.js"],"sourcesContent":["/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module serves to export all library objects and object constructors with the `require(\"apg-lib\")` statement.\n// For example, to create a new parser in your program,\n// ````\n// let apglib = require(\"../apg-lib/node-exports\");\n// let my-parser = new apglib.parser();\n// ````\nmodule.exports = {\n  ast: require('./ast'),\n  circular: require('./circular-buffer'),\n  ids: require('./identifiers'),\n  parser: require('./parser'),\n  stats: require('./stats'),\n  trace: require('./trace'),\n  utils: require('./utilities'),\n  emitcss: require('./emitcss'),\n  style: require('./style'),\n};\n"],"names":[],"mappings":"AAAA;;;uFAGuF,GACvF,oHAAoH;AACpH,uDAAuD;AACvD,OAAO;AACP,mDAAmD;AACnD,uCAAuC;AACvC,OAAO;AACP,OAAO,OAAO,GAAG;IACf,GAAG;IACH,QAAQ;IACR,GAAG;IACH,MAAM;IACN,KAAK;IACL,KAAK;IACL,KAAK;IACL,OAAO;IACP,KAAK;AACP","ignoreList":[0],"debugId":null}}]
}